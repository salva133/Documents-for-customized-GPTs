﻿﻿law_peasant_levies = {
	group = lawgroup_army_model
	icon = "gfx/interface/icons/law_icons/peasant_levies.dds"
	
	progressiveness = -50
	
	modifier = {
		unit_morale_loss_mult = 0.1
		unit_experience_gain_mult = -0.25
		state_conscription_rate_add = 0.04
		country_aristocrats_pol_str_mult = 0.25
		country_military_goods_cost_mult = -0.1
		state_building_barracks_max_level_add = 25
		state_building_conscription_center_max_level_add = 25
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_army_model_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	on_enact = {
		custom_tooltip = QUALIFICATIONS_OFFICERS_PEASANT_LEVIES_DESC
		if = {
			limit = {
				NOT = {
					has_law = law_type:law_peasant_levies
				}
			}
			custom_tooltip = aristocrats_af_ig_shift_effect_tt
		}
		if = {
			limit = {
				has_law = law_type:law_professional_army
			}
			custom_tooltip = military_pops_af_ig_shift_effect_negative_tt
			custom_tooltip = non_military_pops_af_ig_shift_effect_negative_tt
		}
	}
	
	possible_political_movements = {
		law_professional_army
		law_mass_conscription
		law_national_militia
	}

	pop_support = {
		value = 0
		# Aristocrats like feudalism
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.33
			}
		}
	}

	# AI will never return to peasant levies
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_professional_army = {
	group = lawgroup_army_model
	icon = "gfx/interface/icons/law_icons/professional_army.dds"
	
	progressiveness = 0
	
	unlocking_technologies = { military_drill }
	
	modifier = {
		unit_morale_loss_mult = -0.1
		state_conscription_rate_add = 0.01
		interest_group_ig_armed_forces_pol_str_mult = 0.25
		state_building_barracks_max_level_add = 100
		state_building_conscription_center_max_level_add = 50
		unit_experience_gain_mult = 0.25
	}
	
	possible_political_movements = {
		law_mass_conscription
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_army_model_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	on_enact = {
		if = {
			limit = {
				has_law = law_type:law_peasant_levies
			}
			custom_tooltip = aristocrats_af_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				NOT = {
					has_law = law_type:law_professional_army
				}
			}
			custom_tooltip = non_military_pops_af_ig_shift_effect_tt
			custom_tooltip = military_pops_af_ig_shift_effect_tt
		}
	}

	pop_support = {
		value = 0
		# Officers like professionalism
		add = {
			desc = "POP_OFFICERS"			
			if = {
				limit = { 
					is_pop_type = officers
				}
				value = 0.5
			}
		}
		# soldiers are broadly in favor of this also
		add = {
			desc = "POP_SOLDIERS"		
			if = {
				limit = { 
					is_pop_type = soldiers
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_sick_man_army
				has_law = law_type:law_peasant_levies
			}
			add = 1000
		}			
		
		# AI should really try to get out of Peasant Levies under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_peasant_levies
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_professional_army }	
					has_technology_researched = napoleonic_warfare
				}	
			}
			add = 1000
		}		
	}
}

law_national_militia = {
	group = lawgroup_army_model
	icon = "gfx/interface/icons/law_icons/national_militia.dds"
	
	progressiveness = 0
	
	unlocking_technologies = { mandatory_service }
	
	modifier = {
		unit_morale_loss_mult = -0.05
		state_conscription_rate_add = 0.05
		interest_group_ig_armed_forces_pol_str_mult = -0.25
		country_leverage_resistance_mult = 0.5
		state_building_barracks_max_level_add = 5
		state_building_conscription_center_max_level_add = 100
	}
	
	possible_political_movements = {
		law_professional_army
		law_mass_conscription
	}

	can_enact = {
		OR = {
			is_power_bloc_leader = no
			power_bloc ?= {
				NOT = { has_identity = identity:identity_military_treaty_organization }
			}
		}
	}
	
	on_enact = {
		if = {
			limit = {
				has_law = law_type:law_peasant_levies
			}
			custom_tooltip = aristocrats_af_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				has_law = law_type:law_professional_army
			}
			custom_tooltip = military_pops_af_ig_shift_effect_negative_tt
			custom_tooltip = non_military_pops_af_ig_shift_effect_negative_tt
		}
	}

	pop_support = {
		value = 0
		# Farmers like waving a rifle around and telling people to get off their land
		add = {
			desc = "POP_FARMERS"			
			if = {
				limit = { 
					is_pop_type = farmers
				}
				value = 0.25
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_pacifist
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_mass_conscription = {
	group = lawgroup_army_model
	icon = "gfx/interface/icons/law_icons/mass_conscription.dds"
	
	progressiveness = 50
	
	unlocking_technologies = { enlistment_offices }
	
	modifier = {
		unit_morale_loss_mult = 0.05
		state_conscription_rate_add = 0.03
		building_training_rate_mult = 1
		state_building_barracks_max_level_add = 100
		state_building_conscription_center_max_level_add = 100
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_army_model_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	on_enact = {
		if = {
			limit = {
				has_law = law_type:law_peasant_levies
			}
			custom_tooltip = aristocrats_af_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				has_law = law_type:law_professional_army
			}
			custom_tooltip = military_pops_af_ig_shift_effect_negative_tt
			custom_tooltip = non_military_pops_af_ig_shift_effect_negative_tt
		}
	}
	
	possible_political_movements = {
		law_mass_conscription
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_sick_man_army
				has_law = law_type:law_peasant_levies
			}
			add = 1000
		}			
		
		# AI should really try to get out of Peasant Levies under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_peasant_levies
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_professional_army }	
					has_technology_researched = napoleonic_warfare
				}	
			}
			add = 1000
		}		
	}
}

﻿law_hereditary_bureaucrats = {
	group = lawgroup_bureaucracy
	
	icon = "gfx/interface/icons/law_icons/hereditary_bureaucrats.dds"
	
	progressiveness = -50
	
	modifier = {
		state_bureaucracy_population_base_cost_factor_mult = -0.25
		country_aristocrats_pol_str_mult = 0.25
	}

	on_enact = {
		custom_tooltip = urban_aristocrats_int_ig_shift_effect_tt
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
			}
			custom_tooltip = bureaucrats_pb_ig_shift_effect_negative_tt
		}
	}

	disallowing_laws = {
		law_council_republic
	}
	
	possible_political_movements = {
		law_appointed_bureaucrats
		law_elected_bureaucrats
	}

	pop_support = {
		value = 0
		# Aristocrats like nepotism
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.25
			}
		}
	}

	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_traditionalist
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_appointed_bureaucrats = {
	group = lawgroup_bureaucracy
	
	icon = "gfx/interface/icons/law_icons/appointed_bureaucrats.dds"
	
	progressiveness = 0
	
	modifier = {
		country_bureaucrats_pol_str_mult = 0.25
		state_tax_capacity_mult = 0.25
	}
	
	possible_political_movements = {
		law_elected_bureaucrats
	}

	on_enact = {
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
			}
			custom_tooltip = bureaucrats_pb_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				has_law = law_type:law_hereditary_bureaucrats
			}
			custom_tooltip = urban_aristocrats_int_ig_shift_effect_negative_tt
		}
	}

	pop_support = {
		value = 0
		# Academics like technocracy
		add = {
			desc = "POP_ACADEMICS"			
			if = {
				limit = { 
					is_pop_type = academics
				}
				value = 0.33
			}
		}
		# Bureuacrats like non-hereditary
		add = {
			desc = "POP_BUREAUCRATS"
			if = {
				limit = {
					owner = { has_law = law_type:law_hereditary_bureaucrats }
					is_pop_type = bureaucrats
				}
			}
			value = 0.25
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_sick_man_bureaucracy
				has_law = law_type:law_hereditary_bureaucrats
			}
			add = 1000
		}		
	}
}

law_elected_bureaucrats = {
	group = lawgroup_bureaucracy
	
	icon = "gfx/interface/icons/law_icons/elected_bureaucrats.dds"
	
	progressiveness = 50

	disallowing_laws = {
		law_autocracy 
		law_oligarchy
		law_technocracy
		law_elder_council
	}

	on_enact = {
		custom_tooltip = bureaucrats_pb_ig_shift_effect_tt
		if = {
			limit = {
				has_law = law_type:law_hereditary_bureaucrats
			}
			custom_tooltip = urban_aristocrats_int_ig_shift_effect_negative_tt
		}
	}
	
	modifier = {
		country_bureaucracy_investment_cost_factor_mult = -0.15
	}
	
	possible_political_movements = {
		law_appointed_bureaucrats
	}

	pop_support = {
		value = 0
		# Bureuacrats like non-hereditary
		add = {
			desc = "POP_BUREAUCRATS"
			if = {
				limit = {
					owner = { has_law = law_type:law_hereditary_bureaucrats }
					is_pop_type = bureaucrats
				}
			}
			value = 0.25
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}		
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_child_labor_allowed = {
	group = lawgroup_childrens_rights
	
	icon = "gfx/interface/icons/law_icons/child_labor_allowed.dds"
	
	progressiveness = -50

	modifier = {
		state_laborers_mortality_mult = 0.05
		state_machinists_mortality_mult = 0.05
		state_farmers_mortality_mult = 0.05
		state_peasants_mortality_mult = 0.05
		
		state_dependent_wage_mult = 0.30
	}
	
	possible_political_movements = {
		law_restricted_child_labor
	}

	pop_support = {
		value = 0
		# Get back in the mines!
		add = {
			desc = "POP_CAPITALISTS"
			if = {
				limit = {
					is_pop_type = capitalists
				}
			}
			value = 0.25
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_market_liberal
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_restricted_child_labor = {
	group = lawgroup_childrens_rights
	
	icon = "gfx/interface/icons/law_icons/restricted_child_labor.dds"
	
	progressiveness = 0

	unlocking_technologies = {
		labor_movement 
	}
	
	modifier = {
		state_laborers_mortality_mult = 0.02
		state_farmers_mortality_mult = 0.02
		state_peasants_mortality_mult = 0.02
		
		state_dependent_wage_mult = 0.15
		
		country_institution_schools_max_investment_add = 1
	}
	
	possible_political_movements = {
		law_compulsory_primary_school
	}

	pop_support = {
		value = 0
		# Get back in the mines!
		add = {
			desc = "POP_CAPITALISTS"
			if = {
				limit = {
					owner = { has_law = law_type:law_compulsory_primary_school }
					is_pop_type = capitalists
				}
			}
			value = 0.33
		}
	}
	
	ai_will_do = {
		OR = {
			has_law = law_type:law_child_labor_allowed
			AND = {
				exists = ruler
				ruler = {
					has_ideology = ideology:ideology_market_liberal
				}			
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_compulsory_primary_school = {
	group = lawgroup_childrens_rights
	
	icon = "gfx/interface/icons/law_icons/compulsory_primary_school.dds"
	
	progressiveness = 50

	disallowing_laws = {
		law_no_schools
	}

	unlocking_technologies = {
		human_rights
	}
	
	modifier = {
		country_institution_schools_max_investment_add = 2
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law
# cultural_acceptance_rule and religious_acceptance_rule are triggers in the pop scope used to check if a pop should be accepted or discriminated against

law_state_religion = {
	group = lawgroup_church_and_state
	
	icon = "gfx/interface/icons/law_icons/state_religion.dds"
	
	progressiveness = -50
	
	on_enact = {
		recalculate_pop_ig_support = yes
		if = {
			limit = {
				has_law = law_type:law_state_atheism
			}
			set_state_religion = root.country_definition.religion
		}
		if = {
			limit = {
				has_modifier = antireligious_policies
			}
			remove_modifier = antireligious_policies
		}
	}
	
	religious_acceptance_rule = {
		is_state_religion = scope:country
	}
	
	modifier = {
		interest_group_ig_devout_pol_str_mult = 0.3
		state_radicals_from_sol_change_accepted_religion_mult = -0.1
		state_loyalists_from_sol_change_accepted_religion_mult = 0.1	
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_freedom_of_conscience
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		# Clergy like theocracy
		add = {
			desc = "POP_CLERGYMEN"
			if = {
				limit = {
					is_pop_type = clergymen
				}
			}
			value = 0.25
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_theocrat
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_state_religion
				power_bloc ?= { has_identity = identity:identity_religious }
				religion = scope:target_country.religion			
			}
			
			add = base_impose_law_weight	
			
			# Very important for religious blocs
			if = {
				limit = { scope:target_country = { has_law = law_type:law_freedom_of_conscience } }
				multiply = 2 
			}
			else = {
				multiply = 5
			}
		}
	}
}

law_freedom_of_conscience = {
	group = lawgroup_church_and_state
	
	icon = "gfx/interface/icons/law_icons/freedom_of_conscience.dds"
	
	progressiveness = 0

	unlocking_technologies = {
		rationalism
	}

	disallowing_laws = {
		law_theocracy
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
		if = {
			limit = {
				has_law = law_type:law_state_atheism
			}
			set_state_religion = root.country_definition.religion
		}
		if = {
			limit = {
				has_modifier = antireligious_policies
			}
			remove_modifier = antireligious_policies
		}
	}
	
	religious_acceptance_rule = {
		shares_heritage_trait_with_state_religion = scope:country
	}
	
	modifier = {
		interest_group_ig_devout_pol_str_mult = 0.15
		state_radicals_from_sol_change_accepted_religion_mult = -0.05
		state_loyalists_from_sol_change_accepted_religion_mult = 0.05	
		country_authority_add = 100
	}
	
	possible_political_movements = {
		law_total_separation
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"
			# Academics generally against religious perseecution
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_total_separation }
					}
					is_pop_type = academics
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					religion_accepted = no
					owner = { NOT = { has_law = law_type:law_total_separation } }
				}
				add = 0.5
				
				if = {
					limit = { 
						standard_of_living <= 10
					}
					add = 0.5
				}
			}		
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_sick_man_education
				has_law = law_type:law_state_religion
			}
			add = 1000
		}				
	}
}

law_total_separation = {
	group = lawgroup_church_and_state
	
	icon = "gfx/interface/icons/law_icons/total_separation.dds"
	
	progressiveness = 50

	unlocking_technologies = {
		empiricism
	}

	disallowing_laws = {
		law_theocracy
	}
	
	can_enact = {
		OR = {
			is_power_bloc_leader = no
			power_bloc ?= {
				NOT = { has_identity = identity:identity_religious }
			}
		}
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
		if = {
			limit = {
				has_law = law_type:law_state_atheism
			}
			set_state_religion = root.country_definition.religion
		}
		if = {
			limit = {
				has_modifier = antireligious_policies
			}
			remove_modifier = antireligious_policies
		}
	}
	
	religious_acceptance_rule = {
		always = yes
	}
	
	possible_political_movements = {
		law_freedom_of_conscience
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0

		add = {
			desc = "POP_ACADEMICS"
			# Academics generally against religious perseecution
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.25
			}
		}

		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					religion_accepted = no
				}
				add = 0.5

				if = {
					limit = { 
						standard_of_living <= 10
					}
					add = 0.5
				}
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}			
	}
}

law_state_atheism = {
	group = lawgroup_church_and_state
	
	icon = "gfx/interface/icons/law_icons/state_atheism.dds"

	progressiveness = 0

	unlocking_technologies = {
		empiricism
	}

	disallowing_laws = {
		law_theocracy
	}

	can_enact = {
		ig:ig_devout = {
			is_in_government = no
		}
		OR = {
			is_power_bloc_leader = no
			power_bloc ?= {
				NOT = { has_identity = identity:identity_religious }
			}
		}
	}
	
	modifier = {
		interest_group_ig_devout_pol_str_mult = -0.5
		state_conversion_mult = 0.25
		country_authority_add = 200
	}
	
	on_enact = {
		set_state_religion = rel:atheist
		add_modifier = {
			name = antireligious_policies
			months = long_modifier_time
		}
		custom_tooltip = {
			text = state_atheism_conversion_tt
			every_scope_state = {
				limit = {
					is_incorporated = yes
				}
				convert_population = {
					target = rel:atheist
					value = 0.25
				}
			}
		}
		recalculate_pop_ig_support = yes
	}
	
	religious_acceptance_rule = {
		is_state_religion = scope:country
	}
	
	possible_political_movements = {
		law_freedom_of_conscience
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		# Some euphoric academics will support this
		add = {
			desc = "POP_ACADEMICS"
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.1
			}
		}
		# Atheists will support this
		add = {
			desc = "POP_ATHEISTS"
			if = {
				limit = {
					has_pop_religion = atheist
				}
				value = 0.5
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_state_atheism
				power_bloc ?= { has_identity = identity:identity_ideological_union }			
			}
			
			add = base_impose_law_weight	
			
			# Atheist leaders of ideological unions want to spread the cult of reason
			if = {
				limit = { scope:target_country = { has_law = law_type:law_total_separation } }
				multiply = 0.5
			}
			else = {
				multiply = 2
			}
		}
	}
}
﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law
# cultural_acceptance_rule and religious_acceptance_rule are triggers called in culture scope with scope:country as the country with the laws

law_ethnostate = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/ethnostate.dds"
	
	progressiveness = -75
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}
	
	cultural_acceptance_rule = {
		is_primary_culture_of = scope:country
	}

	unlocking_technologies = {
		nationalism
	}
	
	modifier = {
		country_authority_add = 200
		state_radicals_from_sol_change_accepted_culture_mult = -0.2
		state_loyalists_from_sol_change_accepted_culture_mult = 0.2			
	}
	
	possible_political_movements = {
		law_racial_segregation
		law_cultural_exclusion
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_national_supremacy = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/national_supremacy.dds"
	
	progressiveness = -25
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}
	
	cultural_acceptance_rule = {
		AND = {
			shares_heritage_trait_with_any_primary_culture = scope:country
			shares_non_heritage_trait_with_any_primary_culture = scope:country
		}
	}
	
	modifier = {
		country_authority_add = 150
		state_radicals_from_sol_change_accepted_culture_mult = -0.15
		state_loyalists_from_sol_change_accepted_culture_mult = 0.15			
	}
	
	possible_political_movements = {
		law_racial_segregation
		law_cultural_exclusion
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_racial_segregation = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/racial_segregation.dds"
	
	progressiveness = 0
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	cultural_acceptance_rule = {
		shares_heritage_trait_with_any_primary_culture = scope:country
	}
	
	modifier = {
		country_authority_add = 100
		state_radicals_from_sol_change_accepted_culture_mult = -0.1
		state_loyalists_from_sol_change_accepted_culture_mult = 0.1		
	}
	
	possible_political_movements = {
		law_national_supremacy
		law_cultural_exclusion
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					culture_accepted = no
					owner = { has_law = law_type:law_national_supremacy }
				}
				add = 0.5
				
				if = {
					limit = { 
						standard_of_living <= 10
					}
					add = 0.5
				}	
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_cultural_exclusion = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/cultural_exclusion.dds"
	
	progressiveness = 25
	
	unlocking_laws = {
		law_slavery_banned
		law_debt_slavery
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	cultural_acceptance_rule = {
		shares_trait_with_any_primary_culture = scope:country
	}
	
	modifier = {
		country_authority_add = 50
		state_radicals_from_sol_change_accepted_culture_mult = -0.05
		state_loyalists_from_sol_change_accepted_culture_mult = 0.05		
	}
	
	possible_political_movements = {
		law_racial_segregation
		law_multicultural
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					culture_accepted = no
					owner = { 
						OR = { 
							has_law = law_type:law_ethnostate
							is_enacting_law = law_type:law_ethnostate
							has_law = law_type:law_national_supremacy
							is_enacting_law = law_type:law_national_supremacy
							has_law = law_type:law_racial_segregation
							is_enacting_law = law_type:law_racial_segregation
						} 
					}
				}
				add = 0.5				
				
				if = {
					limit = { 
						standard_of_living <= 10
					}
					add = 0.5
				}	
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_multicultural = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/multicultural.dds"
	
	progressiveness = 75

	unlocking_laws = {
		law_slavery_banned
	}
	
	unlocking_technologies = {
		human_rights
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	cultural_acceptance_rule = {
		always = yes
	}
	
	possible_political_movements = {
		law_cultural_exclusion
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					culture_accepted = no
				}
				add = 0.5
				
				if = {
					limit = { 
						standard_of_living <= 10
					}
					add = 0.5
				}	
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿law_no_colonial_affairs = {
	group = lawgroup_colonization
	
	icon = "gfx/interface/icons/law_icons/no_colonial_affairs.dds"
	
	progressiveness = 0	
	
	can_enact = {
		custom_tooltip = {
			modifier:country_disallow_law_no_colonial_affairs_bool = no
			text = disallow_law_no_colonial_affairs_tt
		}
	}

	pop_support = {
		value = 0
	}
	
	ai_will_do = {
		has_law = law_type:law_council_republic
	}	

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}

		if = {
			limit = {
				has_law = law_type:law_council_republic
			}
			add = 100
		}
		if = {
			limit = {
				has_strategy = ai_strategy_anti_imperialism
			}
			multiply = 2
		}
	}
}

law_frontier_colonization = {
	group = lawgroup_colonization

	can_enact = {
		any_scope_state = {
			is_homeland_of_country_cultures = ROOT
			any_neighbouring_state = {
				owner = {
					is_country_type = decentralized
				}
			}
		}
	}
	
	icon = "gfx/interface/icons/law_icons/frontier_colonization.dds"
	
	progressiveness = 25

	unlocking_technologies = {
		colonization
	}

	modifier = {
		state_migration_pull_unincorporated_mult = 0.5
	}
	
	institution = institution_colonial_affairs

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		# Farmers like frontiers
		add = {
			desc = "POP_FARMERS"			
			if = {
				limit = {
					is_pop_type = farmers
				}
				value = 0.25
			}
		}
	}
	
	ai_will_do = {
		NOR = {
			has_law = law_type:law_colonial_exploitation
			has_law = law_type:law_colonial_resettlement
		}
	}
}

law_colonial_resettlement = {
	group = lawgroup_colonization
	
	icon = "gfx/interface/icons/law_icons/colonial_resettlement.dds"
	
	progressiveness = 25

	unlocking_technologies = {
		colonization
	}
	
	modifier = {
		state_migration_pull_unincorporated_mult = 0.5
	}
	
	institution = institution_colonial_affairs

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		# Officers like colonialism
		add = {
			desc = "POP_OFFICERS"			
			if = {
				limit = {
					owner = { 
						has_law = law_type:law_no_colonial_affairs 
					} 
					is_pop_type = officers
				}
				value = 0.25
			}
		}
	}
	
	ai_will_do = {
		OR = {
			has_law = law_type:law_colonial_exploitation
			navy_size >= 50
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				OR = {
					has_law = law_type:law_colonial_resettlement
					has_law = law_type:law_frontier_colonization
				}
				scope:target_country = {
					has_law = law_type:law_no_colonial_affairs
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_colonial_offices }
			}
			add = 10
		}
	}
}

law_colonial_exploitation = {
	group = lawgroup_colonization
	
	icon = "gfx/interface/icons/law_icons/colonial_exploitation.dds"
	
	progressiveness = -25

	unlocking_technologies = {
		colonization
	}
	
	modifier = {
		building_group_bg_manufacturing_unincorporated_throughput_add = -0.1
		building_group_bg_plantations_unincorporated_throughput_add = 0.2
		building_group_bg_rubber_unincorporated_throughput_add = 0.2
		building_group_bg_logging_unincorporated_throughput_add = 0.2
		building_group_bg_mining_unincorporated_throughput_add = 0.2
		state_unincorporated_starting_wages_mult = -0.10
		building_unincorporated_subsistence_output_mult = -0.10
		country_tension_decay_mult = -0.25
	}
	
	institution = institution_colonial_affairs 

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		# Officers like colonialism
		add = {
			desc = "POP_OFFICERS"			
			if = {
				limit = {
					owner = { has_law = law_type:law_no_colonial_affairs } 
					is_pop_type = officers
				}
				value = 0.25
			}
		}
	}

	ai_will_do = {
		OR = {
			has_law = law_type:law_colonial_resettlement
			navy_size >= 50
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_colonial_exploitation
				scope:target_country = {
					has_law = law_type:law_no_colonial_affairs
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_colonial_offices }
			}
			add = 10
		}
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_autocracy = {	
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/autocracy.dds"
	
	progressiveness = -100
	
	# Has major legitimacy issues with parliamentary republic, they should be oligarchy instead
	disallowing_laws = {
		law_parliamentary_republic
	}

	on_activate = {
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				has_law = law_type:law_monarchy
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_appointed_bureaucrats
		}
		else_if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				NOT = {
					has_law = law_type:law_monarchy
				}
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_hereditary_bureaucrats
		}
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				has_modifier = missouri_compromise
			}
			remove_modifier = missouri_compromise
		}
	}

	modifier = {
		country_legitimacy_headofstate_add = 30
		country_legitimacy_govt_total_clout_add = 120
		country_legitimacy_ideological_incoherence_mult = 0.5
		country_aristocrats_pol_str_mult = 0.5
		country_officers_pol_str_mult = 0.5
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_oligarchy
		law_landed_voting
		law_elder_council
		law_technocracy
		law_single_party_state
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_oligarchy }
					}
					is_pop_type = aristocrats
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_OFFICIERS"			
			if = {
				limit = {
					is_pop_type = officers
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_autocracy
				OR = {
					AND = {
						power_bloc ?= { has_identity = identity:identity_ideological_union }
						has_strategy = ai_strategy_conservative_agenda					
					}
					has_strategy = ai_strategy_reactionary_agenda
				}
				scope:target_country = { 
					NOR = { # Is their law different enough from what we want to impose?
						has_law = law_type:law_oligarchy
						has_law = law_type:law_landed_voting
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}
}

law_technocracy = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/technocracy.dds"
	
	progressiveness = -50

	on_activate = {
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_appointed_bureaucrats
		}
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				has_modifier = missouri_compromise
			}
			remove_modifier = missouri_compromise
		}
	}
	
	modifier = {
		country_legitimacy_headofstate_add = 10
		country_legitimacy_govt_total_clout_add = 120
		country_legitimacy_govt_size_add = 2
		country_legitimacy_ideological_incoherence_mult = -0.1
		country_academics_pol_str_mult = 0.33
		country_engineers_pol_str_mult = 0.33
		country_officers_pol_str_mult = 0.33
		country_authority_add = 100
	}

	unlocking_technologies = {
		central_archives 
	}
	
	possible_political_movements = {
		law_autocracy 
		law_census_voting
		law_universal_suffrage
		law_single_party_state
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"			
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_wealth_voting }
					}
					is_pop_type = capitalists
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_technocracy
				"ai_ideological_opinion(scope:target_country)" >= 25 # Only want to do this on ideologically similar countries
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_single_party_state }
				}
			}
			
			add = base_impose_law_weight
		}
	}	
}

law_oligarchy = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/oligarchy.dds"
	
	progressiveness = -50

	on_activate = {
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				has_law = law_type:law_monarchy
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_appointed_bureaucrats
		}
		else_if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				NOT = {
					has_law = law_type:law_monarchy
				}
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_hereditary_bureaucrats
		}
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				has_modifier = missouri_compromise
			}
			remove_modifier = missouri_compromise
		}
	}
	
	modifier = {
		country_legitimacy_headofstate_add = 10
		country_legitimacy_govt_total_clout_add = 120
		country_legitimacy_govt_size_add = 2
		country_legitimacy_ideological_incoherence_mult = -0.1
		country_aristocrats_pol_str_mult = 0.5
		country_capitalists_pol_str_mult = 0.25
		country_authority_add = 100
	}
	
	possible_political_movements = {
		law_autocracy 
		law_landed_voting
		law_elder_council
		law_technocracy
		law_single_party_state
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_autocracy }
					}
					is_pop_type = aristocrats
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_wealth_voting }
					}
					is_pop_type = capitalists
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_oligarchy
				OR = {
					AND = {
						power_bloc ?= { has_identity = identity:identity_ideological_union }
						has_strategy = ai_strategy_conservative_agenda					
					}
					has_strategy = ai_strategy_reactionary_agenda
				}
				scope:target_country = { 
					NOR = { # Is their law different enough from what we want to impose?
						has_law = law_type:law_autocracy
						has_law = law_type:law_landed_voting
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}		
}

law_elder_council = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/elder_council.dds"
	
	progressiveness = -25

	unlocking_laws = {
		law_chiefdom
	}

	is_visible = {
		is_country_type = decentralized
	}
	
	on_activate = {
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				has_law = law_type:law_monarchy
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_appointed_bureaucrats
		}
		else_if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				NOT = {
					has_law = law_type:law_monarchy
				}
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_hereditary_bureaucrats
		}
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				has_modifier = missouri_compromise
			}
			remove_modifier = missouri_compromise
		}
	}

	modifier = {
		country_legitimacy_base_add = 20
		country_legitimacy_govt_total_clout_add = 100
		country_legitimacy_govt_size_add = 2
		country_legitimacy_ideological_incoherence_mult = -0.1
		country_aristocrats_pol_str_mult = 0.5
		country_officers_pol_str_mult = 0.5
		country_clergymen_pol_str_mult = 0.5
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_autocracy 
		law_oligarchy
		law_landed_voting
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_landed_voting = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/landed_voting.dds"
	
	progressiveness = -25

	unlocking_technologies = {
		democracy
	}

	disallowing_laws = {
		law_chiefdom
		law_command_economy
	}

	modifier = {
		country_legitimacy_govt_total_votes_add = 40
		country_legitimacy_govt_total_clout_add = 100
		country_legitimacy_govt_size_add = 1
		country_legitimacy_ideological_incoherence_mult = 0.2
		country_aristocrats_voting_power_add = 50
		country_officers_voting_power_add = 25
		country_clergymen_voting_power_add = 25
		country_capitalists_voting_power_add = 25
		country_authority_add = 100
	}
	
	possible_political_movements = {
		law_oligarchy
		law_autocracy 
		law_wealth_voting
		law_census_voting
		law_technocracy
		law_single_party_state
	}

	on_activate = {
		scripted_effect_parties_emergence = yes
		clear_legal_single_party = yes
	}
	
	can_impose = {
		country_has_voting_franchise = yes # modification of the standard trigger, only countries with a voting franchise can impose democracy on others
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_LITERACY" 
			
			if = {
				limit = { 
					OR = {
						NOT = { strata = rich }
						wealth < 30
					}					
					owner = { 
						NOR = {
							has_law = law_type:law_wealth_voting
							has_law = law_type:law_census_voting
							has_law = law_type:law_universal_suffrage
							has_law = law_type:law_anarchy
						}	
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_landed_voting
				OR = {
					AND = {
						power_bloc ?= { has_identity = identity:identity_ideological_union }
						has_strategy = ai_strategy_conservative_agenda					
					}
					has_strategy = ai_strategy_reactionary_agenda
				}
				scope:target_country = { 
					NOR = { # Is their law different enough from what we want to impose?
						has_law = law_type:law_oligarchy
						has_law = law_type:law_autocracy
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}		
}

law_wealth_voting = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/wealth_voting.dds"
	
	progressiveness = 0

	unlocking_technologies = {
		democracy
	}

	disallowing_laws = {
		law_chiefdom
		law_command_economy
	}
	
	modifier = {
		country_legitimacy_govt_total_votes_add = 65
		country_legitimacy_govt_total_clout_add = 75
		country_legitimacy_govt_size_add = 1
		country_legitimacy_ideological_incoherence_mult = 0.2
		country_voting_power_base_add = 40
		country_voting_power_wealth_threshold_add = 25
		country_authority_add = 100
	}
	
	possible_political_movements = {
		law_landed_voting
		law_census_voting
		law_universal_suffrage
		law_technocracy
		law_single_party_state
	}

	on_activate = {
		scripted_effect_parties_emergence = yes
		clear_legal_single_party = yes
	}
	
	can_impose = {
		country_has_voting_franchise = yes # modification of the standard trigger, only countries with a voting franchise can impose democracy on others
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_LITERACY"
			
			if = {
				limit = { 
					NOT = { strata = rich }
					owner = { 
						NOR = {
							has_law = law_type:law_census_voting
							has_law = law_type:law_universal_suffrage
							has_law = law_type:law_anarchy
						}	
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_wealth_voting
				has_strategy = ai_strategy_progressive_agenda	
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOR = { 
						has_law = law_type:law_census_voting 
						has_law = law_type:law_landed_voting 
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}	
}

law_census_voting = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/census_voting.dds"
	
	progressiveness = 50

	unlocking_technologies = {
		democracy
	}

	disallowing_laws = {
		law_chiefdom
		law_command_economy
	}

	modifier = {
		country_legitimacy_govt_total_votes_add = 85
		country_legitimacy_govt_total_clout_add = 55
		country_legitimacy_govt_size_add = 1
		country_legitimacy_ideological_incoherence_mult = 0.1
		country_voting_power_wealth_threshold_add = 15
		country_voting_power_from_literacy_add = 30
		country_authority_add = 50
	}
	
	possible_political_movements = {
		law_landed_voting
		law_wealth_voting
		law_universal_suffrage
		law_technocracy
		law_single_party_state
	}

	on_activate = {
		scripted_effect_parties_emergence = yes
		clear_legal_single_party = yes
	}
	
	can_impose = {
		country_has_voting_franchise = yes # modification of the standard trigger, only countries with a voting franchise can impose democracy on others
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_LITERACY"
			
			if = {
				limit = { 
					wealth < 25
					owner = { 
						NOR = {
							has_law = law_type:law_universal_suffrage
							has_law = law_type:law_anarchy
						}	
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}
	}
	
	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_census_voting
				has_strategy = ai_strategy_progressive_agenda			
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOR = { 
						has_law = law_type:law_wealth_voting 
						has_law = law_type:law_universal_suffrage 
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}
}

law_universal_suffrage = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/universal_suffrage.dds"
	
	progressiveness = 100

	unlocking_technologies = {
		egalitarianism
	}

	disallowing_laws = {
		law_chiefdom
		law_command_economy
	}
	
	modifier = {
		country_legitimacy_govt_total_votes_add = 110
		country_legitimacy_govt_total_clout_add = 25
		country_voting_power_base_add = 20
		country_legitimacy_govt_size_add = 1
	}
	
	possible_political_movements = {
		law_census_voting
		law_wealth_voting
		law_anarchy
		law_single_party_state
	}

	on_activate = {
		scripted_effect_parties_emergence = yes
		clear_legal_single_party = yes
	}
	
	can_impose = {
		country_has_voting_franchise = yes # modification of the standard trigger, only countries with a voting franchise can impose democracy on others
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_LITERACY"
			
			if = {
				limit = { 
					owner = { 
						NOT = {
							has_law = law_type:law_anarchy
						}	
					}
				}
				if = {
					limit = {
						wealth < 15
					}
					add = {
						value = literacy_rate
						divide = 2
					}
				}
				if = {
					limit = {
						wealth < 10
					}
					add = {
						value = literacy_rate
						divide = 2
					}
				}
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_universal_suffrage
				has_strategy = ai_strategy_egalitarian_agenda	
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOR = { 
						has_law = law_type:law_census_voting				 
						has_law = law_type:law_anarchy
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}
}

law_anarchy = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/anarchy.dds"
	
	progressiveness = 200

	unlocking_technologies = {
		anarchism 
	}
	
	unlocking_laws = {
		law_cooperative_ownership
	}
	
	modifier = {
		state_pop_pol_str_add = 1
		country_legitimacy_govt_total_clout_add = 100
		state_political_strength_from_wealth_mult = -0.75
		country_authority_mult = -0.5
		country_legitimacy_govt_size_add = 2
	}
	
	possible_political_movements = {
		law_universal_suffrage
	}

	on_activate = {
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				has_modifier = missouri_compromise
			}
			remove_modifier = missouri_compromise
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_anarchist
		}
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			AND = { # modification of the standard trigger, only other anarchic countries can impose anarchy on their subjects
				has_law = scope:law
				can_impose_law_default = yes
			}
		}
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_LITERACY"
			
			if = {
				limit = { 
					wealth < 10
				}
				add = literacy_rate
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_anarchy
				has_strategy = ai_strategy_egalitarian_agenda	
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_universal_suffrage }
				}
			}
			
			add = base_impose_law_weight
		}
	}
}

law_single_party_state = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/single_party_state.dds"
	
	progressiveness = 0

	can_enact = {
		OR = {
			custom_tooltip = {
				text = ruler_in_party_tt
				exists = ruler
				OR = {
					ruler = {
						this.interest_group = {
							has_party = yes
						}
					}
				}
			}
			custom_tooltip = {
				text = sps_no_party_tt
				country_has_voting_franchise = no
			}
		}
	}

	unlocking_technologies = {
		political_agitation 
	}
	
	modifier = {
		country_legitimacy_govt_total_votes_add = 100
		country_legitimacy_ideological_incoherence_mult = -0.25
		country_authority_add = 250
		country_voting_power_base_add = 20
		interest_group_in_government_attraction_mult = 0.20
	}
	
	possible_political_movements = {
		law_universal_suffrage
		law_anarchy
	}

	on_activate = {
		hidden_effect = {
			if = {
				limit = {
					ROOT = {
						ruler.interest_group = {
							has_party = yes
						}
					}
				}
				ROOT = {
					set_variable = { name = only_valid_party value = ruler.interest_group.party }
				}
			}
			else_if = {
				limit = {
					NOT = {
						any_active_party = {
							exists = this
						}
					}
				}
				root = { gen_ruler_party = yes }
			}
		}
		hidden_effect = { #Clears all currently active parties
			deactivate_parties = yes
		}
		update_party_support = yes #Reactivates precisely one legal party
		
		custom_tooltip = {
			text = sps_government_reshuffle_tt
			every_interest_group = {
				limit = {
					is_in_government = yes
					NOT = { #Removes all IGs from government that aren't in your party
						has_party = yes
					}
				}
				remove_ruling_interest_group = yes
			}
			every_interest_group = {
				limit = { #Adds all IGs that are in your party to the government
					is_in_government = no
					has_party = yes
				}
				add_ruling_interest_group = yes
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			interest_group = {
				has_party = yes
			}
			law_stance = {
				law = law_type:law_single_party_state
				value > neutral
			}
		}
	}
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			AND = { # modification of the standard trigger, only other single-party states countries can impose single-party states on their subjects
				has_law = scope:law
				can_impose_law_default = yes
			}
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_autocracy }
					}
					is_pop_type = aristocrats
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_wealth_voting }
					}
					is_pop_type = capitalists
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_BUREAUCRATS"			
			if = {
				limit = {
					is_pop_type = bureaucrats
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_single_party_state
				"ai_ideological_opinion(scope:target_country)" >= 25 # Only want to do this on ideologically similar countries
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_technocracy }
				}				
			}
			
			add = base_impose_law_weight
		}
	}
}


﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_traditionalism = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/traditionalism.dds"
	
	progressiveness = -50
	
	disallowing_laws = {
		law_per_capita_based_taxation
		law_proportional_taxation
		law_graduated_taxation
		law_anarchy
	}
		
	on_activate = {
	}
	
	modifier = {
		state_shopkeepers_investment_pool_efficiency_mult = -0.5
		state_capitalists_investment_pool_efficiency_mult = -0.5
		state_farmers_investment_pool_efficiency_mult = -0.5	
		state_clergymen_investment_pool_efficiency_mult = -0.5	
		state_aristocrats_investment_pool_efficiency_mult = -0.5	
		state_bureaucracy_population_base_cost_factor_mult = -0.25
		country_government_dividends_reinvestment_add = 0.25
		state_tax_capacity_mult = -0.25
		country_private_construction_allocation_mult = 0.25
		building_nationalization_cost_mult = 1.0
		building_nationalization_investment_return_add = 0.1
		country_leverage_resistance_mult = 0.25

		state_market_access_price_impact = -0.15
		country_disable_nationalization_without_compensation_bool = yes
	}
	
	possible_political_movements = {
		law_interventionism
		law_command_economy
		law_agrarianism
		law_laissez_faire
	}

	# no pop support because movements are impossible
	
	pop_support = {
		value = 0
	}
	
	# AI should never switch back to traditionalism
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_interventionism = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/interventionism.dds"
	
	progressiveness = 50
	
	disallowing_laws = {
		law_serfdom
		law_anarchy
	}
	
	on_activate = {
	}
	
	unlocking_technologies = {
		manufacturies
	}
	
	modifier = {
		country_disable_nationalization_without_compensation_bool = yes
		country_private_construction_allocation_mult = 0.5
		building_nationalization_investment_return_add = 0.5
		country_government_dividends_reinvestment_add = 0.5
		country_government_dividends_efficiency_add = 0.25
	}
	
	possible_political_movements = {
		law_command_economy
		law_agrarianism
		law_laissez_faire
		law_cooperative_ownership
		law_industry_banned
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_agrarianism 
							has_law = law_type:law_traditionalism 
							has_law = law_type:law_industry_banned 
						}
					}
					is_pop_type = capitalists
				}
				value = 0.33
			}
		}
		
		# Literate pops support getting out of Traditionalism once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism 
						has_law = law_type:law_traditionalism
					}
					
					# Aristocrats/Farmers/Peasants want agrarianism instead
					NOR = { 
						is_pop_type = aristocrats 
						is_pop_type = farmers 
						is_pop_type = peasants
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}		
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				OR = {
					has_journal_entry = je_sick_man_bureaucracy
					has_modifier = shogun_ig_forced_to_open_market
					has_journal_entry = je_meiji_main
				}
				has_law = law_type:law_traditionalism
			}
			add = 10000 # Top priority for Tanzimat/Meiji AI is to get out of Traditionalism
		}

		# AI should really try to get out of Traditionalism under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_traditionalism
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_interventionism }				
				}	
			}
			add = 1000
		}
	}
}

law_agrarianism = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/agrarianism.dds"
	
	progressiveness = 0
	
	disallowing_laws = {
		law_anarchy
	}	
	
	unlocking_technologies = {
		romanticism
	}
	
	on_activate = {
	}
	
	modifier = {
		state_aristocrats_investment_pool_efficiency_mult = 0.5
		state_clergymen_investment_pool_efficiency_mult = 0.5
		state_farmers_investment_pool_efficiency_mult = 0.5
		state_capitalists_investment_pool_efficiency_mult = -0.25
		country_private_construction_allocation_mult = 0.5
		building_nationalization_investment_return_add = 0.5
		country_government_dividends_reinvestment_add = 0.5
		country_government_dividends_efficiency_add = 0.3
		
		country_disable_nationalization_without_compensation_bool = yes
	}
	
	possible_political_movements = {
		law_interventionism
		law_command_economy
		law_laissez_faire
		law_cooperative_ownership
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_FARMERS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_interventionism 
							has_law = law_type:law_laissez_faire 
							has_law = law_type:law_traditionalism
						}
					}
					is_pop_type = farmers
				}
				value = 0.33
			}
		}
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_interventionism 
							has_law = law_type:law_laissez_faire 
						}
					}
					is_pop_type = aristocrats
				}
				value = 0.33
			}
		}
		
		# Literate pops support getting out of Traditionalism once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism 
						has_law = law_type:law_traditionalism
					}				
					OR = { 
						is_pop_type = aristocrats
						is_pop_type = farmers
						is_pop_type = peasants
					} 
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}			
	}
		
	ai_will_do = {
		OR = {
			has_law = law_type:law_traditionalism
			literacy_rate < 0.4
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_sick_man_bureaucracy
				has_law = law_type:law_traditionalism
			}
			add = 10000 # Top priority for Tanzimat AI is to get out of Traditionalism
		}	

		# AI should really try to get out of Traditionalism under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_traditionalism
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_agrarianism }				
				}	
			}
			add = 1000
		}		
	}
}

law_industry_banned = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/industry_banned.dds"
	progressiveness = 0
	
	unlocking_technologies = {
		romanticism
	}

	on_activate = {
		custom_tooltip = industry_banned_tt
		custom_tooltip = {
			text = industry_banned_destroy_tt
			every_scope_state = {
				if = {
					limit = {
						has_building = building_chemical_plants
					}
					remove_building = building_chemical_plants
				}
				if = {
					limit = {
						has_building = building_synthetics_plants
					}
					remove_building = building_synthetics_plants
				}
				if = {
					limit = {
						has_building = building_steel_mills
					}
					remove_building = building_steel_mills
				}
				if = {
					limit = {
						has_building = building_power_plant
					}
					remove_building = building_power_plant
				}
				if = {
					limit = {
						has_building = building_motor_industry
					}
					remove_building = building_motor_industry
				}
				if = {
					limit = {
						has_building = building_war_machine_industry
					}
					remove_building = building_war_machine_industry
				}
				if = {
					limit = {
						has_building = building_electrics_industry
					}
					remove_building = building_electrics_industry
				}
				if = {
					limit = {
						has_building = building_munition_plants
					}
					remove_building = building_munition_plants
				}
			}
		}
	}

	modifier = {
		building_group_bg_agriculture_throughput_add = 0.1
		building_group_bg_plantations_throughput_add = 0.1
		state_expected_sol_mult = -0.1
		interest_group_ig_rural_folk_pol_str_mult = 0.5
		state_aristocrats_investment_pool_contribution_add = 0.25
		country_private_construction_allocation_mult = 0.5
		country_production_tech_research_speed_mult = -0.25
		country_production_tech_spread_mult = -0.25
		building_nationalization_investment_return_add = 0.5
		country_government_dividends_reinvestment_add = 0.25
		country_government_dividends_efficiency_add = 0.3
		country_disable_nationalization_without_compensation_bool = yes
	}

	possible_political_movements = {
		law_interventionism
		law_command_economy
		law_laissez_faire
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_FARMERS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_interventionism 
							has_law = law_type:law_laissez_faire 
							has_law = law_type:law_traditionalism
						}
					}
					is_pop_type = farmers
				}
				value = 0.1
			}
		}
	}

	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_laissez_faire = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/laissez_faire.dds"
	
	progressiveness = 50
	
	disallowing_laws = {
		law_serfdom
		law_isolationism
		law_anarchy
	}
	
	unlocking_technologies = {
		international_trade
	}
	
	on_activate = {
	}
	
	modifier = {
		country_loan_interest_rate_mult = -0.25
		state_shopkeepers_investment_pool_efficiency_mult = 0.25	
		state_capitalists_investment_pool_efficiency_mult = 0.25
		country_private_construction_allocation_mult = 0.75
		country_government_dividends_reinvestment_add = 1.0		
		country_max_companies_add = 1
		country_disable_nationalization_bool = yes
		country_force_privatization_bool = yes
	}
	
	possible_political_movements = {
		law_interventionism
		law_command_economy
		law_agrarianism
		law_cooperative_ownership
		law_industry_banned
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_agrarianism 
							has_law = law_type:law_traditionalism 
							has_law = law_type:law_industry_banned 
						}
					}
					is_pop_type = capitalists
				}
				value = 0.5
			}
		}
		
		# Literate pops support getting out of Traditionalism once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism
						has_law = law_type:law_traditionalism
					}
					
					# Aristocrats/Farmers/Peasants want agrarianism instead
					NOR = { 
						is_pop_type = aristocrats 
						is_pop_type = farmers 
						is_pop_type = peasants
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}			
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_modifier = shogun_ig_forced_to_open_market
				has_journal_entry = je_meiji_main
				has_law = law_type:law_traditionalism
			}
			add = 10000 # Top priority for Tanzimat/Meiji AI is to get out of Traditionalism
		}	

		# AI should really try to get out of Traditionalism under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_traditionalism
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_laissez_faire }				
				}	
			}
			add = 1000
		}		
	}	
}

law_cooperative_ownership = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/cooperative_ownership.dds"
	
	progressiveness = 100
	
	disallowing_laws = {
		law_serfdom
	}
	
	unlocking_laws = {
		law_council_republic			
	}
	
	on_activate = {		
		custom_tooltip = {
			text = enact_law_radical_leftist_economy_warning_desc
		}	
	}
	
	modifier = {
		state_shopkeepers_investment_pool_efficiency_mult = 0.25	
		state_farmers_investment_pool_efficiency_mult = 0.25
		country_private_construction_allocation_mult = 0.35
		country_government_dividends_reinvestment_add = 1.0

		country_force_collectivization_bool = yes
		country_disable_privatization_bool = yes
	}
	
	possible_political_movements = {
		law_interventionism
		law_agrarianism
		law_laissez_faire
		law_command_economy
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_agrarianism 
							has_law = law_type:law_traditionalism 
						}
					}
					is_pop_type = capitalists
				}
				value = 0.5
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_law = law_type:law_council_republic
			}
			add = 250
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_cooperative_ownership			
			}
			
			add = base_impose_law_weight
			multiply = 10.0
		}
	}	
}

law_command_economy = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/command_economy.dds"
	
	progressiveness = 100
	
	disallowing_laws = {
		law_serfdom
		law_anarchy
	}
	
	unlocking_technologies = {
		central_planning
	}
	
	unlocking_laws = {
		law_autocracy
		law_oligarchy
		law_single_party_state
		law_technocracy
	}	
	
	on_activate = {
		seize_investment_pool = yes
		custom_tooltip = {
			text = enact_law_radical_leftist_economy_warning_desc
		}	
	}
	
	modifier = {
		country_disable_investment_pool_bool = yes
		
		country_authority_mult = 0.25
		country_bureaucrats_pol_str_mult = 0.25
		building_nationalization_cost_mult = -0.5
		building_nationalization_radicals_mult = -0.75
		country_government_dividends_efficiency_add = 0.4
		
		country_leverage_resistance_mult = 0.25

		country_disable_privatization_bool = yes
	}
	
	possible_political_movements = {
		law_interventionism
		law_agrarianism
		law_laissez_faire
		law_cooperative_ownership
		law_industry_banned
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_BUREAUCRATS"			
			if = {
				limit = {
					is_pop_type = bureaucrats
				}
				value = 0.2
			}
		}
	}
	
	ai_will_do = {
		OR = {
			has_law = law_type:law_technocracy
			AND = {
				has_law = law_type:law_council_republic
				ruler ?= {
					has_ideology = ideology:ideology_vanguardist
					has_ideology = ideology:ideology_communist
				}			
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_law = law_type:law_council_republic
			}
			add = 250
		}
		
		if = {
			limit = { 
				has_law = law_type:law_technocracy
			}
			add = 100
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_command_economy			
			}
			
			add = base_impose_law_weight
			multiply = 10.0
		}
	}	
}

﻿law_no_schools = {
	group = lawgroup_education_system
	
	icon = "gfx/interface/icons/law_icons/no_schools.dds"
	
	progressiveness = 0

	disallowing_laws = {
		law_compulsory_primary_school
	}

	can_enact = {
		custom_tooltip = {
			modifier:country_disallow_law_no_schools_bool = no
			text = disallow_law_no_schools_tt
		}
	}
	
	pop_support = {
		value = 0
	}

	# AI will never abolish institutions entirely
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_religious_schools = {
	group = lawgroup_education_system
	
	icon = "gfx/interface/icons/law_icons/religious_schools.dds"
	
	progressiveness = 25
	
	unlocking_technologies = {
		rationalism
	}

	disallowing_laws = {
		law_total_separation
		law_state_atheism
		law_serfdom
	}

	institution = institution_schools
	institution_modifier = {
		state_conversion_mult = 0.2
		state_education_access_add = 0.1
		interest_group_ig_devout_pol_str_mult = 0.1
	}
	
	possible_political_movements = {
		law_private_schools
		law_public_schools
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_CLERGYMEN"			
			if = {
				limit = {
					is_pop_type = clergymen
				}
				value = 0.33
			}
		}

		add = {
			desc = "POP_POVERTY"			
			if = {
				limit = { 
					owner = { NOT = { has_law = law_type:law_public_schools } }
				}
				
				# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
				value = 15
				subtract = standard_of_living
				multiply = 0.1
				min = 0
				max = 1
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}		
	
		if = {
			limit = { 
				OR = {
					has_journal_entry = je_sick_man_education
					has_journal_entry = je_terakoya
				}
				has_law = law_type:law_no_schools
			}
			add = 1000
		}				
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_religious_schools
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_religious_schools
				scope:target_country = {
					has_law = law_type:law_no_schools
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = 10
		}
	}
}

law_private_schools = {
	group = lawgroup_education_system
	
	icon = "gfx/interface/icons/law_icons/private_schools.dds"
	
	progressiveness = 25
	
	unlocking_technologies = {
		academia
	}

	disallowing_laws = {
		law_state_religion
	}
	
	institution = institution_schools
	institution_modifier = {
		state_education_access_wealth_add = 0.005
		interest_group_ig_intelligentsia_pol_str_mult = 0.1
	}
	
	possible_political_movements = {
		law_religious_schools
		law_public_schools
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_WEALTH"			
			# Wealth 20 gives 0.1 pop support, 22 -> 0.2, 24 -> 0.3, ..., 30 -> 0.6
			value = wealth
			subtract = 18
			divide = 2
			multiply = 0.1
			min = 0
			max = 0.6
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
	
		if = {
			limit = { 
				OR = {
					has_journal_entry = je_sick_man_education
					has_journal_entry = je_terakoya
				}
				has_law = law_type:law_no_schools
			}
			add = 1000
		}		
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_private_schools
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_private_schools
				scope:target_country = {
					has_law = law_type:law_no_schools
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = 10
		}
	}
}

law_public_schools = {
	group = lawgroup_education_system

	icon = "gfx/interface/icons/law_icons/public_schools.dds"
	
	progressiveness = 50
	
	unlocking_technologies = {
		empiricism
	}

	disallowing_laws = {
		law_state_religion
		law_serfdom
	}
	
	institution = institution_schools
	institution_modifier = {
		state_assimilation_mult = 0.125
		state_education_access_add = 0.1
	}
	
	possible_political_movements = {
		law_private_schools
		law_religious_schools
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"			
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.25
			}
		}

		add = {
			desc = "POP_POVERTY"			
			
			# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
			value = 15
			subtract = standard_of_living
			multiply = 0.1
			min = 0
			max = 1
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				OR = {
					has_journal_entry = je_sick_man_education
					has_journal_entry = je_terakoya
				}
				has_law = law_type:law_no_schools
			}
			add = 1000
		}			
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_public_schools
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_public_schools
				scope:target_country = {
					has_law = law_type:law_no_schools
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = 10
		}
	}
}
﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_outlawed_dissent = {
	group = lawgroup_free_speech
	icon = "gfx/interface/icons/law_icons/outlawed_dissent.dds"
	
	progressiveness = -50
	
	modifier = {
		country_authority_add = 200
		country_bolster_ig_attraction_mult = 0.5
		country_suppression_ig_attraction_mult = -0.5
		country_tech_spread_mult = -0.15
		country_leverage_resistance_mult = 0.5
	}
	
	possible_political_movements = {
		law_censorship
	}

	unlocking_technologies = {
		political_agitation
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_censorship = {
	group = lawgroup_free_speech
	icon = "gfx/interface/icons/law_icons/censorship.dds"
	
	progressiveness = 0
	
	modifier = {
		country_authority_add = 100
		country_bolster_ig_attraction_mult = 0.4
		country_suppression_ig_attraction_mult = -0.4
		country_tech_spread_mult = -0.10
		country_leverage_resistance_mult = 0.25
	}
	
	possible_political_movements = {
		law_right_of_assembly
		law_outlawed_dissent
	}

	unlocking_technologies = {
		law_enforcement
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_right_of_assembly = {
	group = lawgroup_free_speech
	icon = "gfx/interface/icons/law_icons/right_of_assembly.dds"
	
	progressiveness = 50
	
	modifier = {
		country_authority_add = 50
		country_bolster_ig_attraction_mult = 0.3
		country_suppression_ig_attraction_mult = -0.3
	}
	
	possible_political_movements = {
		law_censorship
		law_protected_speech
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"			
			if = {
				limit = {
					owner = { 
						NOT = { 
							has_law = law_type:law_protected_speech
						} 
					}
					is_pop_type = academics
				}
				value = 0.5
			}
		}
		# People don't like censorship
		add = {
			desc = "ALL_POPS"
			if = {
				limit = {
					owner = { 
						NOT = { 
							has_law = law_type:law_protected_speech
						}
					}
				}
				value = 0.01
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_protected_speech = {
	group = lawgroup_free_speech
	icon = "gfx/interface/icons/law_icons/protected_speech.dds"
	
	progressiveness = 100

	unlocking_technologies = {
		human_rights
	}
	
	modifier = {
		country_tech_spread_mult = 0.25
		country_leverage_resistance_mult = -0.25
	}
	
	possible_political_movements = {
		law_right_of_assembly
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"			
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.33
			}
		}
		add = {
			desc = "ALL_POPS"			
			value = 0.01
		}
	}

	on_activate = {
		custom_tooltip = protected_speech_tt
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}
﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_chiefdom = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/chiefdom.dds"
	
	progressiveness = -100
	
	can_enact = {
		is_country_type = decentralized
	}
	
	is_visible = {
		is_country_type = decentralized
	}
	
	modifier = {
		country_legitimacy_headofstate_add = 20
		country_authority_add = 100
	}
	
	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_monarchy = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/monarchy.dds"
	
	progressiveness = 0

	disallowing_laws = {
		law_anarchy
	}
	
	can_enact = {
		NOT = { has_government_type = gov_chartered_company }
	}	
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	modifier = {
		country_legitimacy_headofstate_add = 20
		country_legitimacy_ideological_incoherence_mult = 0.1
		country_aristocrats_pol_str_mult = 0.25
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_presidential_republic
		law_parliamentary_republic
		law_council_republic
	}
	
	pop_support = {
		value = 0	
		add = {
			desc = "POP_ARISTOCRATS"
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.33
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_monarchist_ideology = yes
		}
	}

	on_activate = {
		if = {
			limit = {
				c:FRA ?= this
				NOT = {
					has_variable = one_true_french_dynasty
				}
				has_dlc_feature = voice_of_the_people_content
				game_date > 1836.1.1
			}
			if = {
				limit = {
					has_variable = fra_divided_monarchists_freeze
				}
				remove_variable = fra_divided_monarchists_freeze
			}
			add_journal_entry = { type = je_divided_monarchists }
		}
		# Generates French monarch upon enaction.
		hidden_effect = {
			if = {
				limit = {
					c:FRA ?= this
					NOT = {
						has_variable = one_true_french_dynasty
					}
					has_dlc_feature = voice_of_the_people_content
					game_date > 1836.1.1
					NOR = {
						ruler_is_bonapartist = yes
						ruler_is_orleanist = yes
						ruler_is_legitimist = yes
					}
				}
				fra_handle_republic_monarch_assignment = yes
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_monarchy
				has_strategy = ai_strategy_reactionary_agenda
				power_bloc ?= { has_identity = identity:identity_ideological_union }
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_theocracy }
				}				
			}
			
			add = base_impose_law_weight	
			if = {
				limit = { 
					scope:target_country = { has_law = law_type:council_republic } 
					NOT = { has_strategy = ai_strategy_egalitarian_agenda }
				}
				multiply = 5
			}	
			else = {
				multiply = 0.5 # AI is less likely to mess with governance principles unless dealing with council republics
			}
		}
	}
}

law_presidential_republic = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/presidential_republic.dds"
	
	progressiveness = 100
	
	unlocking_technologies = {
		democracy
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	modifier = {
		country_legitimacy_headofstate_add = 10
		country_legitimacy_govt_total_votes_add = 10
		country_legitimacy_ideological_incoherence_mult = 0.2
		country_authority_add = 100
	}

	on_activate = {
		if = {
			limit = {
				has_variable = fra_republic_counter
			}
			change_variable = {
				name = fra_republic_counter
				add = 1
			}
		}
		if = {
			limit = {
				any_interest_group = {
					has_ideology = ideology:ideology_constitutionalist
				}
			}
			every_interest_group = {
				limit = {
					has_ideology = ideology:ideology_constitutionalist
				}
				remove_ideology = ideology_constitutionalist
				add_ideology = ideology_republican
			}
		}
	}
	
	possible_political_movements = {
		law_council_republic
		law_monarchy
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_MIDDLE_STRATA"
			if = {
				limit = { 
					strata = middle
				}
				value = 0.05
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_republican_leader
		}
	}

	ai_enact_weight_modifier = {
		value = 0		
		if = {
			limit = {
				has_journal_entry = je_pedro_republic
			}
			add = 100
		}
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_presidential_republic
				has_strategy = ai_strategy_progressive_agenda
				power_bloc ?= { has_identity = identity:identity_ideological_union }
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_parliamentary_republic }
				}				
			}
			
			add = base_impose_law_weight
			if = {
				limit = { 
					scope:target_country = { has_law = law_type:council_republic } 
					NOT = { has_strategy = ai_strategy_egalitarian_agenda }
				}
				multiply = 5
			}	
			else = {
				multiply = 0.5 # AI is less likely to mess with governance principles unless dealing with council republics
			}
		}
	}	
}

law_parliamentary_republic = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/parliamentary_republic.dds"
	
	progressiveness = 100
	
	# Has major legitimacy issues with autocracies, so should be oligarchy instead
	disallowing_laws = {
		law_autocracy
	}
	
	can_enact = {
		NOT = { has_government_type = gov_chartered_company }
	}		
	
	unlocking_technologies = {
		democracy
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	modifier = {
		country_legitimacy_govt_total_votes_add = 20
		country_legitimacy_govt_size_add = 1
	}
	
	on_activate = {
		if = {
			limit = {
				has_variable = fra_republic_counter
			}
			change_variable = {
				name = fra_republic_counter
				add = 1
			}
		}
		if = {
			limit = {
				any_interest_group = {
					has_ideology = ideology:ideology_constitutionalist
				}
			}
			every_interest_group = {
				limit = {
					has_ideology = ideology:ideology_constitutionalist
				}
				remove_ideology = ideology_constitutionalist
				add_ideology = ideology_republican
			}
		}
	}

	possible_political_movements = {
		law_council_republic
		law_monarchy
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_MIDDLE_STRATA"
			if = {
				limit = { 
					strata = middle
				}
				value = 0.05
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_republican_leader
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_parliamentary_republic
				has_strategy = ai_strategy_progressive_agenda
				power_bloc ?= { has_identity = identity:identity_ideological_union }
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_presidential_republic }
				}				
			}
			
			add = base_impose_law_weight
			if = {
				limit = { 
					scope:target_country = { has_law = law_type:council_republic } 
					NOT = { has_strategy = ai_strategy_egalitarian_agenda }
				}
				multiply = 5
			}		
			else = {
				multiply = 0.5 # AI is less likely to mess with governance principles unless dealing with council republics
			}
		}
	}	
}

law_theocracy = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/theocracy.dds"
	
	progressiveness = -25

	disallowing_laws = {
		law_total_separation 
	}
	
	can_enact = {
		NOT = { has_government_type = gov_chartered_company }
	}		

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	modifier = {
		country_legitimacy_headofstate_add = 20
		country_legitimacy_ideological_incoherence_mult = 0.1
		interest_group_ig_devout_pol_str_mult = 0.25
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_monarchy
		law_presidential_republic
		law_parliamentary_republic
		law_council_republic
	}

	pop_support = {
		value = 0
		
		add = {
			desc = "POP_CLERGYMEN"
			if = {
				limit = { 
					is_pop_type = clergymen
				}
				value = 0.33
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_theocrat
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_theocracy
				has_strategy = ai_strategy_reactionary_agenda
				power_bloc ?= { has_identity = identity:identity_religious }
				religion = scope:target_country.religion
				scope:target_country = { # Is their law different enough from what we want to impose?					
					NOT = { has_law = law_type:law_monarchy }
				}				
			}
			
			add = base_impose_law_weight
			if = {
				limit = { 
					scope:target_country = { has_law = law_type:council_republic } 
					NOT = { has_strategy = ai_strategy_egalitarian_agenda }
				}
				multiply = 5
			}		
			else = {
				multiply = 0.5 # AI is less likely to mess with governance principles unless dealing with council republics
			}
		}
	}	
}

law_council_republic = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/council_republic.dds"
	
	progressiveness = 200

	unlocking_technologies = {
		socialism
	}
	
	can_enact = {
		NOT = { has_government_type = gov_chartered_company }
	}		
	
	on_activate = {		
		custom_tooltip = {
			text = enact_law_radical_leftist_government_warning_desc
		}
		if = {
			limit = {
				any_interest_group = {
					has_ideology = ideology:ideology_constitutionalist
				}
			}
			every_interest_group = {
				limit = {
					has_ideology = ideology:ideology_constitutionalist
				}
				remove_ideology = ideology_constitutionalist
				add_ideology = ideology_republican
			}
		}	
	}		

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	modifier = {
		country_legitimacy_govt_total_votes_add = 10
		country_legitimacy_govt_size_add = 1
		country_legitimacy_ideological_incoherence_mult = -0.1
		interest_group_ig_trade_unions_pol_str_mult = 0.25
	}
	
	possible_political_movements = {
		law_presidential_republic
		law_parliamentary_republic
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_LOWER_STRATA"
			if = {
				limit = { 
					strata = poor
				}
				value = 0.05
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			OR = {
				has_ideology = ideology:ideology_communist
				has_ideology = ideology:ideology_anarchist
				has_ideology = ideology:ideology_vanguardist
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_council_republic
				has_strategy = ai_strategy_egalitarian_agenda				
			}
			
			add = base_impose_law_weight
			multiply = 5.0
		}
	}
}
﻿law_no_health_system = {
	group = lawgroup_health_system
	icon = "gfx/interface/icons/law_icons/no_health_system.dds"
	
	progressiveness = 0
	
	modifier = {
	}

	pop_support = {
		value = 0
	}
	
	# AI shouldn't try to abolish institutions
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_charitable_health_system = {
	group = lawgroup_health_system
	icon = "gfx/interface/icons/law_icons/charitable_health_system.dds"
	
	progressiveness = 50
	
	unlocking_technologies = {
		medical_degrees
	}	

	institution = institution_health_system
	institution_modifier = {
		state_mortality_mult = -0.03
		interest_group_ig_devout_pol_str_mult = 0.1
		state_pollution_reduction_health_mult = -0.1
		state_poor_standard_of_living_add = 0.5
	}
	
	# Don't return to charity if we have something more advanced
	ai_will_do = {
		NOR = {
			has_law = law_type:law_private_health_insurance
			has_law = law_type:law_public_health_insurance
		}
	}
	
	pop_support = {
		value = 0	
		add = {
			desc = "POP_POVERTY"			
			if = {
				limit = { 
					owner = { NOT = { has_law = law_type:law_public_health_insurance } }
				}

				# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
				value = 15
				subtract = standard_of_living
				multiply = 0.1
				min = 0
				max = 1
			}					
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_private_health_insurance = {
	group = lawgroup_health_system
	icon = "gfx/interface/icons/law_icons/private_health_insurance.dds"
	
	progressiveness = 75
	
	unlocking_technologies = {
		pharmaceuticals
	}
	
	modifier = {
		country_institution_health_system_max_investment_add = 2
	}	
	
	institution = institution_health_system
	institution_modifier = {
		interest_group_ig_petty_bourgeoisie_pol_str_mult = 0.1
		state_mortality_wealth_mult = -0.002
		state_pollution_reduction_health_mult = -0.1
		state_rich_standard_of_living_add = 0.5
	}
	
	pop_support = {
		value = 0	
		add = {
			desc = "POP_WEALTH"			
			# Wealth 20 gives 0.1 pop support, 22 -> 0.2, 24 -> 0.3, ..., 30 -> 0.6
			value = wealth
			subtract = 18
			divide = 2
			multiply = 0.1
			min = 0
			max = 0.6
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_public_health_insurance = {
	group = lawgroup_health_system
	icon = "gfx/interface/icons/law_icons/public_health_insurance.dds"
	
	progressiveness = 100
	
	unlocking_technologies = {
		pharmaceuticals
	}
	
	modifier = {
		country_institution_health_system_max_investment_add = 2
	}		
	
	institution = institution_health_system
	institution_modifier = {
		state_mortality_mult = -0.04
		state_pollution_reduction_health_mult = -0.15
		state_standard_of_living_add = 0.5
	}
	
	pop_support = {
		value = 0	
		add = {
			desc = "POP_POVERTY"			
			# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
			value = 15
			subtract = standard_of_living
			multiply = 0.1
			min = 0
			max = 1			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}
﻿law_no_home_affairs = {
	group = lawgroup_internal_security
	icon = "gfx/interface/icons/law_icons/no_home_affairs.dds"
	
	progressiveness = 0
	
	possible_political_movements = {
		law_national_guard
		law_secret_police
		law_guaranteed_liberties
	}

	pop_support = {
		value = 0
	}
	
	# AI shouldn't try to abolish institutions
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_national_guard = {
	group = lawgroup_internal_security
	icon = "gfx/interface/icons/law_icons/national_guard.dds"
	
	progressiveness = 25

	unlocking_technologies = {
		law_enforcement
	}

	institution = institution_home_affairs
	institution_modifier = {
		state_conscription_rate_add = 0.005
		political_movement_radicalism_mult = -0.05
	}
	
	possible_political_movements = {
		law_secret_police
		law_guaranteed_liberties
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_OFFICERS"
			if = {
				limit = { 
					is_pop_type = officers
				}
				value = 0.33
			}
		}	
	}

	# Don't return to national guard we have something more advanced
	ai_will_do = {
		NOR = {
			has_law = law_type:law_secret_police
			has_law = law_type:law_guaranteed_liberties
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_secret_police = {
	group = lawgroup_internal_security
	icon = "gfx/interface/icons/law_icons/secret_police.dds"
	
	progressiveness = 0
	
	unlocking_technologies = {
		central_archives
	}

	modifier = {
		country_institution_home_affairs_max_investment_add = 2
	}
	
	institution = institution_home_affairs
	institution_modifier = {
		country_suppression_ig_attraction_mult = -0.05
		political_movement_radicalism_mult = -0.1
	}
	
	possible_political_movements = {
		law_guaranteed_liberties
	}

	on_enact = {
		custom_tooltip = unlock_arrange_accident_tt
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_guaranteed_liberties = {
	group = lawgroup_internal_security
	icon = "gfx/interface/icons/law_icons/guaranteed_liberties.dds"
	
	progressiveness = 100
	
	unlocking_laws = {
		law_right_of_assembly
		law_protected_speech
	}
	
	modifier = {
		country_institution_home_affairs_max_investment_add = 2
	}
	
	institution = institution_home_affairs
	institution_modifier = {
		state_radicals_from_sol_change_mult = -0.05
		state_loyalists_from_sol_change_mult = 0.05
	}
	
	possible_political_movements = {
		law_secret_police
	}

	pop_support = {
		value = 0
		add = {
			desc = "ALL_POPS"
			value = 0.01
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_no_workers_rights = {
	group = lawgroup_labor_rights
	
	icon = "gfx/interface/icons/law_icons/no_workers_rights.dds"
	
	progressiveness = 0
	
	modifier = {	
	}
	
	possible_political_movements = {
		law_regulatory_bodies
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_regulatory_bodies = {
	group = lawgroup_labor_rights
	
	icon = "gfx/interface/icons/law_icons/regulatory_bodies.dds"
	
	progressiveness = 50

	unlocking_technologies = {
		labor_movement
	}

	institution = institution_workplace_safety
	
	possible_political_movements = {
		law_worker_protections
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_DANGEROUS_JOBS"		
			if = {
				limit = { 
					NOT = { strata = rich }
					OR = {
						pop_employment_building_group = bg_mining
						pop_employment_building_group = bg_manufacturing
					}
					owner = { 
						NOT = { has_law = law_type:law_worker_protections }
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_worker_protections = {
	group = lawgroup_labor_rights
	
	icon = "gfx/interface/icons/law_icons/worker_protections.dds"

	progressiveness = 100

	unlocking_technologies = {
		human_rights
	}
	
	institution = institution_workplace_safety
	institution_modifier = {
		building_minimum_wage_mult = 0.15
	}

	
	pop_support = {
		value = 0

		add = {
			desc = "POP_DANGEROUS_JOBS"		
			if = {
				limit = { 
					NOT = { strata = rich }
					OR = {
						pop_employment_building_group = bg_mining
						pop_employment_building_group = bg_manufacturing
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿law_serfdom = {
	group = lawgroup_land_reform
	
	icon = "gfx/interface/icons/law_icons/serfdom.dds"
	
	progressiveness = -50
	
	disallowing_laws = {
		law_interventionism
		law_laissez_faire
		law_command_economy
	}
	
	on_enact = {
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_homesteading
				}
			}
			custom_tooltip = farmers_pb_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_collectivized_agriculture
				}
			}
			custom_tooltip = rural_laborers_tu_ig_shift_effect_negative_tt
		}
	}
	
	modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.5
		state_peasants_internal_migration_disallowed_bool = yes
		state_peasants_mass_migration_disallowed_bool = yes
	}

	possible_political_movements = {
		law_tenant_farmers
		law_collectivized_agriculture
		law_homesteading
		law_commercialized_agriculture
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					is_pop_type = aristocrats
				}
				value = 0.1
			}
		}
	}
	
	# AI should never try to bring back serfdom
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_tenant_farmers = {
	group = lawgroup_land_reform
	
	icon = "gfx/interface/icons/law_icons/tenant_farmers.dds"
	
	progressiveness = 0

	modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.25
		state_peasants_internal_migration_disallowed_bool = yes
	}

	possible_political_movements = {
		law_homesteading
		law_collectivized_agriculture
		law_commercialized_agriculture
	}
	
	on_enact = {
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_homesteading
				}
			}
			custom_tooltip = farmers_pb_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_collectivized_agriculture
				}
			}
			custom_tooltip = rural_laborers_tu_ig_shift_effect_negative_tt
		}
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_serfdom }
					}
					is_pop_type = aristocrats
				}
				value = 0.1
			}
		}
		
		# Literate pops support getting out of Serfdom once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism 
						has_law = law_type:law_serfdom
					}		
				}
				add = {
					value = literacy_rate			
					if = {
						limit = { is_pop_type = aristocrats }
						divide = 5
					}	
					else = {
						divide = 2
					}
				}
			}
		}			
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_meiji_main
				has_law = law_type:law_serfdom
			}
			add = 10000 # Top priority for Meiji AI is to get out of Serfdom
		}

		# AI should really try to get out of Serfdom under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_serfdom
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_tenant_farmers }				
				}			
			}
			add = 1000
		}		
	}
}

law_commercialized_agriculture = {
	group = lawgroup_land_reform
	
	icon = "gfx/interface/icons/law_icons/commercial_agriculture.dds"
	
	progressiveness = 0

	disallowing_laws = {
		law_traditionalism
	}

	possible_political_movements = {
		law_homesteading
		law_collectivized_agriculture
		law_homesteading
	}

	unlocking_technologies = {
		mutual_funds
	}
	
	on_enact = {
		custom_tooltip = financial_districts_buy_farms_tt
		if = {
			limit = {
				NOR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_homesteading
				}
			}
			custom_tooltip = farmers_pb_ig_shift_effect_tt
		}
		if = {
			limit = {
				NOR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_collectivized_agriculture
				}
			}
			custom_tooltip = rural_laborers_tu_ig_shift_effect_tt
		}
		if = {
			limit = {
				has_journal_entry = je_pedro_brazil
				NOT = { has_variable = landreform_pedropoint }
			}
			set_variable = landreform_pedropoint
			remove_pedropoint_effect = yes
		}
	}

	pop_support = {
		value = 0

		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					is_pop_type = capitalists
				}
				value = 0.1
			}
		}
		
		# Literate pops support getting out of Serfdom once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism 
						has_law = law_type:law_serfdom
					}				
					
					# Peasants & Farmers want Homesteading instead of Commercialized Agriculture
					NOR = { 
						is_pop_type = farmers
						is_pop_type = peasants
					} 
				}
				add = {
					value = literacy_rate			
					if = {
						limit = { is_pop_type = aristocrats }
						divide = 5
					}	
					else = {
						divide = 2
					}
				}
			}
		}		
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0

		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_meiji_main
				has_law = law_type:law_serfdom
			}
			add = 10000 # Top priority for Meiji AI is to get out of Serfdom
		}

		# AI should really try to get out of Serfdom under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_serfdom
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_collectivized_agriculture }				
				}
			}
			add = 1000
		}		
	}
}

law_homesteading = {
	group = lawgroup_land_reform
	
	icon = "gfx/interface/icons/law_icons/freeholders.dds"
	
	progressiveness = 25

	possible_political_movements = {
		law_tenant_farmers
		law_collectivized_agriculture
		law_commercialized_agriculture
	}

	modifier = {
		country_farmers_pol_str_mult = 0.25
		building_group_bg_agriculture_allowed_collectivization_add = 0.5
		building_group_bg_ranching_allowed_collectivization_add = 0.5
	}

	on_enact = {
		if = {
			limit = {
				NOR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_homesteading
				}
			}
			custom_tooltip = farmers_pb_ig_shift_effect_tt
		}
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_collectivized_agriculture
				}
			}
			custom_tooltip = rural_laborers_tu_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				has_journal_entry = je_pedro_brazil
				NOT = { has_variable = landreform_pedropoint }
			}
			set_variable = landreform_pedropoint
			remove_pedropoint_effect = yes
		}
	}

	pop_support = {
		value = 0

		add = {
			desc = "POP_FARMERS"			
			if = {
				limit = {
					is_pop_type = farmers
				}
				value = 0.50
			}
		}
		
		# Literate pops support getting out of Serfdom once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism 
						has_law = law_type:law_serfdom
					}				
					OR = { 
						is_pop_type = farmers
						is_pop_type = peasants 
					} 
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}		
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		# AI should really try to get out of Serfdom under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_serfdom
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_homesteading }				
				}
			}
			add = 1000
		}		
	}
}

law_collectivized_agriculture = {
	group = lawgroup_land_reform
	
	icon = "gfx/interface/icons/law_icons/collectivized_agriculture.dds"
	
	progressiveness = 50

	modifier = {
		building_group_bg_agriculture_allowed_collectivization_add = 1.0
		building_group_bg_ranching_allowed_collectivization_add = 1.0
	}

	on_enact = {
		custom_tooltip = rural_laborers_tu_ig_shift_effect_tt
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_homesteading
				}
			}
			custom_tooltip = farmers_pb_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				has_journal_entry = je_pedro_brazil
				NOT = { has_variable = landreform_pedropoint }
			}
			set_variable = landreform_pedropoint
			remove_pedropoint_effect = yes
		}
	}

	unlocking_laws = {
		law_command_economy
		law_cooperative_ownership
	}

	possible_political_movements = {
		law_tenant_farmers
		law_homesteading
		law_commercialized_agriculture
	}

	unlocking_technologies = { socialism }

	pop_support = {
		value = 0

		add = {
			desc = "POP_PEASANTS"		
			if = {
				limit = { 
					is_pop_type = peasants
					owner = { 
						has_law = law_type:law_serfdom
					}
				}
				add = {
					value = literacy_rate
				}
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_law = law_type:law_council_republic
			}
			add = 250
		}
	}
}

﻿law_no_migration_controls = {
	group = lawgroup_migration
	icon = "gfx/interface/icons/law_icons/no_migration_controls.dds"
	
	progressiveness = 50
	
	modifier = {
		country_leverage_resistance_mult = -0.25
	}
	
	
	possible_political_movements = {
		law_migration_controls
	}	
	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_migration_controls = {
	group = lawgroup_migration
	icon = "gfx/interface/icons/law_icons/migration_controls.dds"
	
	modifier = {
		country_disallow_discriminated_migration_bool = yes	
	}
	
	progressiveness = 0
	
	possible_political_movements = {
		law_no_migration_controls
		law_closed_borders
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_UNEMPLOYED_STATE"
			if = {
				limit = { 
					owner = { 
						NOT = { 
							has_law = law_type:law_closed_borders
						} 
					}
					state = {
						state_unemployment_rate >= 0.1
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = { 
						NOT = { 
							has_law = law_type:law_closed_borders
						} 
					}
					state = {
						state_unemployment_rate >= 0.2
					}
				}
				value = 0.1
			}
			if = {
				limit = { 
					owner = { 
						NOT = { 
							has_law = law_type:law_closed_borders
						} 
					}
					state = {
						state_unemployment_rate >= 0.3
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = { 
						NOT = { 
							has_law = law_type:law_closed_borders
						} 
					}
					state = {
						state_unemployment_rate >= 0.4
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = { 
						NOT = { 
							has_law = law_type:law_closed_borders
						} 
					}
					state = {
						state_unemployment_rate >= 0.5
					}
				}
				value = 0.1
			}
		}	
	}

	on_enact = {
		if = {
			limit = {
				c:CHI ?= this
				has_journal_entry = je_chinese_missions
			}
			every_scope_state = {
				limit = {
					NOT = {
						any_neighbouring_state = {
							is_treaty_port = yes
							owner = {
								religion = {
									has_discrimination_trait = christian
								}
							}
						}
					}
					has_variable = open_to_missionaries_state
				}
				remove_variable = open_to_missionaries_state
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_meiji_diplomacy
				has_law = law_type:law_closed_borders
			}
			add = 1000
		}			
	}
}

law_closed_borders = {
	group = lawgroup_migration
	icon = "gfx/interface/icons/law_icons/closed_borders.dds"

	modifier = {
		country_disallow_migration_bool = yes
		country_disallow_agitator_invites_bool = yes
		country_leverage_resistance_mult = 0.25
	}
	
	progressiveness = -50
	
	possible_political_movements = {
		law_closed_borders
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_UNEMPLOYED_STATE"
			if = {
				limit = { 
					state = {
						state_unemployment_rate >= 0.1
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					state = {
						state_unemployment_rate >= 0.2
					}
				}
				value = 0.1
			}
			if = {
				limit = { 
					state = {
						state_unemployment_rate >= 0.3
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					state = {
						state_unemployment_rate >= 0.4
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					state = {
						state_unemployment_rate >= 0.5
					}
				}
				value = 0.1
			}
		}	
	}

	on_enact = {
		if = {
			limit = {
				c:CHI ?= this
				has_journal_entry = je_chinese_missions
			}
			every_scope_state = {
				limit = {
					NOT = {
						any_neighbouring_state = {
							is_treaty_port = yes
							owner = {
								religion = {
									has_discrimination_trait = christian
								}
							}
						}
					}
					has_variable = open_to_missionaries_state
				}
				remove_variable = open_to_missionaries_state
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿law_no_police = {
	group = lawgroup_policing
	
	icon = "gfx/interface/icons/law_icons/no_police.dds"
	
	progressiveness = 0
	
	possible_political_movements = {
		law_local_police
		law_dedicated_police
		law_militarized_police
	}

	can_enact = {
		custom_tooltip = {
			modifier:country_disallow_law_no_police_bool = no
			text = disallow_law_no_police_tt
		}
	}
	
	pop_support = {
		value = 0
	}

	# AI shouldn't try to abolish institutions
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_local_police = {
	group = lawgroup_policing
	
	icon = "gfx/interface/icons/law_icons/local_police.dds"
	
	unlocking_technologies = {
		tech_bureaucracy
	}
	
	progressiveness = -50

	institution = institution_police
	institution_modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.05
		state_turmoil_effects_mult = -0.05
	}
	
	possible_political_movements = {
		law_dedicated_police
		law_militarized_police
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_policing_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.25
			}
		}
	}
	
	# Don't return to local police if we have something more advanced
	ai_will_do = {
		NOR = {
			has_law = law_type:law_dedicated_police
			has_law = law_type:law_militarized_police
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_local_police
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_local_police
				scope:target_country = {
					has_law = law_type:law_no_police
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = 10
		}
	}
}

law_dedicated_police = {
	group = lawgroup_policing
	
	icon = "gfx/interface/icons/law_icons/dedicated_police.dds"
	
	progressiveness = 50

	unlocking_technologies = {
		law_enforcement
	}

	modifier = {
		country_institution_police_max_investment_add = 2
	}

	institution = institution_police
	institution_modifier = {
		state_radicals_from_sol_change_mult = -0.05
	}
	
	possible_political_movements = {
		law_militarized_police
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_policing_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_SOLDIERS"
			if = {
				limit = {
					NOT = {
						owner = {
							has_law = law_type:law_militarized_police
						}
					}
					is_pop_type = soldiers
				}
				value = 0.33
			}
		}
		add = {
			desc = "POP_OFFICERS"
			if = {
				limit = {
					NOT = {
						owner = {
							has_law = law_type:law_militarized_police
						}
					}
					is_pop_type = officers
				}
				value = 0.33
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_dedicated_police
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_dedicated_police
				scope:target_country = {
					has_law = law_type:law_no_police
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = 10
		}
	}
}

law_militarized_police = {
	group = lawgroup_policing
	
	icon = "gfx/interface/icons/law_icons/militarized_police.dds"
	
	progressiveness = -100

	unlocking_technologies = {
		mass_surveillance
	}

	modifier = {
		country_institution_police_max_investment_add = 2
	}

	institution = institution_police
	institution_modifier = {
		state_radicals_from_sol_change_mult = -0.05
		state_radicals_from_discrimination_mult = -0.05
		interest_group_ig_armed_forces_pol_str_mult = 0.10
		state_mortality_turmoil_mult = 0.004
	}
	
	possible_political_movements = {
		law_dedicated_police
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_policing_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_SOLDIERS"
			if = {
				limit = {
					is_pop_type = soldiers
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_OFFICERS"
			if = {
				limit = {
					is_pop_type = officers
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_militarized_police
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_militarized_police
				scope:target_country = {
					has_law = law_type:law_no_police
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = 10
		}
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_no_womens_rights = {
	group = lawgroup_rights_of_women
	icon = "gfx/interface/icons/law_icons/no_womens_rights.dds"
	
	progressiveness = -100
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	modifier = {
		state_birth_rate_mult = 0.05
	}
	
	possible_political_movements = {
		law_women_own_property
	}
	
	pop_support = {
		value = 0
	}

	ai_will_do = {
		literacy_rate < 0.4
		exists = ruler
		ruler = { 
			has_ideology = ideology:ideology_traditionalist 
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_women_own_property = {
	group = lawgroup_rights_of_women
	icon = "gfx/interface/icons/law_icons/women_own_property.dds"
	
	progressiveness = -50
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	modifier = {
		state_working_adult_ratio_add = 0.05
	}
	
	possible_political_movements = {
		law_no_womens_rights
		law_women_in_the_workplace
	}

	pop_support = {
		value = 0
		add = {
			desc = "ALL_POPS"
			if = {
				limit = {
					owner = {
						has_law = law_type:law_no_womens_rights
					}
				}
				value = 0.05
			}
			if = {
				limit = {
					owner = {
						has_law = law_type:law_no_womens_rights
						has_technology_researched = feminism
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = {
						has_law = law_type:law_no_womens_rights
						has_technology_researched = feminism
						has_technology_researched = political_agitation
					}
				}
				value = 0.1
			}
		}
	}
	
	ai_will_do = {
		OR = {
			has_law = law_type:law_no_womens_rights
			AND = {
				exists = ruler
				ruler = { 
					has_ideology = ideology:ideology_traditionalist 
				}		
			}
		}
	}	

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_women_in_the_workplace = {
	group = lawgroup_rights_of_women
	icon = "gfx/interface/icons/law_icons/women_in_the_workplace.dds"
	
	progressiveness = 0
	
	unlocking_technologies = {
		feminism
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	modifier = {
		state_working_adult_ratio_add = 0.1
		state_birth_rate_mult = -0.05
	}
	
	possible_political_movements = {
		law_women_own_property
		law_womens_suffrage
	}

	pop_support = {
		value = 0
		add = {
			desc = "ALL_POPS"
			if = {
				limit = {
					owner = {
						OR = {
							has_law = law_type:law_no_womens_rights
							has_law = law_type:law_women_own_property
						}
					}
				}
				value = 0.05
			}
			if = {
				limit = {
					owner = {
						OR = {
							has_law = law_type:law_no_womens_rights
							has_law = law_type:law_women_own_property
						}
						has_technology_researched = feminism
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = {
						OR = {
							has_law = law_type:law_no_womens_rights
							has_law = law_type:law_women_own_property
						}
						has_technology_researched = feminism
						has_technology_researched = political_agitation
					}
				}
				value = 0.1
			}
		}
	}
	
	ai_will_do = {
		OR = {
			has_law = law_type:law_no_womens_rights
			has_law = law_type:law_women_own_property
			AND = {
				exists = ruler
				ruler = { 
					has_ideology = ideology:ideology_traditionalist 
				}		
			}
		}
	}	

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_womens_suffrage = {
	group = lawgroup_rights_of_women
	icon = "gfx/interface/icons/law_icons/womens_suffrage.dds"
	
	progressiveness = 100
	
	unlocking_technologies = {
		feminism
	}

	unlocking_laws = {
		law_census_voting
		law_landed_voting
		law_wealth_voting
		law_universal_suffrage
		law_single_party_state
		law_anarchy
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	modifier = {
		state_working_adult_ratio_add = 0.15
		state_birth_rate_mult = -0.05
		state_dependent_political_participation_add = 0.33
	}
	
	possible_political_movements = {
		law_women_own_property
	}

	pop_support = {
		value = 0.05
		add = {
			desc = "ALL_POPS"
			if = {
				limit = {
					owner = {
						has_technology_researched = feminism
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = {
						has_technology_researched = feminism
						has_technology_researched = political_agitation
					}
				}
				value = 0.1
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}
﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_slavery_banned = {
	group = lawgroup_slavery
	
	progressiveness = 100
	
	icon = "gfx/interface/icons/law_icons/slavery_banned.dds"
	
	on_activate = {
		set_variable = {
			name = slavery_recently_abolished
			value = yes
			days = 1825
		}
		every_scope_state = {
			limit = { 
				any_scope_pop = {
					is_pop_type = slaves
				}
			}
			set_variable = {
				name = former_slave_state
				value = yes
				days = 1825
			}			
		}
		custom_tooltip = {
			text = liberate_slaves_tt
			liberate_slaves = yes
		}		
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_SLAVES"
			if = {
				limit = { 
					is_pop_type = slaves
				}
				value = 1
			}
		}
		add = {
			desc = "POP_ACADEMICS"
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.1
			}
		}
		add = {
			desc = "POP_CLERGYMEN"
			if = {
				limit = {
					is_pop_type = clergymen
				}
				value = 0.05
			}
		}
		
		# Human rights makes literate pops support abolition
		add = {
			desc = "human_rights"
			
			if = {
				limit = { 
					owner = { has_technology_researched = human_rights }
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}
	}
	
	revolution_state_weight = {
		value = 1
		if = {
		   limit = { 
			OR = {
			   is_slave_state = yes 
			   has_variable = former_slave_state			
			}
		   }
		   if = {
		      limit = { 
				owner = { # special logic for ACW to try and force a historical split of states
					OR = {
						has_law = law_type:law_legacy_slavery
						has_variable = slavery_recently_abolished
					}				
					any_scope_state = {
						is_slave_state = no 
						NOT = { has_variable = former_slave_state }					
					}
				}	
			 }
			  multiply = 0.0
		   }
		   else = {
			  multiply = 0.25
		   }	
		}	
	}

	ai_enact_weight_modifier = {
		value = 0
		# Brazilian AI is less likely to pursue slavery banned if there are no abolitionists in power.
		if = {
			limit = { 
				c:BRZ ?= this
				has_law = law_type:law_slave_trade
				NOR = {
					any_interest_group = {
						is_in_government = yes
						leader = {
							has_ideology = ideology:ideology_abolitionist
						}
					}
					ruler = { has_ideology = ideology:ideology_abolitionist }
					heir = { has_ideology = ideology:ideology_abolitionist }
				}
				scope:law = law_type:law_slavery_banned
			}
			add = -100
		}
		#Petitions
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}

		# This was funny while it lasted.
		if = {
			limit = { 
				has_law = law_type:law_council_republic
			}
			add = 750
		}
		
		# Strong tendency towards abolitionism in the late game
		if = {
			limit = {
				has_technology_researched = human_rights
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_slavery_banned }				
				}	
			}
			add = 1000
		}			
	}
	
	ai_impose_chance = {
		value = 0		
		
		if = {
			limit = {
				has_law = law_type:law_slavery_banned
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				has_technology_researched = civilizing_mission				
			}
			
			add = base_impose_law_weight
			if = {
				limit = {
					OR = {
						has_strategy = ai_strategy_progressive_agenda
						has_strategy = ai_strategy_egalitarian_agenda
					}
				}
				multiply = 5
			}			
		}
	}
}

law_debt_slavery = {
	group = lawgroup_slavery
	
	progressiveness = 0
	
	icon = "gfx/interface/icons/law_icons/debt_slavery.dds"
	
	disallowing_laws = {
		law_multicultural
	}

	on_activate = {
		ig:ig_landowners ?= { 
			if = {
				limit = {
					NOT = { has_ideology = ideology:ideology_pro_slavery }
				}			
				add_ideology = ideology_pro_slavery 
			}
		}
	}
	
	modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.25
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_SLAVES"
			if = {
				limit = { 
					is_pop_type = slaves
				}
				value = 1
			}
		}	
		add = {
			desc = "POP_ACADEMICS"
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.1
			}
		}
		add = {
			desc = "POP_CLERGYMEN"
			if = {
				limit = {
					is_pop_type = clergymen
				}
				value = 0.05
			}
		}
	}
	
	possible_political_movements = {
		law_slavery_banned
		law_legacy_slavery
	}
	
	# AI should never enact debt slavery
	ai_will_do = {
		always = no
	}
	
	revolution_state_weight = {
		value = 1
		if = {
		   limit = { 
			  is_slave_state = no 
			  NOT = { has_variable = former_slave_state }
		   }	
		   if = {
		      limit = { 
				owner = { # special logic for ACW to try and force a historical split of states 					
					has_journal_entry = je_acw_countdown
					OR = {
						has_law = law_type:law_legacy_slavery
						has_variable = slavery_recently_abolished
					}
					any_scope_state = {
						OR = {
						   is_slave_state = yes 
						   has_variable = former_slave_state			
						}				
					}					
				} 
			  }	  
			  multiply = 0.0
		   }
		   else = {
			  multiply = 0.25
		   }
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_slave_trade = {
	group = lawgroup_slavery
	
	progressiveness = 0
	
	icon = "gfx/interface/icons/law_icons/slave_trade.dds"
	
	disallowing_laws = {
		law_cultural_exclusion
		law_multicultural
	}
	
	on_activate = {
		if = {
			limit = { has_variable = slavery_recently_abolished }
			custom_tooltip = {
				text = enslave_discriminated_farm_workers_tt
				every_scope_state = {
					limit = { has_variable = former_slave_state }
					enslave_discriminated_farm_workers = yes
				}	
			}	
			remove_variable = slavery_recently_abolished
			every_scope_state = {
				remove_variable = former_slave_state
			}			
		}

		ig:ig_landowners ?= { 
			if = {
				limit = {
					NOT = { has_ideology = ideology:ideology_pro_slavery }
				}			
				add_ideology = ideology_pro_slavery 
			}
		}
	}
	
	possible_political_movements = {
		law_slavery_banned
		law_legacy_slavery
	}

	pop_support = {
		value = 0
		
		add = {
			desc = "POP_ARISTOCRATS"
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.1
			}
		}
	}
	
	modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.5
	}	
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_slaver
		}
	}
	
	revolution_state_weight = {
		value = 1
		if = {
		   limit = { 
			  is_slave_state = no 
			  NOT = { has_variable = former_slave_state }
		   }	
		   if = {
		      limit = { 
				owner = { # special logic for ACW to try and force a historical split of states					
					has_journal_entry = je_acw_countdown
					OR = {
						has_law = law_type:law_legacy_slavery
						has_variable = slavery_recently_abolished
					}
					any_scope_state = {
						OR = {
						   is_slave_state = yes 
						   has_variable = former_slave_state			
						}				
					}						
				} 
			  }	  
			  multiply = 0.0
		   }
		   else = {
			  multiply = 0.25
		   }
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_legacy_slavery = {
	group = lawgroup_slavery
	
	progressiveness = 50
	
	icon = "gfx/interface/icons/law_icons/legacy_slavery.dds"

	# no need to add disallowing_laws here since it can only be enacted from Slave Trade
	
	unlocking_laws = {
		law_slave_trade
	}
	
	on_activate = {
		if = {
			limit = { has_variable = slavery_recently_abolished }
			custom_tooltip = {
				text = enslave_discriminated_farm_workers_tt
				every_scope_state = {
					limit = { has_variable = former_slave_state }
					enslave_discriminated_farm_workers = yes
				}			
			}
			remove_variable = slavery_recently_abolished
			every_scope_state = {
				remove_variable = former_slave_state
			}
		}

		ig:ig_landowners ?= { 
			if = {
				limit = {
					NOT = { has_ideology = ideology:ideology_pro_slavery }
				}			
				add_ideology = ideology_pro_slavery 
			}
		}
	}	
		
	modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.25
	}	

	possible_political_movements = {
		law_slavery_banned
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.1
			}
		}
		add = {
			desc = "POP_CLERGYMEN"
			if = {
				limit = {
					is_pop_type = clergymen
				}
				value = 0.05
			}
		}
		# Brazilian pops are more likely to pursue legacy slavery if the Aberdeen Act is being enforced
		if = {
			desc = "aberdeen_act_pop_support"
			limit = {
				c:BRZ ?= owner
				owner = { 
					has_law = law_type:law_slave_trade 
					has_modifier = aberdeen_act_enforced_brz
				}
			}
			value = 0.1
		}
	}

	revolution_state_weight = {
		value = 1
		if = {
		   limit = { 
			  is_slave_state = no 
			  NOT = { has_variable = former_slave_state }
		   }	
		   if = {
		      limit = { 
				owner = { # special logic for ACW to try and force a historical split of states					
					has_journal_entry = je_acw_countdown
					OR = {
						has_law = law_type:law_legacy_slavery
						has_variable = slavery_recently_abolished
					}
					any_scope_state = {
						OR = {
						   is_slave_state = yes 
						   has_variable = former_slave_state			
						}				
					}						
				} 
			  } 
			  multiply = 0.0
		   }
		   else = {
			  multiply = 0.25
		   }
		}
	}
	ai_enact_weight_modifier = {
		value = 0
		#Brazilian AI is more likely to pursue legacy slavery if there are no abolitionists in power.
		if = {
			limit = { 
				c:BRZ ?= this
				has_law = law_type:law_slave_trade
				NOR = {
					any_interest_group = {
						is_in_government = yes
						leader = {
							has_ideology = ideology:ideology_abolitionist
						}
					}
					ruler = { has_ideology = ideology:ideology_abolitionist }
					heir = { has_ideology = ideology:ideology_abolitionist }
				}
				scope:law = law_type:law_legacy_slavery
			}
			add = 50
		}
		# Brazilian AI is more likely to pursue legacy slavery if the Aberdeen Act is being enforced
		if = {
			limit = { 
				c:BRZ ?= this
				has_law = law_type:law_slave_trade
				has_modifier = aberdeen_act_enforced_brz
				scope:law = law_type:law_legacy_slavery
			}
			add = 50
		}
		#Petitions
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
}
﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_consumption_based_taxation = {
	group = lawgroup_taxation
	
	progressiveness = -100
	
	icon = "gfx/interface/icons/law_icons/consumption_based_taxation.dds"
	
	modifier = {
		state_bureaucracy_population_base_cost_factor_mult = -0.25
		country_consumption_tax_cost_mult = -0.50
	}
	
	tax_modifier_very_low = {
		tax_consumption_add = 0.20
	}	
	
	tax_modifier_low = {
		tax_consumption_add = 0.275
	}
	
	tax_modifier_medium = {
		tax_consumption_add = 0.35
	}	
	
	tax_modifier_high = {
		tax_consumption_add = 0.425
	}
	
	tax_modifier_very_high = {
		tax_consumption_add = 0.50
	}	
	
	possible_political_movements = {
		law_per_capita_based_taxation
		law_land_based_taxation
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_PEASANTS"
			if = {
				limit = {
					owner = {
						has_law = law_type:law_land_based_taxation
					}
					is_pop_type = peasants
				}
				value = 0.75
			}
		}
	}
	
	# AI shouldn't change to consumption-based-taxation as it's likely to wreck their economy
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_land_based_taxation = {
	group = lawgroup_taxation
	
	icon = "gfx/interface/icons/law_icons/land_based_taxation.dds"
	
	progressiveness = -50
	
	tax_modifier_very_low = {
		tax_consumption_add = 0.20
		tax_land_add = 0.40
		tax_income_add = 0.04
	}	
	
	tax_modifier_low = {
		tax_consumption_add = 0.275
		tax_land_add = 0.55
		tax_income_add = 0.055
	}
	
	tax_modifier_medium = {
		tax_consumption_add = 0.35
		tax_land_add = 0.7
		tax_income_add = 0.07
	}	
	
	tax_modifier_high = {
		tax_consumption_add = 0.425
		tax_land_add = 0.85
		tax_income_add = 0.085
	}
	
	tax_modifier_very_high = {
		tax_consumption_add = 0.50
		tax_land_add = 1.00
		tax_income_add = 0.10
	}	
	
	possible_political_movements = {
		law_per_capita_based_taxation
		law_proportional_taxation
	}

	pop_support = {
		value = 0
		
		add = {
			desc = "POP_ARISTOCRATS"
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.33
			}
		}
	}

	# AI shouldn't change to land based taxation from more advanced taxation forms
	ai_will_do = {
		has_law = law_type:law_consumption_based_taxation
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_per_capita_based_taxation = {
	group = lawgroup_taxation
	
	progressiveness = 0
	
	icon = "gfx/interface/icons/law_icons/per_capita_based_taxation.dds"
	
	disallowing_laws = {
		law_traditionalism
	}
	
	unlocking_technologies = {
		currency_standards
	}
	
	tax_modifier_very_low = {
		tax_consumption_add = 0.20
		tax_per_capita_add = 0.40
		tax_land_add = 0.20
		tax_income_add = 0.10
	}	
	
	tax_modifier_low = {
		tax_consumption_add = 0.275
		tax_per_capita_add = 0.55
		tax_land_add = 0.275
		tax_income_add = 0.125
	}
	
	tax_modifier_medium = {
		tax_consumption_add = 0.35
		tax_per_capita_add = 0.70
		tax_land_add = 0.35
		tax_income_add = 0.15
	}	
	
	tax_modifier_high = {
		tax_consumption_add = 0.425
		tax_per_capita_add = 0.85
		tax_land_add = 0.425
		tax_income_add = 0.175
	}
	
	tax_modifier_very_high = {
		tax_consumption_add = 0.50
		tax_per_capita_add = 1.0
		tax_land_add = 0.50
		tax_income_add = 0.20
	}	
	
	possible_political_movements = {
		law_graduated_taxation
		law_proportional_taxation
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_PEASANTS"
			if = {
				limit = {
					owner = {
						has_law = law_type:law_land_based_taxation
					}
					is_pop_type = peasants
				}
				value = 0.75
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				OR = {
					has_journal_entry = je_sick_man_bureaucracy
					has_modifier = shogun_ig_forced_to_open_market
					has_journal_entry = je_meiji_main
				}
				has_law = law_type:law_land_based_taxation
			}
			add = 5000
		}			
	}
}

law_proportional_taxation = {
	group = lawgroup_taxation
	
	progressiveness = 50
	
	icon = "gfx/interface/icons/law_icons/proportional_taxation.dds"
	
	disallowing_laws = {
		law_traditionalism
	}	
	
	unlocking_technologies = {
		egalitarianism
	}

	tax_modifier_very_low = {
		tax_consumption_add = 0.20
		tax_income_add = 0.15
		tax_dividends_add = 0.025
	}	
	
	tax_modifier_low = {
		tax_consumption_add = 0.275
		tax_income_add = 0.20
		tax_dividends_add = 0.05
	}
	
	tax_modifier_medium = {
		tax_consumption_add = 0.35
		tax_income_add = 0.25
		tax_dividends_add = 0.1
	}	
	
	tax_modifier_high = {
		tax_consumption_add = 0.425
		tax_income_add = 0.30
		tax_dividends_add = 0.15
	}
	
	tax_modifier_very_high = {
		tax_consumption_add = 0.50
		tax_income_add = 0.35
		tax_dividends_add = 0.20
	}	

	possible_political_movements = {
		law_per_capita_based_taxation
		law_proportional_taxation
	}	

	pop_support = {
		value = 0
		add = {
			desc = "POP_PEASANTS"
			if = {
				limit = {
					owner = {
						has_law = law_type:law_land_based_taxation
					}
					is_pop_type = peasants
				}
				value = 0.75
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				OR = {
					has_journal_entry = je_sick_man_bureaucracy
					has_modifier = shogun_ig_forced_to_open_market
					has_journal_entry = je_meiji_main
				}
				has_law = law_type:law_land_based_taxation
			}
			add = 5000
		}		
	}
}

law_graduated_taxation = {
	group = lawgroup_taxation
	
	progressiveness = 100
	
	icon = "gfx/interface/icons/law_icons/graduated_taxation.dds"
	
	disallowing_laws = {
		law_traditionalism
	}	
	
	unlocking_technologies = {
		socialism
	}
	
	tax_modifier_very_low = {
		tax_consumption_add = 0.20
		tax_income_add = 0.10
		tax_dividends_add = 0.1
	}	
	
	tax_modifier_low = {
		tax_consumption_add = 0.275
		tax_income_add = 0.125
		tax_dividends_add = 0.15
	}
	
	tax_modifier_medium = {
		tax_consumption_add = 0.35
		tax_income_add = 0.15
		tax_dividends_add = 0.2
	}	
	
	tax_modifier_high = {
		tax_consumption_add = 0.425
		tax_income_add = 0.175
		tax_dividends_add = 0.25
	}
	
	tax_modifier_very_high = {
		tax_consumption_add = 0.50
		tax_income_add = 0.20
		tax_dividends_add = 0.3
	}

	possible_political_movements = {
		law_proportional_taxation
	}	

	pop_support = {
		value = 0
		add = {
			desc = "POP_PEASANTS"
			if = {
				limit = {
					owner = {
						has_law = law_type:law_land_based_taxation
					}
					is_pop_type = peasants
				}
				value = 0.75
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_mercantilism = {
	group = lawgroup_trade_policy
	
	icon = "gfx/interface/icons/law_icons/mercantilism.dds"
	
	progressiveness = 0
	
	unlocking_technologies = {
		international_trade
	}
	
	tariff_modifier_no_priority = {
		tariff_import_add = 0.15
		tariff_export_add = 0.05
	}	
	
	tariff_modifier_export_priority = {
		tariff_import_add = 0.45
	}
	
	tariff_modifier_import_priority = {
		tariff_export_add = 0.15
	}

	possible_political_movements = {
		law_protectionism
		law_free_trade
	}	
	
	pop_support = {
		value = 0
	}

	# Don't change back to mercantilism once we have protectionism or free trade
	ai_will_do = {
		NOR = {
			has_law = law_type:law_protectionism
			has_law = law_type:law_free_trade
		}	
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_meiji_diplomacy
				has_law = law_type:law_isolationism
			}
			add = 1000
		}		
	}
}

law_protectionism = {
	group = lawgroup_trade_policy
	
	icon = "gfx/interface/icons/law_icons/protectionism.dds"
	
	progressiveness = 50
	
	unlocking_technologies = {
		stock_exchange
	}
	
	tariff_modifier_no_priority = {
		tariff_export_add = 0.10
		tariff_import_add = 0.10
	}	
	
	tariff_modifier_export_priority = {
		tariff_import_add = 0.30
	}
	
	tariff_modifier_import_priority = {
		tariff_export_add = 0.30
	}	
	
	possible_political_movements = {
		law_free_trade
	}	

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_meiji_diplomacy
				has_law = law_type:law_isolationism
			}
			add = 1000
		}				
	}
}

law_free_trade = {
	group = lawgroup_trade_policy
	
	icon = "gfx/interface/icons/law_icons/free_trade.dds"
	
	progressiveness = 50
	
	disallowing_laws = {
		law_command_economy
	}	
	
	unlocking_technologies = {
		stock_exchange
	}
	
	on_enact = {
		if = {
			limit = { is_banning_goods = g:opium }
			remove_banned_goods = g:opium
		}	
		if = {
			limit = { is_banning_goods = g:liquor }
			remove_banned_goods = g:liquor
		}
	}
	
	modifier = {
		country_trade_route_competitiveness_mult = 0.5
		country_trade_route_quantity_mult = 0.5
		country_trade_route_cost_mult = -0.5
		country_leverage_resistance_mult = -0.25
	}
	
	possible_political_movements = {
		law_protectionism
	}	

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_meiji_diplomacy
				has_law = law_type:law_isolationism
			}
			add = 1000
		}		
	}
}

law_isolationism = {
	group = lawgroup_trade_policy
	
	icon = "gfx/interface/icons/law_icons/isolationism.dds"
	
	progressiveness = -50
	
	disallowing_laws = {
		law_laissez_faire
	}
	
	can_enact = {
		is_in_power_bloc = no
	}
	
	modifier = {
		country_authority_mult = 0.5
		state_tax_capacity_mult = 0.25
		country_tech_spread_mult = -0.15
		
		country_leverage_resistance_mult = 1.0
		
		country_max_declared_interests_mult = -0.5
		
		market_disallow_trade_routes_bool = yes
	}
	
	possible_political_movements = {
		law_protectionism
		law_free_trade
	}	
	
	pop_support = {
		value = 0
	}
	
	ai_will_do = {
		OR = {
			has_journal_entry = je_gyojo_shinwon
			ruler = {
				OR = {
					has_ideology = ideology:ideology_traditionalist
					has_ideology = ideology:ideology_vanguardist
				}
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}
﻿law_no_social_security = {
	group = lawgroup_welfare
	
	icon = "gfx/interface/icons/law_icons/no_social_security.dds"
	
	progressiveness = 0
	
	possible_political_movements = {
		law_poor_laws
		law_wage_subsidies
	}
	
	pop_support = {
		value = 0
	}

	# AI will never abolish institutions entirely
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_poor_laws = {
	group = lawgroup_welfare
	
	icon = "gfx/interface/icons/law_icons/poor_laws.dds"
	
	progressiveness = 25
	
	unlocking_technologies = {
		democracy
	}
	
	institution = institution_social_security
	institution_modifier = {
		state_political_strength_from_welfare_mult = -0.15
	}
	
	possible_political_movements = {
		law_wage_subsidies
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_POVERTY"			
			# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
			value = 15
			subtract = standard_of_living
			multiply = 0.1
			min = 0
			max = 1					
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_wage_subsidies = {
	group = lawgroup_welfare
	
	icon = "gfx/interface/icons/law_icons/wage_controls.dds"
	
	progressiveness = 75
	
	unlocking_technologies = {
		labor_movement
	}
	
	modifier = {
		country_institution_social_security_max_investment_add = 2
	}

	institution = institution_social_security
	
	possible_political_movements = {
		law_old_age_pension
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_POVERTY"		
			if = {
				limit = { 
					owner = { NOT = { has_law = law_type:law_old_age_pension } }
				}
				
				# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
				value = 15
				subtract = standard_of_living
				multiply = 0.1
				min = 0
				max = 1
			}				
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_old_age_pension = {
	group = lawgroup_welfare
	
	icon = "gfx/interface/icons/law_icons/old_age_pension.dds"
	
	progressiveness = 100
	
	unlocking_technologies = {
		human_rights
	}	
	
	modifier = {
		country_institution_social_security_max_investment_add = 2
	}

	institution = institution_social_security
	institution_modifier = {
		state_dependent_wage_mult = 0.2
		state_working_adult_ratio_add = -0.01
		state_dependent_political_participation_add = 0.02
	}
	
	# Below needed since this Law changes Politial Participation
	on_activate = {
		recalculate_pop_ig_support = yes
	}
	
	on_deactivate = {
		recalculate_pop_ig_support = yes
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_POVERTY"			
			# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
			value = 15
			subtract = standard_of_living
			multiply = 0.1
			min = 0
			max = 1
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿﻿law_peasant_levies = {
	group = lawgroup_army_model
	icon = "gfx/interface/icons/law_icons/peasant_levies.dds"
	
	progressiveness = -50
	
	modifier = {
		unit_morale_loss_mult = 0.1
		unit_experience_gain_mult = -0.25
		state_conscription_rate_add = 0.04
		country_aristocrats_pol_str_mult = 0.25
		country_military_goods_cost_mult = -0.1
		state_building_barracks_max_level_add = 25
		state_building_conscription_center_max_level_add = 25
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_army_model_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	on_enact = {
		custom_tooltip = QUALIFICATIONS_OFFICERS_PEASANT_LEVIES_DESC
		if = {
			limit = {
				NOT = {
					has_law = law_type:law_peasant_levies
				}
			}
			custom_tooltip = aristocrats_af_ig_shift_effect_tt
		}
		if = {
			limit = {
				has_law = law_type:law_professional_army
			}
			custom_tooltip = military_pops_af_ig_shift_effect_negative_tt
			custom_tooltip = non_military_pops_af_ig_shift_effect_negative_tt
		}
	}
	
	possible_political_movements = {
		law_professional_army
		law_mass_conscription
		law_national_militia
	}

	pop_support = {
		value = 0
		# Aristocrats like feudalism
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.33
			}
		}
	}

	# AI will never return to peasant levies
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_professional_army = {
	group = lawgroup_army_model
	icon = "gfx/interface/icons/law_icons/professional_army.dds"
	
	progressiveness = 0
	
	unlocking_technologies = { military_drill }
	
	modifier = {
		unit_morale_loss_mult = -0.1
		state_conscription_rate_add = 0.01
		interest_group_ig_armed_forces_pol_str_mult = 0.25
		state_building_barracks_max_level_add = 100
		state_building_conscription_center_max_level_add = 50
		unit_experience_gain_mult = 0.25
	}
	
	possible_political_movements = {
		law_mass_conscription
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_army_model_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	on_enact = {
		if = {
			limit = {
				has_law = law_type:law_peasant_levies
			}
			custom_tooltip = aristocrats_af_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				NOT = {
					has_law = law_type:law_professional_army
				}
			}
			custom_tooltip = non_military_pops_af_ig_shift_effect_tt
			custom_tooltip = military_pops_af_ig_shift_effect_tt
		}
	}

	pop_support = {
		value = 0
		# Officers like professionalism
		add = {
			desc = "POP_OFFICERS"			
			if = {
				limit = { 
					is_pop_type = officers
				}
				value = 0.5
			}
		}
		# soldiers are broadly in favor of this also
		add = {
			desc = "POP_SOLDIERS"		
			if = {
				limit = { 
					is_pop_type = soldiers
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_sick_man_army
				has_law = law_type:law_peasant_levies
			}
			add = 1000
		}			
		
		# AI should really try to get out of Peasant Levies under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_peasant_levies
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_professional_army }	
					has_technology_researched = napoleonic_warfare
				}	
			}
			add = 1000
		}		
	}
}

law_national_militia = {
	group = lawgroup_army_model
	icon = "gfx/interface/icons/law_icons/national_militia.dds"
	
	progressiveness = 0
	
	unlocking_technologies = { mandatory_service }
	
	modifier = {
		unit_morale_loss_mult = -0.05
		state_conscription_rate_add = 0.05
		interest_group_ig_armed_forces_pol_str_mult = -0.25
		country_leverage_resistance_mult = 0.5
		state_building_barracks_max_level_add = 5
		state_building_conscription_center_max_level_add = 100
	}
	
	possible_political_movements = {
		law_professional_army
		law_mass_conscription
	}

	can_enact = {
		OR = {
			is_power_bloc_leader = no
			power_bloc ?= {
				NOT = { has_identity = identity:identity_military_treaty_organization }
			}
		}
	}
	
	on_enact = {
		if = {
			limit = {
				has_law = law_type:law_peasant_levies
			}
			custom_tooltip = aristocrats_af_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				has_law = law_type:law_professional_army
			}
			custom_tooltip = military_pops_af_ig_shift_effect_negative_tt
			custom_tooltip = non_military_pops_af_ig_shift_effect_negative_tt
		}
	}

	pop_support = {
		value = 0
		# Farmers like waving a rifle around and telling people to get off their land
		add = {
			desc = "POP_FARMERS"			
			if = {
				limit = { 
					is_pop_type = farmers
				}
				value = 0.25
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_pacifist
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_mass_conscription = {
	group = lawgroup_army_model
	icon = "gfx/interface/icons/law_icons/mass_conscription.dds"
	
	progressiveness = 50
	
	unlocking_technologies = { enlistment_offices }
	
	modifier = {
		unit_morale_loss_mult = 0.05
		state_conscription_rate_add = 0.03
		building_training_rate_mult = 1
		state_building_barracks_max_level_add = 100
		state_building_conscription_center_max_level_add = 100
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_army_model_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	on_enact = {
		if = {
			limit = {
				has_law = law_type:law_peasant_levies
			}
			custom_tooltip = aristocrats_af_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				has_law = law_type:law_professional_army
			}
			custom_tooltip = military_pops_af_ig_shift_effect_negative_tt
			custom_tooltip = non_military_pops_af_ig_shift_effect_negative_tt
		}
	}
	
	possible_political_movements = {
		law_mass_conscription
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_sick_man_army
				has_law = law_type:law_peasant_levies
			}
			add = 1000
		}			
		
		# AI should really try to get out of Peasant Levies under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_peasant_levies
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_professional_army }	
					has_technology_researched = napoleonic_warfare
				}	
			}
			add = 1000
		}		
	}
}

﻿law_hereditary_bureaucrats = {
	group = lawgroup_bureaucracy
	
	icon = "gfx/interface/icons/law_icons/hereditary_bureaucrats.dds"
	
	progressiveness = -50
	
	modifier = {
		state_bureaucracy_population_base_cost_factor_mult = -0.25
		country_aristocrats_pol_str_mult = 0.25
	}

	on_enact = {
		custom_tooltip = urban_aristocrats_int_ig_shift_effect_tt
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
			}
			custom_tooltip = bureaucrats_pb_ig_shift_effect_negative_tt
		}
	}

	disallowing_laws = {
		law_council_republic
	}
	
	possible_political_movements = {
		law_appointed_bureaucrats
		law_elected_bureaucrats
	}

	pop_support = {
		value = 0
		# Aristocrats like nepotism
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.25
			}
		}
	}

	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_traditionalist
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_appointed_bureaucrats = {
	group = lawgroup_bureaucracy
	
	icon = "gfx/interface/icons/law_icons/appointed_bureaucrats.dds"
	
	progressiveness = 0
	
	modifier = {
		country_bureaucrats_pol_str_mult = 0.25
		state_tax_capacity_mult = 0.25
	}
	
	possible_political_movements = {
		law_elected_bureaucrats
	}

	on_enact = {
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
			}
			custom_tooltip = bureaucrats_pb_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				has_law = law_type:law_hereditary_bureaucrats
			}
			custom_tooltip = urban_aristocrats_int_ig_shift_effect_negative_tt
		}
	}

	pop_support = {
		value = 0
		# Academics like technocracy
		add = {
			desc = "POP_ACADEMICS"			
			if = {
				limit = { 
					is_pop_type = academics
				}
				value = 0.33
			}
		}
		# Bureuacrats like non-hereditary
		add = {
			desc = "POP_BUREAUCRATS"
			if = {
				limit = {
					owner = { has_law = law_type:law_hereditary_bureaucrats }
					is_pop_type = bureaucrats
				}
			}
			value = 0.25
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_sick_man_bureaucracy
				has_law = law_type:law_hereditary_bureaucrats
			}
			add = 1000
		}		
	}
}

law_elected_bureaucrats = {
	group = lawgroup_bureaucracy
	
	icon = "gfx/interface/icons/law_icons/elected_bureaucrats.dds"
	
	progressiveness = 50

	disallowing_laws = {
		law_autocracy 
		law_oligarchy
		law_technocracy
		law_elder_council
	}

	on_enact = {
		custom_tooltip = bureaucrats_pb_ig_shift_effect_tt
		if = {
			limit = {
				has_law = law_type:law_hereditary_bureaucrats
			}
			custom_tooltip = urban_aristocrats_int_ig_shift_effect_negative_tt
		}
	}
	
	modifier = {
		country_bureaucracy_investment_cost_factor_mult = -0.15
	}
	
	possible_political_movements = {
		law_appointed_bureaucrats
	}

	pop_support = {
		value = 0
		# Bureuacrats like non-hereditary
		add = {
			desc = "POP_BUREAUCRATS"
			if = {
				limit = {
					owner = { has_law = law_type:law_hereditary_bureaucrats }
					is_pop_type = bureaucrats
				}
			}
			value = 0.25
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}		
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_child_labor_allowed = {
	group = lawgroup_childrens_rights
	
	icon = "gfx/interface/icons/law_icons/child_labor_allowed.dds"
	
	progressiveness = -50

	modifier = {
		state_laborers_mortality_mult = 0.05
		state_machinists_mortality_mult = 0.05
		state_farmers_mortality_mult = 0.05
		state_peasants_mortality_mult = 0.05
		
		state_dependent_wage_mult = 0.30
	}
	
	possible_political_movements = {
		law_restricted_child_labor
	}

	pop_support = {
		value = 0
		# Get back in the mines!
		add = {
			desc = "POP_CAPITALISTS"
			if = {
				limit = {
					is_pop_type = capitalists
				}
			}
			value = 0.25
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_market_liberal
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_restricted_child_labor = {
	group = lawgroup_childrens_rights
	
	icon = "gfx/interface/icons/law_icons/restricted_child_labor.dds"
	
	progressiveness = 0

	unlocking_technologies = {
		labor_movement 
	}
	
	modifier = {
		state_laborers_mortality_mult = 0.02
		state_farmers_mortality_mult = 0.02
		state_peasants_mortality_mult = 0.02
		
		state_dependent_wage_mult = 0.15
		
		country_institution_schools_max_investment_add = 1
	}
	
	possible_political_movements = {
		law_compulsory_primary_school
	}

	pop_support = {
		value = 0
		# Get back in the mines!
		add = {
			desc = "POP_CAPITALISTS"
			if = {
				limit = {
					owner = { has_law = law_type:law_compulsory_primary_school }
					is_pop_type = capitalists
				}
			}
			value = 0.33
		}
	}
	
	ai_will_do = {
		OR = {
			has_law = law_type:law_child_labor_allowed
			AND = {
				exists = ruler
				ruler = {
					has_ideology = ideology:ideology_market_liberal
				}			
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_compulsory_primary_school = {
	group = lawgroup_childrens_rights
	
	icon = "gfx/interface/icons/law_icons/compulsory_primary_school.dds"
	
	progressiveness = 50

	disallowing_laws = {
		law_no_schools
	}

	unlocking_technologies = {
		human_rights
	}
	
	modifier = {
		country_institution_schools_max_investment_add = 2
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law
# cultural_acceptance_rule and religious_acceptance_rule are triggers in the pop scope used to check if a pop should be accepted or discriminated against

law_state_religion = {
	group = lawgroup_church_and_state
	
	icon = "gfx/interface/icons/law_icons/state_religion.dds"
	
	progressiveness = -50
	
	on_enact = {
		recalculate_pop_ig_support = yes
		if = {
			limit = {
				has_law = law_type:law_state_atheism
			}
			set_state_religion = root.country_definition.religion
		}
		if = {
			limit = {
				has_modifier = antireligious_policies
			}
			remove_modifier = antireligious_policies
		}
	}
	
	religious_acceptance_rule = {
		is_state_religion = scope:country
	}
	
	modifier = {
		interest_group_ig_devout_pol_str_mult = 0.3
		state_radicals_from_sol_change_accepted_religion_mult = -0.1
		state_loyalists_from_sol_change_accepted_religion_mult = 0.1	
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_freedom_of_conscience
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		# Clergy like theocracy
		add = {
			desc = "POP_CLERGYMEN"
			if = {
				limit = {
					is_pop_type = clergymen
				}
			}
			value = 0.25
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_theocrat
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_state_religion
				power_bloc ?= { has_identity = identity:identity_religious }
				religion = scope:target_country.religion			
			}
			
			add = base_impose_law_weight	
			
			# Very important for religious blocs
			if = {
				limit = { scope:target_country = { has_law = law_type:law_freedom_of_conscience } }
				multiply = 2 
			}
			else = {
				multiply = 5
			}
		}
	}
}

law_freedom_of_conscience = {
	group = lawgroup_church_and_state
	
	icon = "gfx/interface/icons/law_icons/freedom_of_conscience.dds"
	
	progressiveness = 0

	unlocking_technologies = {
		rationalism
	}

	disallowing_laws = {
		law_theocracy
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
		if = {
			limit = {
				has_law = law_type:law_state_atheism
			}
			set_state_religion = root.country_definition.religion
		}
		if = {
			limit = {
				has_modifier = antireligious_policies
			}
			remove_modifier = antireligious_policies
		}
	}
	
	religious_acceptance_rule = {
		shares_heritage_trait_with_state_religion = scope:country
	}
	
	modifier = {
		interest_group_ig_devout_pol_str_mult = 0.15
		state_radicals_from_sol_change_accepted_religion_mult = -0.05
		state_loyalists_from_sol_change_accepted_religion_mult = 0.05	
		country_authority_add = 100
	}
	
	possible_political_movements = {
		law_total_separation
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"
			# Academics generally against religious perseecution
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_total_separation }
					}
					is_pop_type = academics
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					religion_accepted = no
					owner = { NOT = { has_law = law_type:law_total_separation } }
				}
				add = 0.5
				
				if = {
					limit = { 
						standard_of_living <= 10
					}
					add = 0.5
				}
			}		
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_sick_man_education
				has_law = law_type:law_state_religion
			}
			add = 1000
		}				
	}
}

law_total_separation = {
	group = lawgroup_church_and_state
	
	icon = "gfx/interface/icons/law_icons/total_separation.dds"
	
	progressiveness = 50

	unlocking_technologies = {
		empiricism
	}

	disallowing_laws = {
		law_theocracy
	}
	
	can_enact = {
		OR = {
			is_power_bloc_leader = no
			power_bloc ?= {
				NOT = { has_identity = identity:identity_religious }
			}
		}
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
		if = {
			limit = {
				has_law = law_type:law_state_atheism
			}
			set_state_religion = root.country_definition.religion
		}
		if = {
			limit = {
				has_modifier = antireligious_policies
			}
			remove_modifier = antireligious_policies
		}
	}
	
	religious_acceptance_rule = {
		always = yes
	}
	
	possible_political_movements = {
		law_freedom_of_conscience
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0

		add = {
			desc = "POP_ACADEMICS"
			# Academics generally against religious perseecution
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.25
			}
		}

		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					religion_accepted = no
				}
				add = 0.5

				if = {
					limit = { 
						standard_of_living <= 10
					}
					add = 0.5
				}
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}			
	}
}

law_state_atheism = {
	group = lawgroup_church_and_state
	
	icon = "gfx/interface/icons/law_icons/state_atheism.dds"

	progressiveness = 0

	unlocking_technologies = {
		empiricism
	}

	disallowing_laws = {
		law_theocracy
	}

	can_enact = {
		ig:ig_devout = {
			is_in_government = no
		}
		OR = {
			is_power_bloc_leader = no
			power_bloc ?= {
				NOT = { has_identity = identity:identity_religious }
			}
		}
	}
	
	modifier = {
		interest_group_ig_devout_pol_str_mult = -0.5
		state_conversion_mult = 0.25
		country_authority_add = 200
	}
	
	on_enact = {
		set_state_religion = rel:atheist
		add_modifier = {
			name = antireligious_policies
			months = long_modifier_time
		}
		custom_tooltip = {
			text = state_atheism_conversion_tt
			every_scope_state = {
				limit = {
					is_incorporated = yes
				}
				convert_population = {
					target = rel:atheist
					value = 0.25
				}
			}
		}
		recalculate_pop_ig_support = yes
	}
	
	religious_acceptance_rule = {
		is_state_religion = scope:country
	}
	
	possible_political_movements = {
		law_freedom_of_conscience
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		# Some euphoric academics will support this
		add = {
			desc = "POP_ACADEMICS"
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.1
			}
		}
		# Atheists will support this
		add = {
			desc = "POP_ATHEISTS"
			if = {
				limit = {
					has_pop_religion = atheist
				}
				value = 0.5
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_state_atheism
				power_bloc ?= { has_identity = identity:identity_ideological_union }			
			}
			
			add = base_impose_law_weight	
			
			# Atheist leaders of ideological unions want to spread the cult of reason
			if = {
				limit = { scope:target_country = { has_law = law_type:law_total_separation } }
				multiply = 0.5
			}
			else = {
				multiply = 2
			}
		}
	}
}
﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law
# cultural_acceptance_rule and religious_acceptance_rule are triggers called in culture scope with scope:country as the country with the laws

law_ethnostate = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/ethnostate.dds"
	
	progressiveness = -75
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}
	
	cultural_acceptance_rule = {
		is_primary_culture_of = scope:country
	}

	unlocking_technologies = {
		nationalism
	}
	
	modifier = {
		country_authority_add = 200
		state_radicals_from_sol_change_accepted_culture_mult = -0.2
		state_loyalists_from_sol_change_accepted_culture_mult = 0.2			
	}
	
	possible_political_movements = {
		law_racial_segregation
		law_cultural_exclusion
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_national_supremacy = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/national_supremacy.dds"
	
	progressiveness = -25
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}
	
	cultural_acceptance_rule = {
		AND = {
			shares_heritage_trait_with_any_primary_culture = scope:country
			shares_non_heritage_trait_with_any_primary_culture = scope:country
		}
	}
	
	modifier = {
		country_authority_add = 150
		state_radicals_from_sol_change_accepted_culture_mult = -0.15
		state_loyalists_from_sol_change_accepted_culture_mult = 0.15			
	}
	
	possible_political_movements = {
		law_racial_segregation
		law_cultural_exclusion
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_racial_segregation = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/racial_segregation.dds"
	
	progressiveness = 0
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	cultural_acceptance_rule = {
		shares_heritage_trait_with_any_primary_culture = scope:country
	}
	
	modifier = {
		country_authority_add = 100
		state_radicals_from_sol_change_accepted_culture_mult = -0.1
		state_loyalists_from_sol_change_accepted_culture_mult = 0.1		
	}
	
	possible_political_movements = {
		law_national_supremacy
		law_cultural_exclusion
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					culture_accepted = no
					owner = { has_law = law_type:law_national_supremacy }
				}
				add = 0.5
				
				if = {
					limit = { 
						standard_of_living <= 10
					}
					add = 0.5
				}	
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_cultural_exclusion = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/cultural_exclusion.dds"
	
	progressiveness = 25
	
	unlocking_laws = {
		law_slavery_banned
		law_debt_slavery
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	cultural_acceptance_rule = {
		shares_trait_with_any_primary_culture = scope:country
	}
	
	modifier = {
		country_authority_add = 50
		state_radicals_from_sol_change_accepted_culture_mult = -0.05
		state_loyalists_from_sol_change_accepted_culture_mult = 0.05		
	}
	
	possible_political_movements = {
		law_racial_segregation
		law_multicultural
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					culture_accepted = no
					owner = { 
						OR = { 
							has_law = law_type:law_ethnostate
							is_enacting_law = law_type:law_ethnostate
							has_law = law_type:law_national_supremacy
							is_enacting_law = law_type:law_national_supremacy
							has_law = law_type:law_racial_segregation
							is_enacting_law = law_type:law_racial_segregation
						} 
					}
				}
				add = 0.5				
				
				if = {
					limit = { 
						standard_of_living <= 10
					}
					add = 0.5
				}	
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_multicultural = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/multicultural.dds"
	
	progressiveness = 75

	unlocking_laws = {
		law_slavery_banned
	}
	
	unlocking_technologies = {
		human_rights
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	cultural_acceptance_rule = {
		always = yes
	}
	
	possible_political_movements = {
		law_cultural_exclusion
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					culture_accepted = no
				}
				add = 0.5
				
				if = {
					limit = { 
						standard_of_living <= 10
					}
					add = 0.5
				}	
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿law_no_colonial_affairs = {
	group = lawgroup_colonization
	
	icon = "gfx/interface/icons/law_icons/no_colonial_affairs.dds"
	
	progressiveness = 0	
	
	can_enact = {
		custom_tooltip = {
			modifier:country_disallow_law_no_colonial_affairs_bool = no
			text = disallow_law_no_colonial_affairs_tt
		}
	}

	pop_support = {
		value = 0
	}
	
	ai_will_do = {
		has_law = law_type:law_council_republic
	}	

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}

		if = {
			limit = {
				has_law = law_type:law_council_republic
			}
			add = 100
		}
		if = {
			limit = {
				has_strategy = ai_strategy_anti_imperialism
			}
			multiply = 2
		}
	}
}

law_frontier_colonization = {
	group = lawgroup_colonization

	can_enact = {
		any_scope_state = {
			is_homeland_of_country_cultures = ROOT
			any_neighbouring_state = {
				owner = {
					is_country_type = decentralized
				}
			}
		}
	}
	
	icon = "gfx/interface/icons/law_icons/frontier_colonization.dds"
	
	progressiveness = 25

	unlocking_technologies = {
		colonization
	}

	modifier = {
		state_migration_pull_unincorporated_mult = 0.5
	}
	
	institution = institution_colonial_affairs

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		# Farmers like frontiers
		add = {
			desc = "POP_FARMERS"			
			if = {
				limit = {
					is_pop_type = farmers
				}
				value = 0.25
			}
		}
	}
	
	ai_will_do = {
		NOR = {
			has_law = law_type:law_colonial_exploitation
			has_law = law_type:law_colonial_resettlement
		}
	}
}

law_colonial_resettlement = {
	group = lawgroup_colonization
	
	icon = "gfx/interface/icons/law_icons/colonial_resettlement.dds"
	
	progressiveness = 25

	unlocking_technologies = {
		colonization
	}
	
	modifier = {
		state_migration_pull_unincorporated_mult = 0.5
	}
	
	institution = institution_colonial_affairs

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		# Officers like colonialism
		add = {
			desc = "POP_OFFICERS"			
			if = {
				limit = {
					owner = { 
						has_law = law_type:law_no_colonial_affairs 
					} 
					is_pop_type = officers
				}
				value = 0.25
			}
		}
	}
	
	ai_will_do = {
		OR = {
			has_law = law_type:law_colonial_exploitation
			navy_size >= 50
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				OR = {
					has_law = law_type:law_colonial_resettlement
					has_law = law_type:law_frontier_colonization
				}
				scope:target_country = {
					has_law = law_type:law_no_colonial_affairs
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_colonial_offices }
			}
			add = 10
		}
	}
}

law_colonial_exploitation = {
	group = lawgroup_colonization
	
	icon = "gfx/interface/icons/law_icons/colonial_exploitation.dds"
	
	progressiveness = -25

	unlocking_technologies = {
		colonization
	}
	
	modifier = {
		building_group_bg_manufacturing_unincorporated_throughput_add = -0.1
		building_group_bg_plantations_unincorporated_throughput_add = 0.2
		building_group_bg_rubber_unincorporated_throughput_add = 0.2
		building_group_bg_logging_unincorporated_throughput_add = 0.2
		building_group_bg_mining_unincorporated_throughput_add = 0.2
		state_unincorporated_starting_wages_mult = -0.10
		building_unincorporated_subsistence_output_mult = -0.10
		country_tension_decay_mult = -0.25
	}
	
	institution = institution_colonial_affairs 

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		# Officers like colonialism
		add = {
			desc = "POP_OFFICERS"			
			if = {
				limit = {
					owner = { has_law = law_type:law_no_colonial_affairs } 
					is_pop_type = officers
				}
				value = 0.25
			}
		}
	}

	ai_will_do = {
		OR = {
			has_law = law_type:law_colonial_resettlement
			navy_size >= 50
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_colonial_exploitation
				scope:target_country = {
					has_law = law_type:law_no_colonial_affairs
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_colonial_offices }
			}
			add = 10
		}
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_autocracy = {	
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/autocracy.dds"
	
	progressiveness = -100
	
	# Has major legitimacy issues with parliamentary republic, they should be oligarchy instead
	disallowing_laws = {
		law_parliamentary_republic
	}

	on_activate = {
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				has_law = law_type:law_monarchy
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_appointed_bureaucrats
		}
		else_if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				NOT = {
					has_law = law_type:law_monarchy
				}
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_hereditary_bureaucrats
		}
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				has_modifier = missouri_compromise
			}
			remove_modifier = missouri_compromise
		}
	}

	modifier = {
		country_legitimacy_headofstate_add = 30
		country_legitimacy_govt_total_clout_add = 120
		country_legitimacy_ideological_incoherence_mult = 0.5
		country_aristocrats_pol_str_mult = 0.5
		country_officers_pol_str_mult = 0.5
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_oligarchy
		law_landed_voting
		law_elder_council
		law_technocracy
		law_single_party_state
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_oligarchy }
					}
					is_pop_type = aristocrats
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_OFFICIERS"			
			if = {
				limit = {
					is_pop_type = officers
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_autocracy
				OR = {
					AND = {
						power_bloc ?= { has_identity = identity:identity_ideological_union }
						has_strategy = ai_strategy_conservative_agenda					
					}
					has_strategy = ai_strategy_reactionary_agenda
				}
				scope:target_country = { 
					NOR = { # Is their law different enough from what we want to impose?
						has_law = law_type:law_oligarchy
						has_law = law_type:law_landed_voting
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}
}

law_technocracy = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/technocracy.dds"
	
	progressiveness = -50

	on_activate = {
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_appointed_bureaucrats
		}
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				has_modifier = missouri_compromise
			}
			remove_modifier = missouri_compromise
		}
	}
	
	modifier = {
		country_legitimacy_headofstate_add = 10
		country_legitimacy_govt_total_clout_add = 120
		country_legitimacy_govt_size_add = 2
		country_legitimacy_ideological_incoherence_mult = -0.1
		country_academics_pol_str_mult = 0.33
		country_engineers_pol_str_mult = 0.33
		country_officers_pol_str_mult = 0.33
		country_authority_add = 100
	}

	unlocking_technologies = {
		central_archives 
	}
	
	possible_political_movements = {
		law_autocracy 
		law_census_voting
		law_universal_suffrage
		law_single_party_state
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"			
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_wealth_voting }
					}
					is_pop_type = capitalists
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_technocracy
				"ai_ideological_opinion(scope:target_country)" >= 25 # Only want to do this on ideologically similar countries
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_single_party_state }
				}
			}
			
			add = base_impose_law_weight
		}
	}	
}

law_oligarchy = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/oligarchy.dds"
	
	progressiveness = -50

	on_activate = {
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				has_law = law_type:law_monarchy
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_appointed_bureaucrats
		}
		else_if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				NOT = {
					has_law = law_type:law_monarchy
				}
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_hereditary_bureaucrats
		}
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				has_modifier = missouri_compromise
			}
			remove_modifier = missouri_compromise
		}
	}
	
	modifier = {
		country_legitimacy_headofstate_add = 10
		country_legitimacy_govt_total_clout_add = 120
		country_legitimacy_govt_size_add = 2
		country_legitimacy_ideological_incoherence_mult = -0.1
		country_aristocrats_pol_str_mult = 0.5
		country_capitalists_pol_str_mult = 0.25
		country_authority_add = 100
	}
	
	possible_political_movements = {
		law_autocracy 
		law_landed_voting
		law_elder_council
		law_technocracy
		law_single_party_state
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_autocracy }
					}
					is_pop_type = aristocrats
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_wealth_voting }
					}
					is_pop_type = capitalists
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_oligarchy
				OR = {
					AND = {
						power_bloc ?= { has_identity = identity:identity_ideological_union }
						has_strategy = ai_strategy_conservative_agenda					
					}
					has_strategy = ai_strategy_reactionary_agenda
				}
				scope:target_country = { 
					NOR = { # Is their law different enough from what we want to impose?
						has_law = law_type:law_autocracy
						has_law = law_type:law_landed_voting
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}		
}

law_elder_council = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/elder_council.dds"
	
	progressiveness = -25

	unlocking_laws = {
		law_chiefdom
	}

	is_visible = {
		is_country_type = decentralized
	}
	
	on_activate = {
		if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				has_law = law_type:law_monarchy
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_appointed_bureaucrats
		}
		else_if = {
			limit = {
				has_law = law_type:law_elected_bureaucrats
				NOT = {
					has_law = law_type:law_monarchy
				}
			}
			deactivate_law = law_type:law_elected_bureaucrats
			activate_law = law_type:law_hereditary_bureaucrats
		}
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				has_modifier = missouri_compromise
			}
			remove_modifier = missouri_compromise
		}
	}

	modifier = {
		country_legitimacy_base_add = 20
		country_legitimacy_govt_total_clout_add = 100
		country_legitimacy_govt_size_add = 2
		country_legitimacy_ideological_incoherence_mult = -0.1
		country_aristocrats_pol_str_mult = 0.5
		country_officers_pol_str_mult = 0.5
		country_clergymen_pol_str_mult = 0.5
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_autocracy 
		law_oligarchy
		law_landed_voting
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_landed_voting = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/landed_voting.dds"
	
	progressiveness = -25

	unlocking_technologies = {
		democracy
	}

	disallowing_laws = {
		law_chiefdom
		law_command_economy
	}

	modifier = {
		country_legitimacy_govt_total_votes_add = 40
		country_legitimacy_govt_total_clout_add = 100
		country_legitimacy_govt_size_add = 1
		country_legitimacy_ideological_incoherence_mult = 0.2
		country_aristocrats_voting_power_add = 50
		country_officers_voting_power_add = 25
		country_clergymen_voting_power_add = 25
		country_capitalists_voting_power_add = 25
		country_authority_add = 100
	}
	
	possible_political_movements = {
		law_oligarchy
		law_autocracy 
		law_wealth_voting
		law_census_voting
		law_technocracy
		law_single_party_state
	}

	on_activate = {
		scripted_effect_parties_emergence = yes
		clear_legal_single_party = yes
	}
	
	can_impose = {
		country_has_voting_franchise = yes # modification of the standard trigger, only countries with a voting franchise can impose democracy on others
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_LITERACY" 
			
			if = {
				limit = { 
					OR = {
						NOT = { strata = rich }
						wealth < 30
					}					
					owner = { 
						NOR = {
							has_law = law_type:law_wealth_voting
							has_law = law_type:law_census_voting
							has_law = law_type:law_universal_suffrage
							has_law = law_type:law_anarchy
						}	
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_landed_voting
				OR = {
					AND = {
						power_bloc ?= { has_identity = identity:identity_ideological_union }
						has_strategy = ai_strategy_conservative_agenda					
					}
					has_strategy = ai_strategy_reactionary_agenda
				}
				scope:target_country = { 
					NOR = { # Is their law different enough from what we want to impose?
						has_law = law_type:law_oligarchy
						has_law = law_type:law_autocracy
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}		
}

law_wealth_voting = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/wealth_voting.dds"
	
	progressiveness = 0

	unlocking_technologies = {
		democracy
	}

	disallowing_laws = {
		law_chiefdom
		law_command_economy
	}
	
	modifier = {
		country_legitimacy_govt_total_votes_add = 65
		country_legitimacy_govt_total_clout_add = 75
		country_legitimacy_govt_size_add = 1
		country_legitimacy_ideological_incoherence_mult = 0.2
		country_voting_power_base_add = 40
		country_voting_power_wealth_threshold_add = 25
		country_authority_add = 100
	}
	
	possible_political_movements = {
		law_landed_voting
		law_census_voting
		law_universal_suffrage
		law_technocracy
		law_single_party_state
	}

	on_activate = {
		scripted_effect_parties_emergence = yes
		clear_legal_single_party = yes
	}
	
	can_impose = {
		country_has_voting_franchise = yes # modification of the standard trigger, only countries with a voting franchise can impose democracy on others
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_LITERACY"
			
			if = {
				limit = { 
					NOT = { strata = rich }
					owner = { 
						NOR = {
							has_law = law_type:law_census_voting
							has_law = law_type:law_universal_suffrage
							has_law = law_type:law_anarchy
						}	
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_wealth_voting
				has_strategy = ai_strategy_progressive_agenda	
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOR = { 
						has_law = law_type:law_census_voting 
						has_law = law_type:law_landed_voting 
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}	
}

law_census_voting = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/census_voting.dds"
	
	progressiveness = 50

	unlocking_technologies = {
		democracy
	}

	disallowing_laws = {
		law_chiefdom
		law_command_economy
	}

	modifier = {
		country_legitimacy_govt_total_votes_add = 85
		country_legitimacy_govt_total_clout_add = 55
		country_legitimacy_govt_size_add = 1
		country_legitimacy_ideological_incoherence_mult = 0.1
		country_voting_power_wealth_threshold_add = 15
		country_voting_power_from_literacy_add = 30
		country_authority_add = 50
	}
	
	possible_political_movements = {
		law_landed_voting
		law_wealth_voting
		law_universal_suffrage
		law_technocracy
		law_single_party_state
	}

	on_activate = {
		scripted_effect_parties_emergence = yes
		clear_legal_single_party = yes
	}
	
	can_impose = {
		country_has_voting_franchise = yes # modification of the standard trigger, only countries with a voting franchise can impose democracy on others
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_LITERACY"
			
			if = {
				limit = { 
					wealth < 25
					owner = { 
						NOR = {
							has_law = law_type:law_universal_suffrage
							has_law = law_type:law_anarchy
						}	
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}
	}
	
	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_census_voting
				has_strategy = ai_strategy_progressive_agenda			
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOR = { 
						has_law = law_type:law_wealth_voting 
						has_law = law_type:law_universal_suffrage 
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}
}

law_universal_suffrage = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/universal_suffrage.dds"
	
	progressiveness = 100

	unlocking_technologies = {
		egalitarianism
	}

	disallowing_laws = {
		law_chiefdom
		law_command_economy
	}
	
	modifier = {
		country_legitimacy_govt_total_votes_add = 110
		country_legitimacy_govt_total_clout_add = 25
		country_voting_power_base_add = 20
		country_legitimacy_govt_size_add = 1
	}
	
	possible_political_movements = {
		law_census_voting
		law_wealth_voting
		law_anarchy
		law_single_party_state
	}

	on_activate = {
		scripted_effect_parties_emergence = yes
		clear_legal_single_party = yes
	}
	
	can_impose = {
		country_has_voting_franchise = yes # modification of the standard trigger, only countries with a voting franchise can impose democracy on others
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_LITERACY"
			
			if = {
				limit = { 
					owner = { 
						NOT = {
							has_law = law_type:law_anarchy
						}	
					}
				}
				if = {
					limit = {
						wealth < 15
					}
					add = {
						value = literacy_rate
						divide = 2
					}
				}
				if = {
					limit = {
						wealth < 10
					}
					add = {
						value = literacy_rate
						divide = 2
					}
				}
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_universal_suffrage
				has_strategy = ai_strategy_egalitarian_agenda	
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOR = { 
						has_law = law_type:law_census_voting				 
						has_law = law_type:law_anarchy
					}
				}
			}
			
			add = base_impose_law_weight
		}
	}
}

law_anarchy = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/anarchy.dds"
	
	progressiveness = 200

	unlocking_technologies = {
		anarchism 
	}
	
	unlocking_laws = {
		law_cooperative_ownership
	}
	
	modifier = {
		state_pop_pol_str_add = 1
		country_legitimacy_govt_total_clout_add = 100
		state_political_strength_from_wealth_mult = -0.75
		country_authority_mult = -0.5
		country_legitimacy_govt_size_add = 2
	}
	
	possible_political_movements = {
		law_universal_suffrage
	}

	on_activate = {
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				has_modifier = missouri_compromise
			}
			remove_modifier = missouri_compromise
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_anarchist
		}
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			AND = { # modification of the standard trigger, only other anarchic countries can impose anarchy on their subjects
				has_law = scope:law
				can_impose_law_default = yes
			}
		}
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_LITERACY"
			
			if = {
				limit = { 
					wealth < 10
				}
				add = literacy_rate
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_anarchy
				has_strategy = ai_strategy_egalitarian_agenda	
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_universal_suffrage }
				}
			}
			
			add = base_impose_law_weight
		}
	}
}

law_single_party_state = {
	group = lawgroup_distribution_of_power
	
	icon = "gfx/interface/icons/law_icons/single_party_state.dds"
	
	progressiveness = 0

	can_enact = {
		OR = {
			custom_tooltip = {
				text = ruler_in_party_tt
				exists = ruler
				OR = {
					ruler = {
						this.interest_group = {
							has_party = yes
						}
					}
				}
			}
			custom_tooltip = {
				text = sps_no_party_tt
				country_has_voting_franchise = no
			}
		}
	}

	unlocking_technologies = {
		political_agitation 
	}
	
	modifier = {
		country_legitimacy_govt_total_votes_add = 100
		country_legitimacy_ideological_incoherence_mult = -0.25
		country_authority_add = 250
		country_voting_power_base_add = 20
		interest_group_in_government_attraction_mult = 0.20
	}
	
	possible_political_movements = {
		law_universal_suffrage
		law_anarchy
	}

	on_activate = {
		hidden_effect = {
			if = {
				limit = {
					ROOT = {
						ruler.interest_group = {
							has_party = yes
						}
					}
				}
				ROOT = {
					set_variable = { name = only_valid_party value = ruler.interest_group.party }
				}
			}
			else_if = {
				limit = {
					NOT = {
						any_active_party = {
							exists = this
						}
					}
				}
				root = { gen_ruler_party = yes }
			}
		}
		hidden_effect = { #Clears all currently active parties
			deactivate_parties = yes
		}
		update_party_support = yes #Reactivates precisely one legal party
		
		custom_tooltip = {
			text = sps_government_reshuffle_tt
			every_interest_group = {
				limit = {
					is_in_government = yes
					NOT = { #Removes all IGs from government that aren't in your party
						has_party = yes
					}
				}
				remove_ruling_interest_group = yes
			}
			every_interest_group = {
				limit = { #Adds all IGs that are in your party to the government
					is_in_government = no
					has_party = yes
				}
				add_ruling_interest_group = yes
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			interest_group = {
				has_party = yes
			}
			law_stance = {
				law = law_type:law_single_party_state
				value > neutral
			}
		}
	}
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			AND = { # modification of the standard trigger, only other single-party states countries can impose single-party states on their subjects
				has_law = scope:law
				can_impose_law_default = yes
			}
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_autocracy }
					}
					is_pop_type = aristocrats
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_wealth_voting }
					}
					is_pop_type = capitalists
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_BUREAUCRATS"			
			if = {
				limit = {
					is_pop_type = bureaucrats
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_single_party_state
				"ai_ideological_opinion(scope:target_country)" >= 25 # Only want to do this on ideologically similar countries
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_technocracy }
				}				
			}
			
			add = base_impose_law_weight
		}
	}
}


﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_traditionalism = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/traditionalism.dds"
	
	progressiveness = -50
	
	disallowing_laws = {
		law_per_capita_based_taxation
		law_proportional_taxation
		law_graduated_taxation
		law_anarchy
	}
		
	on_activate = {
	}
	
	modifier = {
		state_shopkeepers_investment_pool_efficiency_mult = -0.5
		state_capitalists_investment_pool_efficiency_mult = -0.5
		state_farmers_investment_pool_efficiency_mult = -0.5	
		state_clergymen_investment_pool_efficiency_mult = -0.5	
		state_aristocrats_investment_pool_efficiency_mult = -0.5	
		state_bureaucracy_population_base_cost_factor_mult = -0.25
		country_government_dividends_reinvestment_add = 0.25
		state_tax_capacity_mult = -0.25
		country_private_construction_allocation_mult = 0.25
		building_nationalization_cost_mult = 1.0
		building_nationalization_investment_return_add = 0.1
		country_leverage_resistance_mult = 0.25

		state_market_access_price_impact = -0.15
		country_disable_nationalization_without_compensation_bool = yes
	}
	
	possible_political_movements = {
		law_interventionism
		law_command_economy
		law_agrarianism
		law_laissez_faire
	}

	# no pop support because movements are impossible
	
	pop_support = {
		value = 0
	}
	
	# AI should never switch back to traditionalism
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_interventionism = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/interventionism.dds"
	
	progressiveness = 50
	
	disallowing_laws = {
		law_serfdom
		law_anarchy
	}
	
	on_activate = {
	}
	
	unlocking_technologies = {
		manufacturies
	}
	
	modifier = {
		country_disable_nationalization_without_compensation_bool = yes
		country_private_construction_allocation_mult = 0.5
		building_nationalization_investment_return_add = 0.5
		country_government_dividends_reinvestment_add = 0.5
		country_government_dividends_efficiency_add = 0.25
	}
	
	possible_political_movements = {
		law_command_economy
		law_agrarianism
		law_laissez_faire
		law_cooperative_ownership
		law_industry_banned
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_agrarianism 
							has_law = law_type:law_traditionalism 
							has_law = law_type:law_industry_banned 
						}
					}
					is_pop_type = capitalists
				}
				value = 0.33
			}
		}
		
		# Literate pops support getting out of Traditionalism once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism 
						has_law = law_type:law_traditionalism
					}
					
					# Aristocrats/Farmers/Peasants want agrarianism instead
					NOR = { 
						is_pop_type = aristocrats 
						is_pop_type = farmers 
						is_pop_type = peasants
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}		
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				OR = {
					has_journal_entry = je_sick_man_bureaucracy
					has_modifier = shogun_ig_forced_to_open_market
					has_journal_entry = je_meiji_main
				}
				has_law = law_type:law_traditionalism
			}
			add = 10000 # Top priority for Tanzimat/Meiji AI is to get out of Traditionalism
		}

		# AI should really try to get out of Traditionalism under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_traditionalism
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_interventionism }				
				}	
			}
			add = 1000
		}
	}
}

law_agrarianism = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/agrarianism.dds"
	
	progressiveness = 0
	
	disallowing_laws = {
		law_anarchy
	}	
	
	unlocking_technologies = {
		romanticism
	}
	
	on_activate = {
	}
	
	modifier = {
		state_aristocrats_investment_pool_efficiency_mult = 0.5
		state_clergymen_investment_pool_efficiency_mult = 0.5
		state_farmers_investment_pool_efficiency_mult = 0.5
		state_capitalists_investment_pool_efficiency_mult = -0.25
		country_private_construction_allocation_mult = 0.5
		building_nationalization_investment_return_add = 0.5
		country_government_dividends_reinvestment_add = 0.5
		country_government_dividends_efficiency_add = 0.3
		
		country_disable_nationalization_without_compensation_bool = yes
	}
	
	possible_political_movements = {
		law_interventionism
		law_command_economy
		law_laissez_faire
		law_cooperative_ownership
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_FARMERS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_interventionism 
							has_law = law_type:law_laissez_faire 
							has_law = law_type:law_traditionalism
						}
					}
					is_pop_type = farmers
				}
				value = 0.33
			}
		}
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_interventionism 
							has_law = law_type:law_laissez_faire 
						}
					}
					is_pop_type = aristocrats
				}
				value = 0.33
			}
		}
		
		# Literate pops support getting out of Traditionalism once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism 
						has_law = law_type:law_traditionalism
					}				
					OR = { 
						is_pop_type = aristocrats
						is_pop_type = farmers
						is_pop_type = peasants
					} 
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}			
	}
		
	ai_will_do = {
		OR = {
			has_law = law_type:law_traditionalism
			literacy_rate < 0.4
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_sick_man_bureaucracy
				has_law = law_type:law_traditionalism
			}
			add = 10000 # Top priority for Tanzimat AI is to get out of Traditionalism
		}	

		# AI should really try to get out of Traditionalism under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_traditionalism
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_agrarianism }				
				}	
			}
			add = 1000
		}		
	}
}

law_industry_banned = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/industry_banned.dds"
	progressiveness = 0
	
	unlocking_technologies = {
		romanticism
	}

	on_activate = {
		custom_tooltip = industry_banned_tt
		custom_tooltip = {
			text = industry_banned_destroy_tt
			every_scope_state = {
				if = {
					limit = {
						has_building = building_chemical_plants
					}
					remove_building = building_chemical_plants
				}
				if = {
					limit = {
						has_building = building_synthetics_plants
					}
					remove_building = building_synthetics_plants
				}
				if = {
					limit = {
						has_building = building_steel_mills
					}
					remove_building = building_steel_mills
				}
				if = {
					limit = {
						has_building = building_power_plant
					}
					remove_building = building_power_plant
				}
				if = {
					limit = {
						has_building = building_motor_industry
					}
					remove_building = building_motor_industry
				}
				if = {
					limit = {
						has_building = building_war_machine_industry
					}
					remove_building = building_war_machine_industry
				}
				if = {
					limit = {
						has_building = building_electrics_industry
					}
					remove_building = building_electrics_industry
				}
				if = {
					limit = {
						has_building = building_munition_plants
					}
					remove_building = building_munition_plants
				}
			}
		}
	}

	modifier = {
		building_group_bg_agriculture_throughput_add = 0.1
		building_group_bg_plantations_throughput_add = 0.1
		state_expected_sol_mult = -0.1
		interest_group_ig_rural_folk_pol_str_mult = 0.5
		state_aristocrats_investment_pool_contribution_add = 0.25
		country_private_construction_allocation_mult = 0.5
		country_production_tech_research_speed_mult = -0.25
		country_production_tech_spread_mult = -0.25
		building_nationalization_investment_return_add = 0.5
		country_government_dividends_reinvestment_add = 0.25
		country_government_dividends_efficiency_add = 0.3
		country_disable_nationalization_without_compensation_bool = yes
	}

	possible_political_movements = {
		law_interventionism
		law_command_economy
		law_laissez_faire
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_FARMERS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_interventionism 
							has_law = law_type:law_laissez_faire 
							has_law = law_type:law_traditionalism
						}
					}
					is_pop_type = farmers
				}
				value = 0.1
			}
		}
	}

	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_laissez_faire = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/laissez_faire.dds"
	
	progressiveness = 50
	
	disallowing_laws = {
		law_serfdom
		law_isolationism
		law_anarchy
	}
	
	unlocking_technologies = {
		international_trade
	}
	
	on_activate = {
	}
	
	modifier = {
		country_loan_interest_rate_mult = -0.25
		state_shopkeepers_investment_pool_efficiency_mult = 0.25	
		state_capitalists_investment_pool_efficiency_mult = 0.25
		country_private_construction_allocation_mult = 0.75
		country_government_dividends_reinvestment_add = 1.0		
		country_max_companies_add = 1
		country_disable_nationalization_bool = yes
		country_force_privatization_bool = yes
	}
	
	possible_political_movements = {
		law_interventionism
		law_command_economy
		law_agrarianism
		law_cooperative_ownership
		law_industry_banned
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_agrarianism 
							has_law = law_type:law_traditionalism 
							has_law = law_type:law_industry_banned 
						}
					}
					is_pop_type = capitalists
				}
				value = 0.5
			}
		}
		
		# Literate pops support getting out of Traditionalism once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism
						has_law = law_type:law_traditionalism
					}
					
					# Aristocrats/Farmers/Peasants want agrarianism instead
					NOR = { 
						is_pop_type = aristocrats 
						is_pop_type = farmers 
						is_pop_type = peasants
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}			
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_modifier = shogun_ig_forced_to_open_market
				has_journal_entry = je_meiji_main
				has_law = law_type:law_traditionalism
			}
			add = 10000 # Top priority for Tanzimat/Meiji AI is to get out of Traditionalism
		}	

		# AI should really try to get out of Traditionalism under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_traditionalism
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_laissez_faire }				
				}	
			}
			add = 1000
		}		
	}	
}

law_cooperative_ownership = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/cooperative_ownership.dds"
	
	progressiveness = 100
	
	disallowing_laws = {
		law_serfdom
	}
	
	unlocking_laws = {
		law_council_republic			
	}
	
	on_activate = {		
		custom_tooltip = {
			text = enact_law_radical_leftist_economy_warning_desc
		}	
	}
	
	modifier = {
		state_shopkeepers_investment_pool_efficiency_mult = 0.25	
		state_farmers_investment_pool_efficiency_mult = 0.25
		country_private_construction_allocation_mult = 0.35
		country_government_dividends_reinvestment_add = 1.0

		country_force_collectivization_bool = yes
		country_disable_privatization_bool = yes
	}
	
	possible_political_movements = {
		law_interventionism
		law_agrarianism
		law_laissez_faire
		law_command_economy
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					owner = {
						OR = { 
							has_law = law_type:law_agrarianism 
							has_law = law_type:law_traditionalism 
						}
					}
					is_pop_type = capitalists
				}
				value = 0.5
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_law = law_type:law_council_republic
			}
			add = 250
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_cooperative_ownership			
			}
			
			add = base_impose_law_weight
			multiply = 10.0
		}
	}	
}

law_command_economy = {
	group = lawgroup_economic_system
	
	icon = "gfx/interface/icons/law_icons/command_economy.dds"
	
	progressiveness = 100
	
	disallowing_laws = {
		law_serfdom
		law_anarchy
	}
	
	unlocking_technologies = {
		central_planning
	}
	
	unlocking_laws = {
		law_autocracy
		law_oligarchy
		law_single_party_state
		law_technocracy
	}	
	
	on_activate = {
		seize_investment_pool = yes
		custom_tooltip = {
			text = enact_law_radical_leftist_economy_warning_desc
		}	
	}
	
	modifier = {
		country_disable_investment_pool_bool = yes
		
		country_authority_mult = 0.25
		country_bureaucrats_pol_str_mult = 0.25
		building_nationalization_cost_mult = -0.5
		building_nationalization_radicals_mult = -0.75
		country_government_dividends_efficiency_add = 0.4
		
		country_leverage_resistance_mult = 0.25

		country_disable_privatization_bool = yes
	}
	
	possible_political_movements = {
		law_interventionism
		law_agrarianism
		law_laissez_faire
		law_cooperative_ownership
		law_industry_banned
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_BUREAUCRATS"			
			if = {
				limit = {
					is_pop_type = bureaucrats
				}
				value = 0.2
			}
		}
	}
	
	ai_will_do = {
		OR = {
			has_law = law_type:law_technocracy
			AND = {
				has_law = law_type:law_council_republic
				ruler ?= {
					has_ideology = ideology:ideology_vanguardist
					has_ideology = ideology:ideology_communist
				}			
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_law = law_type:law_council_republic
			}
			add = 250
		}
		
		if = {
			limit = { 
				has_law = law_type:law_technocracy
			}
			add = 100
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_command_economy			
			}
			
			add = base_impose_law_weight
			multiply = 10.0
		}
	}	
}

﻿law_no_schools = {
	group = lawgroup_education_system
	
	icon = "gfx/interface/icons/law_icons/no_schools.dds"
	
	progressiveness = 0

	disallowing_laws = {
		law_compulsory_primary_school
	}

	can_enact = {
		custom_tooltip = {
			modifier:country_disallow_law_no_schools_bool = no
			text = disallow_law_no_schools_tt
		}
	}
	
	pop_support = {
		value = 0
	}

	# AI will never abolish institutions entirely
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_religious_schools = {
	group = lawgroup_education_system
	
	icon = "gfx/interface/icons/law_icons/religious_schools.dds"
	
	progressiveness = 25
	
	unlocking_technologies = {
		rationalism
	}

	disallowing_laws = {
		law_total_separation
		law_state_atheism
		law_serfdom
	}

	institution = institution_schools
	institution_modifier = {
		state_conversion_mult = 0.2
		state_education_access_add = 0.1
		interest_group_ig_devout_pol_str_mult = 0.1
	}
	
	possible_political_movements = {
		law_private_schools
		law_public_schools
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_CLERGYMEN"			
			if = {
				limit = {
					is_pop_type = clergymen
				}
				value = 0.33
			}
		}

		add = {
			desc = "POP_POVERTY"			
			if = {
				limit = { 
					owner = { NOT = { has_law = law_type:law_public_schools } }
				}
				
				# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
				value = 15
				subtract = standard_of_living
				multiply = 0.1
				min = 0
				max = 1
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}		
	
		if = {
			limit = { 
				OR = {
					has_journal_entry = je_sick_man_education
					has_journal_entry = je_terakoya
				}
				has_law = law_type:law_no_schools
			}
			add = 1000
		}				
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_religious_schools
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_religious_schools
				scope:target_country = {
					has_law = law_type:law_no_schools
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = 10
		}
	}
}

law_private_schools = {
	group = lawgroup_education_system
	
	icon = "gfx/interface/icons/law_icons/private_schools.dds"
	
	progressiveness = 25
	
	unlocking_technologies = {
		academia
	}

	disallowing_laws = {
		law_state_religion
	}
	
	institution = institution_schools
	institution_modifier = {
		state_education_access_wealth_add = 0.005
		interest_group_ig_intelligentsia_pol_str_mult = 0.1
	}
	
	possible_political_movements = {
		law_religious_schools
		law_public_schools
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_WEALTH"			
			# Wealth 20 gives 0.1 pop support, 22 -> 0.2, 24 -> 0.3, ..., 30 -> 0.6
			value = wealth
			subtract = 18
			divide = 2
			multiply = 0.1
			min = 0
			max = 0.6
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
	
		if = {
			limit = { 
				OR = {
					has_journal_entry = je_sick_man_education
					has_journal_entry = je_terakoya
				}
				has_law = law_type:law_no_schools
			}
			add = 1000
		}		
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_private_schools
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_private_schools
				scope:target_country = {
					has_law = law_type:law_no_schools
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = 10
		}
	}
}

law_public_schools = {
	group = lawgroup_education_system

	icon = "gfx/interface/icons/law_icons/public_schools.dds"
	
	progressiveness = 50
	
	unlocking_technologies = {
		empiricism
	}

	disallowing_laws = {
		law_state_religion
		law_serfdom
	}
	
	institution = institution_schools
	institution_modifier = {
		state_assimilation_mult = 0.125
		state_education_access_add = 0.1
	}
	
	possible_political_movements = {
		law_private_schools
		law_religious_schools
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"			
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.25
			}
		}

		add = {
			desc = "POP_POVERTY"			
			
			# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
			value = 15
			subtract = standard_of_living
			multiply = 0.1
			min = 0
			max = 1
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				OR = {
					has_journal_entry = je_sick_man_education
					has_journal_entry = je_terakoya
				}
				has_law = law_type:law_no_schools
			}
			add = 1000
		}			
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_public_schools
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_public_schools
				scope:target_country = {
					has_law = law_type:law_no_schools
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_advanced_research }
			}
			add = 10
		}
	}
}
﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_outlawed_dissent = {
	group = lawgroup_free_speech
	icon = "gfx/interface/icons/law_icons/outlawed_dissent.dds"
	
	progressiveness = -50
	
	modifier = {
		country_authority_add = 200
		country_bolster_ig_attraction_mult = 0.5
		country_suppression_ig_attraction_mult = -0.5
		country_tech_spread_mult = -0.15
		country_leverage_resistance_mult = 0.5
	}
	
	possible_political_movements = {
		law_censorship
	}

	unlocking_technologies = {
		political_agitation
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_censorship = {
	group = lawgroup_free_speech
	icon = "gfx/interface/icons/law_icons/censorship.dds"
	
	progressiveness = 0
	
	modifier = {
		country_authority_add = 100
		country_bolster_ig_attraction_mult = 0.4
		country_suppression_ig_attraction_mult = -0.4
		country_tech_spread_mult = -0.10
		country_leverage_resistance_mult = 0.25
	}
	
	possible_political_movements = {
		law_right_of_assembly
		law_outlawed_dissent
	}

	unlocking_technologies = {
		law_enforcement
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_right_of_assembly = {
	group = lawgroup_free_speech
	icon = "gfx/interface/icons/law_icons/right_of_assembly.dds"
	
	progressiveness = 50
	
	modifier = {
		country_authority_add = 50
		country_bolster_ig_attraction_mult = 0.3
		country_suppression_ig_attraction_mult = -0.3
	}
	
	possible_political_movements = {
		law_censorship
		law_protected_speech
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"			
			if = {
				limit = {
					owner = { 
						NOT = { 
							has_law = law_type:law_protected_speech
						} 
					}
					is_pop_type = academics
				}
				value = 0.5
			}
		}
		# People don't like censorship
		add = {
			desc = "ALL_POPS"
			if = {
				limit = {
					owner = { 
						NOT = { 
							has_law = law_type:law_protected_speech
						}
					}
				}
				value = 0.01
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_protected_speech = {
	group = lawgroup_free_speech
	icon = "gfx/interface/icons/law_icons/protected_speech.dds"
	
	progressiveness = 100

	unlocking_technologies = {
		human_rights
	}
	
	modifier = {
		country_tech_spread_mult = 0.25
		country_leverage_resistance_mult = -0.25
	}
	
	possible_political_movements = {
		law_right_of_assembly
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"			
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.33
			}
		}
		add = {
			desc = "ALL_POPS"			
			value = 0.01
		}
	}

	on_activate = {
		custom_tooltip = protected_speech_tt
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}
﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_chiefdom = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/chiefdom.dds"
	
	progressiveness = -100
	
	can_enact = {
		is_country_type = decentralized
	}
	
	is_visible = {
		is_country_type = decentralized
	}
	
	modifier = {
		country_legitimacy_headofstate_add = 20
		country_authority_add = 100
	}
	
	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_monarchy = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/monarchy.dds"
	
	progressiveness = 0

	disallowing_laws = {
		law_anarchy
	}
	
	can_enact = {
		NOT = { has_government_type = gov_chartered_company }
	}	
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	modifier = {
		country_legitimacy_headofstate_add = 20
		country_legitimacy_ideological_incoherence_mult = 0.1
		country_aristocrats_pol_str_mult = 0.25
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_presidential_republic
		law_parliamentary_republic
		law_council_republic
	}
	
	pop_support = {
		value = 0	
		add = {
			desc = "POP_ARISTOCRATS"
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.33
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_monarchist_ideology = yes
		}
	}

	on_activate = {
		if = {
			limit = {
				c:FRA ?= this
				NOT = {
					has_variable = one_true_french_dynasty
				}
				has_dlc_feature = voice_of_the_people_content
				game_date > 1836.1.1
			}
			if = {
				limit = {
					has_variable = fra_divided_monarchists_freeze
				}
				remove_variable = fra_divided_monarchists_freeze
			}
			add_journal_entry = { type = je_divided_monarchists }
		}
		# Generates French monarch upon enaction.
		hidden_effect = {
			if = {
				limit = {
					c:FRA ?= this
					NOT = {
						has_variable = one_true_french_dynasty
					}
					has_dlc_feature = voice_of_the_people_content
					game_date > 1836.1.1
					NOR = {
						ruler_is_bonapartist = yes
						ruler_is_orleanist = yes
						ruler_is_legitimist = yes
					}
				}
				fra_handle_republic_monarch_assignment = yes
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_monarchy
				has_strategy = ai_strategy_reactionary_agenda
				power_bloc ?= { has_identity = identity:identity_ideological_union }
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_theocracy }
				}				
			}
			
			add = base_impose_law_weight	
			if = {
				limit = { 
					scope:target_country = { has_law = law_type:council_republic } 
					NOT = { has_strategy = ai_strategy_egalitarian_agenda }
				}
				multiply = 5
			}	
			else = {
				multiply = 0.5 # AI is less likely to mess with governance principles unless dealing with council republics
			}
		}
	}
}

law_presidential_republic = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/presidential_republic.dds"
	
	progressiveness = 100
	
	unlocking_technologies = {
		democracy
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	modifier = {
		country_legitimacy_headofstate_add = 10
		country_legitimacy_govt_total_votes_add = 10
		country_legitimacy_ideological_incoherence_mult = 0.2
		country_authority_add = 100
	}

	on_activate = {
		if = {
			limit = {
				has_variable = fra_republic_counter
			}
			change_variable = {
				name = fra_republic_counter
				add = 1
			}
		}
		if = {
			limit = {
				any_interest_group = {
					has_ideology = ideology:ideology_constitutionalist
				}
			}
			every_interest_group = {
				limit = {
					has_ideology = ideology:ideology_constitutionalist
				}
				remove_ideology = ideology_constitutionalist
				add_ideology = ideology_republican
			}
		}
	}
	
	possible_political_movements = {
		law_council_republic
		law_monarchy
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_MIDDLE_STRATA"
			if = {
				limit = { 
					strata = middle
				}
				value = 0.05
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_republican_leader
		}
	}

	ai_enact_weight_modifier = {
		value = 0		
		if = {
			limit = {
				has_journal_entry = je_pedro_republic
			}
			add = 100
		}
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_presidential_republic
				has_strategy = ai_strategy_progressive_agenda
				power_bloc ?= { has_identity = identity:identity_ideological_union }
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_parliamentary_republic }
				}				
			}
			
			add = base_impose_law_weight
			if = {
				limit = { 
					scope:target_country = { has_law = law_type:council_republic } 
					NOT = { has_strategy = ai_strategy_egalitarian_agenda }
				}
				multiply = 5
			}	
			else = {
				multiply = 0.5 # AI is less likely to mess with governance principles unless dealing with council republics
			}
		}
	}	
}

law_parliamentary_republic = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/parliamentary_republic.dds"
	
	progressiveness = 100
	
	# Has major legitimacy issues with autocracies, so should be oligarchy instead
	disallowing_laws = {
		law_autocracy
	}
	
	can_enact = {
		NOT = { has_government_type = gov_chartered_company }
	}		
	
	unlocking_technologies = {
		democracy
	}
	
	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	modifier = {
		country_legitimacy_govt_total_votes_add = 20
		country_legitimacy_govt_size_add = 1
	}
	
	on_activate = {
		if = {
			limit = {
				has_variable = fra_republic_counter
			}
			change_variable = {
				name = fra_republic_counter
				add = 1
			}
		}
		if = {
			limit = {
				any_interest_group = {
					has_ideology = ideology:ideology_constitutionalist
				}
			}
			every_interest_group = {
				limit = {
					has_ideology = ideology:ideology_constitutionalist
				}
				remove_ideology = ideology_constitutionalist
				add_ideology = ideology_republican
			}
		}
	}

	possible_political_movements = {
		law_council_republic
		law_monarchy
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_MIDDLE_STRATA"
			if = {
				limit = { 
					strata = middle
				}
				value = 0.05
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_republican_leader
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_parliamentary_republic
				has_strategy = ai_strategy_progressive_agenda
				power_bloc ?= { has_identity = identity:identity_ideological_union }
				scope:target_country = { # Is their law different enough from what we want to impose?
					NOT = { has_law = law_type:law_presidential_republic }
				}				
			}
			
			add = base_impose_law_weight
			if = {
				limit = { 
					scope:target_country = { has_law = law_type:council_republic } 
					NOT = { has_strategy = ai_strategy_egalitarian_agenda }
				}
				multiply = 5
			}		
			else = {
				multiply = 0.5 # AI is less likely to mess with governance principles unless dealing with council republics
			}
		}
	}	
}

law_theocracy = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/theocracy.dds"
	
	progressiveness = -25

	disallowing_laws = {
		law_total_separation 
	}
	
	can_enact = {
		NOT = { has_government_type = gov_chartered_company }
	}		

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	modifier = {
		country_legitimacy_headofstate_add = 20
		country_legitimacy_ideological_incoherence_mult = 0.1
		interest_group_ig_devout_pol_str_mult = 0.25
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_monarchy
		law_presidential_republic
		law_parliamentary_republic
		law_council_republic
	}

	pop_support = {
		value = 0
		
		add = {
			desc = "POP_CLERGYMEN"
			if = {
				limit = { 
					is_pop_type = clergymen
				}
				value = 0.33
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_theocrat
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_theocracy
				has_strategy = ai_strategy_reactionary_agenda
				power_bloc ?= { has_identity = identity:identity_religious }
				religion = scope:target_country.religion
				scope:target_country = { # Is their law different enough from what we want to impose?					
					NOT = { has_law = law_type:law_monarchy }
				}				
			}
			
			add = base_impose_law_weight
			if = {
				limit = { 
					scope:target_country = { has_law = law_type:council_republic } 
					NOT = { has_strategy = ai_strategy_egalitarian_agenda }
				}
				multiply = 5
			}		
			else = {
				multiply = 0.5 # AI is less likely to mess with governance principles unless dealing with council republics
			}
		}
	}	
}

law_council_republic = {
	group = lawgroup_governance_principles
	
	icon = "gfx/interface/icons/law_icons/council_republic.dds"
	
	progressiveness = 200

	unlocking_technologies = {
		socialism
	}
	
	can_enact = {
		NOT = { has_government_type = gov_chartered_company }
	}		
	
	on_activate = {		
		custom_tooltip = {
			text = enact_law_radical_leftist_government_warning_desc
		}
		if = {
			limit = {
				any_interest_group = {
					has_ideology = ideology:ideology_constitutionalist
				}
			}
			every_interest_group = {
				limit = {
					has_ideology = ideology:ideology_constitutionalist
				}
				remove_ideology = ideology_constitutionalist
				add_ideology = ideology_republican
			}
		}	
	}		

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}
	
	modifier = {
		country_legitimacy_govt_total_votes_add = 10
		country_legitimacy_govt_size_add = 1
		country_legitimacy_ideological_incoherence_mult = -0.1
		interest_group_ig_trade_unions_pol_str_mult = 0.25
	}
	
	possible_political_movements = {
		law_presidential_republic
		law_parliamentary_republic
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_LOWER_STRATA"
			if = {
				limit = { 
					strata = poor
				}
				value = 0.05
			}
		}
	}
	
	ai_will_do = {
		exists = ruler
		ruler = {
			OR = {
				has_ideology = ideology:ideology_communist
				has_ideology = ideology:ideology_anarchist
				has_ideology = ideology:ideology_vanguardist
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
	
	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_council_republic
				has_strategy = ai_strategy_egalitarian_agenda				
			}
			
			add = base_impose_law_weight
			multiply = 5.0
		}
	}
}
﻿law_no_health_system = {
	group = lawgroup_health_system
	icon = "gfx/interface/icons/law_icons/no_health_system.dds"
	
	progressiveness = 0
	
	modifier = {
	}

	pop_support = {
		value = 0
	}
	
	# AI shouldn't try to abolish institutions
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_charitable_health_system = {
	group = lawgroup_health_system
	icon = "gfx/interface/icons/law_icons/charitable_health_system.dds"
	
	progressiveness = 50
	
	unlocking_technologies = {
		medical_degrees
	}	

	institution = institution_health_system
	institution_modifier = {
		state_mortality_mult = -0.03
		interest_group_ig_devout_pol_str_mult = 0.1
		state_pollution_reduction_health_mult = -0.1
		state_poor_standard_of_living_add = 0.5
	}
	
	# Don't return to charity if we have something more advanced
	ai_will_do = {
		NOR = {
			has_law = law_type:law_private_health_insurance
			has_law = law_type:law_public_health_insurance
		}
	}
	
	pop_support = {
		value = 0	
		add = {
			desc = "POP_POVERTY"			
			if = {
				limit = { 
					owner = { NOT = { has_law = law_type:law_public_health_insurance } }
				}

				# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
				value = 15
				subtract = standard_of_living
				multiply = 0.1
				min = 0
				max = 1
			}					
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_private_health_insurance = {
	group = lawgroup_health_system
	icon = "gfx/interface/icons/law_icons/private_health_insurance.dds"
	
	progressiveness = 75
	
	unlocking_technologies = {
		pharmaceuticals
	}
	
	modifier = {
		country_institution_health_system_max_investment_add = 2
	}	
	
	institution = institution_health_system
	institution_modifier = {
		interest_group_ig_petty_bourgeoisie_pol_str_mult = 0.1
		state_mortality_wealth_mult = -0.002
		state_pollution_reduction_health_mult = -0.1
		state_rich_standard_of_living_add = 0.5
	}
	
	pop_support = {
		value = 0	
		add = {
			desc = "POP_WEALTH"			
			# Wealth 20 gives 0.1 pop support, 22 -> 0.2, 24 -> 0.3, ..., 30 -> 0.6
			value = wealth
			subtract = 18
			divide = 2
			multiply = 0.1
			min = 0
			max = 0.6
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_public_health_insurance = {
	group = lawgroup_health_system
	icon = "gfx/interface/icons/law_icons/public_health_insurance.dds"
	
	progressiveness = 100
	
	unlocking_technologies = {
		pharmaceuticals
	}
	
	modifier = {
		country_institution_health_system_max_investment_add = 2
	}		
	
	institution = institution_health_system
	institution_modifier = {
		state_mortality_mult = -0.04
		state_pollution_reduction_health_mult = -0.15
		state_standard_of_living_add = 0.5
	}
	
	pop_support = {
		value = 0	
		add = {
			desc = "POP_POVERTY"			
			# SoL 14 gives 0.1 pop support, 13 -> 0.2, 12 -> 0.3, ... 5 -> 1.0
			value = 15
			subtract = standard_of_living
			multiply = 0.1
			min = 0
			max = 1			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}
﻿law_no_home_affairs = {
	group = lawgroup_internal_security
	icon = "gfx/interface/icons/law_icons/no_home_affairs.dds"
	
	progressiveness = 0
	
	possible_political_movements = {
		law_national_guard
		law_secret_police
		law_guaranteed_liberties
	}

	pop_support = {
		value = 0
	}
	
	# AI shouldn't try to abolish institutions
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_national_guard = {
	group = lawgroup_internal_security
	icon = "gfx/interface/icons/law_icons/national_guard.dds"
	
	progressiveness = 25

	unlocking_technologies = {
		law_enforcement
	}

	institution = institution_home_affairs
	institution_modifier = {
		state_conscription_rate_add = 0.005
		political_movement_radicalism_mult = -0.05
	}
	
	possible_political_movements = {
		law_secret_police
		law_guaranteed_liberties
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_OFFICERS"
			if = {
				limit = { 
					is_pop_type = officers
				}
				value = 0.33
			}
		}	
	}

	# Don't return to national guard we have something more advanced
	ai_will_do = {
		NOR = {
			has_law = law_type:law_secret_police
			has_law = law_type:law_guaranteed_liberties
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_secret_police = {
	group = lawgroup_internal_security
	icon = "gfx/interface/icons/law_icons/secret_police.dds"
	
	progressiveness = 0
	
	unlocking_technologies = {
		central_archives
	}

	modifier = {
		country_institution_home_affairs_max_investment_add = 2
	}
	
	institution = institution_home_affairs
	institution_modifier = {
		country_suppression_ig_attraction_mult = -0.05
		political_movement_radicalism_mult = -0.1
	}
	
	possible_political_movements = {
		law_guaranteed_liberties
	}

	on_enact = {
		custom_tooltip = unlock_arrange_accident_tt
	}

	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_guaranteed_liberties = {
	group = lawgroup_internal_security
	icon = "gfx/interface/icons/law_icons/guaranteed_liberties.dds"
	
	progressiveness = 100
	
	unlocking_laws = {
		law_right_of_assembly
		law_protected_speech
	}
	
	modifier = {
		country_institution_home_affairs_max_investment_add = 2
	}
	
	institution = institution_home_affairs
	institution_modifier = {
		state_radicals_from_sol_change_mult = -0.05
		state_loyalists_from_sol_change_mult = 0.05
	}
	
	possible_political_movements = {
		law_secret_police
	}

	pop_support = {
		value = 0
		add = {
			desc = "ALL_POPS"
			value = 0.01
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_no_workers_rights = {
	group = lawgroup_labor_rights
	
	icon = "gfx/interface/icons/law_icons/no_workers_rights.dds"
	
	progressiveness = 0
	
	modifier = {	
	}
	
	possible_political_movements = {
		law_regulatory_bodies
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_regulatory_bodies = {
	group = lawgroup_labor_rights
	
	icon = "gfx/interface/icons/law_icons/regulatory_bodies.dds"
	
	progressiveness = 50

	unlocking_technologies = {
		labor_movement
	}

	institution = institution_workplace_safety
	
	possible_political_movements = {
		law_worker_protections
	}
	
	pop_support = {
		value = 0

		add = {
			desc = "POP_DANGEROUS_JOBS"		
			if = {
				limit = { 
					NOT = { strata = rich }
					OR = {
						pop_employment_building_group = bg_mining
						pop_employment_building_group = bg_manufacturing
					}
					owner = { 
						NOT = { has_law = law_type:law_worker_protections }
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_worker_protections = {
	group = lawgroup_labor_rights
	
	icon = "gfx/interface/icons/law_icons/worker_protections.dds"

	progressiveness = 100

	unlocking_technologies = {
		human_rights
	}
	
	institution = institution_workplace_safety
	institution_modifier = {
		building_minimum_wage_mult = 0.15
	}

	
	pop_support = {
		value = 0

		add = {
			desc = "POP_DANGEROUS_JOBS"		
			if = {
				limit = { 
					NOT = { strata = rich }
					OR = {
						pop_employment_building_group = bg_mining
						pop_employment_building_group = bg_manufacturing
					}
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿law_serfdom = {
	group = lawgroup_land_reform
	
	icon = "gfx/interface/icons/law_icons/serfdom.dds"
	
	progressiveness = -50
	
	disallowing_laws = {
		law_interventionism
		law_laissez_faire
		law_command_economy
	}
	
	on_enact = {
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_homesteading
				}
			}
			custom_tooltip = farmers_pb_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_collectivized_agriculture
				}
			}
			custom_tooltip = rural_laborers_tu_ig_shift_effect_negative_tt
		}
	}
	
	modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.5
		state_peasants_internal_migration_disallowed_bool = yes
		state_peasants_mass_migration_disallowed_bool = yes
	}

	possible_political_movements = {
		law_tenant_farmers
		law_collectivized_agriculture
		law_homesteading
		law_commercialized_agriculture
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					is_pop_type = aristocrats
				}
				value = 0.1
			}
		}
	}
	
	# AI should never try to bring back serfdom
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_tenant_farmers = {
	group = lawgroup_land_reform
	
	icon = "gfx/interface/icons/law_icons/tenant_farmers.dds"
	
	progressiveness = 0

	modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.25
		state_peasants_internal_migration_disallowed_bool = yes
	}

	possible_political_movements = {
		law_homesteading
		law_collectivized_agriculture
		law_commercialized_agriculture
	}
	
	on_enact = {
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_homesteading
				}
			}
			custom_tooltip = farmers_pb_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_collectivized_agriculture
				}
			}
			custom_tooltip = rural_laborers_tu_ig_shift_effect_negative_tt
		}
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"			
			if = {
				limit = {
					owner = {
						NOT = { has_law = law_type:law_serfdom }
					}
					is_pop_type = aristocrats
				}
				value = 0.1
			}
		}
		
		# Literate pops support getting out of Serfdom once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism 
						has_law = law_type:law_serfdom
					}		
				}
				add = {
					value = literacy_rate			
					if = {
						limit = { is_pop_type = aristocrats }
						divide = 5
					}	
					else = {
						divide = 2
					}
				}
			}
		}			
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_meiji_main
				has_law = law_type:law_serfdom
			}
			add = 10000 # Top priority for Meiji AI is to get out of Serfdom
		}

		# AI should really try to get out of Serfdom under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_serfdom
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_tenant_farmers }				
				}			
			}
			add = 1000
		}		
	}
}

law_commercialized_agriculture = {
	group = lawgroup_land_reform
	
	icon = "gfx/interface/icons/law_icons/commercial_agriculture.dds"
	
	progressiveness = 0

	disallowing_laws = {
		law_traditionalism
	}

	possible_political_movements = {
		law_homesteading
		law_collectivized_agriculture
		law_homesteading
	}

	unlocking_technologies = {
		mutual_funds
	}
	
	on_enact = {
		custom_tooltip = financial_districts_buy_farms_tt
		if = {
			limit = {
				NOR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_homesteading
				}
			}
			custom_tooltip = farmers_pb_ig_shift_effect_tt
		}
		if = {
			limit = {
				NOR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_collectivized_agriculture
				}
			}
			custom_tooltip = rural_laborers_tu_ig_shift_effect_tt
		}
		if = {
			limit = {
				has_journal_entry = je_pedro_brazil
				NOT = { has_variable = landreform_pedropoint }
			}
			set_variable = landreform_pedropoint
			remove_pedropoint_effect = yes
		}
	}

	pop_support = {
		value = 0

		add = {
			desc = "POP_CAPITALISTS"			
			if = {
				limit = {
					is_pop_type = capitalists
				}
				value = 0.1
			}
		}
		
		# Literate pops support getting out of Serfdom once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism 
						has_law = law_type:law_serfdom
					}				
					
					# Peasants & Farmers want Homesteading instead of Commercialized Agriculture
					NOR = { 
						is_pop_type = farmers
						is_pop_type = peasants
					} 
				}
				add = {
					value = literacy_rate			
					if = {
						limit = { is_pop_type = aristocrats }
						divide = 5
					}	
					else = {
						divide = 2
					}
				}
			}
		}		
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0

		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_meiji_main
				has_law = law_type:law_serfdom
			}
			add = 10000 # Top priority for Meiji AI is to get out of Serfdom
		}

		# AI should really try to get out of Serfdom under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_serfdom
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_collectivized_agriculture }				
				}
			}
			add = 1000
		}		
	}
}

law_homesteading = {
	group = lawgroup_land_reform
	
	icon = "gfx/interface/icons/law_icons/freeholders.dds"
	
	progressiveness = 25

	possible_political_movements = {
		law_tenant_farmers
		law_collectivized_agriculture
		law_commercialized_agriculture
	}

	modifier = {
		country_farmers_pol_str_mult = 0.25
		building_group_bg_agriculture_allowed_collectivization_add = 0.5
		building_group_bg_ranching_allowed_collectivization_add = 0.5
	}

	on_enact = {
		if = {
			limit = {
				NOR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_homesteading
				}
			}
			custom_tooltip = farmers_pb_ig_shift_effect_tt
		}
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_collectivized_agriculture
				}
			}
			custom_tooltip = rural_laborers_tu_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				has_journal_entry = je_pedro_brazil
				NOT = { has_variable = landreform_pedropoint }
			}
			set_variable = landreform_pedropoint
			remove_pedropoint_effect = yes
		}
	}

	pop_support = {
		value = 0

		add = {
			desc = "POP_FARMERS"			
			if = {
				limit = {
					is_pop_type = farmers
				}
				value = 0.50
			}
		}
		
		# Literate pops support getting out of Serfdom once you have Empiricism
		add = {
			desc = "empiricism"
			
			if = {
				limit = { 
					owner = { 
						has_technology_researched = empiricism 
						has_law = law_type:law_serfdom
					}				
					OR = { 
						is_pop_type = farmers
						is_pop_type = peasants 
					} 
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}		
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		# AI should really try to get out of Serfdom under the right circumstances
		if = {
			limit = {
				has_law = law_type:law_serfdom
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_homesteading }				
				}
			}
			add = 1000
		}		
	}
}

law_collectivized_agriculture = {
	group = lawgroup_land_reform
	
	icon = "gfx/interface/icons/law_icons/collectivized_agriculture.dds"
	
	progressiveness = 50

	modifier = {
		building_group_bg_agriculture_allowed_collectivization_add = 1.0
		building_group_bg_ranching_allowed_collectivization_add = 1.0
	}

	on_enact = {
		custom_tooltip = rural_laborers_tu_ig_shift_effect_tt
		if = {
			limit = {
				OR = {
					has_law = law_type:law_commercialized_agriculture
					has_law = law_type:law_homesteading
				}
			}
			custom_tooltip = farmers_pb_ig_shift_effect_negative_tt
		}
		if = {
			limit = {
				has_journal_entry = je_pedro_brazil
				NOT = { has_variable = landreform_pedropoint }
			}
			set_variable = landreform_pedropoint
			remove_pedropoint_effect = yes
		}
	}

	unlocking_laws = {
		law_command_economy
		law_cooperative_ownership
	}

	possible_political_movements = {
		law_tenant_farmers
		law_homesteading
		law_commercialized_agriculture
	}

	unlocking_technologies = { socialism }

	pop_support = {
		value = 0

		add = {
			desc = "POP_PEASANTS"		
			if = {
				limit = { 
					is_pop_type = peasants
					owner = { 
						has_law = law_type:law_serfdom
					}
				}
				add = {
					value = literacy_rate
				}
			}			
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_law = law_type:law_council_republic
			}
			add = 250
		}
	}
}

﻿law_no_migration_controls = {
	group = lawgroup_migration
	icon = "gfx/interface/icons/law_icons/no_migration_controls.dds"
	
	progressiveness = 50
	
	modifier = {
		country_leverage_resistance_mult = -0.25
	}
	
	
	possible_political_movements = {
		law_migration_controls
	}	
	pop_support = {
		value = 0
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_migration_controls = {
	group = lawgroup_migration
	icon = "gfx/interface/icons/law_icons/migration_controls.dds"
	
	modifier = {
		country_disallow_discriminated_migration_bool = yes	
	}
	
	progressiveness = 0
	
	possible_political_movements = {
		law_no_migration_controls
		law_closed_borders
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_UNEMPLOYED_STATE"
			if = {
				limit = { 
					owner = { 
						NOT = { 
							has_law = law_type:law_closed_borders
						} 
					}
					state = {
						state_unemployment_rate >= 0.1
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = { 
						NOT = { 
							has_law = law_type:law_closed_borders
						} 
					}
					state = {
						state_unemployment_rate >= 0.2
					}
				}
				value = 0.1
			}
			if = {
				limit = { 
					owner = { 
						NOT = { 
							has_law = law_type:law_closed_borders
						} 
					}
					state = {
						state_unemployment_rate >= 0.3
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = { 
						NOT = { 
							has_law = law_type:law_closed_borders
						} 
					}
					state = {
						state_unemployment_rate >= 0.4
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = { 
						NOT = { 
							has_law = law_type:law_closed_borders
						} 
					}
					state = {
						state_unemployment_rate >= 0.5
					}
				}
				value = 0.1
			}
		}	
	}

	on_enact = {
		if = {
			limit = {
				c:CHI ?= this
				has_journal_entry = je_chinese_missions
			}
			every_scope_state = {
				limit = {
					NOT = {
						any_neighbouring_state = {
							is_treaty_port = yes
							owner = {
								religion = {
									has_discrimination_trait = christian
								}
							}
						}
					}
					has_variable = open_to_missionaries_state
				}
				remove_variable = open_to_missionaries_state
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
		
		if = {
			limit = { 
				has_journal_entry = je_meiji_diplomacy
				has_law = law_type:law_closed_borders
			}
			add = 1000
		}			
	}
}

law_closed_borders = {
	group = lawgroup_migration
	icon = "gfx/interface/icons/law_icons/closed_borders.dds"

	modifier = {
		country_disallow_migration_bool = yes
		country_disallow_agitator_invites_bool = yes
		country_leverage_resistance_mult = 0.25
	}
	
	progressiveness = -50
	
	possible_political_movements = {
		law_closed_borders
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_UNEMPLOYED_STATE"
			if = {
				limit = { 
					state = {
						state_unemployment_rate >= 0.1
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					state = {
						state_unemployment_rate >= 0.2
					}
				}
				value = 0.1
			}
			if = {
				limit = { 
					state = {
						state_unemployment_rate >= 0.3
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					state = {
						state_unemployment_rate >= 0.4
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					state = {
						state_unemployment_rate >= 0.5
					}
				}
				value = 0.1
			}
		}	
	}

	on_enact = {
		if = {
			limit = {
				c:CHI ?= this
				has_journal_entry = je_chinese_missions
			}
			every_scope_state = {
				limit = {
					NOT = {
						any_neighbouring_state = {
							is_treaty_port = yes
							owner = {
								religion = {
									has_discrimination_trait = christian
								}
							}
						}
					}
					has_variable = open_to_missionaries_state
				}
				remove_variable = open_to_missionaries_state
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

﻿law_no_police = {
	group = lawgroup_policing
	
	icon = "gfx/interface/icons/law_icons/no_police.dds"
	
	progressiveness = 0
	
	possible_political_movements = {
		law_local_police
		law_dedicated_police
		law_militarized_police
	}

	can_enact = {
		custom_tooltip = {
			modifier:country_disallow_law_no_police_bool = no
			text = disallow_law_no_police_tt
		}
	}
	
	pop_support = {
		value = 0
	}

	# AI shouldn't try to abolish institutions
	ai_will_do = {
		always = no
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_local_police = {
	group = lawgroup_policing
	
	icon = "gfx/interface/icons/law_icons/local_police.dds"
	
	unlocking_technologies = {
		tech_bureaucracy
	}
	
	progressiveness = -50

	institution = institution_police
	institution_modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.05
		state_turmoil_effects_mult = -0.05
	}
	
	possible_political_movements = {
		law_dedicated_police
		law_militarized_police
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_policing_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ARISTOCRATS"
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.25
			}
		}
	}
	
	# Don't return to local police if we have something more advanced
	ai_will_do = {
		NOR = {
			has_law = law_type:law_dedicated_police
			has_law = law_type:law_militarized_police
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_local_police
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_local_police
				scope:target_country = {
					has_law = law_type:law_no_police
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = 10
		}
	}
}

law_dedicated_police = {
	group = lawgroup_policing
	
	icon = "gfx/interface/icons/law_icons/dedicated_police.dds"
	
	progressiveness = 50

	unlocking_technologies = {
		law_enforcement
	}

	modifier = {
		country_institution_police_max_investment_add = 2
	}

	institution = institution_police
	institution_modifier = {
		state_radicals_from_sol_change_mult = -0.05
	}
	
	possible_political_movements = {
		law_militarized_police
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_policing_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_SOLDIERS"
			if = {
				limit = {
					NOT = {
						owner = {
							has_law = law_type:law_militarized_police
						}
					}
					is_pop_type = soldiers
				}
				value = 0.33
			}
		}
		add = {
			desc = "POP_OFFICERS"
			if = {
				limit = {
					NOT = {
						owner = {
							has_law = law_type:law_militarized_police
						}
					}
					is_pop_type = officers
				}
				value = 0.33
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_dedicated_police
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_dedicated_police
				scope:target_country = {
					has_law = law_type:law_no_police
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = 10
		}
	}
}

law_militarized_police = {
	group = lawgroup_policing
	
	icon = "gfx/interface/icons/law_icons/militarized_police.dds"
	
	progressiveness = -100

	unlocking_technologies = {
		mass_surveillance
	}

	modifier = {
		country_institution_police_max_investment_add = 2
	}

	institution = institution_police
	institution_modifier = {
		state_radicals_from_sol_change_mult = -0.05
		state_radicals_from_discrimination_mult = -0.05
		interest_group_ig_armed_forces_pol_str_mult = 0.10
		state_mortality_turmoil_mult = 0.004
	}
	
	possible_political_movements = {
		law_dedicated_police
	}

	can_impose = {
		OR = {
			AND = {
				is_in_same_power_bloc = scope:target_country
				AND = {
					modifier:country_can_impose_same_lawgroup_policing_in_power_bloc_bool = yes
					has_law = scope:law
				}
			}
			can_impose_law_default = yes
		}
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_SOLDIERS"
			if = {
				limit = {
					is_pop_type = soldiers
				}
				value = 0.25
			}
		}
		add = {
			desc = "POP_OFFICERS"
			if = {
				limit = {
					is_pop_type = officers
				}
				value = 0.25
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}

	ai_impose_chance = {
		value = 0
		
		if = {
			limit = {
				has_law = law_type:law_militarized_police
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = base_impose_law_weight
		}

		if = {
			limit = {
				has_law = law_type:law_militarized_police
				scope:target_country = {
					has_law = law_type:law_no_police
				}
				power_bloc ?= { has_principle_group = principle_group:principle_group_police_coordination }
			}
			add = 10
		}
	}
}

﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_no_womens_rights = {
	group = lawgroup_rights_of_women
	icon = "gfx/interface/icons/law_icons/no_womens_rights.dds"
	
	progressiveness = -100
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	modifier = {
		state_birth_rate_mult = 0.05
	}
	
	possible_political_movements = {
		law_women_own_property
	}
	
	pop_support = {
		value = 0
	}

	ai_will_do = {
		literacy_rate < 0.4
		exists = ruler
		ruler = { 
			has_ideology = ideology:ideology_traditionalist 
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_women_own_property = {
	group = lawgroup_rights_of_women
	icon = "gfx/interface/icons/law_icons/women_own_property.dds"
	
	progressiveness = -50
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	modifier = {
		state_working_adult_ratio_add = 0.05
	}
	
	possible_political_movements = {
		law_no_womens_rights
		law_women_in_the_workplace
	}

	pop_support = {
		value = 0
		add = {
			desc = "ALL_POPS"
			if = {
				limit = {
					owner = {
						has_law = law_type:law_no_womens_rights
					}
				}
				value = 0.05
			}
			if = {
				limit = {
					owner = {
						has_law = law_type:law_no_womens_rights
						has_technology_researched = feminism
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = {
						has_law = law_type:law_no_womens_rights
						has_technology_researched = feminism
						has_technology_researched = political_agitation
					}
				}
				value = 0.1
			}
		}
	}
	
	ai_will_do = {
		OR = {
			has_law = law_type:law_no_womens_rights
			AND = {
				exists = ruler
				ruler = { 
					has_ideology = ideology:ideology_traditionalist 
				}		
			}
		}
	}	

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_women_in_the_workplace = {
	group = lawgroup_rights_of_women
	icon = "gfx/interface/icons/law_icons/women_in_the_workplace.dds"
	
	progressiveness = 0
	
	unlocking_technologies = {
		feminism
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	modifier = {
		state_working_adult_ratio_add = 0.1
		state_birth_rate_mult = -0.05
	}
	
	possible_political_movements = {
		law_women_own_property
		law_womens_suffrage
	}

	pop_support = {
		value = 0
		add = {
			desc = "ALL_POPS"
			if = {
				limit = {
					owner = {
						OR = {
							has_law = law_type:law_no_womens_rights
							has_law = law_type:law_women_own_property
						}
					}
				}
				value = 0.05
			}
			if = {
				limit = {
					owner = {
						OR = {
							has_law = law_type:law_no_womens_rights
							has_law = law_type:law_women_own_property
						}
						has_technology_researched = feminism
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = {
						OR = {
							has_law = law_type:law_no_womens_rights
							has_law = law_type:law_women_own_property
						}
						has_technology_researched = feminism
						has_technology_researched = political_agitation
					}
				}
				value = 0.1
			}
		}
	}
	
	ai_will_do = {
		OR = {
			has_law = law_type:law_no_womens_rights
			has_law = law_type:law_women_own_property
			AND = {
				exists = ruler
				ruler = { 
					has_ideology = ideology:ideology_traditionalist 
				}		
			}
		}
	}	

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_womens_suffrage = {
	group = lawgroup_rights_of_women
	icon = "gfx/interface/icons/law_icons/womens_suffrage.dds"
	
	progressiveness = 100
	
	unlocking_technologies = {
		feminism
	}

	unlocking_laws = {
		law_census_voting
		law_landed_voting
		law_wealth_voting
		law_universal_suffrage
		law_single_party_state
		law_anarchy
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	modifier = {
		state_working_adult_ratio_add = 0.15
		state_birth_rate_mult = -0.05
		state_dependent_political_participation_add = 0.33
	}
	
	possible_political_movements = {
		law_women_own_property
	}

	pop_support = {
		value = 0.05
		add = {
			desc = "ALL_POPS"
			if = {
				limit = {
					owner = {
						has_technology_researched = feminism
					}
				}
				value = 0.1
			}
			if = {
				limit = {
					owner = {
						has_technology_researched = feminism
						has_technology_researched = political_agitation
					}
				}
				value = 0.1
			}
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}
﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law

law_slavery_banned = {
	group = lawgroup_slavery
	
	progressiveness = 100
	
	icon = "gfx/interface/icons/law_icons/slavery_banned.dds"
	
	on_activate = {
		set_variable = {
			name = slavery_recently_abolished
			value = yes
			days = 1825
		}
		every_scope_state = {
			limit = { 
				any_scope_pop = {
					is_pop_type = slaves
				}
			}
			set_variable = {
				name = former_slave_state
				value = yes
				days = 1825
			}			
		}
		custom_tooltip = {
			text = liberate_slaves_tt
			liberate_slaves = yes
		}		
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_SLAVES"
			if = {
				limit = { 
					is_pop_type = slaves
				}
				value = 1
			}
		}
		add = {
			desc = "POP_ACADEMICS"
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.1
			}
		}
		add = {
			desc = "POP_CLERGYMEN"
			if = {
				limit = {
					is_pop_type = clergymen
				}
				value = 0.05
			}
		}
		
		# Human rights makes literate pops support abolition
		add = {
			desc = "human_rights"
			
			if = {
				limit = { 
					owner = { has_technology_researched = human_rights }
				}
				add = {
					value = literacy_rate
					divide = 2
				}
			}
		}
	}
	
	revolution_state_weight = {
		value = 1
		if = {
		   limit = { 
			OR = {
			   is_slave_state = yes 
			   has_variable = former_slave_state			
			}
		   }
		   if = {
		      limit = { 
				owner = { # special logic for ACW to try and force a historical split of states
					OR = {
						has_law = law_type:law_legacy_slavery
						has_variable = slavery_recently_abolished
					}				
					any_scope_state = {
						is_slave_state = no 
						NOT = { has_variable = former_slave_state }					
					}
				}	
			 }
			  multiply = 0.0
		   }
		   else = {
			  multiply = 0.25
		   }	
		}	
	}

	ai_enact_weight_modifier = {
		value = 0
		# Brazilian AI is less likely to pursue slavery banned if there are no abolitionists in power.
		if = {
			limit = { 
				c:BRZ ?= this
				has_law = law_type:law_slave_trade
				NOR = {
					any_interest_group = {
						is_in_government = yes
						leader = {
							has_ideology = ideology:ideology_abolitionist
						}
					}
					ruler = { has_ideology = ideology:ideology_abolitionist }
					heir = { has_ideology = ideology:ideology_abolitionist }
				}
				scope:law = law_type:law_slavery_banned
			}
			add = -100
		}
		#Petitions
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}

		# This was funny while it lasted.
		if = {
			limit = { 
				has_law = law_type:law_council_republic
			}
			add = 750
		}
		
		# Strong tendency towards abolitionism in the late game
		if = {
			limit = {
				has_technology_researched = human_rights
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				OR = {
					NOT = { has_strategy = ai_strategy_conservative_agenda }
					any_political_movement = { desired_law = law_type:law_slavery_banned }				
				}	
			}
			add = 1000
		}			
	}
	
	ai_impose_chance = {
		value = 0		
		
		if = {
			limit = {
				has_law = law_type:law_slavery_banned
				NOT = { has_strategy = ai_strategy_reactionary_agenda }
				has_technology_researched = civilizing_mission				
			}
			
			add = base_impose_law_weight
			if = {
				limit = {
					OR = {
						has_strategy = ai_strategy_progressive_agenda
						has_strategy = ai_strategy_egalitarian_agenda
					}
				}
				multiply = 5
			}			
		}
	}
}

law_debt_slavery = {
	group = lawgroup_slavery
	
	progressiveness = 0
	
	icon = "gfx/interface/icons/law_icons/debt_slavery.dds"
	
	disallowing_laws = {
		law_multicultural
	}

	on_activate = {
		ig:ig_landowners ?= { 
			if = {
				limit = {
					NOT = { has_ideology = ideology:ideology_pro_slavery }
				}			
				add_ideology = ideology_pro_slavery 
			}
		}
	}
	
	modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.25
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_SLAVES"
			if = {
				limit = { 
					is_pop_type = slaves
				}
				value = 1
			}
		}	
		add = {
			desc = "POP_ACADEMICS"
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.1
			}
		}
		add = {
			desc = "POP_CLERGYMEN"
			if = {
				limit = {
					is_pop_type = clergymen
				}
				value = 0.05
			}
		}
	}
	
	possible_political_movements = {
		law_slavery_banned
		law_legacy_slavery
	}
	
	# AI should never enact debt slavery
	ai_will_do = {
		always = no
	}
	
	revolution_state_weight = {
		value = 1
		if = {
		   limit = { 
			  is_slave_state = no 
			  NOT = { has_variable = former_slave_state }
		   }	
		   if = {
		      limit = { 
				owner = { # special logic for ACW to try and force a historical split of states 					
					has_journal_entry = je_acw_countdown
					OR = {
						has_law = law_type:law_legacy_slavery
						has_variable = slavery_recently_abolished
					}
					any_scope_state = {
						OR = {
						   is_slave_state = yes 
						   has_variable = former_slave_state			
						}				
					}					
				} 
			  }	  
			  multiply = 0.0
		   }
		   else = {
			  multiply = 0.25
		   }
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_slave_trade = {
	group = lawgroup_slavery
	
	progressiveness = 0
	
	icon = "gfx/interface/icons/law_icons/slave_trade.dds"
	
	disallowing_laws = {
		law_cultural_exclusion
		law_multicultural
	}
	
	on_activate = {
		if = {
			limit = { has_variable = slavery_recently_abolished }
			custom_tooltip = {
				text = enslave_discriminated_farm_workers_tt
				every_scope_state = {
					limit = { has_variable = former_slave_state }
					enslave_discriminated_farm_workers = yes
				}	
			}	
			remove_variable = slavery_recently_abolished
			every_scope_state = {
				remove_variable = former_slave_state
			}			
		}

		ig:ig_landowners ?= { 
			if = {
				limit = {
					NOT = { has_ideology = ideology:ideology_pro_slavery }
				}			
				add_ideology = ideology_pro_slavery 
			}
		}
	}
	
	possible_political_movements = {
		law_slavery_banned
		law_legacy_slavery
	}

	pop_support = {
		value = 0
		
		add = {
			desc = "POP_ARISTOCRATS"
			if = {
				limit = { 
					is_pop_type = aristocrats
				}
				value = 0.1
			}
		}
	}
	
	modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.5
	}	
	
	ai_will_do = {
		exists = ruler
		ruler = {
			has_ideology = ideology:ideology_slaver
		}
	}
	
	revolution_state_weight = {
		value = 1
		if = {
		   limit = { 
			  is_slave_state = no 
			  NOT = { has_variable = former_slave_state }
		   }	
		   if = {
		      limit = { 
				owner = { # special logic for ACW to try and force a historical split of states					
					has_journal_entry = je_acw_countdown
					OR = {
						has_law = law_type:law_legacy_slavery
						has_variable = slavery_recently_abolished
					}
					any_scope_state = {
						OR = {
						   is_slave_state = yes 
						   has_variable = former_slave_state			
						}				
					}						
				} 
			  }	  
			  multiply = 0.0
		   }
		   else = {
			  multiply = 0.25
		   }
		}
	}

	ai_enact_weight_modifier = { #Petitions
		value = 0
		
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
	}
}

law_legacy_slavery = {
	group = lawgroup_slavery
	
	progressiveness = 50
	
	icon = "gfx/interface/icons/law_icons/legacy_slavery.dds"

	# no need to add disallowing_laws here since it can only be enacted from Slave Trade
	
	unlocking_laws = {
		law_slave_trade
	}
	
	on_activate = {
		if = {
			limit = { has_variable = slavery_recently_abolished }
			custom_tooltip = {
				text = enslave_discriminated_farm_workers_tt
				every_scope_state = {
					limit = { has_variable = former_slave_state }
					enslave_discriminated_farm_workers = yes
				}			
			}
			remove_variable = slavery_recently_abolished
			every_scope_state = {
				remove_variable = former_slave_state
			}
		}

		ig:ig_landowners ?= { 
			if = {
				limit = {
					NOT = { has_ideology = ideology:ideology_pro_slavery }
				}			
				add_ideology = ideology_pro_slavery 
			}
		}
	}	
		
	modifier = {
		interest_group_ig_landowners_pol_str_mult = 0.25
	}	

	possible_political_movements = {
		law_slavery_banned
	}

	pop_support = {
		value = 0
		add = {
			desc = "POP_ACADEMICS"
			if = {
				limit = {
					is_pop_type = academics
				}
				value = 0.1
			}
		}
		add = {
			desc = "POP_CLERGYMEN"
			if = {
				limit = {
					is_pop_type = clergymen
				}
				value = 0.05
			}
		}
		# Brazilian pops are more likely to pursue legacy slavery if the Aberdeen Act is being enforced
		if = {
			desc = "aberdeen_act_pop_support"
			limit = {
				c:BRZ ?= owner
				owner = { 
					has_law = law_type:law_slave_trade 
					has_modifier = aberdeen_act_enforced_brz
				}
			}
			value = 0.1
		}
	}

	revolution_state_weight = {
		value = 1
		if = {
		   limit = { 
			  is_slave_state = no 
			  NOT = { has_variable = former_slave_state }
		   }	
		   if = {
		      limit = { 
				owner = { # special logic for ACW to try and force a historical split of states					
					has_journal_entry = je_acw_countdown
					OR = {
						has_law = law_type:law_legacy_slavery
						has_variable = slavery_recently_abolished
					}
					any_scope_state = {
						OR = {
						   is_slave_state = yes 
						   has_variable = former_slave_state			
						}				
					}						
				} 
			  } 
			  multiply = 0.0
		   }
		   else = {
			  multiply = 0.25
		   }
		}
	}
	ai_enact_weight_modifier = {
		value = 0
		#Brazilian AI is more likely to pursue legacy slavery if there are no abolitionists in power.
		if = {
			limit = { 
				c:BRZ ?= this
				has_law = law_type:law_slave_trade
				NOR = {
					any_interest_group = {
						is_in_government = yes
						leader = {
							has_ideology = ideology:ideology_abolitionist
						}
					}
					ruler = { has_ideology = ideology:ideology_abolitionist }
					heir = { has_ideology = ideology:ideology_abolitionist }
				}
				scope:law = law_type:law_legacy_slavery
			}
			add = 50
		}
		# Brazilian AI is more likely to pursue legacy slavery if the Aberdeen Act is being enforced
		if = {
			limit = { 
				c:BRZ ?= this
				has_law = law_type:law_slave_trade
				has_modifier = aberdeen_act_enforced_brz
				scope:law = law_type:law_legacy_slavery
			}
			add = 50
		}
		#Petitions
		if = {
			limit = { ai_has_enact_weight_modifier_journal_entries = yes }
			add = 750
		}
}
﻿# group = this is the law_group a law belongs to
# icon = graphical icon shown in-game
# modifier = {} modifier on country for having adopted this law
# cultural_acceptance_rule and religious_acceptance_rule are triggers called in culture scope with scope:country as the country with the laws

law_ethnostate = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/ethnostate.dds"
	
	progressiveness = -100
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}
	
	cultural_acceptance_rule = {
		is_primary_culture_of = scope:country
	}

	unlocking_technologies = {
		nationalism
	}
	
	modifier = {
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_racial_segregation
		law_cultural_exclusion
	}
}

law_national_supremacy = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/national_supremacy.dds"
	
	progressiveness = -50
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}
	
	cultural_acceptance_rule = {
		AND = {
			shares_heritage_trait_with_any_primary_culture = scope:country
			shares_non_heritage_trait_with_any_primary_culture = scope:country
		}
	}
	
	modifier = {
		country_authority_add = 200
	}
	
	possible_political_movements = {
		law_racial_segregation
		law_cultural_exclusion
	}
}

law_racial_segregation = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/racial_segregation.dds"
	
	progressiveness = 0
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	cultural_acceptance_rule = {
		shares_heritage_trait_with_any_primary_culture = scope:country
	}
	
	modifier = {
		country_authority_add = 100
	}
	
	possible_political_movements = {
		law_national_supremacy
		law_cultural_exclusion
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					culture_accepted = no
					owner = { has_law = law_type:law_national_supremacy }
				}
				value = 0.5				
			}
			if = {
				limit = { 
					culture_accepted = no
					owner = { has_law = law_type:law_national_supremacy }
					standard_of_living <= 10 
				}
				value = 0.5				
			}			
		}
	}
}

law_cultural_exclusion = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/cultural_exclusion.dds"
	
	progressiveness = 50
	
	unlocking_laws = {
		law_slavery_banned
		law_debt_slavery
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	cultural_acceptance_rule = {
		shares_trait_with_any_primary_culture = scope:country
	}
	
	modifier = {
		country_authority_add = 50
	}
	
	possible_political_movements = {
		law_racial_segregation
		law_multicultural
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					culture_accepted = no
					owner = { NOT = { has_law = law_type:law_multicultural } }
				}
				value = 0.5				
			}
			if = {
				limit = { 
					culture_accepted = no
					owner = { NOT = { has_law = law_type:law_multicultural } }
					standard_of_living <= 10 
				}
				value = 0.5				
			}			
		}
	}
}

law_multicultural = {
	group = lawgroup_citizenship
	
	icon = "gfx/interface/icons/law_icons/multicultural.dds"
	
	progressiveness = 100

	unlocking_laws = {
		law_slavery_banned
	}
	
	unlocking_technologies = {
		egalitarianism
	}
	
	on_enact = {
		recalculate_pop_ig_support = yes
	}

	cultural_acceptance_rule = {
		always = yes
	}
	
	possible_political_movements = {
		law_cultural_exclusion
	}
	
	pop_support = {
		value = 0
		
		add = {
			desc = "POP_DISCRIMINATED"
			if = {
				limit = { 
					culture_accepted = no
				}
				value = 0.5				
			}
			if = {
				limit = { 
					culture_accepted = no
					standard_of_living <= 10 
				}
				value = 0.5				
			}			
		}
	}
}


﻿build_building = {
	mapmode = mm_construction_interaction

	clicksound = "event:/SFX/UI/MapInteraction/build_building"
	show_interaction_text_on_click = yes
}

build_special_building = {
	mapmode = mm_construction_interaction

	clicksound = "event:/SFX/UI/MapInteraction/build_building_epic"
	show_interaction_text_on_click = yes
}

diplomatic_action = {
	mapmode = mm_diplomatic_action_interaction

	# diplomatic actions use specific sounds depending on the specific action
	show_interaction_text_on_click = yes
}

diplomatic_play_country = {
	mapmode = mm_diplomatic_play_country_interaction

	# diplomatic plays always require confirmation
	clicksound = "event:/SFX/UI/Global/confirm"
	show_interaction_text_on_click = yes
}

diplomatic_play_state = {
	mapmode = mm_diplomatic_play_state_interaction

	# diplomatic plays always require confirmation
	clicksound = "event:/SFX/UI/Global/confirm"
	show_interaction_text_on_click = yes
}

declare_interest = {
	mapmode = mm_declare_interest_interaction

	clicksound = "event:/SFX/UI/MapInteraction/diplomatic_action_interest"
	show_interaction_text_on_click = yes
}

issue_decree = {
	mapmode = mm_issue_decree_interaction

	clicksound = "event:/SFX/UI/MapInteraction/civil"
	show_interaction_text_on_click = yes
}

incorporate_state = {
	mapmode = mm_incorporate_state_interaction

	clicksound = "event:/SFX/UI/MapInteraction/civil"
	show_interaction_text_on_click = yes
}

move_capital = {
	mapmode = mm_move_capital_interaction

	clicksound = "event:/SFX/UI/MapInteraction/civil"
	show_interaction_text_on_click = yes
}

move_market_capital = {
	mapmode = mm_move_market_capital_interaction

	clicksound = "event:/SFX/UI/MapInteraction/civil"
	show_interaction_text_on_click = yes
}

reset_production_methods = {
	mapmode = mm_reset_production_methods_interaction

	show_interaction_text_on_click = yes
	
	clicksound = "event:/SFX/UI/MapInteraction/civil"
}

establish_colony = {
	mapmode = mm_establish_colony_interaction

	clicksound = "event:/SFX/UI/MapInteraction/establish_colony"
	show_interaction_text_on_click = yes
}

establish_military_import = {
	mapmode = mm_market_interaction
	
	show_interaction_text_on_click = no

	clicksound = "event:/SFX/UI/MapInteraction/trade_route"
}

establish_staple_import = {
	mapmode = mm_market_interaction
	
	show_interaction_text_on_click = no

	clicksound = "event:/SFX/UI/MapInteraction/trade_route"
}

establish_industrial_import = {
	mapmode = mm_market_interaction
	
	show_interaction_text_on_click = no

	clicksound = "event:/SFX/UI/MapInteraction/trade_route"
}

establish_luxury_import = {
	mapmode = mm_market_interaction
	
	show_interaction_text_on_click = no

	clicksound = "event:/SFX/UI/MapInteraction/trade_route"
}

establish_military_export = {
	mapmode = mm_market_interaction
	
	show_interaction_text_on_click = no

	clicksound = "event:/SFX/UI/MapInteraction/trade_route"
}

establish_staple_export = {
	mapmode = mm_market_interaction
	
	show_interaction_text_on_click = no

	clicksound = "event:/SFX/UI/MapInteraction/trade_route"
}

establish_industrial_export = {
	mapmode = mm_market_interaction
	
	show_interaction_text_on_click = no

	clicksound = "event:/SFX/UI/MapInteraction/trade_route"
}

establish_luxury_export = {
	mapmode = mm_market_interaction
	
	show_interaction_text_on_click = no

	clicksound = "event:/SFX/UI/MapInteraction/trade_route"
}

activate_conscription_center = {
	mapmode = mm_activate_conscripts_interaction

	clicksound = "event:/SFX/UI/Military/conscription_center_activate"
	show_interaction_text_on_click = yes
}

designate_strategic_objective = {
	mapmode = mm_designate_strategic_objective

	clicksound = "event:/SFX/UI/Military/strategic_objective_confirm"
	show_interaction_text_on_click = yes
}

recruit_generals = {
	mapmode = mm_recruit_generals_interaction

	clicksound = "event:/SFX/UI/Military/commander_recruit"
	show_interaction_text_on_click = yes
}

recruit_admirals = {
	mapmode = mm_recruit_admirals_interaction

	clicksound = "event:/SFX/UI/Military/commander_recruit"
	show_interaction_text_on_click = yes
}

create_formation = {
	mapmode = mm_create_formation_interaction

	clicksound = "event:/SFX/UI/Military/create_formation"
	show_interaction_text_on_click = yes
}

plan_naval_invasion = {
	mapmode = mm_state_interaction

	clicksound = "event:/SFX/UI/Global/confirm"
	
	show_interaction_text_on_click = no
}

show_supply_areas = {
	mapmode = mm_theater_interaction
}

deploy_military_formation_to_front = {
	mapmode = mm_front_interaction
	clicksound = "event:/SFX/UI/Military/formation_actions_deploy_to_front"
	show_interaction_text_on_click = yes
}

deploy_military_formation_to_sea_node = {
	mapmode = mm_strategic_region_interaction
	clicksound = "event:/SFX/UI/Military/formation_actions_deploy_to_sea_node"
	show_interaction_text_on_click = yes
}

station_military_formation = {
	mapmode = mm_hq_interaction
	clicksound = "event:/SFX/UI/Military/formation_actions_station_at_hq"
	show_interaction_text_on_click = yes
}

rehome_military_formation = {
	mapmode = mm_hq_interaction
	clicksound = "event:/SFX/UI/Military/order_general_activate"
	show_interaction_text_on_click = yes
}

join_power_bloc = {
	mapmode = mm_power_blocs
	show_interaction_text_on_click = yes
}

﻿﻿#notification_example = {													#notification key
#	type = country 															#include notification type
#   group = "some_group"                                                    # group for "Current Situation". Also adds this notification to the Message Settings list.
#	texture = "gfx/interface/icons/notification_icons/technology.dds" 		#texture icon. Mandatory if notification has a group. Otherwise, you will get a pink face placeholder in feed notifications.
#
#	notification_type = feed/toast/popup									#how the notification will be presented
#	popup_name = acquired_technology_popup 									#gui specification for popups, must be in gui/popups.gui
# 	colore = bad/neutral/good army											#colors the notification 
#
#	on_created_soundeffect = "event:/SFX/UI/Notifications/notification" 	#notification on creationg sound
#}


#       ######  ####### ######  #     # ######  
#       #     # #     # #     # #     # #     # 
#       #     # #     # #     # #     # #     # 
#       ######  #     # ######  #     # ######  
#       #       #     # #       #     # #       
#       #       #     # #       #     # #       
#       #       ####### #        #####  # 

peace_agreement_signed_war_leader = {
	type = country
	group = "peace_agreement_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/peace.dds"

	notification_type = popup #important
	popup_name = peace_signed_popup

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/peace_agreement"
}

peace_agreement_signed_war_participant = {
	type = country
	group = "peace_agreement_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/peace.dds"

	notification_type = popup #important
	popup_name = peace_signed_popup

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/peace_agreement"
}

self_capitulated = {
	type = country
	group = "capitulated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = popup
	popup_name = capitulation_popup

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/capitulated"
}

ally_capitulated = {
	type = country
	group = "capitulated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = popup
	popup_name = capitulation_popup

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/capitulated"
}

enemy_capitulated = {
	type = country
	group = "capitulated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = popup
	popup_name = capitulation_popup

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/capitulated"
}

diplomatic_proposal_declined = {
	type = diplomatic_action
	group = "diplomatic_proposal_declined_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = popup
	popup_name = diplomatic_action_with_reasons_notification_popup
}

diplo_play_war_start_notification = {
	type = diplomatic_play
	group = "diplo_play_war_start_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = popup
	popup_name = war_started

	on_created_soundeffect = "event:/SFX/UI/Military/to_war_popup_notification"
}

acquired_technology_notification = {
	type = country
	group = "acquired_technology_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/technology.dds"

	notification_type = popup #important
	popup_name = acquired_technology_popup
	
	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/acquired_technology"
}  

law_changed_notification = {
	type = law
	group = "law_changed_notification_group"

	notification_type = popup #important
	popup_name = law_changed_popup
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"
	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/law_changed"
}

#       ####### #######    #     #####  #######  #####  
#          #    #     #   # #   #     #    #    #     # 
#          #    #     #  #   #  #          #    #       
#          #    #     # #     #  #####     #     #####  
#          #    #     # #######       #    #          # 
#          #    #     # #     # #     #    #    #     # 
#          #    ####### #     #  #####     #     #####  

law_notification_advance = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = good
}

law_notification_debate_success = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = good
}

law_notification_debate_fail = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = bad
}

law_notification_stall = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = bad
}

law_notification_setback = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = bad
}

law_notification_phase_forward_1 = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = good
}

law_notification_phase_forward_2 = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = good
}

claim_added_notification = {
	type = country
	group = "claims_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = toast
	color = good
}

institution_investment_increased = {
	type = institution
	group = "institution_investment_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/rank_up.dds"

	notification_type = toast
	color = good
}

institution_investment_decreased = {
	type = institution
	group = "institution_investment_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/rank_down.dds"

	notification_type = toast
	color = neutral
}

resource_discovered = {
	type = state_region
	group = "resource_discovery_notification_group"

	notification_type = toast
	color = good

	texture = "gfx/interface/icons/notification_icons/resource.dds"
}

resource_depleted = {
	type = state_region
	group = "resource_discovery_notification_group"
	notification_type = toast
	color = bad

	texture = "gfx/interface/icons/notification_icons/resource.dds"
}

rank_changed_notification = {
	type = country
	group = "country_rank_changed_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/default.dds"

	notification_type = toast
	color = neutral
	
	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/rank_changed"
}

diplomatic_action_notification = {
	type = diplomatic_action
	group = "diplomatic_action_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = toast
	color = neutral
}

diplomatic_proposal_accepted = {
	type = diplomatic_action
	group = "diplomatic_proposal_accepted_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = toast
	color = neutral
}

diplo_play_start_notification = {
	type = diplomatic_play
	group = "diplo_play_start_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = neutral
}

diplo_play_back_down_notification = {
	type = diplomatic_play
	group = "diplo_play_back_down_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = neutral
}

diplo_play_back_down_involved_notification = {
	type = diplomatic_play
	group = "diplo_play_back_down_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = neutral
}

diplo_play_join_side_notification = {
	type = diplomatic_play
	group = "diplo_play_join_side_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = neutral
}

diplo_play_abandon_side_notification = {
	type = diplomatic_play
	group = "diplo_play_abandon_side_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = neutral
}

colony_created = {
	type = state
	group = "colony_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = toast
	color = good
}

colony_complete = {
	type = state
	group = "colony_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = toast
	color = good
}

migration_target_created = {
	type = state
	group = "migration_target_created_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/pops.dds"

	notification_type = toast
	color = neutral
	
	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/migration_target"
}

country_revolution = {
	type = civil_war
	group = "country_revolution_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = toast
	color = bad

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/country_revolution"
}

country_secession = {
	type = civil_war
	group = "country_secession_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/secession.dds"

	notification_type = toast
	color = bad

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/country_revolution"
}

parties_activated = {
	type = country
	group = "parties_activated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/new_parties"
}

election_results = {
	type = country
	group = "election_results_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/elections.dds"

	notification_type = toast
	color = neutral

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/election_results"
}

enactment_failed = {
	type = country
	group = "enactment_failed_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = bad

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/country_revolution"
}

new_ruler = {
	type = character
	group = "new_ruler_notification_group"

	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = toast
	color = neutral
}


native_uprising_notification = {
	type = country
	group = "native_uprising_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/secession.dds"

	notification_type = toast
	color = bad

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/native_uprising"
}

journal_entry_completed = {
	type = journal_entry
	group = "journal_entry_completed_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/journal.dds"

	notification_type = toast
	color = good

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/journal_entry_completed"
}

cobelligerent_in_default_notification = {
	type = country
	group = "war_participant_in_default_notification_group"

	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = toast
	color = bad
}

country_nationalized_building = {
    type = building
    group = "country_nationalized_building_group"

	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = toast
	color = neutral
}

country_nationalized_building_no_compensation = {
    type = building
    group = "country_nationalized_building_group"

	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = toast
	color = neutral
}

fleet_defeated = {
    type = military_formation
    group = "fleet_notification_group"

	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = toast
	color = bad
}

fleet_repaired = {
    type = military_formation
    group = "fleet_notification_group"

    texture = "gfx/interface/icons/notification_icons/order.dds"

	notification_type = toast
	color = good
}

enemy_in_default_notification = {
	type = country
	group = "war_participant_in_default_notification_group"

	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = toast
	color = good
}

formation_could_not_find_other_formation_to_automatically_merge_into = {
	type = military_formation
	group = "formation_could_not_find_other_formation_to_automatically_merge_into_notification_group"

	texture = "gfx/interface/icons/notification_icons/order.dds"

	notification_type = toast
}

power_bloc_formed = {
	type = power_bloc
	group = "power_bloc_formation"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"

	notification_type = toast
}

power_bloc_disbanded_leader_left = {
	type = power_bloc
	group = "power_bloc_formation"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"

	notification_type = toast
}

power_bloc_disbanded_leader_not_eligible = {
	type = power_bloc
	group = "power_bloc_formation"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"

	notification_type = toast
}

power_bloc_leader_left = {
	type = power_bloc
	group = "power_bloc_leadership"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_leader_outranked= {
	type = power_bloc
	group = "power_bloc_leadership"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_member_left = {
	type = power_bloc
	group = "power_bloc_membership"
	
	notification_type = toast
	color = bad
}

power_bloc_member_kicked = {
	type = power_bloc
	group = "power_bloc_membership"
	
	notification_type = toast
	color = bad
}

power_bloc_principle_mandate_available = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_principle_added = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_principle_removed = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"

	notification_type = toast
}

power_bloc_principle_exchanged = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_principle_upgraded = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_principle_downgraded = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

political_lobby_created_from_catalyst = {
	type = country
	group = "political_lobby_created_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

political_lobby_created = {
	type = country
	group = "political_lobby_created_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

political_lobby_disbanded_with_reason = {
	type = country
	group = "political_lobby_disbanded_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

political_lobby_disbanded = {
	type = country
	group = "political_lobby_disbanded_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

foreign_political_lobby_created = {
	type = country
	group = "foreign_political_lobby_created_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

foreign_political_lobby_created_from_catalyst = {
	type = country
	group = "foreign_political_lobby_created_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

foreign_political_lobby_disbanded = {
	type = country
	group = "foreign_political_lobby_disbanded_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

foreign_political_lobby_disbanded_with_reason = {
	type = country
	group = "foreign_political_lobby_disbanded_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

interest_group_joins_lobby = {
	type = country
	group = "interest_group_joins_lobby_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

country_attitude_improved = {
	type = country
	group = "country_attitude_changed_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

country_attitude_changed = {
	type = country
	group = "country_attitude_changed_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

country_attitude_worsened = {
	type = country
	group = "country_attitude_changed_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

interest_group_leaves_lobby = {
	type = country
	group = "interest_group_leaves_lobby_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

power_struggle_started_for_contender = {
	type = power_bloc
	group = "power_struggle"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = feed
	color = good
}

power_struggle_started_for_leader = {
	type = power_bloc
	group = "power_struggle"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = feed
	color = bad
}

power_struggle_failed_for_contender = {
	type = power_bloc
	group = "power_struggle"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = feed
	color = bad
}

power_struggle_failed_for_leader = {
	type = power_bloc
	group = "power_struggle"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = feed
	color = good
}

power_struggle_succeeded_for_contender = {
	type = power_bloc
	group = "power_bloc_leadership"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
	color = good
}

power_struggle_succeeded_for_looser = {
	type = power_bloc
	group = "power_bloc_leadership"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
	color = bad
}

power_struggle_succeeded = {
	type = power_bloc
	group = "power_bloc_leadership"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
	color = neutral
}

#       ####### ####### ####### ######
#       #       #       #       #     # 
#       #       #       #       #     # 
#       #####   #####   #####   #     # 
#       #       #       #       #     # 
#       #       #       #       #     # 
#       #       ####### ####### ######  

spreading_technology_notification = {
	type = country
	group = "spreading_technology_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/technology.dds"

	notification_type = feed
	color = good
}

heir_born_notification = {
	type = character
	group = "heir_born_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
	color = neutral
}

character_died_notification = {
	type = character
	group = "character_died_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/death.dds"

	notification_type = feed
	color = bad
}

character_new_formation_notification = {
	type = character
	group = "character_new_formation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
	color = neutral
}

character_died_war_office_notification = {
	type = character
	group = "character_died_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/death.dds"

	notification_type = feed
	color = bad
}

exile_notification = {
	type = country
	group = "character_exiled_notification_group"
	days = 28

	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = toast
	color = neutral
}

agitator_spawned = {
	type = country
	group = "agitator_spawned_notification_group"

	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = toast
	color = neutral
}

peace_agreement_signed_non_participant = {
	type = country
	group = "peace_agreement_signed_non_participant_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/peace.dds"

	notification_type = feed
	color = neutral
	popup_name = peace_signed_popup
}

diplomatic_action_overlord_decrease_autonomy_notification = {
	type = diplomatic_action
	group = "diplomatic_action_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = bad
}

diplomatic_action_overlord_increase_autonomy_notification = {
	type = diplomatic_action
	group = "diplomatic_action_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = good
}

diplomatic_action_subject_increase_own_autonomy_notification = {
	type = diplomatic_action
	group = "diplomatic_action_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = good
}

diplomatic_action_break_notification = {
	type = diplomatic_action
	group = "diplomatic_action_break_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_break_accepted = {
	type = diplomatic_action
	group = "diplomatic_proposal_break_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_break_declined = {
	type = diplomatic_action
	group = "diplomatic_proposal_break_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_notification = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_accepted = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_break_notification = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_break_accepted = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_declined = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_break_declined = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_pact_auto_break_notification = {
	type = diplomatic_pact
	group = "diplomatic_pact_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_pact_third_party_auto_break_notification = {
	type = diplomatic_pact
	group = "diplomatic_pact_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplo_play_start_third_party_notification = {
	type = diplomatic_play
	group = "diplo_play_start_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

diplo_play_war_start_third_party_notification = {
	type = diplomatic_play
	group = "diplo_play_war_start_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

diplo_play_subject_released_notification = {
	type = diplomatic_play
	group = "diplo_play_subject_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

diplo_play_subject_released_overlord_notification = {
	type = diplomatic_play
	group = "diplo_play_subject_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

country_swayed = {
	type = diplomatic_play
	group = "country_swayed_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

sway_offer_accepted = {
	type = diplomatic_play
	group = "sway_offer_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = good
}

reverse_sway_offer_accepted = {
	type = diplomatic_play
	group = "sway_offer_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = good
}

sway_offer_rejected = {
	type = diplomatic_play
	group = "sway_offer_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = bad
}

reverse_sway_offer_rejected = {
	type = diplomatic_play
	group = "sway_offer_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = bad
}

diplomatic_demand_accepted = {
	type = diplomatic_demand
	group = "diplomatic_demand_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = good
}

diplomatic_demand_rejected = {
	type = diplomatic_demand
	group = "diplomatic_demand_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = bad
}

interest_activated = {
	type = interest_marker
	group = "interest_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = feed
	color = good
}

interest_deactivated = {
	type = interest_marker
	group = "interest_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = feed
	color = bad
}

ig_trait_activated = {
	type = interest_group
	group = "ig_trait_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_became_influential = {
	type = interest_group
	group = "ig_influence_level_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_became_powerful = {
	type = interest_group
	group = "ig_influence_level_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_no_longer_powerful = {
	type = interest_group
	group = "ig_influence_level_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_no_longer_influential = {
	type = interest_group
	group = "ig_influence_level_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_movement_left_in_government = {
	type = interest_group
	group = "ig_movement_left_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_movement_left_happy = {
	type = interest_group
	group = "ig_movement_left_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = good
}

ig_trait_deactivated = {
	type = interest_group
	group = "ig_trait_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_resigned_government = {
	type = interest_group
	group = "ig_resigned_government_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group_bad.dds"

	notification_type = feed
	color = neutral
}

ig_leader_memento_mori = {
	type = country
	group = "ig_leader_memento_mori_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = bad
}

colony_complete_third_party = {
	type = state
	group = "colony_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
	color = neutral
}

new_culture_obsession = {
	type = culture
	group = "new_culture_obsession_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/goods.dds"

	notification_type = feed
	color = neutral
}

migration_target_created_other = {
	type = state
	group = "migration_target_created_other_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/pops.dds"

	notification_type = feed
	color = neutral
	
	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/migration_target"	
}

commander_order_invalidated = {
	type = character
	group = "commander_order_invalidated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/order.dds"

	notification_type = feed
	color = neutral
}

commander_move = {
	type = character
	group = "commander_move_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/order.dds"

	notification_type = feed
	color = neutral
}

country_conscription = {
	type = country
	group = "country_conscription_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/mobilize.dds"

	notification_type = feed
	color = neutral
}

wargoal_added = {
	type = diplomatic_play
	group = "wargoal_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

wargoal_removed = {
	type = diplomatic_play
	group = "wargoal_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

new_significant_trade_route = {
	type = trade_route
	group = "significant_trade_route_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"

	notification_type = feed
	color = neutral
}

canceled_significant_trade_route = {
	type = trade_route
	group = "significant_trade_route_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"

	notification_type = feed
	color = neutral
}

naval_invasion_against_us = {
	type = country
	group = "naval_invasion_against_us_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

naval_invasion_succeeded = {
	type = country
	group = "naval_invasion_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = good
}

naval_invasion_failed = {
	type = country
	group = "naval_invasion_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

our_convoy_raiders_intercepted = {
	type = country
	group = "convoy_raiders_intercepted_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

enemy_convoy_raiders_intercepted = {
	type = country
	group = "convoy_raiders_intercepted_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = good
}

enemy_convoys_raided = {
	type = country
	group = "convoys_raided_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = good
}

our_convoys_raided = {
	type = country
	group = "convoys_raided_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

journal_entry_activated = {
	type = journal_entry
	group = "journal_entry_activation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/journal.dds"

	notification_type = feed
	color = neutral
}

journal_entry_deactivated = {
	type = journal_entry
	group = "journal_entry_activation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/journal.dds"

	notification_type = feed
	color = neutral
}

political_movement_formed = {
	type = political_movement
	group = "political_movement_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = feed
	color = neutral
}

political_movement_disbanded = {
	type = political_movement
	group = "political_movement_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = feed
	color = neutral
}

country_owes_obligation = {
	type = country
	group = "country_owes_obligation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

country_owed_obligation = {
	type = country
	group = "country_owed_obligation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

country_owes_obligation_removed = {
	type = country
	group = "country_owes_obligation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

country_owed_obligation_removed = {
	type = country
	group = "country_owed_obligation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

obligation_owed_to_us_expired = {
	type = country
	group = "obligation_expired_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

obligation_owed_by_us_expired = {
	type = country
	group = "obligation_expired_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

unification_candidate_added = {
	type = country
	group = "unification_candidate_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

unification_candidate_removed = {
	type = country
	group = "unification_candidate_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

start_supporting_unification = {
	type = country
	group = "unification_support_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

stop_supporting_unification = {
	type = country
	group = "unification_support_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

shipping_lane_trade_route_invalidated = {
	type = trade_route
	group = "shipping_lane_trade_route_invalidated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"

	notification_type = feed
	color = bad
}

shipping_lane_formation_destination_invalidated = {
	type = military_formation
	group = "shipping_lane_formation_destination_invalidated_notification_group"

	texture = "gfx/interface/icons/notification_icons/order.dds"

	notification_type = feed
	color = bad
}

formation_travel_to_front_cancelled = {
	type = military_formation
	group = "formation_travel_to_front_cancelled_notification_group"

	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

formation_travel_station_in_hq_cancelled = {
	type = military_formation
	group = "formation_travel_station_in_hq_cancelled_notification_group"

	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

formation_travel_deploy_to_sea_node_cancelled = {
	type = military_formation
	group = "formation_travel_deploy_to_sea_node_cancelled_notification_group"

	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

formation_travel_track_formation_cancelled = {
	type = military_formation
	group = "formation_travel_track_formation_cancelled_notification_group"

	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

#       #     # ####### #     # ####### 
#       ##    # #     # ##    # #       
#       # #   # #     # # #   # #       
#       #  #  # #     # #  #  # #####   
#       #   # # #     # #   # # #       
#       #    ## #     # #    ## #       
#       #     # ####### #     # ####### 

# Only notifies when an interest results in diplomatic ties being established
interest_activated_third_party = {
	type = interest_marker
	group = "interest_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = none
	color = good
}

# Only notifies when an interest results in diplomatic ties being lost
interest_deactivated_third_party = {
	type = interest_marker
	group = "interest_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = none
	color = bad
}

diplo_play_declare_neutrality_notification = {
	type = diplomatic_play
	group = "diplo_play_declare_neutrality_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = none
	color = neutral
}

price_report = {
	type = country
	group = "price_report_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/goods.dds"
	notification_type = none
	color = neutral
}

new_trade_route = {
	type = trade_route
	group = "trade_route_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"

	notification_type = none
	color = neutral
}

canceled_trade_route = {
	type = trade_route
	group = "trade_route_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"

	notification_type = none
	color = neutral
}

country_mobilization = {
	type = country
	group = "country_mobilization_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/mobilize.dds"

	notification_type = none
	color = neutral
}

building_built_notification = {
	type = building
	group = "building_built_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/building_expanded.dds"

	notification_type = none
	color = neutral
}

building_expanded_notification = {
	type = building
	group = "building_expanded_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/building_expanded.dds"

	notification_type = none
	color = neutral
}

﻿neighbor_events_1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
}

je_secret_police_research_identification_complete = {
	type = country
	texture = "gfx/interface/icons/notification_icons/authority.dds"

	notification_type = feed
}

je_secret_police_research_identification_fail = {
	type = country
	texture = "gfx/interface/icons/notification_icons/authority.dds"

	notification_type = feed
}

je_make_schools_secular_complete = {
	type = country
	texture = "gfx/interface/icons/notification_icons/bureaucracy.dds"

	notification_type = feed
}

je_make_schools_secular_fail = {
	type = country
	texture = "gfx/interface/icons/notification_icons/bureaucracy.dds"

	notification_type = feed
}

violate_sovereignty_third_party_joins = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

lowlands_land_reclamation_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

expedition_progress_average = {
	type = country
	texture = "gfx/interface/icons/notification_icons/mobilize.dds"
	notification_type = feed
}

west_america_expedition_progress_average = {
	type = country
	texture = "gfx/interface/icons/notification_icons/mobilize.dds"
	notification_type = feed
}

suez_survey_started = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

panama_survey_started = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

obligation_events_accepted = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"
	notification_type = feed
}

obligation_events_rejected = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"
	notification_type = feed
}

first_flight = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"
	notification_type = feed
}

ig_leader_steps_down = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

haiti_stops_paying_france = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}

rival_supports_trade_unions = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"
	notification_type = feed
}

ig_leader_assassination = {
	type = country
	texture = "gfx/interface/icons/notification_icons/death.dds"
	notification_type = feed
}


rival_comdemns_slavery = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"
	notification_type = feed
}

ig_leader_assassination_failed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"
	notification_type = feed
}

slave_revolt_1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = feed
}

slave_revolt_2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = feed
}

warlord_china_explosion_point_add = {
	type = country
	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = feed
}

warlord_china_explosion_point_remove = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = feed
}

country_shared_plastics_tech = {
	type = country
	texture = "gfx/interface/icons/notification_icons/technology.dds"

	notification_type = feed
}

country_shared_radio_tech = {
	type = country
	texture = "gfx/interface/icons/notification_icons/technology.dds"

	notification_type = feed
}

imposition_demand_sent = {
	type = country
	group = "on_impose_law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = toast
}

imposition_started = {
	type = country
	group = "on_impose_law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = toast
}

imposition_deferred = {
	type = country
	group = "on_impose_law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = toast
}

colonial_conflict_region_demands_refused = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

colonial_conflict_region_demands_met = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

colonial_conflict_claim_demands_refused = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

colonial_conflict_claim_demands_met = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

victoria_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

opium_wars_british_response_angry = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"
	notification_type = feed
}

opium_wars_british_response_passive = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"
	notification_type = feed
}

santa_anna_captured_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
}


algerian_raid = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"
	notification_type = feed
	days = 28
}

pebrine_spread_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"
	notification_type = feed
	days = 28
}

revolution_pulse1_events13agitator_killed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"
	notification_type = feed
	days = 28
}

revolution_pulse1_events13agitator_not_killed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"
	notification_type = feed
	days = 28
}

revolution_pulse1_events14agitator_belatedly_killed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/death.dds"
	notification_type = feed
	days = 28
}

revolution_pulse1_events14safehaven_very_angry = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = feed
	days = 28
}

napoleon_iii_leaves_country = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}
government_petition_start = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"
	notification_type = toast
	days = 28
}
caucasus_russian_failed_attack_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

caucasus_russian_village_burned_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

caucasus_russian_supply_convoy_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

caucasus_tribe_defection_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

caucasus_russian_soldiers_defection_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

kazakhstan_ride_of_kenesary_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

kazakhstan_cossack_patrol_attacked_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

kazakhstan_fortress_raid_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

kazakhstan_auls_slaughtered_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

kazakhstan_raid_repelled_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

central_asia_bribes_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"
	notification_type = feed
	days = 28
}

gran_colombia_seeking_warning = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

andean_federation_seeking_warning = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

la_plata_seeking_warning = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

gran_colombia_meddling_haiti = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = toast
	days = 28
}

acre_dispute_success = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

acre_dispute_failure = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

aberdeen_act_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"
	notification_type = feed
	days = 28
}

garibaldi_is_here = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

garibaldi_skedaddles = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

indochina_catholic_persecutions_begins = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest_group_bad.dds"

	notification_type = feed
}

indochina_great_power_interested = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

indochina_great_power_interested2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

fra_natural_borders_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
}

haiti_pays_off_debt = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

bol_salaverry_death = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

brz_brazil_coup = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
}

pbc_peru_bolivia_collapse = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"

	notification_type = feed
}

pbc_peru_bolivia_success = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

gco_unification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

fnd_unification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

plt_unification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

brz_isabel_accession = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

sa_culture_genesis = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

brz_cultural_unification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

brz_navy_completed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
}

brz_amazon_border_treaty_colombia = {
	type = country
	texture = "gfx/interface/icons/notification_icons/bureaucracy.dds"

	notification_type = feed
}

brz_amazon_border_treaty_bolivia = {
	type = country
	texture = "gfx/interface/icons/notification_icons/bureaucracy.dds"

	notification_type = feed
}

ita_italian_unification_intent = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = toast
}

nationalism_unlock_national_agitation = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

nationalism_national_agitation_occurred = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = feed
}

nationalism_decision_agitation_occurred = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = feed
}

sabotage_decision_agitation_occurred = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = feed
}

swap_negotiations_success = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = toast
}

swap_negotiations_fail = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"

	notification_type = toast
}

alaska_negotiations_fail = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = toast
}

arranged_accident_failed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

arranged_accident_failed_incrimination = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

afghanistan_assistance_request_rejected = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

afghanistan_assistance_request_accepted = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

persian_assistance_request_rejected = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

persian_assistance_request_accepted = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
}

ottoman_circassian_refugees_arrived = {
	type = country
	texture = "gfx/interface/icons/notification_icons/death.dds"

	notification_type = feed
}

circassians_deported_message = {
	type = country
	texture = "gfx/interface/icons/notification_icons/death.dds"

	notification_type = feed
}

ottoman_protest_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

tibet_refuses_demands = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = toast
}

tibet_overlord_refuses_demands = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = toast
}

expedition_is_our_new_master = {
	type = country
	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"

	notification_type = toast
}

great_game_loss_to_natives = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = toast
}
﻿paris_commune_automation_pulse_1_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_1_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_1_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_2_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_2_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_2_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_3_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_3_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_3_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_4_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_4_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_4_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_5_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_5_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_5_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_6_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_6_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_6_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_7_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_7_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_8_a1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_8_a2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_event_8_a1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_event_8_a2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_8_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_8_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_9_a1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_9_a2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_9_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_9_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_10_a1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_10_a2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_event_10_a1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_event_10_a2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_10_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_11_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_11_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_12_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_12_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_12_c1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_12_c2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_13_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_13_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_13_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_14_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_14_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_14_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_15_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_15_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_16_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_16_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_16_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
foreign_country_supports_commune = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"
	notification_type = feed
}
﻿﻿#notification_example = {													#notification key
#	type = country 															#include notification type
#   group = "some_group"                                                    # group for "Current Situation". Also adds this notification to the Message Settings list.
#	texture = "gfx/interface/icons/notification_icons/technology.dds" 		#texture icon. Mandatory if notification has a group. Otherwise, you will get a pink face placeholder in feed notifications.
#
#	notification_type = feed/toast/popup									#how the notification will be presented
#	popup_name = acquired_technology_popup 									#gui specification for popups, must be in gui/popups.gui
# 	colore = bad/neutral/good army											#colors the notification 
#
#	on_created_soundeffect = "event:/SFX/UI/Notifications/notification" 	#notification on creationg sound
#}


#       ######  ####### ######  #     # ######  
#       #     # #     # #     # #     # #     # 
#       #     # #     # #     # #     # #     # 
#       ######  #     # ######  #     # ######  
#       #       #     # #       #     # #       
#       #       #     # #       #     # #       
#       #       ####### #        #####  # 

peace_agreement_signed_war_leader = {
	type = country
	group = "peace_agreement_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/peace.dds"

	notification_type = popup #important
	popup_name = peace_signed_popup

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/peace_agreement"
}

peace_agreement_signed_war_participant = {
	type = country
	group = "peace_agreement_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/peace.dds"

	notification_type = popup #important
	popup_name = peace_signed_popup

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/peace_agreement"
}

self_capitulated = {
	type = country
	group = "capitulated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = popup
	popup_name = capitulation_popup

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/capitulated"
}

ally_capitulated = {
	type = country
	group = "capitulated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = popup
	popup_name = capitulation_popup

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/capitulated"
}

enemy_capitulated = {
	type = country
	group = "capitulated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = popup
	popup_name = capitulation_popup

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/capitulated"
}

diplomatic_proposal_declined = {
	type = diplomatic_action
	group = "diplomatic_proposal_declined_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = popup
	popup_name = diplomatic_action_with_reasons_notification_popup
}

diplo_play_war_start_notification = {
	type = diplomatic_play
	group = "diplo_play_war_start_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = popup
	popup_name = war_started

	on_created_soundeffect = "event:/SFX/UI/Military/to_war_popup_notification"
}

acquired_technology_notification = {
	type = country
	group = "acquired_technology_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/technology.dds"

	notification_type = popup #important
	popup_name = acquired_technology_popup
	
	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/acquired_technology"
}  

law_changed_notification = {
	type = law
	group = "law_changed_notification_group"

	notification_type = popup #important
	popup_name = law_changed_popup
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"
	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/law_changed"
}

#       ####### #######    #     #####  #######  #####  
#          #    #     #   # #   #     #    #    #     # 
#          #    #     #  #   #  #          #    #       
#          #    #     # #     #  #####     #     #####  
#          #    #     # #######       #    #          # 
#          #    #     # #     # #     #    #    #     # 
#          #    ####### #     #  #####     #     #####  

law_notification_advance = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = good
}

law_notification_debate_success = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = good
}

law_notification_debate_fail = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = bad
}

law_notification_stall = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = bad
}

law_notification_setback = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = bad
}

law_notification_phase_forward_1 = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = good
}

law_notification_phase_forward_2 = {
	type = country
	group = "law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = good
}

claim_added_notification = {
	type = country
	group = "claims_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = toast
	color = good
}

institution_investment_increased = {
	type = institution
	group = "institution_investment_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/rank_up.dds"

	notification_type = toast
	color = good
}

institution_investment_decreased = {
	type = institution
	group = "institution_investment_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/rank_down.dds"

	notification_type = toast
	color = neutral
}

resource_discovered = {
	type = state_region
	group = "resource_discovery_notification_group"

	notification_type = toast
	color = good

	texture = "gfx/interface/icons/notification_icons/resource.dds"
}

resource_depleted = {
	type = state_region
	group = "resource_discovery_notification_group"
	notification_type = toast
	color = bad

	texture = "gfx/interface/icons/notification_icons/resource.dds"
}

rank_changed_notification = {
	type = country
	group = "country_rank_changed_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/default.dds"

	notification_type = toast
	color = neutral
	
	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/rank_changed"
}

diplomatic_action_notification = {
	type = diplomatic_action
	group = "diplomatic_action_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = toast
	color = neutral
}

diplomatic_proposal_accepted = {
	type = diplomatic_action
	group = "diplomatic_proposal_accepted_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = toast
	color = neutral
}

diplo_play_start_notification = {
	type = diplomatic_play
	group = "diplo_play_start_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = neutral
}

diplo_play_back_down_notification = {
	type = diplomatic_play
	group = "diplo_play_back_down_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = neutral
}

diplo_play_back_down_involved_notification = {
	type = diplomatic_play
	group = "diplo_play_back_down_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = neutral
}

diplo_play_join_side_notification = {
	type = diplomatic_play
	group = "diplo_play_join_side_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = neutral
}

diplo_play_abandon_side_notification = {
	type = diplomatic_play
	group = "diplo_play_abandon_side_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = neutral
}

colony_created = {
	type = state
	group = "colony_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = toast
	color = good
}

colony_complete = {
	type = state
	group = "colony_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = toast
	color = good
}

migration_target_created = {
	type = state
	group = "migration_target_created_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/pops.dds"

	notification_type = toast
	color = neutral
	
	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/migration_target"
}

country_revolution = {
	type = civil_war
	group = "country_revolution_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = toast
	color = bad

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/country_revolution"
}

country_secession = {
	type = civil_war
	group = "country_secession_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/secession.dds"

	notification_type = toast
	color = bad

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/country_revolution"
}

parties_activated = {
	type = country
	group = "parties_activated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/new_parties"
}

election_results = {
	type = country
	group = "election_results_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/elections.dds"

	notification_type = toast
	color = neutral

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/election_results"
}

enactment_failed = {
	type = country
	group = "enactment_failed_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = toast
	color = bad

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/country_revolution"
}

new_ruler = {
	type = character
	group = "new_ruler_notification_group"

	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = toast
	color = neutral
}


native_uprising_notification = {
	type = country
	group = "native_uprising_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/secession.dds"

	notification_type = toast
	color = bad

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/native_uprising"
}

journal_entry_completed = {
	type = journal_entry
	group = "journal_entry_completed_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/journal.dds"

	notification_type = toast
	color = good

	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/journal_entry_completed"
}

cobelligerent_in_default_notification = {
	type = country
	group = "war_participant_in_default_notification_group"

	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = toast
	color = bad
}

country_nationalized_building = {
    type = building
    group = "country_nationalized_building_group"

	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = toast
	color = neutral
}

country_nationalized_building_no_compensation = {
    type = building
    group = "country_nationalized_building_group"

	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = toast
	color = neutral
}

fleet_defeated = {
    type = military_formation
    group = "fleet_notification_group"

	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = toast
	color = bad
}

fleet_repaired = {
    type = military_formation
    group = "fleet_notification_group"

    texture = "gfx/interface/icons/notification_icons/order.dds"

	notification_type = toast
	color = good
}

enemy_in_default_notification = {
	type = country
	group = "war_participant_in_default_notification_group"

	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = toast
	color = good
}

formation_could_not_find_other_formation_to_automatically_merge_into = {
	type = military_formation
	group = "formation_could_not_find_other_formation_to_automatically_merge_into_notification_group"

	texture = "gfx/interface/icons/notification_icons/order.dds"

	notification_type = toast
}

power_bloc_formed = {
	type = power_bloc
	group = "power_bloc_formation"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"

	notification_type = toast
}

power_bloc_disbanded_leader_left = {
	type = power_bloc
	group = "power_bloc_formation"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"

	notification_type = toast
}

power_bloc_disbanded_leader_not_eligible = {
	type = power_bloc
	group = "power_bloc_formation"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"

	notification_type = toast
}

power_bloc_leader_left = {
	type = power_bloc
	group = "power_bloc_leadership"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_leader_outranked= {
	type = power_bloc
	group = "power_bloc_leadership"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_member_left = {
	type = power_bloc
	group = "power_bloc_membership"
	
	notification_type = toast
	color = bad
}

power_bloc_member_kicked = {
	type = power_bloc
	group = "power_bloc_membership"
	
	notification_type = toast
	color = bad
}

power_bloc_principle_mandate_available = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_principle_added = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_principle_removed = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"

	notification_type = toast
}

power_bloc_principle_exchanged = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_principle_upgraded = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

power_bloc_principle_downgraded = {
	type = power_bloc
	group = "power_bloc_principles_notification_group"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
}

political_lobby_created_from_catalyst = {
	type = country
	group = "political_lobby_created_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

political_lobby_created = {
	type = country
	group = "political_lobby_created_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

political_lobby_disbanded_with_reason = {
	type = country
	group = "political_lobby_disbanded_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

political_lobby_disbanded = {
	type = country
	group = "political_lobby_disbanded_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

foreign_political_lobby_created = {
	type = country
	group = "foreign_political_lobby_created_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

foreign_political_lobby_created_from_catalyst = {
	type = country
	group = "foreign_political_lobby_created_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

foreign_political_lobby_disbanded = {
	type = country
	group = "foreign_political_lobby_disbanded_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

foreign_political_lobby_disbanded_with_reason = {
	type = country
	group = "foreign_political_lobby_disbanded_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

interest_group_joins_lobby = {
	type = country
	group = "interest_group_joins_lobby_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

country_attitude_improved = {
	type = country
	group = "country_attitude_changed_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

country_attitude_changed = {
	type = country
	group = "country_attitude_changed_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

country_attitude_worsened = {
	type = country
	group = "country_attitude_changed_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

interest_group_leaves_lobby = {
	type = country
	group = "interest_group_leaves_lobby_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = toast
	color = neutral
}

power_struggle_started_for_contender = {
	type = power_bloc
	group = "power_struggle"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = feed
	color = good
}

power_struggle_started_for_leader = {
	type = power_bloc
	group = "power_struggle"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = feed
	color = bad
}

power_struggle_failed_for_contender = {
	type = power_bloc
	group = "power_struggle"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = feed
	color = bad
}

power_struggle_failed_for_leader = {
	type = power_bloc
	group = "power_struggle"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = feed
	color = good
}

power_struggle_succeeded_for_contender = {
	type = power_bloc
	group = "power_bloc_leadership"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
	color = good
}

power_struggle_succeeded_for_looser = {
	type = power_bloc
	group = "power_bloc_leadership"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
	color = bad
}

power_struggle_succeeded = {
	type = power_bloc
	group = "power_bloc_leadership"

	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"
	
	notification_type = toast
	color = neutral
}

#       ####### ####### ####### ######
#       #       #       #       #     # 
#       #       #       #       #     # 
#       #####   #####   #####   #     # 
#       #       #       #       #     # 
#       #       #       #       #     # 
#       #       ####### ####### ######  

spreading_technology_notification = {
	type = country
	group = "spreading_technology_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/technology.dds"

	notification_type = feed
	color = good
}

heir_born_notification = {
	type = character
	group = "heir_born_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
	color = neutral
}

character_died_notification = {
	type = character
	group = "character_died_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/death.dds"

	notification_type = feed
	color = bad
}

character_new_formation_notification = {
	type = character
	group = "character_new_formation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
	color = neutral
}

character_died_war_office_notification = {
	type = character
	group = "character_died_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/death.dds"

	notification_type = feed
	color = bad
}

exile_notification = {
	type = country
	group = "character_exiled_notification_group"
	days = 28

	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = toast
	color = neutral
}

agitator_spawned = {
	type = country
	group = "agitator_spawned_notification_group"

	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = toast
	color = neutral
}

peace_agreement_signed_non_participant = {
	type = country
	group = "peace_agreement_signed_non_participant_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/peace.dds"

	notification_type = feed
	color = neutral
	popup_name = peace_signed_popup
}

diplomatic_action_overlord_decrease_autonomy_notification = {
	type = diplomatic_action
	group = "diplomatic_action_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = bad
}

diplomatic_action_overlord_increase_autonomy_notification = {
	type = diplomatic_action
	group = "diplomatic_action_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = good
}

diplomatic_action_subject_increase_own_autonomy_notification = {
	type = diplomatic_action
	group = "diplomatic_action_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = toast
	color = good
}

diplomatic_action_break_notification = {
	type = diplomatic_action
	group = "diplomatic_action_break_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_break_accepted = {
	type = diplomatic_action
	group = "diplomatic_proposal_break_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_break_declined = {
	type = diplomatic_action
	group = "diplomatic_proposal_break_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_notification = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_accepted = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_break_notification = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_break_accepted = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_declined = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_proposal_third_party_break_declined = {
	type = diplomatic_action
	group = "diplomatic_proposal_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_pact_auto_break_notification = {
	type = diplomatic_pact
	group = "diplomatic_pact_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplomatic_pact_third_party_auto_break_notification = {
	type = diplomatic_pact
	group = "diplomatic_pact_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

diplo_play_start_third_party_notification = {
	type = diplomatic_play
	group = "diplo_play_start_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

diplo_play_war_start_third_party_notification = {
	type = diplomatic_play
	group = "diplo_play_war_start_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

diplo_play_subject_released_notification = {
	type = diplomatic_play
	group = "diplo_play_subject_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

diplo_play_subject_released_overlord_notification = {
	type = diplomatic_play
	group = "diplo_play_subject_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

country_swayed = {
	type = diplomatic_play
	group = "country_swayed_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

sway_offer_accepted = {
	type = diplomatic_play
	group = "sway_offer_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = good
}

reverse_sway_offer_accepted = {
	type = diplomatic_play
	group = "sway_offer_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = good
}

sway_offer_rejected = {
	type = diplomatic_play
	group = "sway_offer_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = bad
}

reverse_sway_offer_rejected = {
	type = diplomatic_play
	group = "sway_offer_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = bad
}

diplomatic_demand_accepted = {
	type = diplomatic_demand
	group = "diplomatic_demand_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = good
}

diplomatic_demand_rejected = {
	type = diplomatic_demand
	group = "diplomatic_demand_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = bad
}

interest_activated = {
	type = interest_marker
	group = "interest_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = feed
	color = good
}

interest_deactivated = {
	type = interest_marker
	group = "interest_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = feed
	color = bad
}

ig_trait_activated = {
	type = interest_group
	group = "ig_trait_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_became_influential = {
	type = interest_group
	group = "ig_influence_level_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_became_powerful = {
	type = interest_group
	group = "ig_influence_level_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_no_longer_powerful = {
	type = interest_group
	group = "ig_influence_level_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_no_longer_influential = {
	type = interest_group
	group = "ig_influence_level_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_movement_left_in_government = {
	type = interest_group
	group = "ig_movement_left_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_movement_left_happy = {
	type = interest_group
	group = "ig_movement_left_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = good
}

ig_trait_deactivated = {
	type = interest_group
	group = "ig_trait_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = neutral
}

ig_resigned_government = {
	type = interest_group
	group = "ig_resigned_government_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group_bad.dds"

	notification_type = feed
	color = neutral
}

ig_leader_memento_mori = {
	type = country
	group = "ig_leader_memento_mori_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"

	notification_type = feed
	color = bad
}

colony_complete_third_party = {
	type = state
	group = "colony_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
	color = neutral
}

new_culture_obsession = {
	type = culture
	group = "new_culture_obsession_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/goods.dds"

	notification_type = feed
	color = neutral
}

migration_target_created_other = {
	type = state
	group = "migration_target_created_other_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/pops.dds"

	notification_type = feed
	color = neutral
	
	on_created_soundeffect = "event:/SFX/UI/Alerts/Toasts/migration_target"	
}

commander_order_invalidated = {
	type = character
	group = "commander_order_invalidated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/order.dds"

	notification_type = feed
	color = neutral
}

commander_move = {
	type = character
	group = "commander_move_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/order.dds"

	notification_type = feed
	color = neutral
}

country_conscription = {
	type = country
	group = "country_conscription_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/mobilize.dds"

	notification_type = feed
	color = neutral
}

wargoal_added = {
	type = diplomatic_play
	group = "wargoal_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

wargoal_removed = {
	type = diplomatic_play
	group = "wargoal_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
	color = neutral
}

new_significant_trade_route = {
	type = trade_route
	group = "significant_trade_route_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"

	notification_type = feed
	color = neutral
}

canceled_significant_trade_route = {
	type = trade_route
	group = "significant_trade_route_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"

	notification_type = feed
	color = neutral
}

naval_invasion_against_us = {
	type = country
	group = "naval_invasion_against_us_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

naval_invasion_succeeded = {
	type = country
	group = "naval_invasion_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = good
}

naval_invasion_failed = {
	type = country
	group = "naval_invasion_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

our_convoy_raiders_intercepted = {
	type = country
	group = "convoy_raiders_intercepted_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

enemy_convoy_raiders_intercepted = {
	type = country
	group = "convoy_raiders_intercepted_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = good
}

enemy_convoys_raided = {
	type = country
	group = "convoys_raided_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = good
}

our_convoys_raided = {
	type = country
	group = "convoys_raided_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

journal_entry_activated = {
	type = journal_entry
	group = "journal_entry_activation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/journal.dds"

	notification_type = feed
	color = neutral
}

journal_entry_deactivated = {
	type = journal_entry
	group = "journal_entry_activation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/journal.dds"

	notification_type = feed
	color = neutral
}

political_movement_formed = {
	type = political_movement
	group = "political_movement_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = feed
	color = neutral
}

political_movement_disbanded = {
	type = political_movement
	group = "political_movement_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/laws.dds"

	notification_type = feed
	color = neutral
}

country_owes_obligation = {
	type = country
	group = "country_owes_obligation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

country_owed_obligation = {
	type = country
	group = "country_owed_obligation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

country_owes_obligation_removed = {
	type = country
	group = "country_owes_obligation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

country_owed_obligation_removed = {
	type = country
	group = "country_owed_obligation_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

obligation_owed_to_us_expired = {
	type = country
	group = "obligation_expired_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

obligation_owed_by_us_expired = {
	type = country
	group = "obligation_expired_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

unification_candidate_added = {
	type = country
	group = "unification_candidate_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

unification_candidate_removed = {
	type = country
	group = "unification_candidate_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

start_supporting_unification = {
	type = country
	group = "unification_support_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
	color = neutral
}

stop_supporting_unification = {
	type = country
	group = "unification_support_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
	color = neutral
}

shipping_lane_trade_route_invalidated = {
	type = trade_route
	group = "shipping_lane_trade_route_invalidated_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"

	notification_type = feed
	color = bad
}

shipping_lane_formation_destination_invalidated = {
	type = military_formation
	group = "shipping_lane_formation_destination_invalidated_notification_group"

	texture = "gfx/interface/icons/notification_icons/order.dds"

	notification_type = feed
	color = bad
}

formation_travel_to_front_cancelled = {
	type = military_formation
	group = "formation_travel_to_front_cancelled_notification_group"

	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

formation_travel_station_in_hq_cancelled = {
	type = military_formation
	group = "formation_travel_station_in_hq_cancelled_notification_group"

	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

formation_travel_deploy_to_sea_node_cancelled = {
	type = military_formation
	group = "formation_travel_deploy_to_sea_node_cancelled_notification_group"

	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

formation_travel_track_formation_cancelled = {
	type = military_formation
	group = "formation_travel_track_formation_cancelled_notification_group"

	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
	color = bad
}

#       #     # ####### #     # ####### 
#       ##    # #     # ##    # #       
#       # #   # #     # # #   # #       
#       #  #  # #     # #  #  # #####   
#       #   # # #     # #   # # #       
#       #    ## #     # #    ## #       
#       #     # ####### #     # ####### 

# Only notifies when an interest results in diplomatic ties being established
interest_activated_third_party = {
	type = interest_marker
	group = "interest_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = none
	color = good
}

# Only notifies when an interest results in diplomatic ties being lost
interest_deactivated_third_party = {
	type = interest_marker
	group = "interest_third_party_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = none
	color = bad
}

diplo_play_declare_neutrality_notification = {
	type = diplomatic_play
	group = "diplo_play_declare_neutrality_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = none
	color = neutral
}

price_report = {
	type = country
	group = "price_report_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/goods.dds"
	notification_type = none
	color = neutral
}

new_trade_route = {
	type = trade_route
	group = "trade_route_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"

	notification_type = none
	color = neutral
}

canceled_trade_route = {
	type = trade_route
	group = "trade_route_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"

	notification_type = none
	color = neutral
}

country_mobilization = {
	type = country
	group = "country_mobilization_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/mobilize.dds"

	notification_type = none
	color = neutral
}

building_built_notification = {
	type = building
	group = "building_built_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/building_expanded.dds"

	notification_type = none
	color = neutral
}

building_expanded_notification = {
	type = building
	group = "building_expanded_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/building_expanded.dds"

	notification_type = none
	color = neutral
}

﻿neighbor_events_1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
}

je_secret_police_research_identification_complete = {
	type = country
	texture = "gfx/interface/icons/notification_icons/authority.dds"

	notification_type = feed
}

je_secret_police_research_identification_fail = {
	type = country
	texture = "gfx/interface/icons/notification_icons/authority.dds"

	notification_type = feed
}

je_make_schools_secular_complete = {
	type = country
	texture = "gfx/interface/icons/notification_icons/bureaucracy.dds"

	notification_type = feed
}

je_make_schools_secular_fail = {
	type = country
	texture = "gfx/interface/icons/notification_icons/bureaucracy.dds"

	notification_type = feed
}

violate_sovereignty_third_party_joins = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

lowlands_land_reclamation_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

expedition_progress_average = {
	type = country
	texture = "gfx/interface/icons/notification_icons/mobilize.dds"
	notification_type = feed
}

west_america_expedition_progress_average = {
	type = country
	texture = "gfx/interface/icons/notification_icons/mobilize.dds"
	notification_type = feed
}

suez_survey_started = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

panama_survey_started = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

obligation_events_accepted = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"
	notification_type = feed
}

obligation_events_rejected = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"
	notification_type = feed
}

first_flight = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"
	notification_type = feed
}

ig_leader_steps_down = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

haiti_stops_paying_france = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}

rival_supports_trade_unions = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"
	notification_type = feed
}

ig_leader_assassination = {
	type = country
	texture = "gfx/interface/icons/notification_icons/death.dds"
	notification_type = feed
}


rival_comdemns_slavery = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"
	notification_type = feed
}

ig_leader_assassination_failed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"
	notification_type = feed
}

slave_revolt_1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = feed
}

slave_revolt_2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = feed
}

warlord_china_explosion_point_add = {
	type = country
	texture = "gfx/interface/icons/notification_icons/capitulate.dds"

	notification_type = feed
}

warlord_china_explosion_point_remove = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = feed
}

country_shared_plastics_tech = {
	type = country
	texture = "gfx/interface/icons/notification_icons/technology.dds"

	notification_type = feed
}

country_shared_radio_tech = {
	type = country
	texture = "gfx/interface/icons/notification_icons/technology.dds"

	notification_type = feed
}

imposition_demand_sent = {
	type = country
	group = "on_impose_law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = toast
}

imposition_started = {
	type = country
	group = "on_impose_law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = toast
}

imposition_deferred = {
	type = country
	group = "on_impose_law_notification_group"
	
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = toast
}

colonial_conflict_region_demands_refused = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

colonial_conflict_region_demands_met = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

colonial_conflict_claim_demands_refused = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

colonial_conflict_claim_demands_met = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

victoria_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

opium_wars_british_response_angry = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"
	notification_type = feed
}

opium_wars_british_response_passive = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"
	notification_type = feed
}

santa_anna_captured_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
}


algerian_raid = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"
	notification_type = feed
	days = 28
}

pebrine_spread_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"
	notification_type = feed
	days = 28
}

revolution_pulse1_events13agitator_killed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"
	notification_type = feed
	days = 28
}

revolution_pulse1_events13agitator_not_killed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"
	notification_type = feed
	days = 28
}

revolution_pulse1_events14agitator_belatedly_killed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/death.dds"
	notification_type = feed
	days = 28
}

revolution_pulse1_events14safehaven_very_angry = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = feed
	days = 28
}

napoleon_iii_leaves_country = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}
government_petition_start = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest_group.dds"
	notification_type = toast
	days = 28
}
caucasus_russian_failed_attack_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

caucasus_russian_village_burned_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

caucasus_russian_supply_convoy_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

caucasus_tribe_defection_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

caucasus_russian_soldiers_defection_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

kazakhstan_ride_of_kenesary_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

kazakhstan_cossack_patrol_attacked_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

kazakhstan_fortress_raid_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

kazakhstan_auls_slaughtered_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

kazakhstan_raid_repelled_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

central_asia_bribes_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"
	notification_type = feed
	days = 28
}

gran_colombia_seeking_warning = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

andean_federation_seeking_warning = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

la_plata_seeking_warning = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

gran_colombia_meddling_haiti = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = toast
	days = 28
}

acre_dispute_success = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

acre_dispute_failure = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
	days = 28
}

aberdeen_act_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/trade_route.dds"
	notification_type = feed
	days = 28
}

garibaldi_is_here = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

garibaldi_skedaddles = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

indochina_catholic_persecutions_begins = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest_group_bad.dds"

	notification_type = feed
}

indochina_great_power_interested = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

indochina_great_power_interested2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/colonial.dds"

	notification_type = feed
}

fra_natural_borders_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"
	notification_type = feed
}

haiti_pays_off_debt = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

bol_salaverry_death = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

brz_brazil_coup = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
}

pbc_peru_bolivia_collapse = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"

	notification_type = feed
}

pbc_peru_bolivia_success = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

gco_unification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

fnd_unification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

plt_unification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

brz_isabel_accession = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

sa_culture_genesis = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

brz_cultural_unification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"

	notification_type = feed
}

brz_navy_completed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/military.dds"

	notification_type = feed
}

brz_amazon_border_treaty_colombia = {
	type = country
	texture = "gfx/interface/icons/notification_icons/bureaucracy.dds"

	notification_type = feed
}

brz_amazon_border_treaty_bolivia = {
	type = country
	texture = "gfx/interface/icons/notification_icons/bureaucracy.dds"

	notification_type = feed
}

ita_italian_unification_intent = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = toast
}

nationalism_unlock_national_agitation = {
	type = country
	texture = "gfx/interface/icons/notification_icons/character.dds"

	notification_type = feed
}

nationalism_national_agitation_occurred = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = feed
}

nationalism_decision_agitation_occurred = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = feed
}

sabotage_decision_agitation_occurred = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"

	notification_type = feed
}

swap_negotiations_success = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"

	notification_type = toast
}

swap_negotiations_fail = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"

	notification_type = toast
}

alaska_negotiations_fail = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = toast
}

arranged_accident_failed = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

arranged_accident_failed_incrimination = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

afghanistan_assistance_request_rejected = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

afghanistan_assistance_request_accepted = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

persian_assistance_request_rejected = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

persian_assistance_request_accepted = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence.dds"

	notification_type = feed
}

ottoman_circassian_refugees_arrived = {
	type = country
	texture = "gfx/interface/icons/notification_icons/death.dds"

	notification_type = feed
}

circassians_deported_message = {
	type = country
	texture = "gfx/interface/icons/notification_icons/death.dds"

	notification_type = feed
}

ottoman_protest_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = feed
}

tibet_refuses_demands = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = toast
}

tibet_overlord_refuses_demands = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = toast
}

expedition_is_our_new_master = {
	type = country
	texture = "gfx/interface/icons/notification_icons/power_bloc.dds"

	notification_type = toast
}

great_game_loss_to_natives = {
	type = country
	texture = "gfx/interface/icons/notification_icons/influence_bad.dds"

	notification_type = toast
}
﻿paris_commune_automation_pulse_1_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_1_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_1_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_2_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_2_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_2_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_3_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_3_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_3_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_4_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_4_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_4_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_5_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_5_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_5_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_6_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_6_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_6_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_7_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_7_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_8_a1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_8_a2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_event_8_a1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_event_8_a2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_8_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_8_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_9_a1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_9_a2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_9_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_9_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_10_a1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_10_a2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_event_10_a1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_event_10_a2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_10_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_11_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_11_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_12_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_12_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_12_c1 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_12_c2 = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_13_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_13_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_13_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_14_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_14_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_14_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_15_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_15_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_16_a = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_16_b = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
paris_commune_automation_pulse_16_c = {
	type = country
	texture = "gfx/interface/icons/notification_icons/secession.dds"
	notification_type = toast
}
foreign_country_supports_commune = {
	type = country
	texture = "gfx/interface/icons/notification_icons/revolution.dds"
	notification_type = feed
}
﻿unification_notification_one_culture = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

unification_notification_three_culture = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

unification_notification_byz = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

unification_notification_ibe = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

reunification_notification = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

unification_notification_kuk = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

unification_notification_four_culture = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

unification_notification_trh = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

unification_notification_idn = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

unification_notification_ind = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

unification_notification_hre_culture = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

unification_notification_generic = {
	type = country
	texture = "gfx/interface/icons/notification_icons/interest.dds"
	notification_type = feed
}

﻿﻿interest_group_ig_armed_forces_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_devout_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_industrialists_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_intelligentsia_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_landowners_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_petty_bourgeoisie_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_rural_folk_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_trade_unions_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_in_opposition_agitator_popularity_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_bureaucracy_add={
	decimals=0
	color=good
	game_data={
		ai_value=20
	}
}

country_bureaucracy_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_bureaucracy_investment_cost_factor_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_authority_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_authority_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=20
	}
}

country_influence_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_influence_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=20
	}
}

country_convoys_capacity_add={
	decimals=0
	color=good
	game_data={
		ai_value=10
	}
}

country_convoys_capacity_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_max_companies_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_company_throughput_bonus_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_company_construction_efficiency_bonus_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_overlord_income_transfer_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_liberty_desire_add={
	decimals=2
	color=neutral
	game_data={
		ai_value=0
	}
}

country_liberty_desire_of_subjects_add={
	decimals=2
	color=neutral
	game_data={
		ai_value=0
	}
}

country_liberty_desire_increase_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_liberty_desire_decrease_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_authority_per_subject_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_subject_income_transfer_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_subject_income_transfer_heathen_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_construction_add={
	decimals=1
	color=good
	game_data={
		ai_value=500
	}
}

country_max_weekly_construction_progress_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

country_private_construction_allocation_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_construction_goods_cost_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_prestige_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

country_prestige_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_max_declared_interests_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

country_max_declared_interests_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_diplomatic_play_maneuvers_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_initiator_war_goal_maneuver_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_prestige_from_army_power_projection_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_prestige_from_navy_power_projection_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_infamy_generation_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_infamy_generation_against_unrecognized_mult = {
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_infamy_decay_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_tension_decay_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_improve_relations_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_damage_relations_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_minting_add={
	decimals=0
	color=good
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

country_minting_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_expenses_add={
	decimals=1
	color=bad
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

country_government_wages_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_military_wages_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_military_goods_cost_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_tax_income_add={
	decimals=0
	color=good
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

tax_income_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tax_consumption_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tax_dividends_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tax_per_capita_add={
	decimals=2
	color=neutral
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

tax_land_add={
	decimals=2
	color=neutral
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

tax_heathen_add={
	decimals=2
	color=neutral
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

country_consumption_tax_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_loan_interest_rate_add={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_loan_interest_rate_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_gold_reserve_limit_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_government_dividends_reinvestment_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_government_dividends_efficiency_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_government_dividends_waste_add={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_pol_str_factor={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_armed_forces_approval_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_devout_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_industrialists_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_intelligentsia_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_landowners_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_petty_bourgeoisie_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_rural_folk_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_trade_unions_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_armed_forces_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_devout_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_industrialists_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_intelligentsia_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_landowners_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_petty_bourgeoisie_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_rural_folk_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_trade_unions_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_approval_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_in_government_approval_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_in_opposition_approval_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_opposition_ig_approval_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_voting_power_base_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_voting_power_from_literacy_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_voting_power_wealth_threshold_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_legitimacy_base_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_govt_total_clout_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_govt_total_votes_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_headofstate_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_govt_leader_clout_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_govt_size_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_ideological_incoherence_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_party_whip_impact_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_radicals_from_legitimacy_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_loyalists_from_legitimacy_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_suppression_ig_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_bolster_ig_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_suppression_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_bolster_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_size_change_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_law_enactment_time_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_law_enactment_max_setbacks_add = {
	decimals = 0
	color = good
	percent = no
	game_data={
		ai_value=0
	}	
}

country_law_enactment_imposition_success_add = {
	decimals=0
	color=good
	percent=yes
}

country_law_enactment_success_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_law_enactment_stall_mult = {
	decimals=0
	color=good
	percent = yes
	game_data={
		ai_value=0
	}
}

state_decree_cost_mult ={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

political_movement_support_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

political_movement_support_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

political_movement_radicalism_add={
	decimals=0
	color=bad
	game_data={
		ai_value=0
	}
}

political_movement_radicalism_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

political_movement_preserve_support_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

political_movement_enact_support_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

political_movement_restore_support_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_agitator_slots_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_revolution_clock_time_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_revolution_progress_add={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_revolution_progress_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_secession_clock_time_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_secession_progress_add={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_secession_progress_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_radicals_from_conquest_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

market_land_trade_capacity_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

market_max_exports_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

market_max_imports_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tariff_import_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tariff_export_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tariff_import_outside_power_bloc_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tariff_export_outside_power_bloc_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_market_access_price_impact={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_trade_route_quantity_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_free_trade_routes_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_trade_route_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_trade_route_competitiveness_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_weekly_innovation_add={
	decimals=1
	color=good
	game_data={
		ai_value=1000
	}
}

country_weekly_innovation_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_weekly_innovation_max_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

country_tech_spread_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_tech_spread_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_tech_research_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_tech_group_research_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_ahead_of_time_research_penalty_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_war_exhaustion_casualties_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_resource_discovery_chance_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_resource_depletion_chance_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_construction_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_pol_str_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_pop_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_welfare_payments_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_welfare_payments_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_poor_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_middle_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_rich_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_expected_sol_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_expected_sol_from_literacy={
	decimals=0
	color=bad
	game_data={
		ai_value=0
	}
}

state_poor_expected_sol={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_middle_expected_sol={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_rich_expected_sol={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_tax_capacity_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tax_capacity_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_tax_waste_add={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_tax_collection_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_education_access_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pollution_generation_add={
	decimals=0
	color=bad
	game_data={
		ai_value=0
	}
}

state_pollution_reduction_health_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_peasants_education_access_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_education_access_wealth_add={
	decimals=1
	color=good
	suffix="per_wealth"
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_qualifications_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_working_adult_ratio_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_dependent_wage_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_dependent_wage_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_economy_of_scale_level_cap_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_slave_import_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_level_bureaucracy_cost_add={
	decimals=0
	color=bad
	game_data={
		ai_value=0
	}
}

state_assimilation_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_conversion_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_bureaucracy_population_base_cost_factor_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_dependent_political_participation_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_political_strength_from_wealth_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_political_strength_from_discrimination_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_political_strength_from_welfare_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_infrastructure_add={
	decimals=1
	color=good
	game_data={
		ai_value=50
	}
}

state_infrastructure_from_population_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_infrastructure_from_population_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_infrastructure_from_population_max_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_infrastructure_from_population_max_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_infrastructure_from_automobiles_consumption_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_infrastructure_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_urbanization_per_level_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

state_urbanization_per_level_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_building_barracks_max_level_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_building_conscription_center_max_level_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_building_naval_base_max_level_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_building_port_max_level_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_building_construction_sector_max_level_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_colony_growth_creation_mult={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_colony_growth_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_non_homeland_colony_growth_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_migration_pull_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_migration_pull_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_migration_push_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_unincorporated_starting_wages_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_migration_pull_unincorporated_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_migration_quota_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_mass_migration_attraction_mult = {
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_conscription_rate_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_conscription_rate_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_birth_rate_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_accepted_birth_rate_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_non_homeland_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_mortality_wealth_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_minimum_wealth_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_turmoil_effects_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_mortality_turmoil_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_radicals_from_discrimination_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_radicals_from_sol_change_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_loyalists_from_sol_change_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_radicals_from_sol_change_accepted_culture_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_loyalists_from_sol_change_accepted_culture_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_radicals_from_sol_change_accepted_religion_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_loyalists_from_sol_change_accepted_religion_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_command_limit_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

character_command_limit_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_morale_cap_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_popularity_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

character_health_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_supply_route_cost_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_advancement_speed_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

character_convoy_protection_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_interception_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

character_convoy_raiding_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

battle_offense_owned_province_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

battle_defense_owned_province_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

battle_casualties_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

battle_combat_width_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_defense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_defense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_army_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_army_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_army_defense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_army_defense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_navy_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_navy_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_navy_defense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_navy_defense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_morale_loss_add={
	decimals=0
	color=bad
	game_data={
		ai_value=100
	}
}

unit_morale_loss_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=-5000
	}
}

unit_morale_damage_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_morale_recovery_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_kill_rate_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_recovery_rate_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_provinces_captured_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_provinces_lost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=-5000
	}
}

unit_devastation_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_advancement_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_convoy_requirements_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_convoy_raiding_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_convoy_defense_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_convoy_raiding_interception_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_supply_consumption_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_occupation_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_siege_artillery_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_shrapnel_artillery_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_submarine_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_heavy_tank_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_carrier_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_cannon_artillery_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_mobile_artillery_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_trench_infantry_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_squad_infantry_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_mechanized_infantry_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

military_formation_movement_speed_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

military_formation_movement_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

military_formation_mobilization_speed_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

military_formation_mobilization_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

military_formation_organization_gain_add={
	decimals=2
	color=good
	game_data={
		ai_value=5000
	}
}

military_formation_organization_gain_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

military_formation_attrition_risk_add={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=-5000
	}
}

military_formation_attrition_risk_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=-5000
	}
}

unit_army_experience_gain_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

unit_navy_experience_gain_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

unit_experience_gain_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

unit_army_experience_gain_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_navy_experience_gain_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_experience_gain_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_production_tech_research_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_production_tech_spread_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

dummy_modifier_type={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}


﻿
building_group_bg_construction_laborers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_farmers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_farmers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_farmers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_laborers_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_laborers_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_machinists_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_machinists_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_machinists_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_machinists_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_slaves_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_machinists_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_engineers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_slaves_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_engineers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_engineers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_engineers_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_engineers_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_service_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_gold_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_coal_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_iron_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_lead_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_sulfur_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_government_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_service_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_gold_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_coal_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_iron_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_lead_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_sulfur_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_government_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_service_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_gold_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_coal_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_iron_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_lead_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_sulfur_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_government_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_service_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_gold_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_coal_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_iron_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_lead_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_sulfur_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_government_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_goods_input_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_cash_reserves_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_construction_infrastructure_usage_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_allowed_collectivization_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_allowed_collectivization_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_subsistence_output_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

building_subsistence_output_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_mobilization_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_unincorporated_subsistence_output_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_training_rate_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

building_training_rate_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

building_working_conditions_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_minimum_wage_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_unincorporated_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_services_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_fine_art_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_furniture_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_clothes_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_tools_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_glass_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_steel_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_liquor_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_groceries_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_luxury_clothes_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_luxury_furniture_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_porcelain_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_fertilizer_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_explosives_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_ammunition_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_artillery_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_engines_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_clippers_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_steamers_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_manowars_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_ironclads_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_automobiles_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_aeroplanes_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_tanks_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_radios_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_telephones_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_grain_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_fish_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_meat_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_fruit_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_wine_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_fabric_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_wood_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_sugar_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_coal_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_iron_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_lead_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_oil_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_gold_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_sulfur_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_hardwood_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_rubber_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_coffee_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_dye_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_opium_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_tea_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_silk_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_tobacco_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_small_arms_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_paper_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_electricity_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_transportation_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_input_fabric_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_wood_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_iron_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_coal_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_lead_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_liquor_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_grain_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_fish_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_meat_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_fruit_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_sugar_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_glass_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_dye_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_silk_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_tobacco_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_wine_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_hardwood_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_sulfur_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_oil_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_steel_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_fertilizer_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_tools_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_rubber_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_opium_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_ammunition_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_artillery_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_small_arms_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_clothes_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_groceries_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_engines_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_automobiles_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_clippers_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_steamers_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_manowars_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_ironclads_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_paper_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_explosives_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_electricity_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_transportation_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_aeroplanes_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_tanks_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_radios_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_telephones_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_output_hardwood_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_oil_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_service_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_construction_sector_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_coal_mine_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_silk_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_dye_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_cotton_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_iron_mine_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_gold_mine_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_shipyards_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_port_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_rye_farm_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_wheat_farm_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_rice_farm_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_maize_farm_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_millet_farm_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_livestock_ranch_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_opium_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_arts_academy_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_university_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_whaling_station_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_tools_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_small_arms_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_engines_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_artillery_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_automobiles_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_aeroplanes_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_tanks_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_clippers_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_steamers_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_manowars_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_ironclads_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_food_industry_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_munition_plants_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_synthetics_plants_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_textile_mills_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_furniture_manufacturies_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_glassworks_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_tooling_workshops_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_paper_mills_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_chemical_plants_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_motor_industry_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_war_machine_industry_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_electrics_industry_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_arms_industry_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_artillery_foundries_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_power_plant_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_lead_mine_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_sulfur_mine_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_gold_fields_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_railway_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_rubber_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_vineyard_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_explosives_factory_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_military_shipyards_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_liquor_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_wine_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_fabric_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_fruit_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_sugar_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_radio_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_silk_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_steel_mills_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_urban_center_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_electricity_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_government_administration_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_nationalization_cost_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_nationalization_radicals_mult = {
	decimals=1
	color=bad
	percent=yes
}

building_nationalization_investment_return_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_small_arms_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_artillery_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_ammunition_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_oil_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_radios_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_tanks_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}


﻿country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool={
	decimals=1
	color = good
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_can_impose_same_lawgroup_policing_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_can_impose_same_lawgroup_army_model_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_disallow_law_no_schools_bool = {
	color = bad
	boolean=yes
}

country_disallow_law_no_police_bool = {
	color = bad
	boolean=yes
}

country_disallow_law_no_colonial_affairs_bool = {
	color = bad
	boolean=yes
}

country_disallow_discriminated_migration_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disallow_migration_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disallow_agitator_invites_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_allow_multiple_alliances_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

state_disallow_incorporation_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

market_disallow_trade_routes_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_ignores_landing_craft_penalty_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_government_buildings_protected_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_all_buildings_protected_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disable_investment_pool_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_cannot_start_law_enactment_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_cannot_cancel_law_enactment_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_cannot_be_target_for_law_imposition_bool = {
	color = good
	boolean = yes
}

country_cannot_enact_laws_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_must_have_movement_to_enact_laws_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disallow_aggressive_plays_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disable_nationalization_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disable_nationalization_without_compensation_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_force_privatization_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disable_privatization_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_can_form_construction_company_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_force_collectivization_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_allow_enacting_decrees_in_subject_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_allow_trade_routes_without_interest_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

state_peasants_mass_migration_disallowed_bool = {
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

state_peasants_internal_migration_disallowed_bool = {
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

﻿character_battle_condition_dug_in_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_charted_terrain_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_rapid_advance_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_camouflaged_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_logistics_secured_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_mud_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_broken_supply_line_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_exhausted_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_lost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_surprise_maneuver_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_aggressive_maneuver_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_careful_maneuver_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_blunder_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_poor_visibility_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_good_visibility_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_rough_waters_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_strong_winds_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_death_from_below_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_ramming_maneuver_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

character_expedition_events_explorer_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_expedition_events_explorer_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_in_government_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}


﻿unit_offense_flat_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_flat_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_flat_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_flat_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}

unit_offense_elevated_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_elevated_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_elevated_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_elevated_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}

unit_offense_forested_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_forested_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_forested_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_forested_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}

unit_offense_hazardous_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_hazardous_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_hazardous_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_hazardous_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}

unit_offense_developed_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_developed_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_developed_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_developed_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}

unit_offense_water_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_water_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_water_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_water_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}


﻿power_bloc_leader_can_make_subjects_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_leader_can_force_state_religion_bool = {
	color = neutral
	boolean = yes
	game_data = {
		ai_value = 0
	}
}

power_bloc_leader_can_regime_change_bool = {
	color = neutral
	boolean = yes
	game_data = {
		ai_value = 0
	}
}

power_bloc_leader_can_add_wargoal_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_cohesion_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_cohesion_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_cohesion_per_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_religion_trade_route_competitiveness_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_great_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_great_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_major_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_major_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_minor_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_minor_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_insignificant_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_insignificant_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_major_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_major_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_regional_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_regional_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_great_power_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_major_power_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_minor_power_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_unrecognized_major_power_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_unrecognized_regional_power_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_disallow_embargo_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_disallow_war_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_customs_union_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_trade_route_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_leverage_generation_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_target_sway_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_allow_wider_migration_area_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_income_transfer_to_leader_factor={
	decimals=2
	color=neutral
	game_data={
		ai_value=0
	}
}

country_nationalization_cost_non_members_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_leader_has_law_enactment_success_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_join_power_bloc_member_in_defensive_plays_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_join_power_bloc_member_in_plays_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}


﻿country_enactment_success_chance_law_technocracy_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_enactment_success_chance_law_public_schools_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_enactment_time_law_technocracy_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_enactment_time_law_public_schools_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_leverage_resistance_add={
	decimals=0
	color = neutral
	percent=no
	game_data={
		ai_value=0
	}
}

country_leverage_resistance_mult={
	decimals=0
	color = neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_leverage_generation_mult={
	decimals=0
	color = good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_leverage_generation_add = {
	decimals=0
	color = good
	percent=no
	game_data={
		ai_value=0
	}
}

country_lobby_leverage_generation_mult={
	decimals=0
	color = good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_pact_leverage_generation_add = {
	decimals=0
	color = good
	percent=no
	game_data={
		ai_value=0
	}
}

country_pact_leverage_generation_mult={
	decimals=0
	color = good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_convoy_contribution_to_market_owner_add = {
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_size_change_speed_institution_colonial_affairs_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_size_change_speed_institution_police_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_size_change_speed_institution_schools_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_cost_institution_colonial_affairs_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_cost_institution_police_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_cost_institution_schools_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_impact_institution_health_system_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_port_connection_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_legitimacy_min_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}


﻿# These boolean modifiers only exist to generate tooltips and do not have an actual effect in and of themselves

country_higher_diplomatic_acceptance_same_religion_bool = {
	color = good
	boolean=yes
}

country_reduced_liberty_desire_same_religion_bool = {
	color = good
	boolean=yes
}

country_higher_leverage_from_economic_dependence_bool = {
	color = good
	boolean=yes
}

power_bloc_allow_foreign_investment_lower_rank_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

﻿state_catholic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_protestant_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_orthodox_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_oriental_orthodox_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sunni_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_shiite_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_jewish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mahayana_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_gelugpa_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_theravada_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_confucian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hindu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_shinto_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sikh_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_animist_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_atheist_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_scottish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_galician_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_malay_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bornean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sumatran_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_balinese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_cajun_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_assyrian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_circassian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_francoprovencal_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_chechen_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_karelian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bashkir_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_buryat_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mordvin_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_chuvash_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mari_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_udmurt_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mazanderani_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_luri_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kho_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_south_german_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ashkenazi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dutch_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_flemish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_wallonian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_boer_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_alemannic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_swedish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_danish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_norwegian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_icelandic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_finnish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sami_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_british_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_irish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_australian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_north_italian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_south_italian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_maltese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_basque_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_spanish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_catalan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_portuguese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_french_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_occitan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_breton_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_croat_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_serb_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bulgarian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_albanian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_slovene_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bosniak_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_romanian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hungarian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_polish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_lithuanian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_czech_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_slovak_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_russian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_byelorussian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ukrainian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ugrian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_latvian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_estonian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_greek_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_georgian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_armenian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sephardic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_turkish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_azerbaijani_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_north_caucasian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_maghrebi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_misri_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mashriqi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bedouin_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_berber_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_persian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_uzbek_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kazak_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kirgiz_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tajik_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_uighur_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_pashtun_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_baluchi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hazara_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_turkmen_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kurdish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tatar_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mongol_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kalmyk_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_siberian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yakut_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tibetan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_assamese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bengali_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bihari_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_manipuri_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nepali_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_oriya_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sinhala_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_avadhi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kanauji_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_panjabi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kashmiri_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_gujarati_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_marathi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sindi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_rajput_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kannada_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_malayalam_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tamil_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_telegu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_vietnamese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_khmer_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_batak_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dayak_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_malagasy_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_filipino_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_moro_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_javan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_moluccan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_thai_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mon_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_khmu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_lao_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_shan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_burmese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kachin_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_karen_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_japanese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_manchu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_han_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_korean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ainu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hakka_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_miao_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_min_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_zhuang_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yue_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_polynesian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hawaiian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_melanesian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_micronesian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_maori_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yuanzhumin_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_aborigine_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_zapotec_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mayan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nahua_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tarascan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_quechua_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_guarani_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_aimara_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_amazonian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_patagonian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_guajiro_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tupinamba_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_metis_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dakota_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_cherokee_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_muskogean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_pueblo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_inuit_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_cree_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_navajo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_athabaskan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_salish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nez_perce_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_siouan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_comanche_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_algonquian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_iroquoian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_caddoan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_paiute_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hokan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_apache_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_oodham_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mixtec_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_muisca_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_miskito_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_cariban_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yankee_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dixie_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mexican_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_central_american_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_caribeno_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_north_andean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_south_andean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_peruvian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bolivian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ecuadorian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_chilean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_venezuelan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_argentine_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_uruguayan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_paraguayan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_colombian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_platinean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_brazilian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sulista_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nordestino_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_amazonic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_paulista_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afro_american_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afro_caribbean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afro_caribeno_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afro_brazilian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afro_antillean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_akan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bambara_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bassa_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dyula_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_edo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ewe_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_fon_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_fulbe_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_haratin_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hausa_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ibibio_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ibo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kissi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kru_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mande_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bidan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mossi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_senufo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_songhai_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tiv_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tuareg_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_wolof_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yoruba_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bakongo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_baguirmi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_fang_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kanuri_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_luba_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_lunda_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mongo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sara_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_teda_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_equatorial_bantu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_fluvian_bantu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nilotic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_amhara_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afar_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_azande_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_baganda_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_beja_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dinka_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_fur_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kikuyu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_luo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_maasai_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nuer_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nuba_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_oromo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ruanda_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_rundi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sidama_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_somali_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sudanese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sukuma_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_swahili_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tigray_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_unyamwezi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_lacustrine_bantu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_chewa_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_herero_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_khoisan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_lomwe_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_makua_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nguni_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ovimbundu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sena_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_shona_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sotho_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tonga_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tswana_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_xhosa_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yao_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_zulu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kavango_bantu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_anglo_canadian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_franco_canadian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sorb_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tuvan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_corsican_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yemenite_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_welsh_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_north_german_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_colonial_affairs_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_social_security_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_workplace_safety_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_schools_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_police_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_health_system_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_home_affairs_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_academics_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_academics_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_academics_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_academics_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_aristocrats_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_aristocrats_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

state_aristocrats_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_aristocrats_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_aristocrats_investment_pool_contribution_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_aristocrats_investment_pool_efficiency_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_aristocrats_shares_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_bureaucrats_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_bureaucrats_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_bureaucrats_shares_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_capitalists_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_capitalists_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

building_employment_capitalists_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_capitalists_investment_pool_contribution_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_capitalists_investment_pool_efficiency_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_capitalists_shares_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_clergymen_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_clergymen_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

building_employment_clergymen_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_clergymen_shares_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_employment_clerks_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_engineers_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_engineers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_engineers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_farmers_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_farmers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

state_farmers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_farmers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_farmers_investment_pool_contribution_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_farmers_investment_pool_efficiency_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_clergymen_investment_pool_contribution_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_clergymen_investment_pool_efficiency_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}


country_laborers_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_laborers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_laborers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_laborers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_machinists_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_machinists_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_machinists_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_machinists_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_officers_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_officers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

building_employment_officers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_peasants_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_peasants_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_peasants_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_employment_shopkeepers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_shopkeepers_investment_pool_contribution_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_shopkeepers_investment_pool_efficiency_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_shopkeepers_shares_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_slaves_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_soldiers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_soldiers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_unincorporated_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_light_industry_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_light_industry_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_light_industry_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_heavy_industry_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_heavy_industry_engineers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_heavy_industry_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_heavy_industry_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_unincorporated_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_coffee_plantations_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_silk_plantations_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_tobacco_plantations_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_sugar_plantations_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_unincorporated_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_unincorporated_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_unincorporated_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_engineers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_engineers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_government_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_engineers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_military_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_national_supremacy_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_national_supremacy_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_racial_segregation_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_no_colonial_affairs_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_autocracy_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_oligarchy_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_census_voting_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_universal_suffrage_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_universal_suffrage_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_industry_banned_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_command_economy_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_censorship_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_right_of_assembly_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_protected_speech_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_monarchy_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_presidential_republic_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_parliamentary_republic_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_council_republic_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_council_republic_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_national_guard_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_secret_police_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_no_migration_controls_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_migration_controls_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_closed_borders_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_local_police_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_dedicated_police_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_militarized_police_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_militarized_police_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_womens_suffrage_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_womens_suffrage_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_slavery_banned_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_slave_trade_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_proportional_taxation_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_graduated_taxation_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_wage_subsidies_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

country_military_tech_spread_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_military_tech_research_speed_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_society_tech_spread_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_society_tech_research_speed_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_barracks_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_naval_base_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_fishing_wharf_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_trade_center_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_subsistence_farms_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_academics_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_bureaucrats_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_clerks_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_engineers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_laborers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_machinists_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_peasants_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_shopkeepers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_slaves_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_soldiers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

﻿﻿interest_group_ig_armed_forces_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_devout_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_industrialists_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_intelligentsia_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_landowners_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_petty_bourgeoisie_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_rural_folk_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_trade_unions_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_pol_str_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_in_opposition_agitator_popularity_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_bureaucracy_add={
	decimals=0
	color=good
	game_data={
		ai_value=20
	}
}

country_bureaucracy_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_bureaucracy_investment_cost_factor_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_authority_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_authority_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=20
	}
}

country_influence_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_influence_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=20
	}
}

country_convoys_capacity_add={
	decimals=0
	color=good
	game_data={
		ai_value=10
	}
}

country_convoys_capacity_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_max_companies_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_company_throughput_bonus_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_company_construction_efficiency_bonus_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_overlord_income_transfer_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_liberty_desire_add={
	decimals=2
	color=neutral
	game_data={
		ai_value=0
	}
}

country_liberty_desire_of_subjects_add={
	decimals=2
	color=neutral
	game_data={
		ai_value=0
	}
}

country_liberty_desire_increase_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_liberty_desire_decrease_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_authority_per_subject_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_subject_income_transfer_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_subject_income_transfer_heathen_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_construction_add={
	decimals=1
	color=good
	game_data={
		ai_value=500
	}
}

country_max_weekly_construction_progress_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

country_private_construction_allocation_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_construction_goods_cost_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_prestige_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

country_prestige_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_max_declared_interests_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

country_max_declared_interests_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_diplomatic_play_maneuvers_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_initiator_war_goal_maneuver_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_prestige_from_army_power_projection_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_prestige_from_navy_power_projection_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_infamy_generation_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_infamy_generation_against_unrecognized_mult = {
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_infamy_decay_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_tension_decay_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_improve_relations_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_damage_relations_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_minting_add={
	decimals=0
	color=good
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

country_minting_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_expenses_add={
	decimals=1
	color=bad
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

country_government_wages_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_military_wages_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_military_goods_cost_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_tax_income_add={
	decimals=0
	color=good
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

tax_income_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tax_consumption_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tax_dividends_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tax_per_capita_add={
	decimals=2
	color=neutral
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

tax_land_add={
	decimals=2
	color=neutral
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

tax_heathen_add={
	decimals=2
	color=neutral
	prefix="MONEY_PREFIX"
	game_data={
		ai_value=0
	}
}

country_consumption_tax_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_loan_interest_rate_add={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_loan_interest_rate_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_gold_reserve_limit_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_government_dividends_reinvestment_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_government_dividends_efficiency_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_government_dividends_waste_add={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_pol_str_factor={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_armed_forces_approval_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_devout_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_industrialists_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_intelligentsia_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_landowners_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_petty_bourgeoisie_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_rural_folk_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_trade_unions_approval_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_ig_armed_forces_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_devout_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_industrialists_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_intelligentsia_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_landowners_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_petty_bourgeoisie_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_rural_folk_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_ig_trade_unions_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_approval_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_pop_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_in_government_approval_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

interest_group_in_opposition_approval_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_opposition_ig_approval_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_voting_power_base_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_voting_power_from_literacy_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_voting_power_wealth_threshold_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_legitimacy_base_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_govt_total_clout_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_govt_total_votes_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_headofstate_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_govt_leader_clout_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_govt_size_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_legitimacy_ideological_incoherence_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_party_whip_impact_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_radicals_from_legitimacy_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_loyalists_from_legitimacy_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_suppression_ig_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_bolster_ig_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_suppression_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_bolster_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_size_change_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_law_enactment_time_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_law_enactment_max_setbacks_add = {
	decimals = 0
	color = good
	percent = no
	game_data={
		ai_value=0
	}	
}

country_law_enactment_imposition_success_add = {
	decimals=0
	color=good
	percent=yes
}

country_law_enactment_success_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_law_enactment_stall_mult = {
	decimals=0
	color=good
	percent = yes
	game_data={
		ai_value=0
	}
}

state_decree_cost_mult ={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

political_movement_support_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

political_movement_support_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

political_movement_radicalism_add={
	decimals=0
	color=bad
	game_data={
		ai_value=0
	}
}

political_movement_radicalism_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

political_movement_preserve_support_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

political_movement_enact_support_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

political_movement_restore_support_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_agitator_slots_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_revolution_clock_time_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_revolution_progress_add={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_revolution_progress_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_secession_clock_time_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_secession_progress_add={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_secession_progress_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_radicals_from_conquest_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

market_land_trade_capacity_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

market_max_exports_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

market_max_imports_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tariff_import_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tariff_export_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tariff_import_outside_power_bloc_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

tariff_export_outside_power_bloc_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_market_access_price_impact={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_trade_route_quantity_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_free_trade_routes_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_trade_route_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_trade_route_competitiveness_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_weekly_innovation_add={
	decimals=1
	color=good
	game_data={
		ai_value=1000
	}
}

country_weekly_innovation_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_weekly_innovation_max_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

country_tech_spread_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_tech_spread_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_tech_research_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_tech_group_research_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_ahead_of_time_research_penalty_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_war_exhaustion_casualties_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_resource_discovery_chance_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_resource_depletion_chance_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_construction_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_pol_str_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_pop_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_welfare_payments_add={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_welfare_payments_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_poor_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_middle_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_rich_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_expected_sol_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_expected_sol_from_literacy={
	decimals=0
	color=bad
	game_data={
		ai_value=0
	}
}

state_poor_expected_sol={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_middle_expected_sol={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_rich_expected_sol={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_tax_capacity_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tax_capacity_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_tax_waste_add={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_tax_collection_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_education_access_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pollution_generation_add={
	decimals=0
	color=bad
	game_data={
		ai_value=0
	}
}

state_pollution_reduction_health_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_peasants_education_access_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_education_access_wealth_add={
	decimals=1
	color=good
	suffix="per_wealth"
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_qualifications_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_working_adult_ratio_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_dependent_wage_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_dependent_wage_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_economy_of_scale_level_cap_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_slave_import_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_level_bureaucracy_cost_add={
	decimals=0
	color=bad
	game_data={
		ai_value=0
	}
}

state_assimilation_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_conversion_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_bureaucracy_population_base_cost_factor_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_dependent_political_participation_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_political_strength_from_wealth_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_political_strength_from_discrimination_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_political_strength_from_welfare_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_infrastructure_add={
	decimals=1
	color=good
	game_data={
		ai_value=50
	}
}

state_infrastructure_from_population_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_infrastructure_from_population_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_infrastructure_from_population_max_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_infrastructure_from_population_max_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_infrastructure_from_automobiles_consumption_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_infrastructure_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_urbanization_per_level_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

state_urbanization_per_level_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_building_barracks_max_level_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_building_conscription_center_max_level_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_building_naval_base_max_level_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_building_port_max_level_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_building_construction_sector_max_level_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_colony_growth_creation_mult={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_colony_growth_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_non_homeland_colony_growth_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_migration_pull_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_migration_pull_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_migration_push_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_unincorporated_starting_wages_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_migration_pull_unincorporated_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_migration_quota_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_mass_migration_attraction_mult = {
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_conscription_rate_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_conscription_rate_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_birth_rate_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_accepted_birth_rate_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_non_homeland_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_mortality_wealth_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_minimum_wealth_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

state_turmoil_effects_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_mortality_turmoil_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_radicals_from_discrimination_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_radicals_from_sol_change_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_loyalists_from_sol_change_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_radicals_from_sol_change_accepted_culture_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_loyalists_from_sol_change_accepted_culture_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_radicals_from_sol_change_accepted_religion_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_loyalists_from_sol_change_accepted_religion_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_command_limit_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

character_command_limit_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_morale_cap_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_popularity_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

character_health_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_supply_route_cost_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_advancement_speed_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

character_convoy_protection_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_interception_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

character_convoy_raiding_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

battle_offense_owned_province_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

battle_defense_owned_province_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

battle_casualties_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

battle_combat_width_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_defense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_defense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_army_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_army_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_army_defense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_army_defense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_navy_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_navy_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_navy_defense_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

unit_navy_defense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

unit_morale_loss_add={
	decimals=0
	color=bad
	game_data={
		ai_value=100
	}
}

unit_morale_loss_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=-5000
	}
}

unit_morale_damage_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_morale_recovery_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_kill_rate_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_recovery_rate_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_provinces_captured_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_provinces_lost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=-5000
	}
}

unit_devastation_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_advancement_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_convoy_requirements_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_convoy_raiding_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_convoy_defense_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_convoy_raiding_interception_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

unit_supply_consumption_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_occupation_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_siege_artillery_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_shrapnel_artillery_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_submarine_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_heavy_tank_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_carrier_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_cannon_artillery_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_mobile_artillery_offense_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_trench_infantry_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_squad_infantry_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

unit_combat_unit_type_mechanized_infantry_offense_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

military_formation_movement_speed_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

military_formation_movement_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

military_formation_mobilization_speed_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

military_formation_mobilization_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

military_formation_organization_gain_add={
	decimals=2
	color=good
	game_data={
		ai_value=5000
	}
}

military_formation_organization_gain_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=5000
	}
}

military_formation_attrition_risk_add={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=-5000
	}
}

military_formation_attrition_risk_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=-5000
	}
}

unit_army_experience_gain_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

unit_navy_experience_gain_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

unit_experience_gain_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

unit_army_experience_gain_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_navy_experience_gain_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

unit_experience_gain_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_production_tech_research_speed_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_production_tech_spread_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

dummy_modifier_type={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}


﻿
building_group_bg_construction_laborers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_farmers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_farmers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_farmers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_laborers_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_laborers_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_machinists_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_machinists_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_machinists_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_machinists_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_slaves_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_laborers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_machinists_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_engineers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_slaves_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_engineers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_engineers_mortality_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_engineers_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_engineers_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_service_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_gold_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_coal_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_iron_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_lead_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_sulfur_mining_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_government_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_tax_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_service_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_gold_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_coal_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_iron_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_lead_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_sulfur_mining_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_government_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_service_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_gold_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_coal_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_iron_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_lead_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_sulfur_mining_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_government_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

building_group_bg_service_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_gold_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_coal_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_iron_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_lead_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_sulfur_mining_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_government_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_employee_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_goods_input_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_cash_reserves_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_construction_infrastructure_usage_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_agriculture_allowed_collectivization_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_ranching_allowed_collectivization_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_subsistence_output_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

building_subsistence_output_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_mobilization_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_unincorporated_subsistence_output_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_training_rate_add={
	decimals=0
	color=good
	game_data={
		ai_value=100
	}
}

building_training_rate_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=10000
	}
}

building_working_conditions_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_minimum_wage_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_unincorporated_throughput_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_services_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_fine_art_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_furniture_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_clothes_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_tools_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_glass_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_steel_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_liquor_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_groceries_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_luxury_clothes_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_luxury_furniture_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_porcelain_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_fertilizer_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_explosives_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_ammunition_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_artillery_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_engines_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_clippers_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_steamers_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_manowars_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_ironclads_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_automobiles_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_aeroplanes_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_tanks_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_radios_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_telephones_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_grain_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_fish_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_meat_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_fruit_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_wine_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_fabric_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_wood_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_sugar_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_coal_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_iron_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_lead_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_oil_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_gold_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_sulfur_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_hardwood_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_rubber_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_coffee_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_dye_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_opium_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_tea_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_silk_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_tobacco_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_small_arms_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_paper_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_electricity_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_output_transportation_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

goods_input_fabric_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_wood_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_iron_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_coal_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_lead_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_liquor_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_grain_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_fish_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_meat_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_fruit_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_sugar_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_glass_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_dye_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_silk_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_tobacco_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_wine_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_hardwood_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_sulfur_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_oil_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_steel_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_fertilizer_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_tools_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_rubber_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_opium_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_ammunition_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_artillery_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_small_arms_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_clothes_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_groceries_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_engines_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_automobiles_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_clippers_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_steamers_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_manowars_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_ironclads_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_paper_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_explosives_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_electricity_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_transportation_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_aeroplanes_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_tanks_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_radios_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_input_telephones_add={
	decimals=1
	color=bad
	game_data={
		ai_value=0
	}
}

goods_output_hardwood_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_oil_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_service_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_construction_sector_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_coal_mine_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_silk_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_dye_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_cotton_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_iron_mine_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_gold_mine_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_shipyards_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_port_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_rye_farm_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_wheat_farm_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_rice_farm_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_maize_farm_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_millet_farm_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_livestock_ranch_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_opium_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_arts_academy_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_university_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_whaling_station_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_tools_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_small_arms_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_engines_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_artillery_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_automobiles_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_aeroplanes_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_tanks_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_clippers_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_steamers_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_manowars_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_ironclads_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_food_industry_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_munition_plants_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_synthetics_plants_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_textile_mills_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_furniture_manufacturies_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_glassworks_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_tooling_workshops_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_paper_mills_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_chemical_plants_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_motor_industry_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_war_machine_industry_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_electrics_industry_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_arms_industry_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_artillery_foundries_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_power_plant_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_lead_mine_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_sulfur_mine_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_gold_fields_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_railway_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_rubber_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_vineyard_plantation_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_explosives_factory_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_military_shipyards_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_liquor_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_wine_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_fabric_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_fruit_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_sugar_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_radio_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_silk_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_steel_mills_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_urban_center_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_output_electricity_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_government_administration_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_nationalization_cost_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_nationalization_radicals_mult = {
	decimals=1
	color=bad
	percent=yes
}

building_nationalization_investment_return_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_small_arms_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_artillery_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_ammunition_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_oil_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_radios_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

goods_input_tanks_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}


﻿country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool={
	decimals=1
	color = good
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_can_impose_same_lawgroup_policing_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_can_impose_same_lawgroup_army_model_in_power_bloc_bool = {
	color = good
	boolean=yes
}

country_disallow_law_no_schools_bool = {
	color = bad
	boolean=yes
}

country_disallow_law_no_police_bool = {
	color = bad
	boolean=yes
}

country_disallow_law_no_colonial_affairs_bool = {
	color = bad
	boolean=yes
}

country_disallow_discriminated_migration_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disallow_migration_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disallow_agitator_invites_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_allow_multiple_alliances_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

state_disallow_incorporation_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

market_disallow_trade_routes_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_ignores_landing_craft_penalty_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_government_buildings_protected_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_all_buildings_protected_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disable_investment_pool_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_cannot_start_law_enactment_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_cannot_cancel_law_enactment_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_cannot_be_target_for_law_imposition_bool = {
	color = good
	boolean = yes
}

country_cannot_enact_laws_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_must_have_movement_to_enact_laws_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disallow_aggressive_plays_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disable_nationalization_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disable_nationalization_without_compensation_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_force_privatization_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_disable_privatization_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_can_form_construction_company_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_force_collectivization_bool={
	decimals=1
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_allow_enacting_decrees_in_subject_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_allow_trade_routes_without_interest_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

state_peasants_mass_migration_disallowed_bool = {
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

state_peasants_internal_migration_disallowed_bool = {
	color=bad
	boolean=yes
	game_data={
		ai_value=0
	}
}

﻿character_battle_condition_dug_in_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_charted_terrain_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_rapid_advance_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_camouflaged_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_logistics_secured_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_mud_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_broken_supply_line_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_exhausted_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_lost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_surprise_maneuver_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_aggressive_maneuver_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_careful_maneuver_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_blunder_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_poor_visibility_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_good_visibility_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_rough_waters_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_strong_winds_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_death_from_below_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

character_battle_condition_ramming_maneuver_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

character_expedition_events_explorer_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_expedition_events_explorer_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

interest_group_in_government_attraction_mult={
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}


﻿unit_offense_flat_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_flat_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_flat_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_flat_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}

unit_offense_elevated_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_elevated_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_elevated_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_elevated_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}

unit_offense_forested_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_forested_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_forested_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_forested_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}

unit_offense_hazardous_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_hazardous_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_hazardous_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_hazardous_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}

unit_offense_developed_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_developed_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_developed_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_developed_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}

unit_offense_water_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_offense_add"
	}
}

unit_offense_water_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_offense_mult"
	}
}

unit_defense_water_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
		translate="unit_defense_add"
	}
}

unit_defense_water_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
		translate="unit_defense_mult"
	}
}


﻿power_bloc_leader_can_make_subjects_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_leader_can_force_state_religion_bool = {
	color = neutral
	boolean = yes
	game_data = {
		ai_value = 0
	}
}

power_bloc_leader_can_regime_change_bool = {
	color = neutral
	boolean = yes
	game_data = {
		ai_value = 0
	}
}

power_bloc_leader_can_add_wargoal_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_cohesion_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_cohesion_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_cohesion_per_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_religion_trade_route_competitiveness_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_great_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_great_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_major_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_major_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_minor_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_minor_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_insignificant_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_insignificant_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_major_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_major_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_regional_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_regional_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_power_member_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_per_unrecognized_power_member_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_great_power_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_major_power_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_minor_power_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_unrecognized_major_power_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_invite_acceptance_unrecognized_regional_power_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

power_bloc_disallow_embargo_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_disallow_war_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_customs_union_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_trade_route_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_leverage_generation_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_mandate_progress_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_target_sway_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

power_bloc_allow_wider_migration_area_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

power_bloc_income_transfer_to_leader_factor={
	decimals=2
	color=neutral
	game_data={
		ai_value=0
	}
}

country_nationalization_cost_non_members_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_leader_has_law_enactment_success_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_join_power_bloc_member_in_defensive_plays_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}

country_join_power_bloc_member_in_plays_bool={
	decimals=1
	color=neutral
	boolean=yes
	game_data={
		ai_value=0
	}
}


﻿country_enactment_success_chance_law_technocracy_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_enactment_success_chance_law_public_schools_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_enactment_time_law_technocracy_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_enactment_time_law_public_schools_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_leverage_resistance_add={
	decimals=0
	color = neutral
	percent=no
	game_data={
		ai_value=0
	}
}

country_leverage_resistance_mult={
	decimals=0
	color = neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_leverage_generation_mult={
	decimals=0
	color = good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_leverage_generation_add = {
	decimals=0
	color = good
	percent=no
	game_data={
		ai_value=0
	}
}

country_lobby_leverage_generation_mult={
	decimals=0
	color = good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_pact_leverage_generation_add = {
	decimals=0
	color = good
	percent=no
	game_data={
		ai_value=0
	}
}

country_pact_leverage_generation_mult={
	decimals=0
	color = good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_convoy_contribution_to_market_owner_add = {
	decimals=0
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_size_change_speed_institution_colonial_affairs_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_size_change_speed_institution_police_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_size_change_speed_institution_schools_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_cost_institution_colonial_affairs_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_cost_institution_police_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_cost_institution_schools_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_institution_impact_institution_health_system_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_port_connection_cost_mult={
	decimals=0
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_legitimacy_min_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}


﻿# These boolean modifiers only exist to generate tooltips and do not have an actual effect in and of themselves

country_higher_diplomatic_acceptance_same_religion_bool = {
	color = good
	boolean=yes
}

country_reduced_liberty_desire_same_religion_bool = {
	color = good
	boolean=yes
}

country_higher_leverage_from_economic_dependence_bool = {
	color = good
	boolean=yes
}

power_bloc_allow_foreign_investment_lower_rank_bool={
	decimals=1
	color=good
	boolean=yes
	game_data={
		ai_value=0
	}
}

﻿state_catholic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_protestant_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_orthodox_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_oriental_orthodox_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sunni_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_shiite_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_jewish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mahayana_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_gelugpa_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_theravada_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_confucian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hindu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_shinto_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sikh_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_animist_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_atheist_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_scottish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_galician_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_malay_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bornean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sumatran_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_balinese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_cajun_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_assyrian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_circassian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_francoprovencal_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_chechen_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_karelian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bashkir_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_buryat_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mordvin_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_chuvash_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mari_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_udmurt_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mazanderani_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_luri_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kho_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_south_german_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ashkenazi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dutch_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_flemish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_wallonian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_boer_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_alemannic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_swedish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_danish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_norwegian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_icelandic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_finnish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sami_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_british_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_irish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_australian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_north_italian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_south_italian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_maltese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_basque_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_spanish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_catalan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_portuguese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_french_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_occitan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_breton_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_croat_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_serb_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bulgarian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_albanian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_slovene_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bosniak_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_romanian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hungarian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_polish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_lithuanian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_czech_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_slovak_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_russian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_byelorussian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ukrainian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ugrian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_latvian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_estonian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_greek_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_georgian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_armenian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sephardic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_turkish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_azerbaijani_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_north_caucasian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_maghrebi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_misri_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mashriqi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bedouin_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_berber_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_persian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_uzbek_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kazak_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kirgiz_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tajik_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_uighur_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_pashtun_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_baluchi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hazara_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_turkmen_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kurdish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tatar_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mongol_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kalmyk_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_siberian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yakut_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tibetan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_assamese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bengali_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bihari_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_manipuri_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nepali_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_oriya_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sinhala_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_avadhi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kanauji_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_panjabi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kashmiri_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_gujarati_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_marathi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sindi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_rajput_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kannada_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_malayalam_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tamil_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_telegu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_vietnamese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_khmer_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_batak_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dayak_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_malagasy_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_filipino_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_moro_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_javan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_moluccan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_thai_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mon_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_khmu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_lao_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_shan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_burmese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kachin_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_karen_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_japanese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_manchu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_han_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_korean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ainu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hakka_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_miao_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_min_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_zhuang_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yue_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_polynesian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hawaiian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_melanesian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_micronesian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_maori_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yuanzhumin_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_aborigine_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_zapotec_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mayan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nahua_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tarascan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_quechua_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_guarani_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_aimara_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_amazonian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_patagonian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_guajiro_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tupinamba_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_metis_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dakota_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_cherokee_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_muskogean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_pueblo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_inuit_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_cree_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_navajo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_athabaskan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_salish_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nez_perce_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_siouan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_comanche_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_algonquian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_iroquoian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_caddoan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_paiute_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hokan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_apache_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_oodham_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mixtec_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_muisca_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_miskito_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_cariban_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yankee_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dixie_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mexican_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_central_american_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_caribeno_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_north_andean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_south_andean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_peruvian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bolivian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ecuadorian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_chilean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_venezuelan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_argentine_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_uruguayan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_paraguayan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_colombian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_platinean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_brazilian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sulista_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nordestino_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_amazonic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_paulista_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afro_american_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afro_caribbean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afro_caribeno_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afro_brazilian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afro_antillean_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_akan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bambara_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bassa_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dyula_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_edo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ewe_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_fon_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_fulbe_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_haratin_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_hausa_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ibibio_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ibo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kissi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kru_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mande_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bidan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mossi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_senufo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_songhai_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tiv_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tuareg_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_wolof_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yoruba_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_bakongo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_baguirmi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_fang_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kanuri_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_luba_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_lunda_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_mongo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sara_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_teda_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_equatorial_bantu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_fluvian_bantu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nilotic_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_amhara_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_afar_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_azande_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_baganda_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_beja_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_dinka_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_fur_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kikuyu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_luo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_maasai_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nuer_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nuba_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_oromo_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ruanda_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_rundi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sidama_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_somali_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sudanese_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sukuma_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_swahili_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tigray_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_unyamwezi_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_lacustrine_bantu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_chewa_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_herero_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_khoisan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_lomwe_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_makua_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_nguni_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_ovimbundu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sena_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_shona_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sotho_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tonga_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tswana_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_xhosa_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yao_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_zulu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_kavango_bantu_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_anglo_canadian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_franco_canadian_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_sorb_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_tuvan_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_corsican_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_yemenite_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_welsh_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

state_north_german_standard_of_living_add={
	decimals=1
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_colonial_affairs_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_social_security_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_workplace_safety_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_schools_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_police_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_health_system_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_institution_home_affairs_max_investment_add={
	decimals=0
	color=good
	game_data={
		ai_value=0
	}
}

country_academics_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_academics_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_academics_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_academics_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_aristocrats_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_aristocrats_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

state_aristocrats_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_aristocrats_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_aristocrats_investment_pool_contribution_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_aristocrats_investment_pool_efficiency_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_aristocrats_shares_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_bureaucrats_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_bureaucrats_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_bureaucrats_shares_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_capitalists_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_capitalists_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

building_employment_capitalists_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_capitalists_investment_pool_contribution_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_capitalists_investment_pool_efficiency_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_capitalists_shares_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_clergymen_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_clergymen_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

building_employment_clergymen_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_clergymen_shares_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_employment_clerks_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_engineers_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_engineers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_engineers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_farmers_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_farmers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

state_farmers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_farmers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_farmers_investment_pool_contribution_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_farmers_investment_pool_efficiency_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_clergymen_investment_pool_contribution_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_clergymen_investment_pool_efficiency_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}


country_laborers_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_laborers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_laborers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_laborers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_machinists_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_machinists_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_machinists_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_machinists_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

country_officers_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

country_officers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

building_employment_officers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

country_peasants_pol_str_mult={
	decimals=1
	color=neutral
	percent=yes
	game_data={
		ai_value=0
	}
}

state_peasants_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_peasants_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_employment_shopkeepers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_shopkeepers_investment_pool_contribution_add={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_shopkeepers_investment_pool_efficiency_mult={
	decimals=0
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_shopkeepers_shares_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

state_slaves_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

state_soldiers_mortality_mult={
	decimals=1
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_employment_soldiers_add={
	decimals=0
	color=neutral
	game_data={
		ai_value=0
	}
}

building_group_bg_manufacturing_unincorporated_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_light_industry_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_light_industry_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_light_industry_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_heavy_industry_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_heavy_industry_engineers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_heavy_industry_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_heavy_industry_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_plantations_unincorporated_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_coffee_plantations_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_silk_plantations_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_tobacco_plantations_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_sugar_plantations_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_mining_unincorporated_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_logging_unincorporated_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_rubber_unincorporated_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_whaling_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_engineers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_fishing_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_engineers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_oil_extraction_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_government_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_engineers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_laborers_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_infrastructure_machinists_mortality_mult={
	decimals=2
	color=bad
	percent=yes
	game_data={
		ai_value=0
	}
}

building_group_bg_military_throughput_add={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_national_supremacy_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_national_supremacy_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_racial_segregation_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_no_colonial_affairs_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_autocracy_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_oligarchy_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_census_voting_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_universal_suffrage_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_universal_suffrage_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_industry_banned_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_command_economy_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_censorship_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_right_of_assembly_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_protected_speech_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_monarchy_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_presidential_republic_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_parliamentary_republic_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_council_republic_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_council_republic_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_national_guard_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_secret_police_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_no_migration_controls_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_migration_controls_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_closed_borders_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_local_police_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_dedicated_police_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_militarized_police_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_militarized_police_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_womens_suffrage_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_womens_suffrage_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_slavery_banned_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_slave_trade_mult={
	decimals=2
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

state_pop_support_law_proportional_taxation_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_graduated_taxation_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

state_pop_support_law_wage_subsidies_add={
	decimals=2
	color=good
	game_data={
		ai_value=0
	}
}

country_military_tech_spread_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_military_tech_research_speed_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_society_tech_spread_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_society_tech_research_speed_mult={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_barracks_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_naval_base_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_fishing_wharf_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_trade_center_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

building_subsistence_farms_throughput_add={
	decimals=1
	color=good
	percent=yes
	game_data={
		ai_value=0
	}
}

country_academics_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_bureaucrats_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_clerks_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_engineers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_laborers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_machinists_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_peasants_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_shopkeepers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_slaves_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}

country_soldiers_voting_power_add={
	decimals=1
	color=neutral
	game_data={
		ai_value=0
	}
}


﻿colors = {
	todo_purple = rgb { 1 0.4 0.6 }
	highlight = 	hsv360 	{	195	25	100	}

	black = 		hsv360 	{	0	0	5	}
	white = 		hsv360 	{	20	0	90	}
	blue = 			hsv360 	{	230	80	30	}
	green =			hsv360 	{	154	90	35	}
	red = 			hsv360 	{	1	95	55	}
	orange = 		hsv360 	{	23	100	70	}
	yellow = 		hsv360 	{	44	83	85	}
	purple =		hsv360 	{	308	89	39	}
	beige = 		hsv360 	{	30	0	20	}
	peach = 		hsv360 	{	30	40	90	}
	brown = 		hsv360 	{	26	70	25	}
	pink = 			hsv360 	{	187	83	146	}
	saffron = 		hsv360 	{	34	95	80	}
	grey = 			hsv360 	{	0	0	45	}
	tan = 			hsv360 	{	20	65	45	}
	azure =			hsv360 	{	215	80	45	}
	pearl = 		hsv360 	{	160	2	80	}
	teal = 			hsv360 	{	177	97	41	}
	golden = 		hsv360 	{	27	52	94	}
	blue_light =	hsv360 	{	200	50	60	}
	green_light = 	hsv360 	{	154	90	50	}
	red_light = 	hsv360 	{	1	90	65	}
	brown_light =	hsv360 	{	26	65	50	}
	black_light = 	hsv360 	{	0	0	15	}
	yellow_light = 	hsv360 	{	44	75	95	}
	yellow_dark = 	hsv360 	{	40	85	75	}
	red_dark = 		hsv360 	{	1	95	35	}
	green_dark = 	hsv360 	{	154	90	25	}
	red_faint = 	hsv360 	{	0	45	90	}
	grey_observer = hsv360 	{	180	5	70	}
}
colors = {	
	austria_hungary_color = hsv360 { 5 44 56 }	
	khmer_green = rgb {	0.2 0.37 0.27 }
	mexican_empire_green = rgb { 0.18 0.33 0.22 }
	united_netherlands_orange = rgb { 0.9 0.47 0 }
	naples_purple = rgb { 0.52 0 0.49 }
	turkish_republic_red = rgb { 0.92 0.25 0.17 }
	usa_monarchy_blue = rgb { 0.1 0.21 0.34 }
	usa_technate_grey = rgb { 0.45 0.47 0.55 }
	feldgrau 	= 	hsv360 	{ 85 25 46 }
	roman_red 	= 	hsv { 0 0.91 0.55  }
	joseon_blue 	= 	rgb { 0.10 0.21 0.69 }
	tokugawa_green 	= 	rgb { 0.18 0.36 0.31 }
	kalmar_orange  	= 	rgb { 1 0.67 0.2 }
	revolutionary_blue 	= 	rgb { 0.15 0.39 0.61 }
	paris_red = rgb { 0.93 0.16 0.22 }		# shade of red used in the flag of Paris
	british_red = { 0.78 0.06 0.18 }		# shade of red used in the flag of the United Kingdom
	orange_india 	= 	rgb { 0.88 0.51 0.16 }
	hoi4_pakistan_blue =	rgb { 0.08 0.15 0.26 }
	finnish_brown	=	rgb { 0.71 0.53 0.39 }
	DDR_green	=	rgb { 0.47 0.59 0.31 }
	communist_germany_red =   hsv360 { 0 100 21 }
	peru_bolivia	=	rgb { 0.91 0.42 0.64 }
	DDR_green	=	rgb { 0.47 0.59 0.31 }
	red_china	=	rgb { 0.874 0.105 0.070 }
	communist_china_red	=	rgb { 0.95 0.06 0.19 }
	baku_red	=	hsv360 	{	6	82	81	}
	kartli_grey	=	rgb { 0.75 0.77 0.80 }
	abkhazia_green	=	hsv360 	{ 160 42 71 }
	nihilist_russia_color	=	rgb { 0.02 0.075 0.05 }
	nihilist_germany_color	=	rgb { 0.025 0.1 0.12 }
	algeria_red = rgb { 228 3 16 }
	algeria_green = rgb { 0 129 48 }
	algeria_yellow = rgb { 255 255 153 }
	communist_france_red = hsv360 { 345 72 54 }
	bonapartist_blue = hsv360 { 212 100 32 }
	european_blue = hsv360 { 218 90 60 }
	communist_hre_red = hsv360 { 0 85 50 }
	technate_grey = hsv360 { 231 15 50 }
	paneuropa_grey = hsv360 { 240 5 25 }
	burgundy_burgundy = hsv360 { 345 100 32 }
	plc_pink = rgb { 225 87 225 }
	republican_brazil_green = hsv360 { 142 62 39 }
	republican_spain_purple = hsv360 { 286 47 62 }
	communist_spain_pink = hsv360 { 353 76 71 }
	communist_austria_red = hsv360 { 355 82 92 }
	integralist_brazil_blue = hsv360 { 220 70 50 }
	federation_periwinkle = hsv360 { 235 45 87 }
	korean_empire_purple = hsv360 { 270 75 37 }
} 

colors = {
	army_color_1 = 		hsv360 	{	0	0	94	}
	army_color_2 = 		hsv360 	{	38	49	90	}
	army_color_3 = 		hsv360 	{	18	43	90	}
	army_color_4 = 		hsv360 	{	47	84	98	}
	army_color_5 = 		hsv360 	{	18	79	100	}
	army_color_6 = 		hsv360 	{	3	72	100	}
	army_color_7 = 		hsv360 	{	352	52	100	}
	army_color_8 = 		hsv360 	{	168	58	85	}
	army_color_9 = 		hsv360 	{	223	59	98	}
	army_color_10 = 		hsv360 	{	73	58	98	}
	army_color_11 = 		hsv360 	{	96	85	90	}
	army_color_12 = 		hsv360 	{	140	76	96	}
	army_color_13 = 		hsv360 	{	258	52	100	}
	army_color_14 = 		hsv360 	{	313	59	90	}
	fleet_color_1 = 		hsv360 	{	0	0	94	}
	fleet_color_2 = 		hsv360 	{	38	49	90	}
	fleet_color_3 = 		hsv360 	{	18	43	90	}
	fleet_color_4 = 		hsv360 	{	47	84	98	}
	fleet_color_5 = 		hsv360 	{	18	79	100	}
	fleet_color_6 = 		hsv360 	{	3	72	100	}
	fleet_color_7 = 		hsv360 	{	352	52	100	}
	fleet_color_8 = 		hsv360 	{	168	58	85	}
	fleet_color_9 = 		hsv360 	{	223	59	98	}
	fleet_color_10 = 		hsv360 	{	73	58	98	}
	fleet_color_11 = 		hsv360 	{	96	85	90	}
	fleet_color_12 = 		hsv360 	{	140	76	96	}
	fleet_color_13 = 		hsv360 	{	258	52	100	}
	fleet_color_14 = 		hsv360 	{	313	59	90	}
}

﻿﻿objective_tutorial = {
	enabled_background = "gfx/interface/icons/objectives/learn.dds"
	icon = "gfx/interface/icons/event_icons/tutorial_icon.dds"
	
	recommended_tags = { SWE BEL CLM DAI }	
	recommended_game_rules = { lenient_ai_behavior low_ai_aggression }

	objective_subgoals = {
		sg_expand_basic_building
		sg_fix_budget_deficit
		sg_establish_trade_route
		sg_change_production_method
		sg_expand_productive_building
		sg_increase_market_access_by_decree
		sg_improve_market_access_with_railways
		sg_increase_immigration
		sg_fix_unproductive_building
		sg_grow_gdp
		sg_promote_ig
		sg_improve_supply_network
		sg_improve_consumer_goods_access
		sg_make_interest_group_happy
		sg_enact_institution_law
		sg_invest_into_an_institution
		sg_reform_government
		sg_increase_relations
		sg_improve_rank
		sg_prevent_revolution
		sg_earn_obligation
		sg_expand_military
		sg_recruit_promote_commander
		sg_mobilize_army
		sg_send_general_to_front
		sg_convoy_raiding 
		sg_recover_from_default
		sg_start_diplomatic_play
		sg_is_play_target
		sg_capacity_deficit
		sg_incorporate_state
		sg_declare_an_interest
		sg_make_peace
		sg_colonize_state
		sg_research_technology
		sg_create_formation
		sg_establish_company
	
		#Spehere of influence Tutorials
		sg_form_power_bloc
		sg_foreign_investment
		sg_subject_liberty
		sg_lobbies
	}
	
	final_subgoal = sg_improve_rank
	
	on_start = {
		start_research_random_technology = yes
		start_tutorial_lesson = { tutorial_lesson = lesson_basics }
	}
}

﻿objective_economic_dominance = {
	enabled_background = "gfx/interface/icons/objectives/economic_dominance_illu.dds"
	icon = "gfx/interface/icons/objectives/economic_dominance.dds"
	
	recommended_tags = { USA GBR TUR BRZ }
	
	objective_subgoals = {
		sg_expand_goods_production #rework

		sg_refining_goods #rework, make X number in single, state loc for status
		sg_specialized_goods #rework, make X number in single state, state loc for status
		sg_expanding_the_market #rework, add subjects and customs union

		sg_specialized_inputs #missing: LOC
		sg_exporting_profits #missing: LOC
		sg_utilizing_our_strength #missing: LOC
		sg_raise_exports_value #missing: LOC
		sg_lower_production_costs #missing: LOC

		sg_strong_market #Keep
	}
	
	final_subgoal = sg_strong_market
	
	on_start = {
		start_tutorial_lesson = { tutorial_lesson = economic_dominance }
	}
}

objective_hegemon = {
	enabled_background = "gfx/interface/icons/objectives/hegemon_illu.dds"
	icon = "gfx/interface/icons/objectives/hegemon.dds"
	
	recommended_tags = { PRU SPA JAP EGY }	
	
	objective_subgoals = {
		sg_colonization_laws
		sg_african_colonies
		sg_expand_navy_and_army
		sg_form_alliance
		sg_take_subject
		sg_increase_technology
		sg_greatest_power
		sg_greater_power
		sg_great_power
		sg_unrecognized_power
		sg_the_hegemon
	}
	
	final_subgoal = sg_the_hegemon
	
	on_start = {
		start_tutorial_lesson = { tutorial_lesson = hegemon }
	}
}
	
objective_egalitarian_society = {
	enabled_background = "gfx/interface/icons/objectives/egalitarian_society_illu.dds"
	icon = "gfx/interface/icons/objectives/egalitarian_society.dds"
	
	recommended_tags = { FRA RUS CHI MEX }	
	
	objective_subgoals = {
		sg_encourage_liberal_ideas
		sg_pass_laws
		sg_public_services
		sg_liberate_the_slaves
		sg_women_and_children
		sg_egalitarian_society
	}
	
	final_subgoal = sg_egalitarian_society
	
	on_start = {
		start_tutorial_lesson = { tutorial_lesson = egalitarian_society }
	}
}

objective_great_game = {
	enabled_background = "gfx/interface/icons/objectives/great_game_illu.dds"
	disabled_background = "gfx/interface/icons/objectives/great_game_illu_dis.dds"
	icon = "gfx/interface/icons/objectives/great_game.dds"
	
	recommended_tags = { RUS GBR PER KAB HER KAN }
	available_for_all_countries = no
	
	objective_subgoals = {
		sg_great_game
		sg_maintain_afghan_protectorate
		sg_consolidate_afghanistan
		sg_unify_afghanistan
		sg_disrupt_russian_caucasus
		sg_counter_russian_pacific_influence
		sg_consolidate_british_india
		sg_repulse_russian_pamirs
		sg_secure_persian_border
		sg_pacify_kazakh_steppe
		sg_codify_chinese_border
		sg_consolidate_central_asia
		sg_acquire_chinese_concessions
		sg_acquire_korean_protectorate
		sg_expand_eastern_frontier
		sg_secure_influence_over_persia
		sg_consolidate_persia
		sg_achieve_sovereignty
		sg_secure_tibet
	}
	
	final_subgoal = sg_great_game
	
	on_start = {

	}
	
	required_dlc_feature = ep1_content
}


﻿﻿sg_expand_basic_building = {
	category = sgcat_tutorial

	trigger = {
		any_scope_building = {
			is_under_construction = no
			is_farm_building = yes
			can_queue_building_levels = 1
		}
	}
	
	on_start = {
		start_tutorial_lesson = { tutorial_lesson = lesson_journal }
		
		if = {
			limit = {
				market_capital = {
					owner = ROOT
				}
			}
			save_scope_as = tutorial_state_target	
		}
		else = {
			capital = {
				save_scope_as = tutorial_state_target
			}
		}

		if = {
			limit = {
				scope:tutorial_state_target = {
					any_scope_building = {
						is_under_construction = no
						is_farm_building = yes
						can_queue_building_levels = 1
					}					
				}
			}
			scope:tutorial_state_target = {
				random_scope_building = {
					limit = {	
						is_under_construction = no
						is_farm_building = yes
						can_queue_building_levels = 1
					}
					save_scope_as = tutorial_building_target

				}			
			}
		}
		else_if = {
			limit = {
				any_scope_state = {
					is_incorporated = yes
					any_scope_building = {
						is_under_construction = no
						is_farm_building = yes
						can_queue_building_levels = 1
					}					
				}				
			}
			
			random_scope_state = {
				limit = { 
					is_incorporated = yes
					any_scope_building = {
						is_under_construction = no
						is_farm_building = yes
						can_queue_building_levels = 1
					}
				}
				
				random_scope_building = {
					limit = {	
						is_under_construction = no
						is_farm_building = yes
						can_queue_building_levels = 1
					}
					save_scope_as = tutorial_building_target
				}						
			}			
		}
		else = {
			random_scope_building = {
				limit = {	
					is_under_construction = no
					is_farm_building = yes
					can_queue_building_levels = 1
				}
				save_scope_as = tutorial_building_target
			}	
		}

		add_journal_entry = {
			type = je_tutorial_expand_basic_building
			objective_subgoal = sg_expand_basic_building
			target = scope:tutorial_building_target
		}			
	}
}

# Fix Budget Deficit
sg_fix_budget_deficit = {
	category = sgcat_tutorial
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_expand_productive_building
	}

	trigger = {
		gold_reserves = 0
		weekly_net_fixed_income <= -1000 # Do not trigger this based on a tiny deficit that will self-correct
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_fix_budget_deficit
			objective_subgoal = sg_fix_budget_deficit
		}	
	}
}

# Change Production Method
sg_change_production_method = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_expand_basic_building
	}

	trigger = {
		any_scope_state = {
			OR = {
				AND = {
					can_activate_production_method = {
						building_type = building_rye_farm	
						production_method = pm_apple_orchards
					}	
				}
				AND = {
					can_activate_production_method = {
						building_type = building_wheat_farm	
						production_method = pm_citrus_orchards
					}
				}
				AND = {	
					can_activate_production_method = {
						building_type = building_rice_farm	
						production_method = pm_fig_orchards_building_rice_farm
					}
				}
				AND = {
					can_activate_production_method = {
						building_type = building_maize_farm	
						production_method = pm_citrus_orchards
					}
				}
				AND = {	
					can_activate_production_method = {
						building_type = building_millet_farm	
						production_method = pm_fig_orchards
					}
				}					
				AND = {
					can_activate_production_method = {
						building_type = building_logging_camp
						production_method = pm_saw_mills
					}
					market = { 
						mg:tools = { market_goods_delta >= 20 } 
					}	
				}
				AND = {
					can_activate_production_method = {
						building_type = building_livestock_ranch
						production_method = pm_butchering_tools
					}
					market = { 
						mg:tools = { market_goods_delta >= 10 } 
					}	
				}					
			}
		}			
	}
	
	on_start = {
		if = {
			limit = {
				market_capital = {
					owner = ROOT
				}
			}
			market_capital = {
				save_scope_as = tutorial_state_target
			}
		}
		else = {
			capital = {
				save_scope_as = tutorial_state_target
			}
		}

		if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_rye_farm	
						production_method = pm_apple_orchards
					}						
				}
			}
			
			scope:tutorial_state_target = {
				b:building_rye_farm = { save_scope_as = tutorial_building_target }
			}					
		}	
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_wheat_farm	
						production_method = pm_citrus_orchards
					}					
				}
			}
			
			scope:tutorial_state_target = {
				b:building_wheat_farm = { save_scope_as = tutorial_building_target }
			}				
		}
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_maize_farm	
						production_method = pm_citrus_orchards
					}						
				}
			}
			
			scope:tutorial_state_target = {
				b:building_maize_farm = { save_scope_as = tutorial_building_target }
			}			
		}	
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_rice_farm	
						production_method = pm_fig_orchards_building_rice_farm
					}					
				}
			}
			
			scope:tutorial_state_target = {
				b:building_rice_farm = { save_scope_as = tutorial_building_target }
			}					
		}
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_millet_farm	
						production_method = pm_fig_orchards
					}					
				}
			}
			
			scope:tutorial_state_target = {
				b:building_millet_farm = { save_scope_as = tutorial_building_target }
			}					
		}			
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_livestock_ranch
						production_method = pm_butchering_tools
					}
					market = { mg:tools = { market_goods_delta >= 10 } }						
				}
			}
			
			scope:tutorial_state_target = {
				b:building_livestock_ranch = { save_scope_as = tutorial_building_target }
			}					
		}	
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_logging_camp
						production_method = pm_saw_mills
					}
					market = { mg:tools = { market_goods_delta >= 20 } }						
				}
			}
			
			scope:tutorial_state_target = {
				b:building_logging_camp = { save_scope_as = tutorial_building_target }
			}					
		}	
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_rye_farm	
						production_method = pm_apple_orchards 
					}					
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_rye_farm	
						production_method = pm_apple_orchards 
					}					
				}
				
				b:building_rye_farm = { save_scope_as = tutorial_building_target }
			}					
		}	
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_wheat_farm	
						production_method = pm_citrus_orchards 
					}					
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_wheat_farm	
						production_method = pm_citrus_orchards 
					}						
				}
				
				b:building_wheat_farm = { save_scope_as = tutorial_building_target }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_maize_farm	
						production_method = pm_citrus_orchards 
					}						
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_maize_farm	
						production_method = pm_citrus_orchards 
					}					
				}
				
				b:building_maize_farm = { save_scope_as = tutorial_building_target }
			}			
		}	
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_rice_farm	
						production_method = pm_fig_orchards_building_rice_farm 
					}					
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_rice_farm	
						production_method = pm_fig_orchards_building_rice_farm 
					}						
				}
				
				b:building_rice_farm = { save_scope_as = tutorial_building_target }
			}					
		}
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_millet_farm	
						production_method = pm_fig_orchards 
					}					
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_millet_farm	
						production_method = pm_fig_orchards 
					}						
				}
				
				b:building_millet_farm = { save_scope_as = tutorial_building_target }
			}					
		}			
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_livestock_ranch
						production_method = pm_butchering_tools
					}
					market = { mg:tools = { market_goods_delta >= 10 } }						
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_livestock_ranch
						production_method = pm_butchering_tools
					}
					market = { mg:tools = { market_goods_delta >= 10 } }						
				}
				
				b:building_livestock_ranch = { save_scope_as = tutorial_building_target }
			}					
		}	
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_logging_camp
						production_method = pm_saw_mills
					}
					market = { mg:tools = { market_goods_delta >= 20 } }						
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_logging_camp
						production_method = pm_saw_mills
					}
					market = { mg:tools = { market_goods_delta >= 20 } }						
				}
				
				b:building_logging_camp = { save_scope_as = tutorial_building_target }
			}					
		}			
		
		add_journal_entry = {
			type = je_tutorial_change_production_method
			objective_subgoal = sg_change_production_method
			target = scope:tutorial_building_target
		}	
	}
}

# Expand Productive Building
sg_expand_productive_building = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_change_production_method
	}
	
	trigger = {
		any_scope_building = {
			can_queue_building_levels = 1
			is_under_construction = no
			is_government_funded = no
			is_subsidized = no
			NOT = { is_building_group = bg_owner_buildings }
			earnings >= 8.0
		}
	}
	
	on_start = {
		if = {
			limit = {
				market_capital = {
					owner = ROOT
				}
			}
			save_scope_as = tutorial_state_target
		}
		else = {
			capital = {
				save_scope_as = tutorial_state_target
			}
		}

		if = {
			limit = {
				scope:tutorial_state_target = {
					any_scope_building = {
						can_queue_building_levels = 1
						is_under_construction = no
						is_government_funded = no
						is_subsidized = no
						NOT = { is_building_group = bg_owner_buildings }
						earnings >= 8.0
					}
				}
			}
			
			scope:tutorial_state_target = {
				random_scope_building = {
					limit = {
						can_queue_building_levels = 1
						is_under_construction = no
						is_government_funded = no
						is_subsidized = no
						NOT = { is_building_group = bg_owner_buildings }
						earnings >= 8.0
					}
					
					save_scope_as = tutorial_building_target 
				}				
			}				
		}				
		else_if = {
			limit = {
				any_scope_building = {
					can_queue_building_levels = 1
					is_under_construction = no
					is_government_funded = no
					is_subsidized = no
					NOT = { is_building_group = bg_owner_buildings }
					earnings >= 8.0
				}
			}
			
			random_scope_building = {
				limit = {
					can_queue_building_levels = 1
					is_under_construction = no
					is_government_funded = no
					is_subsidized = no
					NOT = { is_building_group = bg_owner_buildings }
					earnings >= 8.0
				}
				
				save_scope_as = tutorial_building_target 
			}				
		}		
		
		add_journal_entry = {
			type = je_tutorial_expand_productive_building
			objective_subgoal = sg_expand_productive_building
			target = scope:tutorial_building_target
		}	
	}
}

# Fix Unproductive Building
sg_fix_unproductive_building = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_expand_productive_building
	}

	trigger = {
		any_scope_state = {
			NOT = { state_infrastructure_balance < 0 }
			any_scope_building = {
				is_government_funded = no
				NOR = { 
					is_building_type = building_urban_center
					is_building_type = building_trade_center
					is_building_group = bg_monuments_hidden
					is_building_group = bg_owner_buildings
				}
				is_under_construction = no
				is_subsidized = no
				is_subsistence_building = no
				earnings < 4.5
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
				market_capital = {
					owner = ROOT
				}
			}
			save_scope_as = tutorial_state_target
		}
		else = {
			capital = {
				save_scope_as = tutorial_state_target
			}
		}
		
		if = {
			limit = {
				scope:tutorial_state_target = {
					any_scope_building = {
						NOT = { state_infrastructure_balance < 0 }
					}
					any_scope_building = {
						is_government_funded = no
						NOR = { 
							is_building_type = building_urban_center
							is_building_type = building_trade_center
							is_building_group = bg_monuments_hidden 
							is_building_group = bg_owner_buildings
						}
						is_under_construction = no
						is_subsidized = no
						is_subsistence_building = no
						earnings < 4.5
					}
				}
			}
			
			scope:tutorial_state_target = {
				random_scope_building = {
					limit = {
						is_government_funded = no
						NOR = { 
							is_building_type = building_urban_center
							is_building_type = building_trade_center
							is_building_group = bg_monuments_hidden
							is_building_group = bg_owner_buildings
						}
						is_under_construction = no
						is_subsidized = no
						is_subsistence_building = no
						earnings < 4.5
					}
					
					save_scope_as = tutorial_building_target 
				}				
			}				
		}				
		else_if = {
			limit = {
				any_scope_building = {
					is_government_funded = no
					NOR = { 
						is_building_type = building_urban_center
						is_building_type = building_trade_center
						is_building_group = bg_monuments_hidden
						is_building_group = bg_owner_buildings
					}
					is_under_construction = no
					is_subsidized = no
					is_subsistence_building = no
					earnings < 4.5
				}
			}
			
			random_scope_building = {
				limit = {
					is_government_funded = no
					NOR = { 
						is_building_type = building_urban_center
						is_building_type = building_trade_center
						is_building_group = bg_monuments_hidden
						is_building_group = bg_owner_buildings
					}
					is_under_construction = no
					is_subsidized = no
					is_subsistence_building = no
					earnings < 4.5
				}
				
				save_scope_as = tutorial_building_target 
			}				
		}
		
		add_journal_entry = {
			type = je_tutorial_fix_unproductive_building
			objective_subgoal = sg_fix_unproductive_building
			target = scope:tutorial_building_target
		}	
	}
}

# Bolster an Interest Group
sg_promote_ig = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_establish_trade_route
	}

	on_start = {
		add_journal_entry = {
			type = je_tutorial_promote_ig
			objective_subgoal = sg_promote_ig
		}	
	}
}

# Grow GDP
sg_grow_gdp = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_fix_unproductive_building
		sg_expand_productive_building
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_grow_gdp
			objective_subgoal = sg_grow_gdp
		}	
	}
}

# Improve Market Access by Decree
sg_increase_market_access_by_decree = {
	category = sgcat_tutorial

	unlocking_subgoals_any = {
		sg_expand_productive_building
	}

	trigger = {
		any_scope_state = {
			state_infrastructure_balance < 0
		}
	}

	on_start = {
		random_scope_state = {
			limit = {
				state_infrastructure_balance < 0
			}
			save_scope_as = tutorial_improve_market_state
		}

		add_journal_entry = {
			type = je_tutorial_increase_market_access_by_decree
			objective_subgoal = sg_increase_market_access_by_decree
			target = scope:tutorial_improve_market_state
		}
	}
}

# Improve Market Access by railways
sg_improve_market_access_with_railways = {
	category = sgcat_tutorial

	unlocking_subgoals_any = {
		sg_increase_market_access_by_decree
	}

	trigger = {
		any_scope_state = {
			state_infrastructure_balance < 0
		}
		has_technology_researched = railways
	}

	on_start = {
		random_scope_state = {
			limit = {
				state_infrastructure_balance < 0
			}
			save_scope_as = tutorial_improve_market_access_with_railways
		}

		add_journal_entry = {
			type = je_tutorial_improve_market_access_with_railways
			objective_subgoal = sg_improve_market_access_with_railways
			target = scope:tutorial_improve_market_access_with_railways
		}
	}
}

# Increase Immigration
sg_increase_immigration = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_increase_market_access_by_decree
	}

	trigger = {
		any_scope_state = {
			any_scope_building = {
				has_failed_hires = yes
			}
			available_jobs > 10000
		}
	}
	
	on_start = {
		random_scope_state = {
			limit = {
				any_scope_building = {
					has_failed_hires = yes
				}
				available_jobs > 10000
			}
			save_scope_as = tutorial_increase_immigration
		}

		add_journal_entry = {
			type = je_tutorial_increase_immigration
			objective_subgoal = sg_increase_immigration
			target = scope:tutorial_increase_immigration
		}
	}
}

# Establish Trade Route
sg_establish_trade_route = {
	category = sgcat_tutorial

	unlocking_subgoals_any = {
		sg_expand_productive_building
	}
	
	trigger = {
		market = {
			custom_tooltip = {
				text = suppress_localization_errors
				any_market_goods = {
					is_tradeable = yes
					market_goods_has_goods_shortage = yes
					root = {
						can_establish_any_import_route = prev.goods
					}
				}
			}
		}
	}
	
	on_start = {
		market = {
			ordered_market_goods = {
				limit = {
					is_tradeable = yes
					market_goods_has_goods_shortage = yes
					root = {
						can_establish_any_import_route = prev.goods
					}
				}
				order_by = { # reverse order
					value = 100
					subtract = num_import_trade_routes
				}
				save_scope_as = tutorial_establish_trade_route_goods
			}
		}

		add_journal_entry = {
			type = je_tutorial_establish_trade_route
			objective_subgoal = sg_establish_trade_route
			target = scope:tutorial_establish_trade_route_goods
		}
	}
}

# Improve Supply Network
sg_improve_supply_network = {
	category = sgcat_tutorial

	unlocking_subgoals_any = {
		sg_establish_trade_route
	}

	trigger = {
		any_scope_state = {
			is_coastal = yes
		}
		supply_network_strength < 1
	}

	on_start = {
		add_journal_entry = {
			type = je_tutorial_improve_supply_network
			objective_subgoal = sg_improve_supply_network
		}
	}
}

# Improve Access to Consumer Goods
sg_improve_consumer_goods_access = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_establish_trade_route
	}

	trigger = {
 		any_scope_state = {	
			OR = {
				sg:grain = { 
					state_goods_pricier > 0.25 
				}
				sg:fish = { 
					state_goods_pricier > 0.25 
				}
				sg:fabric = { 
					state_goods_pricier > 0.25 
				}
				sg:meat = { 
					state_goods_pricier > 0.25 
				}
				sg:clothes = { 
					state_goods_pricier > 0.25 
				}
				sg:furniture = { 
					state_goods_pricier > 0.25 
				}
				sg:groceries = { 
					state_goods_pricier > 0.25 
				}
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_scope_state = {
					sg:grain = { 
						state_goods_pricier > 0.25 
					}
				}
			}
			random_scope_state = {
				limit = {
					sg:grain = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:grain = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:fish = { 
						state_goods_pricier > 0.25
					}
				}		
			}
			random_scope_state = {
				limit = {
					sg:fish = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:fish = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:fabric = { 
						state_goods_pricier > 0.25
					}
				}	
			}
			random_scope_state = {
				limit = {
					sg:fabric = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:fabric = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:meat = { 
						state_goods_pricier > 0.25
					}
				}		
			}
			random_scope_state = {
				limit = {
					sg:meat = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:meat = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:clothes = { 
						state_goods_pricier > 0.25
					}
				}	
			}
			random_scope_state = {
				limit = {
					sg:clothes = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:clothes = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:furniture = { 
						state_goods_pricier > 0.25
					}
				}		
			}
			random_scope_state = {
				limit = {
					sg:furniture = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:furniture = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:groceries = { 
						state_goods_pricier > 0.25
					}
				}	
			}
			random_scope_state = {
				limit = {
					sg:groceries = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:groceries = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		add_journal_entry = {
			type = je_tutorial_improve_consumer_goods_access
			objective_subgoal = sg_improve_consumer_goods_access
			target = scope:tut_consumer_good_expensive
		}
	}
}

# Make Interest Group Happy
sg_make_interest_group_happy = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_promote_ig
	}

	trigger = {
		any_interest_group = {
			ig_approval < 2 
			is_marginal = no
		}
	}
	
	on_start = {
		random_interest_group = {
			limit = {
				ig_approval < 2
				is_marginal = no
			}
			save_scope_as = tut_unhappy_ig
		}

		add_journal_entry = {
			type = je_tutorial_make_interest_group_happy
			objective_subgoal = sg_make_interest_group_happy
			target = scope:tut_unhappy_ig
		}
	}
}

sg_enact_institution_law = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_promote_ig
	}

	trigger = {
		or = {
			and = {
				has_law = law_type:law_no_home_affairs
			}
			and = {
				has_law = law_type:law_no_health_system
			}
			and = {
				has_law = law_type:law_no_police
			}
			and = {
				has_law = law_type:law_no_social_security
			}
			and = {
			    NOT = { has_law = law_type:law_serfdom }
			    has_law = law_type:law_no_schools
			}
			and = {
				has_law = law_type:law_no_colonial_affairs
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
			    NOT = { has_law = law_type:law_serfdom }
			    has_law = law_type:law_no_schools
			}
			law_type:law_no_schools = {
				save_scope_as = tut_institution_lawtype
			}
		}

		else_if = {
			limit = {
				has_law = law_type:law_no_police
			}
			law_type:law_no_police = {
				save_scope_as = tut_institution_lawtype
			}
		}

		else_if = {
			limit = {
				has_law = law_type:law_no_health_system
			}
			law_type:law_no_health_system = {
				save_scope_as = tut_institution_lawtype
			}
		}

		else_if = {
			limit = {
				has_law = law_type:law_no_home_affairs
			}
			law_type:law_no_home_affairs = {
				save_scope_as = tut_institution_lawtype
			}
		}

		else_if = {
			limit = {
				has_law = law_type:law_no_social_security
			}
			law_type:law_no_social_security = {
				save_scope_as = tut_institution_lawtype
			}
		}

		else_if = {
			limit = {
				has_law = law_type:law_no_colonial_affairs
			}
			law_type:law_no_colonial_affairs = {
				save_scope_as = tut_institution_lawtype
			}
		}

		add_journal_entry = {
			type = je_tutorial_enact_institution_law
			objective_subgoal = sg_enact_institution_law
			target = scope:tut_institution_lawtype
		}
	}
}

# Reform Government
sg_reform_government = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_promote_ig
	}

	trigger = {
		government_legitimacy <= 40
	}
	
	on_start = {		
		add_journal_entry = {
			type = je_tutorial_reform_government
			objective_subgoal = sg_reform_government
		}
	}
}

# Increase Relations
sg_increase_relations = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_enact_institution_law
		sg_reform_government
	}

	trigger = {
		OR = {
			any_country = {
				capital.region = {
					any_scope_interest_marker = {
						owner = root
					}
				}
				NOT = { this = ROOT }
				country_rank >= rank_value:major_power
				relations:root < relations_threshold:amicable
			}
			any_country = {
				has_attitude = {
					who = ROOT
					attitude >= cautious
				}
				country_rank >= rank_value:major_power
				relations:root < relations_threshold:amicable
			}
			any_country = {
				country_rank >= rank_value:major_power
				relations:root < relations_threshold:amicable
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_country = {
					capital.region = {
						any_scope_interest_marker = {
							owner = root
						}
					}
					NOT = { this = ROOT }
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
			}
			random_country = {
				limit = {
					capital.region = {
						any_scope_interest_marker = {
							owner = root
						}
					}
					NOT = { this = ROOT }
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
				save_scope_as = tut_increase_relations
			}
		}

		else_if = {
			limit = {
				any_country = {
					has_attitude = { 
						who = ROOT
						attitude >= cautious
					}
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
			}
			random_country = {
				limit = {
					has_attitude = { 
						who = ROOT
						attitude >= cautious
					}
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
				save_scope_as = tut_increase_relations
			}
		}

		else_if = {
			limit = {
				any_country = {
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
			}
			random_country = {
				limit = {
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
				save_scope_as = tut_increase_relations
			}
		}
		
		add_journal_entry = {
			type = je_tutorial_increase_relations
			objective_subgoal = sg_increase_relations
			target = scope:tut_increase_relations
		}
	}
}

# Improve Rank
sg_improve_rank = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_make_peace
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_improve_rank
			objective_subgoal = sg_improve_rank
		}
	}
}

# Prevent a Revolution
sg_prevent_revolution = { #currently code bug displays trigger wrong
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_make_interest_group_happy
	}

	trigger = {
		any_civil_war = {
			civil_war_progress >= 0.15
			is_civil_war_type = revolution
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_prevent_revolution
			objective_subgoal = sg_prevent_revolution
		}
	}
}

# Earn Obligation
sg_earn_obligation = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_increase_relations
	}

	trigger = {
		NOT = {
			any_country = { 
				owes_obligation_to = root
			}
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_earn_obligation
			objective_subgoal = sg_earn_obligation
			target = scope:tut_earn_obligation
		}
	}
}

# Expand Military
sg_expand_military = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_create_formation
	}

	trigger = {	
		any_military_formation = {
			is_army = yes
			owner = ROOT
		}
	}
	
	on_start = {
		random_military_formation = {
			limit = {
				is_army = yes
				owner = ROOT
			}
			save_scope_as = tut_expand_army
		}

		add_journal_entry = {
			type = je_tutorial_expand_military
			objective_subgoal = sg_expand_military
			target = scope:tut_expand_army
		}
	}
}

# Increase Command Limit
sg_recruit_promote_commander = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_expand_military
	}

	trigger = {	
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_recruit_promote_commander
			objective_subgoal = sg_recruit_promote_commander
			target = scope:tut_command_commander
		}
	}
}

# Mobilize Army
sg_mobilize_army = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_start_diplomatic_play
	}

	trigger = {
		any_military_formation = {
			is_army = yes
			is_mobilized = no
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_mobilize_army
			objective_subgoal = sg_mobilize_army
		}
	}
}

# Send General to Front
sg_send_general_to_front = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_mobilize_army
	}

	trigger = {
		any_military_formation = {
			is_army = yes
			is_mobilized = yes
			is_on_front = no
		}
	}
	
	on_start = {
		random_military_formation = {
			limit = {
				is_army = yes
				is_mobilized = yes
				is_on_front = no
			}
			save_scope_as = tut_send_general_to_front
		}

		add_journal_entry = {
			type = je_tutorial_send_general_to_front
			objective_subgoal = sg_send_general_to_front
			target = scope:tut_send_general_to_front
		}
	}
}

# Convoy Raiding
sg_convoy_raiding = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_recruit_promote_commander
	}

	trigger = {
		any_scope_character = {
			has_role = general
			NOT = { has_commander_order = defend }
		}
	}
	
	on_start = {
		random_scope_character = { 
			limit = {
				has_role = general
				NOT = { has_commander_order = defend }
			}
			save_scope_as = tut_convoy_raiding
		}
		
		add_journal_entry = {
			type = je_tutorial_convoy_raiding
			objective_subgoal = sg_convoy_raiding
			target = scope:tut_convoy_raiding
		}
	}
}

# Recover From Default
sg_recover_from_default = {
	category = sgcat_tutorial
	
	is_repeatable = yes
	
	unlocking_subgoals_any = {
	}

	trigger = {
		in_default = yes
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_recover_from_default
			objective_subgoal = sg_recover_from_default
		}
	}
}

# Start Diplomatic Play
sg_start_diplomatic_play = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_recruit_promote_commander
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_start_diplomatic_play
			objective_subgoal = sg_start_diplomatic_play
		}
	}
}

# Is Target in Diplomatic Play
sg_is_play_target = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_declare_an_interest
	}

	trigger = {
		is_diplomatic_play_target = yes
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_is_play_target
			objective_subgoal = sg_is_play_target
		}
	}
}

# Fix Capacity Deficit
sg_capacity_deficit = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
	}

	trigger = {
		OR = {
			bureaucracy < -10
			authority < -10
			influence < -10
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_capacity_deficit
			objective_subgoal = sg_capacity_deficit
		}
	}
}

sg_invest_into_an_institution = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_enact_institution_law
	}
	
	trigger = {
		OR = {
			institution:institution_schools = {
				investment < investment_max
			}
			institution:institution_health_system = {
				investment < investment_max
			}
			institution:institution_police = {
				investment < investment_max
			}
			institution:institution_social_security = {
				investment < investment_max
			}
			institution:institution_workplace_safety = {
				investment < investment_max
			}
			institution:institution_home_affairs = {
				investment < investment_max
			}
			institution:institution_colonial_affairs = {
				investment < investment_max
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
				institution:institution_schools = {
					investment < investment_max
				}
			}
			institution:institution_schools = {
				save_scope_as = tut_institution
			}
		}

		else_if = {
			limit = {
				institution:institution_health_system = {
					investment < investment_max
				}
			}
			institution:institution_health_system = {
				save_scope_as = tut_institution
			}
		}

		else_if = {
			limit = {
				institution:institution_police = {
					investment < investment_max
				}
			}
			institution:institution_police = {
				save_scope_as = tut_institution
			}
		}

		else_if = {
			limit = {
				institution:institution_social_security = {
					investment < investment_max
				}
			}
			institution:institution_social_security = {
				save_scope_as = tut_institution
			}
		}

		else_if = {
			limit = {
				institution:institution_workplace_safety = {
					investment < investment_max
				}
			}
			institution:institution_workplace_safety = {
				save_scope_as = tut_institution
			}
		}

		else_if = {
			limit = {
				institution:institution_home_affairs = {
					investment < investment_max
				}
			}
			institution:institution_home_affairs = {
				save_scope_as = tut_institution
			}
		}
		
		else_if = {
			limit = {
				institution:institution_colonial_affairs = {
					investment < investment_max
				}
			}
			institution:institution_colonial_affairs = {
				save_scope_as = tut_institution
			}
		}
		
		add_journal_entry = {
			type = je_tutorial_invest_into_an_institution
			objective_subgoal = sg_invest_into_an_institution
			target = scope:tut_institution
		}
	}
}

# Incorporate State
sg_incorporate_state = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_invest_into_an_institution
	}

	trigger = {
		any_scope_state = {
			is_incorporated = no
			is_under_colonization = no
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_incorporate_state
			objective_subgoal = sg_incorporate_state
		}
	}
}

# Colonize Region
sg_colonize_state = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_declare_an_interest
	}

	on_start = {
		add_journal_entry = {
			type = je_tutorial_colonize_state
			objective_subgoal = sg_colonize_state
		}
	}
}

# Make Peace
sg_make_peace = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_send_general_to_front
	}

	trigger = {
		is_at_war = yes
	}

	on_start = {
		add_journal_entry = {
			type = je_tutorial_make_peace
			objective_subgoal = sg_make_peace
		}
	}
}

# Research Technology
sg_research_technology = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
	}

	trigger = {
		NOT = { is_researching_technology = any }
		has_researchable_technology = yes
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_research_technology
			objective_subgoal = sg_research_technology
		}
	}
}

# Declare an Interest
sg_declare_an_interest = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_increase_relations
	}

	on_start = {
		if = {
			limit = {
				any_rival_country = {
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
			}
			random_rival_country = {
				limit = {
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
				save_scope_as = tut_declare_interest_country
			}
		}

		else_if = {
			limit = {
				any_country = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
			}
			random_country = {
				limit = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
				save_scope_as = tut_declare_interest_country
			}
		}

		else_if = {
			limit = {
				any_country = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					relations:root < relations_threshold:amicable
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
			}
			random_country = {
				limit = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					country_rank >= rank_value:major_power
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
				save_scope_as = tut_declare_interest_country
			}
		}

		else_if = {
			limit = {
				any_country = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
			}
			random_country = {
				limit = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
				save_scope_as = tut_declare_interest_country
			}
		}

		add_journal_entry = {
			type = je_tutorial_declare_an_interest
			objective_subgoal = sg_declare_an_interest
			target = scope:tut_declare_interest_country
		}
	}
}

# Create Formation
sg_create_formation = {
	category = sgcat_tutorial
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_declare_an_interest
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_create_formation
			objective_subgoal = sg_create_formation
		}
		set_variable = {
				name = formation_tutorial_ongoing
		}
	}
}

# Subject Liberty Desire
sg_subject_liberty = {
	category = sgcat_tutorial
	is_repeatable = no

	trigger = {
		any_country = {
			is_subject_of = ROOT
			liberty_desire >= 70
			liberty_desire_weekly_progress > 0
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_country = {
					is_subject_of = ROOT
					liberty_desire >= 70
					liberty_desire_weekly_progress > 0
				}
			}
			random_country = {
				limit = {
					is_subject_of = ROOT
					liberty_desire >= 70
					liberty_desire_weekly_progress > 0
				}
				save_scope_as = tut_subject_liberty_desire
			}
		}

		add_journal_entry = {
			type = je_subject_liberty
			objective_subgoal = sg_subject_liberty
			target = scope:tut_subject_liberty_desire
		}
	}
}

# Foreign Investment
sg_foreign_investment = {
	category = sgcat_tutorial
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_subject_liberty
	}

	trigger = {
		any_country = {
			OR = {
				is_subject_of = ROOT
				has_diplomatic_pact = {
					who = root
					type = foreign_investment_agreement
				}
				root = {
					has_diplomatic_pact = {
						who = prev
						type = foreign_investment_rights
						is_initiator = yes
					}
				}
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_country = {
					OR = {
						is_subject_of = ROOT
						has_diplomatic_pact = {
							who = root
							type = foreign_investment_agreement
						}
						root = {
							has_diplomatic_pact = {
								who = prev
								type = foreign_investment_rights
								is_initiator = yes
							}
						}
					}
				}
			}
			random_country = {
				limit = {
					OR = {
						is_subject_of = ROOT
						has_diplomatic_pact = {
							who = root
							type = foreign_investment_agreement
						}
						root = {
							has_diplomatic_pact = {
								who = prev
								type = foreign_investment_rights
								is_initiator = yes
							}
						}
					}
				}
				save_scope_as = tut_foreign_investment
			}
		}

		add_journal_entry = {
			type = je_tutorial_foreign_investment
			objective_subgoal = sg_foreign_investment
			target = scope:tut_foreign_investment
		}	
	}
}

# Establish Company
sg_establish_company = {
	category = sgcat_tutorial
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_expand_productive_building
	}

	trigger = {
		can_establish_company = YES
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_establish_company
			objective_subgoal = sg_establish_company
		}	
	}
}

# Form Power Bloc
sg_form_power_bloc = {
	category = sgcat_tutorial
	is_repeatable = no

	unlocking_subgoals_all = {
	}

	trigger = {
		OR = {
			country_rank = rank_value:great_power
			AND = {
				country_rank = rank_value:major_power
				has_variable = tutorial_form_pb_end
			}
		}
		is_in_power_bloc = no
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_form_power_bloc
			objective_subgoal = sg_form_power_bloc
		}	
	}
}

# Lobbies
sg_lobbies = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_increase_relations
	}

	trigger = {
		any_political_lobby = {
			appeasement <= 7
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_political_lobby = {
					OR = {
						is_political_lobby_type = lobby_pro_country
						is_political_lobby_type = lobby_anti_country
					}
				}
			}
			random_political_lobby = {
				limit = {
					OR = {
						is_political_lobby_type = lobby_pro_country
						is_political_lobby_type = lobby_anti_country
					}
				}
				save_scope_as = tut_political_lobby
			}
		}

		add_journal_entry = {
			type = je_tutorial_lobbies
			objective_subgoal = sg_lobbies
			target = scope:tut_political_lobby
		}
	}
}
﻿sg_expand_goods_production = {
	category = sgcat_economic_dominance

	trigger = {
		any_scope_building = {
			is_under_construction = no
			can_queue_building_levels = 1
			is_economic_objective_building = yes
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_scope_building = {
					can_queue_building_levels = 1
					is_building_type = building_iron_mine
				}
			}
			random_scope_building = {
				limit = { 
					can_queue_building_levels = 1
					is_building_type = building_iron_mine
				}
				save_scope_as = economic_building_target
			}				
		}
		
		else_if = {
			limit = {
				any_scope_building = {
					can_queue_building_levels = 1
					is_building_type = building_coal_mine
				}
			}
			random_scope_building = {
				limit = { 
					can_queue_building_levels = 1
					is_building_type = building_coal_mine
				}
				save_scope_as = economic_building_target
			}
		}

		add_journal_entry = {
			type = je_objective_expand_goods_production
			objective_subgoal = sg_expand_goods_production
			target = scope:economic_building_target
		}
	}
}

sg_refining_goods = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_expand_goods_production
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_refining_goods
			objective_subgoal = sg_refining_goods
		}	
	}
}

sg_specialized_goods = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_refining_goods
	}

	trigger = { 
	}
	
	on_start = {
		add_journal_entry = {
			type = je_specialized_goods
			objective_subgoal = sg_specialized_goods
		}
	}
}

sg_expanding_the_market = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_specialized_goods
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_expanding_the_market
			objective_subgoal = sg_expanding_the_market
		}
	}
}

sg_strong_market = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_expanding_the_market
		sg_lower_production_costs
	}

	unlocking_subgoals_any = {
		sg_raise_exports_value
		sg_utilizing_our_strength
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_strong_market
			objective_subgoal = sg_strong_market
		}
	}
}

sg_specialized_inputs = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_specialized_goods
	}

	trigger = {
		NOT = { has_variable = player_obj_export_focus }
	}
	
	on_start = {
		add_journal_entry = {
			type = je_specialized_inputs
			objective_subgoal = sg_specialized_inputs
		}
	}
}

sg_utilizing_our_strength = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_specialized_goods
	}

	trigger = {
		has_variable = player_obj_home_focus
	}
	
	on_start = {
		add_journal_entry = {
			type = je_utilizing_our_strength
			objective_subgoal = sg_utilizing_our_strength
		}	
	}
}

sg_exporting_profits = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_specialized_goods
	}

	trigger = {
		NOT = { has_variable = player_obj_home_focus }
	}
	
	on_start = {
		add_journal_entry = {
			type = je_exporting_profits
			objective_subgoal = sg_exporting_profits
		}	
	}
}

sg_raise_exports_value = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_exporting_profits
	}

	trigger = {
		has_variable = player_obj_export_focus
	}
	
	on_start = {
		add_journal_entry = {
			type = je_raise_exports_value
			objective_subgoal = sg_raise_exports_value
		}	
	}
}

sg_lower_production_costs = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_refining_goods
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_lower_production_costs
			objective_subgoal = sg_lower_production_costs
		}	
	}
}
﻿sg_encourage_liberal_ideas = {
	category = sgcat_economic_dominance
	is_repeatable = no

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_objective_encourage_liberal_ideas
			objective_subgoal = sg_encourage_liberal_ideas
		}
	}
}

sg_liberate_the_slaves = {
	category = sgcat_egalitarian_society
	is_repeatable = no

	trigger = { 
	}
	
	on_start = {
		add_journal_entry = {
			type = je_liberate_the_slaves
			objective_subgoal = sg_liberate_the_slaves
			target = scope:slavery_objective_target
		}
	}
}

sg_pass_laws = {
	category = sgcat_egalitarian_society
	is_repeatable = no

	unlocking_subgoals_any = {
		sg_encourage_liberal_ideas
		sg_liberate_the_slaves
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_pass_laws
			objective_subgoal = sg_pass_laws
		}	
	}
}

sg_public_services = {
	category = sgcat_egalitarian_society
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_pass_laws
	}

	trigger = {
		NOT = { has_law = law_type:law_state_religion }
		has_law = law_type:law_multicultural
		has_law = law_type:law_public_schools
		has_law = law_type:law_protected_speech
	}
	
	on_start = {
		add_journal_entry = {
			type = je_public_services
			objective_subgoal = sg_public_services
		}	
	}
}

sg_women_and_children = {
	category = sgcat_egalitarian_society
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_public_services
	}

	trigger = {
		NOT = { has_law = law_type:law_state_religion }
		has_law = law_type:law_multicultural
		has_law = law_type:law_public_schools
		has_law = law_type:law_protected_speech
	}
	
	on_start = {
		add_journal_entry = {
			type = je_women_and_children
			objective_subgoal = sg_women_and_children
		}
	}
}

sg_egalitarian_society = {
	category = sgcat_egalitarian_society
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_women_and_children
		sg_liberate_the_slaves 
	}

	trigger = {
		NOT = { has_law = law_type:law_state_religion }
		has_law = law_type:law_multicultural
		has_law = law_type:law_public_schools
		has_law = law_type:law_protected_speech
		has_law = law_type:law_compulsory_primary_school
		has_law = law_type:law_womens_suffrage
	}
	
	on_start = {
		add_journal_entry = {
			type = je_egalitarian_society
			objective_subgoal = sg_egalitarian_society
		}
	}
}
﻿sg_colonization_laws = {
	category = sgcat_hegemon
	is_repeatable = no

	trigger = {
	}
	
	on_start = {
		if = {
			limit = {
				ROOT = {
					country_rank = rank_value:great_power
				}
			}
			set_variable = objective_country_great
		}

		else_if = {
			limit = {
				ROOT = {
					country_rank = rank_value:major_power
				}
			}
			set_variable = objective_country_major
		}
		
		else_if = {
			limit = {
				ROOT = {
					country_rank <= rank_value:minor_power
				}
			}
			set_variable = objective_country_minor
		}

		else_if = {
			limit = {
				ROOT = {
					country_rank <= rank_value:unrecognized_major_power
				}
			}
			set_variable = objective_country_unrecognized
		}

		add_journal_entry = {
			type = je_colonization_laws
			objective_subgoal = sg_colonization_laws
		}
	}
}

sg_african_colonies = {
	category = sgcat_hegemon
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_colonization_laws
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_african_colonies
			objective_subgoal = sg_african_colonies
		}
	}
}

sg_expand_navy_and_army = {
	category = sgcat_hegemon
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_african_colonies
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_expand_navy_and_army
			objective_subgoal = sg_expand_navy_and_army
		}
	}
}

sg_form_alliance = {
	category = sgcat_hegemon
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_colonization_laws
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_form_alliance
			objective_subgoal = sg_form_alliance
		}
	}
}

sg_take_subject = {
	category = sgcat_hegemon
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_colonization_laws
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_take_subject
			objective_subgoal = sg_take_subject
		}
	}
}

sg_increase_technology = {
	category = sgcat_hegemon
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_expand_navy_and_army
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_increase_technology
			objective_subgoal = sg_increase_technology
		}
	}
}

sg_greatest_power = {
	category = sgcat_hegemon
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_colonization_laws
	}

	trigger = {
		has_variable = objective_country_great
	}
	
	on_start = {
		add_journal_entry = {
			type = je_greatest_power
			objective_subgoal = sg_greatest_power
		}
	}
}

sg_greater_power = {
	category = sgcat_hegemon
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_colonization_laws
	}

	trigger = {
		has_variable = objective_country_major
	}
	
	on_start = {
		add_journal_entry = {
			type = je_greater_power
			objective_subgoal = sg_greater_power
		}
	}
}

sg_great_power = {
	category = sgcat_hegemon
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_colonization_laws
	}

	trigger = {
		has_variable = objective_country_minor
	}
	
	on_start = {
		add_journal_entry = {
			type = je_great_power
			objective_subgoal = sg_great_power
		}
	}
}

sg_unrecognized_power = {
	category = sgcat_hegemon
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_colonization_laws
	}

	trigger = {
		has_variable = objective_country_unrecognized
	}
	
	on_start = {
		add_journal_entry = {
			type = je_unrecognized_power
			objective_subgoal = sg_unrecognized_power
		}
	}
}

sg_the_hegemon = {
	category = sgcat_hegemon
	is_repeatable = no

	unlocking_subgoals_any = {
		sg_great_power
		sg_greater_power
		sg_greatest_power
		sg_unrecognized_power
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_the_hegemon
			objective_subgoal = sg_the_hegemon
		}
	}
}

﻿sg_great_game = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		OR = {
			c:GBR ?= this
			c:RUS ?= this
			c:PER ?= this
			is_afghan_nation = yes
		}
		NOT = {
			has_global_variable = great_game_failed
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_great_game_control
			objective_subgoal = sg_great_game
		}
	}
}

sg_maintain_afghan_protectorate = {
	category = sgcat_great_game
	is_repeatable = no

	unlocking_subgoals_all = {

	}

	trigger = {
		NOT = {
			has_global_variable = gg_afghanistan_protectorate_done
		}
		has_interest_marker_in_region = region_persia
		OR = {
			c:GBR?= THIS
			c:RUS ?= THIS
		}
		has_journal_entry = je_great_game_control
	}

	on_start = {
		add_journal_entry = {
			type = je_maintain_afghan_protectorate
			objective_subgoal = sg_maintain_afghan_protectorate
		}
	}
}

sg_disrupt_russian_caucasus = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:GBR?= THIS
		exists = c:CIR
		has_journal_entry = je_great_game_control
	}
	
	on_start = {
		add_journal_entry = {
			type = je_disrupt_russian_caucasus
			objective_subgoal = sg_disrupt_russian_caucasus
		}
	}
}

sg_counter_russian_pacific_influence = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:GBR?= THIS
		c:RUS ?= {
			any_scope_state = {
				region = sr:region_manchuria
				OR = {
					any_scope_building = {
						is_building_type = building_port
						level >= 5
					}
					any_scope_building = {
						is_building_type = building_naval_base
						level >= 15
					}
				}
			}
		}
		has_journal_entry = je_great_game_control
	}

	on_start = {
		add_journal_entry = {
			type = je_counter_russian_pacific_influence
			objective_subgoal = sg_counter_russian_pacific_influence
		}
	}
}

sg_consolidate_british_india = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:GBR?= THIS
		c:BIC ?= {
			is_subject_of = c:GBR
		}
		has_journal_entry = je_great_game_control
	}

	on_start = {
		add_journal_entry = {
			type = je_consolidate_british_india
			objective_subgoal = sg_consolidate_british_india
		}
	}
}

sg_repulse_russian_pamirs = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:GBR?= THIS
		c:RUS ?= {
			OR = {
				any_scope_state = {
					state_region = s:STATE_TAJIKISTAN
				}
				any_subject_or_below = {
					any_scope_state = {
						state_region = s:STATE_TAJIKISTAN
					}
				}
			}
		}
		has_journal_entry = je_great_game_control
		NOT = {
			has_variable = dismissed_pamir_expedition
		}
	}

	on_start = {
		add_journal_entry = {
			type = je_pamir_expedition_objective
			objective_subgoal = sg_repulse_russian_pamirs
		}
	}
}

sg_consolidate_afghanistan = {
	category = sgcat_great_game
	is_repeatable = no

	unlocking_subgoals_all = {

	}

	trigger = {
		has_interest_marker_in_region = region_persia
		OR = {
			c:GBR?= THIS
			c:RUS ?= THIS
		}
		has_journal_entry = je_great_game_control
		exists = c:AFG
	}

	on_start = {
		add_journal_entry = {
			type = je_consolidate_afghanistan_objective
			objective_subgoal = sg_consolidate_afghanistan
		}
	}
}

sg_secure_persian_border = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:RUS ?= THIS
		exists = c:CIR
		has_journal_entry = je_great_game_control
	}
	
	on_start = {
		add_journal_entry = {
			type = je_secure_persian_border
			objective_subgoal = sg_secure_persian_border
		}
	}
}

sg_unify_afghanistan = {
	category = sgcat_great_game
	is_repeatable = no

	unlocking_subgoals_all = {

	}

	trigger = {
		is_afghan_nation = yes
		has_journal_entry = je_great_game_control
	}

	on_start = {
		add_journal_entry = {
			type = je_unify_afghanistan_objective
			objective_subgoal = sg_unify_afghanistan
		}
	}
}
sg_pacify_kazakh_steppe = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:RUS ?= THIS
		has_journal_entry = je_pacify_the_steppes
		has_journal_entry = je_great_game_control
	}
	
	on_start = {
		add_journal_entry = {
			type = je_pacify_kazakh_steppes
			objective_subgoal = sg_pacify_kazakh_steppe
		}
	}
}

sg_codify_chinese_border = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:RUS ?= THIS
		has_technology_researched = nationalism
		has_journal_entry = je_great_game_control
	}
	
	on_start = {
		add_journal_entry = {
			type = je_codify_chinese_border
			objective_subgoal = sg_codify_chinese_border
		}
	}
}

sg_consolidate_central_asia = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:RUS ?= THIS
		has_technology_researched = nationalism
		has_journal_entry = je_great_game_control
	}
	
	on_start = {
		add_journal_entry = {
			type = je_consolidate_central_asia
			objective_subgoal = sg_consolidate_central_asia
		}
	}
}

sg_acquire_chinese_concessions = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:RUS ?= THIS
		has_technology_researched = railways
		any_scope_state = {
			OR = {
				state_region = s:STATE_OUTER_MANCHURIA
				state_region = s:STATE_AMUR
			}
			is_incorporated = yes
		}
		has_journal_entry = je_great_game_control
	}
	
	on_start = {
		add_journal_entry = {
			type = je_chinese_concessions
			objective_subgoal = sg_acquire_chinese_concessions
		}
	}
}

sg_acquire_korean_protectorate = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:RUS ?= THIS
        any_neighbouring_state = {
            owner = c:KOR
			is_incorporated = yes
        }
		c:KOR ?= {
			is_country_type = unrecognized
		}
		has_journal_entry = je_great_game_control
	}
	
	on_start = {
		set_global_variable = korean_protectorate_started
		add_journal_entry = {
			type = je_acquire_korean_protectorate
			objective_subgoal = sg_acquire_korean_protectorate
		}
	}
}

sg_expand_eastern_frontier = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:PER ?= this
		has_journal_entry = je_great_game_control
	}

	on_start = {
		add_journal_entry = {
			type = je_eastern_frontier
			objective_subgoal = sg_expand_eastern_frontier
		}
	}
}

sg_secure_influence_over_persia = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		has_interest_marker_in_region = region_persia
		OR = {
			c:GBR?= THIS
			c:RUS ?= THIS
		}
		has_journal_entry = je_great_game_control
	}

	on_start = {
		add_journal_entry = {
			type = je_secure_influence_over_persia
			objective_subgoal = sg_secure_influence_over_persia
		}
	}
}

sg_consolidate_persia = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		c:PER ?= this
		has_journal_entry = je_great_game_control
	}

	on_start = {
		add_journal_entry = {
			type = je_consolidate_persia
			objective_subgoal = sg_consolidate_persia
		}
	}
}

sg_achieve_sovereignty = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		OR = {
			c:PER ?= this
			is_afghan_nation = yes
		}
		is_country_type = unrecognized
		has_journal_entry = je_great_game_control
	}

	on_start = {
		add_journal_entry = {
			type = je_achieve_sovereignty
			objective_subgoal = sg_achieve_sovereignty
		}
	}
}

sg_secure_tibet = {
	category = sgcat_great_game
	is_repeatable = no

	trigger = {
		NOT = { c:TIB ?= THIS }
		exists = c:TIB
		country_rank >= rank_value:great_power
		OR = {
			is_country_type = recognized
			is_country_type = colonial
		}
		has_variable = tibet_has_started
		NOT = { has_global_variable = tibet_expedition_completed }
		has_interest_marker_in_region = region_himalayas
		has_journal_entry = je_great_game_control
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tibet_expedition
			objective_subgoal = sg_secure_tibet
		}
	}
}

﻿﻿sg_expand_basic_building = {
	category = sgcat_tutorial

	trigger = {
		any_scope_building = {
			is_under_construction = no
			is_farm_building = yes
			can_queue_building_levels = 1
		}
	}
	
	on_start = {
		start_tutorial_lesson = { tutorial_lesson = lesson_journal }
		
		if = {
			limit = {
				market_capital = {
					owner = ROOT
				}
			}
			save_scope_as = tutorial_state_target	
		}
		else = {
			capital = {
				save_scope_as = tutorial_state_target
			}
		}

		if = {
			limit = {
				scope:tutorial_state_target = {
					any_scope_building = {
						is_under_construction = no
						is_farm_building = yes
						can_queue_building_levels = 1
					}					
				}
			}
			scope:tutorial_state_target = {
				random_scope_building = {
					limit = {	
						is_under_construction = no
						is_farm_building = yes
						can_queue_building_levels = 1
					}
					save_scope_as = tutorial_building_target

				}			
			}
		}
		else_if = {
			limit = {
				any_scope_state = {
					is_incorporated = yes
					any_scope_building = {
						is_under_construction = no
						is_farm_building = yes
						can_queue_building_levels = 1
					}					
				}				
			}
			
			random_scope_state = {
				limit = { 
					is_incorporated = yes
					any_scope_building = {
						is_under_construction = no
						is_farm_building = yes
						can_queue_building_levels = 1
					}
				}
				
				random_scope_building = {
					limit = {	
						is_under_construction = no
						is_farm_building = yes
						can_queue_building_levels = 1
					}
					save_scope_as = tutorial_building_target
				}						
			}			
		}
		else = {
			random_scope_building = {
				limit = {	
					is_under_construction = no
					is_farm_building = yes
					can_queue_building_levels = 1
				}
				save_scope_as = tutorial_building_target
			}	
		}

		add_journal_entry = {
			type = je_tutorial_expand_basic_building
			objective_subgoal = sg_expand_basic_building
			target = scope:tutorial_building_target
		}			
	}
}

# Fix Budget Deficit
sg_fix_budget_deficit = {
	category = sgcat_tutorial
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_expand_productive_building
	}

	trigger = {
		gold_reserves = 0
		weekly_net_fixed_income <= -1000 # Do not trigger this based on a tiny deficit that will self-correct
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_fix_budget_deficit
			objective_subgoal = sg_fix_budget_deficit
		}	
	}
}

# Change Production Method
sg_change_production_method = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_expand_basic_building
	}

	trigger = {
		any_scope_state = {
			OR = {
				AND = {
					can_activate_production_method = {
						building_type = building_rye_farm	
						production_method = pm_apple_orchards
					}	
				}
				AND = {
					can_activate_production_method = {
						building_type = building_wheat_farm	
						production_method = pm_citrus_orchards
					}
				}
				AND = {	
					can_activate_production_method = {
						building_type = building_rice_farm	
						production_method = pm_fig_orchards_building_rice_farm
					}
				}
				AND = {
					can_activate_production_method = {
						building_type = building_maize_farm	
						production_method = pm_citrus_orchards
					}
				}
				AND = {	
					can_activate_production_method = {
						building_type = building_millet_farm	
						production_method = pm_fig_orchards
					}
				}					
				AND = {
					can_activate_production_method = {
						building_type = building_logging_camp
						production_method = pm_saw_mills
					}
					market = { 
						mg:tools = { market_goods_delta >= 20 } 
					}	
				}
				AND = {
					can_activate_production_method = {
						building_type = building_livestock_ranch
						production_method = pm_butchering_tools
					}
					market = { 
						mg:tools = { market_goods_delta >= 10 } 
					}	
				}					
			}
		}			
	}
	
	on_start = {
		if = {
			limit = {
				market_capital = {
					owner = ROOT
				}
			}
			market_capital = {
				save_scope_as = tutorial_state_target
			}
		}
		else = {
			capital = {
				save_scope_as = tutorial_state_target
			}
		}

		if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_rye_farm	
						production_method = pm_apple_orchards
					}						
				}
			}
			
			scope:tutorial_state_target = {
				b:building_rye_farm = { save_scope_as = tutorial_building_target }
			}					
		}	
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_wheat_farm	
						production_method = pm_citrus_orchards
					}					
				}
			}
			
			scope:tutorial_state_target = {
				b:building_wheat_farm = { save_scope_as = tutorial_building_target }
			}				
		}
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_maize_farm	
						production_method = pm_citrus_orchards
					}						
				}
			}
			
			scope:tutorial_state_target = {
				b:building_maize_farm = { save_scope_as = tutorial_building_target }
			}			
		}	
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_rice_farm	
						production_method = pm_fig_orchards_building_rice_farm
					}					
				}
			}
			
			scope:tutorial_state_target = {
				b:building_rice_farm = { save_scope_as = tutorial_building_target }
			}					
		}
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_millet_farm	
						production_method = pm_fig_orchards
					}					
				}
			}
			
			scope:tutorial_state_target = {
				b:building_millet_farm = { save_scope_as = tutorial_building_target }
			}					
		}			
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_livestock_ranch
						production_method = pm_butchering_tools
					}
					market = { mg:tools = { market_goods_delta >= 10 } }						
				}
			}
			
			scope:tutorial_state_target = {
				b:building_livestock_ranch = { save_scope_as = tutorial_building_target }
			}					
		}	
		else_if = {
			limit = {
				scope:tutorial_state_target = {
					can_activate_production_method = {
						building_type = building_logging_camp
						production_method = pm_saw_mills
					}
					market = { mg:tools = { market_goods_delta >= 20 } }						
				}
			}
			
			scope:tutorial_state_target = {
				b:building_logging_camp = { save_scope_as = tutorial_building_target }
			}					
		}	
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_rye_farm	
						production_method = pm_apple_orchards 
					}					
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_rye_farm	
						production_method = pm_apple_orchards 
					}					
				}
				
				b:building_rye_farm = { save_scope_as = tutorial_building_target }
			}					
		}	
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_wheat_farm	
						production_method = pm_citrus_orchards 
					}					
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_wheat_farm	
						production_method = pm_citrus_orchards 
					}						
				}
				
				b:building_wheat_farm = { save_scope_as = tutorial_building_target }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_maize_farm	
						production_method = pm_citrus_orchards 
					}						
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_maize_farm	
						production_method = pm_citrus_orchards 
					}					
				}
				
				b:building_maize_farm = { save_scope_as = tutorial_building_target }
			}			
		}	
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_rice_farm	
						production_method = pm_fig_orchards_building_rice_farm 
					}					
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_rice_farm	
						production_method = pm_fig_orchards_building_rice_farm 
					}						
				}
				
				b:building_rice_farm = { save_scope_as = tutorial_building_target }
			}					
		}
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_millet_farm	
						production_method = pm_fig_orchards 
					}					
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_millet_farm	
						production_method = pm_fig_orchards 
					}						
				}
				
				b:building_millet_farm = { save_scope_as = tutorial_building_target }
			}					
		}			
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_livestock_ranch
						production_method = pm_butchering_tools
					}
					market = { mg:tools = { market_goods_delta >= 10 } }						
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_livestock_ranch
						production_method = pm_butchering_tools
					}
					market = { mg:tools = { market_goods_delta >= 10 } }						
				}
				
				b:building_livestock_ranch = { save_scope_as = tutorial_building_target }
			}					
		}	
		else_if = {
			limit = {
				any_scope_state = {
					can_activate_production_method = {
						building_type = building_logging_camp
						production_method = pm_saw_mills
					}
					market = { mg:tools = { market_goods_delta >= 20 } }						
				}
			}
			
			random_scope_state = {
				limit = {
					can_activate_production_method = {
						building_type = building_logging_camp
						production_method = pm_saw_mills
					}
					market = { mg:tools = { market_goods_delta >= 20 } }						
				}
				
				b:building_logging_camp = { save_scope_as = tutorial_building_target }
			}					
		}			
		
		add_journal_entry = {
			type = je_tutorial_change_production_method
			objective_subgoal = sg_change_production_method
			target = scope:tutorial_building_target
		}	
	}
}

# Expand Productive Building
sg_expand_productive_building = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_change_production_method
	}
	
	trigger = {
		any_scope_building = {
			can_queue_building_levels = 1
			is_under_construction = no
			is_government_funded = no
			is_subsidized = no
			NOT = { is_building_group = bg_owner_buildings }
			earnings >= 8.0
		}
	}
	
	on_start = {
		if = {
			limit = {
				market_capital = {
					owner = ROOT
				}
			}
			save_scope_as = tutorial_state_target
		}
		else = {
			capital = {
				save_scope_as = tutorial_state_target
			}
		}

		if = {
			limit = {
				scope:tutorial_state_target = {
					any_scope_building = {
						can_queue_building_levels = 1
						is_under_construction = no
						is_government_funded = no
						is_subsidized = no
						NOT = { is_building_group = bg_owner_buildings }
						earnings >= 8.0
					}
				}
			}
			
			scope:tutorial_state_target = {
				random_scope_building = {
					limit = {
						can_queue_building_levels = 1
						is_under_construction = no
						is_government_funded = no
						is_subsidized = no
						NOT = { is_building_group = bg_owner_buildings }
						earnings >= 8.0
					}
					
					save_scope_as = tutorial_building_target 
				}				
			}				
		}				
		else_if = {
			limit = {
				any_scope_building = {
					can_queue_building_levels = 1
					is_under_construction = no
					is_government_funded = no
					is_subsidized = no
					NOT = { is_building_group = bg_owner_buildings }
					earnings >= 8.0
				}
			}
			
			random_scope_building = {
				limit = {
					can_queue_building_levels = 1
					is_under_construction = no
					is_government_funded = no
					is_subsidized = no
					NOT = { is_building_group = bg_owner_buildings }
					earnings >= 8.0
				}
				
				save_scope_as = tutorial_building_target 
			}				
		}		
		
		add_journal_entry = {
			type = je_tutorial_expand_productive_building
			objective_subgoal = sg_expand_productive_building
			target = scope:tutorial_building_target
		}	
	}
}

# Fix Unproductive Building
sg_fix_unproductive_building = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_expand_productive_building
	}

	trigger = {
		any_scope_state = {
			NOT = { state_infrastructure_balance < 0 }
			any_scope_building = {
				is_government_funded = no
				NOR = { 
					is_building_type = building_urban_center
					is_building_type = building_trade_center
					is_building_group = bg_monuments_hidden
					is_building_group = bg_owner_buildings
				}
				is_under_construction = no
				is_subsidized = no
				is_subsistence_building = no
				earnings < 4.5
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
				market_capital = {
					owner = ROOT
				}
			}
			save_scope_as = tutorial_state_target
		}
		else = {
			capital = {
				save_scope_as = tutorial_state_target
			}
		}
		
		if = {
			limit = {
				scope:tutorial_state_target = {
					any_scope_building = {
						NOT = { state_infrastructure_balance < 0 }
					}
					any_scope_building = {
						is_government_funded = no
						NOR = { 
							is_building_type = building_urban_center
							is_building_type = building_trade_center
							is_building_group = bg_monuments_hidden 
							is_building_group = bg_owner_buildings
						}
						is_under_construction = no
						is_subsidized = no
						is_subsistence_building = no
						earnings < 4.5
					}
				}
			}
			
			scope:tutorial_state_target = {
				random_scope_building = {
					limit = {
						is_government_funded = no
						NOR = { 
							is_building_type = building_urban_center
							is_building_type = building_trade_center
							is_building_group = bg_monuments_hidden
							is_building_group = bg_owner_buildings
						}
						is_under_construction = no
						is_subsidized = no
						is_subsistence_building = no
						earnings < 4.5
					}
					
					save_scope_as = tutorial_building_target 
				}				
			}				
		}				
		else_if = {
			limit = {
				any_scope_building = {
					is_government_funded = no
					NOR = { 
						is_building_type = building_urban_center
						is_building_type = building_trade_center
						is_building_group = bg_monuments_hidden
						is_building_group = bg_owner_buildings
					}
					is_under_construction = no
					is_subsidized = no
					is_subsistence_building = no
					earnings < 4.5
				}
			}
			
			random_scope_building = {
				limit = {
					is_government_funded = no
					NOR = { 
						is_building_type = building_urban_center
						is_building_type = building_trade_center
						is_building_group = bg_monuments_hidden
						is_building_group = bg_owner_buildings
					}
					is_under_construction = no
					is_subsidized = no
					is_subsistence_building = no
					earnings < 4.5
				}
				
				save_scope_as = tutorial_building_target 
			}				
		}
		
		add_journal_entry = {
			type = je_tutorial_fix_unproductive_building
			objective_subgoal = sg_fix_unproductive_building
			target = scope:tutorial_building_target
		}	
	}
}

# Bolster an Interest Group
sg_promote_ig = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_establish_trade_route
	}

	on_start = {
		add_journal_entry = {
			type = je_tutorial_promote_ig
			objective_subgoal = sg_promote_ig
		}	
	}
}

# Grow GDP
sg_grow_gdp = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_fix_unproductive_building
		sg_expand_productive_building
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_grow_gdp
			objective_subgoal = sg_grow_gdp
		}	
	}
}

# Improve Market Access by Decree
sg_increase_market_access_by_decree = {
	category = sgcat_tutorial

	unlocking_subgoals_any = {
		sg_expand_productive_building
	}

	trigger = {
		any_scope_state = {
			state_infrastructure_balance < 0
		}
	}

	on_start = {
		random_scope_state = {
			limit = {
				state_infrastructure_balance < 0
			}
			save_scope_as = tutorial_improve_market_state
		}

		add_journal_entry = {
			type = je_tutorial_increase_market_access_by_decree
			objective_subgoal = sg_increase_market_access_by_decree
			target = scope:tutorial_improve_market_state
		}
	}
}

# Improve Market Access by railways
sg_improve_market_access_with_railways = {
	category = sgcat_tutorial

	unlocking_subgoals_any = {
		sg_increase_market_access_by_decree
	}

	trigger = {
		any_scope_state = {
			state_infrastructure_balance < 0
		}
		has_technology_researched = railways
	}

	on_start = {
		random_scope_state = {
			limit = {
				state_infrastructure_balance < 0
			}
			save_scope_as = tutorial_improve_market_access_with_railways
		}

		add_journal_entry = {
			type = je_tutorial_improve_market_access_with_railways
			objective_subgoal = sg_improve_market_access_with_railways
			target = scope:tutorial_improve_market_access_with_railways
		}
	}
}

# Increase Immigration
sg_increase_immigration = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_increase_market_access_by_decree
	}

	trigger = {
		any_scope_state = {
			any_scope_building = {
				has_failed_hires = yes
			}
			available_jobs > 10000
		}
	}
	
	on_start = {
		random_scope_state = {
			limit = {
				any_scope_building = {
					has_failed_hires = yes
				}
				available_jobs > 10000
			}
			save_scope_as = tutorial_increase_immigration
		}

		add_journal_entry = {
			type = je_tutorial_increase_immigration
			objective_subgoal = sg_increase_immigration
			target = scope:tutorial_increase_immigration
		}
	}
}

# Establish Trade Route
sg_establish_trade_route = {
	category = sgcat_tutorial

	unlocking_subgoals_any = {
		sg_expand_productive_building
	}
	
	trigger = {
		market = {
			custom_tooltip = {
				text = suppress_localization_errors
				any_market_goods = {
					is_tradeable = yes
					market_goods_has_goods_shortage = yes
					root = {
						can_establish_any_import_route = prev.goods
					}
				}
			}
		}
	}
	
	on_start = {
		market = {
			ordered_market_goods = {
				limit = {
					is_tradeable = yes
					market_goods_has_goods_shortage = yes
					root = {
						can_establish_any_import_route = prev.goods
					}
				}
				order_by = { # reverse order
					value = 100
					subtract = num_import_trade_routes
				}
				save_scope_as = tutorial_establish_trade_route_goods
			}
		}

		add_journal_entry = {
			type = je_tutorial_establish_trade_route
			objective_subgoal = sg_establish_trade_route
			target = scope:tutorial_establish_trade_route_goods
		}
	}
}

# Improve Supply Network
sg_improve_supply_network = {
	category = sgcat_tutorial

	unlocking_subgoals_any = {
		sg_establish_trade_route
	}

	trigger = {
		any_scope_state = {
			is_coastal = yes
		}
		supply_network_strength < 1
	}

	on_start = {
		add_journal_entry = {
			type = je_tutorial_improve_supply_network
			objective_subgoal = sg_improve_supply_network
		}
	}
}

# Improve Access to Consumer Goods
sg_improve_consumer_goods_access = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_establish_trade_route
	}

	trigger = {
 		any_scope_state = {	
			OR = {
				sg:grain = { 
					state_goods_pricier > 0.25 
				}
				sg:fish = { 
					state_goods_pricier > 0.25 
				}
				sg:fabric = { 
					state_goods_pricier > 0.25 
				}
				sg:meat = { 
					state_goods_pricier > 0.25 
				}
				sg:clothes = { 
					state_goods_pricier > 0.25 
				}
				sg:furniture = { 
					state_goods_pricier > 0.25 
				}
				sg:groceries = { 
					state_goods_pricier > 0.25 
				}
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_scope_state = {
					sg:grain = { 
						state_goods_pricier > 0.25 
					}
				}
			}
			random_scope_state = {
				limit = {
					sg:grain = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:grain = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:fish = { 
						state_goods_pricier > 0.25
					}
				}		
			}
			random_scope_state = {
				limit = {
					sg:fish = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:fish = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:fabric = { 
						state_goods_pricier > 0.25
					}
				}	
			}
			random_scope_state = {
				limit = {
					sg:fabric = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:fabric = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:meat = { 
						state_goods_pricier > 0.25
					}
				}		
			}
			random_scope_state = {
				limit = {
					sg:meat = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:meat = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:clothes = { 
						state_goods_pricier > 0.25
					}
				}	
			}
			random_scope_state = {
				limit = {
					sg:clothes = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:clothes = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:furniture = { 
						state_goods_pricier > 0.25
					}
				}		
			}
			random_scope_state = {
				limit = {
					sg:furniture = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:furniture = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		else_if = {
			limit = {
				any_scope_state = {
					sg:groceries = { 
						state_goods_pricier > 0.25
					}
				}	
			}
			random_scope_state = {
				limit = {
					sg:groceries = { 
						state_goods_pricier > 0.25 
					}
				}
				sg:groceries = { save_scope_as = tut_consumer_good_expensive }
			}				
		}
		add_journal_entry = {
			type = je_tutorial_improve_consumer_goods_access
			objective_subgoal = sg_improve_consumer_goods_access
			target = scope:tut_consumer_good_expensive
		}
	}
}

# Make Interest Group Happy
sg_make_interest_group_happy = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_promote_ig
	}

	trigger = {
		any_interest_group = {
			ig_approval < 2 
			is_marginal = no
		}
	}
	
	on_start = {
		random_interest_group = {
			limit = {
				ig_approval < 2
				is_marginal = no
			}
			save_scope_as = tut_unhappy_ig
		}

		add_journal_entry = {
			type = je_tutorial_make_interest_group_happy
			objective_subgoal = sg_make_interest_group_happy
			target = scope:tut_unhappy_ig
		}
	}
}

sg_enact_institution_law = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_promote_ig
	}

	trigger = {
		or = {
			and = {
				has_law = law_type:law_no_home_affairs
			}
			and = {
				has_law = law_type:law_no_health_system
			}
			and = {
				has_law = law_type:law_no_police
			}
			and = {
				has_law = law_type:law_no_social_security
			}
			and = {
			    NOT = { has_law = law_type:law_serfdom }
			    has_law = law_type:law_no_schools
			}
			and = {
				has_law = law_type:law_no_colonial_affairs
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
			    NOT = { has_law = law_type:law_serfdom }
			    has_law = law_type:law_no_schools
			}
			law_type:law_no_schools = {
				save_scope_as = tut_institution_lawtype
			}
		}

		else_if = {
			limit = {
				has_law = law_type:law_no_police
			}
			law_type:law_no_police = {
				save_scope_as = tut_institution_lawtype
			}
		}

		else_if = {
			limit = {
				has_law = law_type:law_no_health_system
			}
			law_type:law_no_health_system = {
				save_scope_as = tut_institution_lawtype
			}
		}

		else_if = {
			limit = {
				has_law = law_type:law_no_home_affairs
			}
			law_type:law_no_home_affairs = {
				save_scope_as = tut_institution_lawtype
			}
		}

		else_if = {
			limit = {
				has_law = law_type:law_no_social_security
			}
			law_type:law_no_social_security = {
				save_scope_as = tut_institution_lawtype
			}
		}

		else_if = {
			limit = {
				has_law = law_type:law_no_colonial_affairs
			}
			law_type:law_no_colonial_affairs = {
				save_scope_as = tut_institution_lawtype
			}
		}

		add_journal_entry = {
			type = je_tutorial_enact_institution_law
			objective_subgoal = sg_enact_institution_law
			target = scope:tut_institution_lawtype
		}
	}
}

# Reform Government
sg_reform_government = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_promote_ig
	}

	trigger = {
		government_legitimacy <= 40
	}
	
	on_start = {		
		add_journal_entry = {
			type = je_tutorial_reform_government
			objective_subgoal = sg_reform_government
		}
	}
}

# Increase Relations
sg_increase_relations = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_enact_institution_law
		sg_reform_government
	}

	trigger = {
		OR = {
			any_country = {
				capital.region = {
					any_scope_interest_marker = {
						owner = root
					}
				}
				NOT = { this = ROOT }
				country_rank >= rank_value:major_power
				relations:root < relations_threshold:amicable
			}
			any_country = {
				has_attitude = {
					who = ROOT
					attitude >= cautious
				}
				country_rank >= rank_value:major_power
				relations:root < relations_threshold:amicable
			}
			any_country = {
				country_rank >= rank_value:major_power
				relations:root < relations_threshold:amicable
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_country = {
					capital.region = {
						any_scope_interest_marker = {
							owner = root
						}
					}
					NOT = { this = ROOT }
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
			}
			random_country = {
				limit = {
					capital.region = {
						any_scope_interest_marker = {
							owner = root
						}
					}
					NOT = { this = ROOT }
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
				save_scope_as = tut_increase_relations
			}
		}

		else_if = {
			limit = {
				any_country = {
					has_attitude = { 
						who = ROOT
						attitude >= cautious
					}
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
			}
			random_country = {
				limit = {
					has_attitude = { 
						who = ROOT
						attitude >= cautious
					}
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
				save_scope_as = tut_increase_relations
			}
		}

		else_if = {
			limit = {
				any_country = {
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
			}
			random_country = {
				limit = {
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
				}
				save_scope_as = tut_increase_relations
			}
		}
		
		add_journal_entry = {
			type = je_tutorial_increase_relations
			objective_subgoal = sg_increase_relations
			target = scope:tut_increase_relations
		}
	}
}

# Improve Rank
sg_improve_rank = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_make_peace
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_improve_rank
			objective_subgoal = sg_improve_rank
		}
	}
}

# Prevent a Revolution
sg_prevent_revolution = { #currently code bug displays trigger wrong
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_make_interest_group_happy
	}

	trigger = {
		any_civil_war = {
			civil_war_progress >= 0.15
			is_civil_war_type = revolution
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_prevent_revolution
			objective_subgoal = sg_prevent_revolution
		}
	}
}

# Earn Obligation
sg_earn_obligation = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_increase_relations
	}

	trigger = {
		NOT = {
			any_country = { 
				owes_obligation_to = root
			}
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_earn_obligation
			objective_subgoal = sg_earn_obligation
			target = scope:tut_earn_obligation
		}
	}
}

# Expand Military
sg_expand_military = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_create_formation
	}

	trigger = {	
		any_military_formation = {
			is_army = yes
			owner = ROOT
		}
	}
	
	on_start = {
		random_military_formation = {
			limit = {
				is_army = yes
				owner = ROOT
			}
			save_scope_as = tut_expand_army
		}

		add_journal_entry = {
			type = je_tutorial_expand_military
			objective_subgoal = sg_expand_military
			target = scope:tut_expand_army
		}
	}
}

# Increase Command Limit
sg_recruit_promote_commander = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_expand_military
	}

	trigger = {	
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_recruit_promote_commander
			objective_subgoal = sg_recruit_promote_commander
			target = scope:tut_command_commander
		}
	}
}

# Mobilize Army
sg_mobilize_army = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_start_diplomatic_play
	}

	trigger = {
		any_military_formation = {
			is_army = yes
			is_mobilized = no
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_mobilize_army
			objective_subgoal = sg_mobilize_army
		}
	}
}

# Send General to Front
sg_send_general_to_front = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_mobilize_army
	}

	trigger = {
		any_military_formation = {
			is_army = yes
			is_mobilized = yes
			is_on_front = no
		}
	}
	
	on_start = {
		random_military_formation = {
			limit = {
				is_army = yes
				is_mobilized = yes
				is_on_front = no
			}
			save_scope_as = tut_send_general_to_front
		}

		add_journal_entry = {
			type = je_tutorial_send_general_to_front
			objective_subgoal = sg_send_general_to_front
			target = scope:tut_send_general_to_front
		}
	}
}

# Convoy Raiding
sg_convoy_raiding = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_recruit_promote_commander
	}

	trigger = {
		any_scope_character = {
			has_role = general
			NOT = { has_commander_order = defend }
		}
	}
	
	on_start = {
		random_scope_character = { 
			limit = {
				has_role = general
				NOT = { has_commander_order = defend }
			}
			save_scope_as = tut_convoy_raiding
		}
		
		add_journal_entry = {
			type = je_tutorial_convoy_raiding
			objective_subgoal = sg_convoy_raiding
			target = scope:tut_convoy_raiding
		}
	}
}

# Recover From Default
sg_recover_from_default = {
	category = sgcat_tutorial
	
	is_repeatable = yes
	
	unlocking_subgoals_any = {
	}

	trigger = {
		in_default = yes
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_recover_from_default
			objective_subgoal = sg_recover_from_default
		}
	}
}

# Start Diplomatic Play
sg_start_diplomatic_play = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_recruit_promote_commander
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_start_diplomatic_play
			objective_subgoal = sg_start_diplomatic_play
		}
	}
}

# Is Target in Diplomatic Play
sg_is_play_target = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_declare_an_interest
	}

	trigger = {
		is_diplomatic_play_target = yes
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_is_play_target
			objective_subgoal = sg_is_play_target
		}
	}
}

# Fix Capacity Deficit
sg_capacity_deficit = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
	}

	trigger = {
		OR = {
			bureaucracy < -10
			authority < -10
			influence < -10
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_capacity_deficit
			objective_subgoal = sg_capacity_deficit
		}
	}
}

sg_invest_into_an_institution = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_enact_institution_law
	}
	
	trigger = {
		OR = {
			institution:institution_schools = {
				investment < investment_max
			}
			institution:institution_health_system = {
				investment < investment_max
			}
			institution:institution_police = {
				investment < investment_max
			}
			institution:institution_social_security = {
				investment < investment_max
			}
			institution:institution_workplace_safety = {
				investment < investment_max
			}
			institution:institution_home_affairs = {
				investment < investment_max
			}
			institution:institution_colonial_affairs = {
				investment < investment_max
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
				institution:institution_schools = {
					investment < investment_max
				}
			}
			institution:institution_schools = {
				save_scope_as = tut_institution
			}
		}

		else_if = {
			limit = {
				institution:institution_health_system = {
					investment < investment_max
				}
			}
			institution:institution_health_system = {
				save_scope_as = tut_institution
			}
		}

		else_if = {
			limit = {
				institution:institution_police = {
					investment < investment_max
				}
			}
			institution:institution_police = {
				save_scope_as = tut_institution
			}
		}

		else_if = {
			limit = {
				institution:institution_social_security = {
					investment < investment_max
				}
			}
			institution:institution_social_security = {
				save_scope_as = tut_institution
			}
		}

		else_if = {
			limit = {
				institution:institution_workplace_safety = {
					investment < investment_max
				}
			}
			institution:institution_workplace_safety = {
				save_scope_as = tut_institution
			}
		}

		else_if = {
			limit = {
				institution:institution_home_affairs = {
					investment < investment_max
				}
			}
			institution:institution_home_affairs = {
				save_scope_as = tut_institution
			}
		}
		
		else_if = {
			limit = {
				institution:institution_colonial_affairs = {
					investment < investment_max
				}
			}
			institution:institution_colonial_affairs = {
				save_scope_as = tut_institution
			}
		}
		
		add_journal_entry = {
			type = je_tutorial_invest_into_an_institution
			objective_subgoal = sg_invest_into_an_institution
			target = scope:tut_institution
		}
	}
}

# Incorporate State
sg_incorporate_state = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_invest_into_an_institution
	}

	trigger = {
		any_scope_state = {
			is_incorporated = no
			is_under_colonization = no
		}
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_incorporate_state
			objective_subgoal = sg_incorporate_state
		}
	}
}

# Colonize Region
sg_colonize_state = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_declare_an_interest
	}

	on_start = {
		add_journal_entry = {
			type = je_tutorial_colonize_state
			objective_subgoal = sg_colonize_state
		}
	}
}

# Make Peace
sg_make_peace = {
	category = sgcat_tutorial
	
	unlocking_subgoals_all = {
		sg_send_general_to_front
	}

	trigger = {
		is_at_war = yes
	}

	on_start = {
		add_journal_entry = {
			type = je_tutorial_make_peace
			objective_subgoal = sg_make_peace
		}
	}
}

# Research Technology
sg_research_technology = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
	}

	trigger = {
		NOT = { is_researching_technology = any }
		has_researchable_technology = yes
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_research_technology
			objective_subgoal = sg_research_technology
		}
	}
}

# Declare an Interest
sg_declare_an_interest = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_increase_relations
	}

	on_start = {
		if = {
			limit = {
				any_rival_country = {
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
			}
			random_rival_country = {
				limit = {
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
				save_scope_as = tut_declare_interest_country
			}
		}

		else_if = {
			limit = {
				any_country = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
			}
			random_country = {
				limit = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					country_rank >= rank_value:major_power
					relations:root < relations_threshold:amicable
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
				save_scope_as = tut_declare_interest_country
			}
		}

		else_if = {
			limit = {
				any_country = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					relations:root < relations_threshold:amicable
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
			}
			random_country = {
				limit = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					country_rank >= rank_value:major_power
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
				save_scope_as = tut_declare_interest_country
			}
		}

		else_if = {
			limit = {
				any_country = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
			}
			random_country = {
				limit = {
					NOT = { this = ROOT }
					ROOT = {
						NOT = { has_interest_marker_in_region = prev.capital.region }
					}
					capital.region = {
						can_have_declared_interest_here = ROOT
					}
				}
				save_scope_as = tut_declare_interest_country
			}
		}

		add_journal_entry = {
			type = je_tutorial_declare_an_interest
			objective_subgoal = sg_declare_an_interest
			target = scope:tut_declare_interest_country
		}
	}
}

# Create Formation
sg_create_formation = {
	category = sgcat_tutorial
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_declare_an_interest
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_create_formation
			objective_subgoal = sg_create_formation
		}
		set_variable = {
				name = formation_tutorial_ongoing
		}
	}
}

# Subject Liberty Desire
sg_subject_liberty = {
	category = sgcat_tutorial
	is_repeatable = no

	trigger = {
		any_country = {
			is_subject_of = ROOT
			liberty_desire >= 70
			liberty_desire_weekly_progress > 0
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_country = {
					is_subject_of = ROOT
					liberty_desire >= 70
					liberty_desire_weekly_progress > 0
				}
			}
			random_country = {
				limit = {
					is_subject_of = ROOT
					liberty_desire >= 70
					liberty_desire_weekly_progress > 0
				}
				save_scope_as = tut_subject_liberty_desire
			}
		}

		add_journal_entry = {
			type = je_subject_liberty
			objective_subgoal = sg_subject_liberty
			target = scope:tut_subject_liberty_desire
		}
	}
}

# Foreign Investment
sg_foreign_investment = {
	category = sgcat_tutorial
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_subject_liberty
	}

	trigger = {
		any_country = {
			OR = {
				is_subject_of = ROOT
				has_diplomatic_pact = {
					who = root
					type = foreign_investment_agreement
				}
				root = {
					has_diplomatic_pact = {
						who = prev
						type = foreign_investment_rights
						is_initiator = yes
					}
				}
			}
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_country = {
					OR = {
						is_subject_of = ROOT
						has_diplomatic_pact = {
							who = root
							type = foreign_investment_agreement
						}
						root = {
							has_diplomatic_pact = {
								who = prev
								type = foreign_investment_rights
								is_initiator = yes
							}
						}
					}
				}
			}
			random_country = {
				limit = {
					OR = {
						is_subject_of = ROOT
						has_diplomatic_pact = {
							who = root
							type = foreign_investment_agreement
						}
						root = {
							has_diplomatic_pact = {
								who = prev
								type = foreign_investment_rights
								is_initiator = yes
							}
						}
					}
				}
				save_scope_as = tut_foreign_investment
			}
		}

		add_journal_entry = {
			type = je_tutorial_foreign_investment
			objective_subgoal = sg_foreign_investment
			target = scope:tut_foreign_investment
		}	
	}
}

# Establish Company
sg_establish_company = {
	category = sgcat_tutorial
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_expand_productive_building
	}

	trigger = {
		can_establish_company = YES
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_establish_company
			objective_subgoal = sg_establish_company
		}	
	}
}

# Form Power Bloc
sg_form_power_bloc = {
	category = sgcat_tutorial
	is_repeatable = no

	unlocking_subgoals_all = {
	}

	trigger = {
		OR = {
			country_rank = rank_value:great_power
			AND = {
				country_rank = rank_value:major_power
				has_variable = tutorial_form_pb_end
			}
		}
		is_in_power_bloc = no
	}
	
	on_start = {
		add_journal_entry = {
			type = je_tutorial_form_power_bloc
			objective_subgoal = sg_form_power_bloc
		}	
	}
}

# Lobbies
sg_lobbies = {
	category = sgcat_tutorial
	
	unlocking_subgoals_any = {
		sg_increase_relations
	}

	trigger = {
		any_political_lobby = {
			appeasement <= 7
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_political_lobby = {
					OR = {
						is_political_lobby_type = lobby_pro_country
						is_political_lobby_type = lobby_anti_country
					}
				}
			}
			random_political_lobby = {
				limit = {
					OR = {
						is_political_lobby_type = lobby_pro_country
						is_political_lobby_type = lobby_anti_country
					}
				}
				save_scope_as = tut_political_lobby
			}
		}

		add_journal_entry = {
			type = je_tutorial_lobbies
			objective_subgoal = sg_lobbies
			target = scope:tut_political_lobby
		}
	}
}
﻿sg_expand_goods_production = {
	category = sgcat_economic_dominance

	trigger = {
		any_scope_building = {
			is_under_construction = no
			can_queue_building_levels = 1
			is_economic_objective_building = yes
		}
	}
	
	on_start = {
		if = {
			limit = {
				any_scope_building = {
					can_queue_building_levels = 1
					is_building_type = building_iron_mine
				}
			}
			random_scope_building = {
				limit = { 
					can_queue_building_levels = 1
					is_building_type = building_iron_mine
				}
				save_scope_as = economic_building_target
			}				
		}
		
		else_if = {
			limit = {
				any_scope_building = {
					can_queue_building_levels = 1
					is_building_type = building_coal_mine
				}
			}
			random_scope_building = {
				limit = { 
					can_queue_building_levels = 1
					is_building_type = building_coal_mine
				}
				save_scope_as = economic_building_target
			}
		}

		add_journal_entry = {
			type = je_objective_expand_goods_production
			objective_subgoal = sg_expand_goods_production
			target = scope:economic_building_target
		}
	}
}

sg_refining_goods = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_expand_goods_production
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_refining_goods
			objective_subgoal = sg_refining_goods
		}	
	}
}

sg_specialized_goods = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_refining_goods
	}

	trigger = { 
	}
	
	on_start = {
		add_journal_entry = {
			type = je_specialized_goods
			objective_subgoal = sg_specialized_goods
		}
	}
}

sg_expanding_the_market = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_specialized_goods
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_expanding_the_market
			objective_subgoal = sg_expanding_the_market
		}
	}
}

sg_strong_market = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_expanding_the_market
		sg_lower_production_costs
	}

	unlocking_subgoals_any = {
		sg_raise_exports_value
		sg_utilizing_our_strength
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_strong_market
			objective_subgoal = sg_strong_market
		}
	}
}

sg_specialized_inputs = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_specialized_goods
	}

	trigger = {
		NOT = { has_variable = player_obj_export_focus }
	}
	
	on_start = {
		add_journal_entry = {
			type = je_specialized_inputs
			objective_subgoal = sg_specialized_inputs
		}
	}
}

sg_utilizing_our_strength = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_specialized_goods
	}

	trigger = {
		has_variable = player_obj_home_focus
	}
	
	on_start = {
		add_journal_entry = {
			type = je_utilizing_our_strength
			objective_subgoal = sg_utilizing_our_strength
		}	
	}
}

sg_exporting_profits = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_specialized_goods
	}

	trigger = {
		NOT = { has_variable = player_obj_home_focus }
	}
	
	on_start = {
		add_journal_entry = {
			type = je_exporting_profits
			objective_subgoal = sg_exporting_profits
		}	
	}
}

sg_raise_exports_value = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_exporting_profits
	}

	trigger = {
		has_variable = player_obj_export_focus
	}
	
	on_start = {
		add_journal_entry = {
			type = je_raise_exports_value
			objective_subgoal = sg_raise_exports_value
		}	
	}
}

sg_lower_production_costs = {
	category = sgcat_economic_dominance
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_refining_goods
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_lower_production_costs
			objective_subgoal = sg_lower_production_costs
		}	
	}
}
﻿sg_encourage_liberal_ideas = {
	category = sgcat_economic_dominance
	is_repeatable = no

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_objective_encourage_liberal_ideas
			objective_subgoal = sg_encourage_liberal_ideas
		}
	}
}

sg_liberate_the_slaves = {
	category = sgcat_egalitarian_society
	is_repeatable = no

	trigger = { 
	}
	
	on_start = {
		add_journal_entry = {
			type = je_liberate_the_slaves
			objective_subgoal = sg_liberate_the_slaves
			target = scope:slavery_objective_target
		}
	}
}

sg_pass_laws = {
	category = sgcat_egalitarian_society
	is_repeatable = no

	unlocking_subgoals_any = {
		sg_encourage_liberal_ideas
		sg_liberate_the_slaves
	}

	trigger = {
	}
	
	on_start = {
		add_journal_entry = {
			type = je_pass_laws
			objective_subgoal = sg_pass_laws
		}	
	}
}

sg_public_services = {
	category = sgcat_egalitarian_society
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_pass_laws
	}

	trigger = {
		NOT = { has_law = law_type:law_state_religion }
		has_law = law_type:law_multicultural
		has_law = law_type:law_public_schools
		has_law = law_type:law_protected_speech
	}
	
	on_start = {
		add_journal_entry = {
			type = je_public_services
			objective_subgoal = sg_public_services
		}	
	}
}

sg_women_and_children = {
	category = sgcat_egalitarian_society
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_public_services
	}

	trigger = {
		NOT = { has_law = law_type:law_state_religion }
		has_law = law_type:law_multicultural
		has_law = law_type:law_public_schools
		has_law = law_type:law_protected_speech
	}
	
	on_start = {
		add_journal_entry = {
			type = je_women_and_children
			objective_subgoal = sg_women_and_children
		}
	}
}

sg_egalitarian_society = {
	category = sgcat_egalitarian_society
	is_repeatable = no

	unlocking_subgoals_all = {
		sg_women_and_children
		sg_liberate_the_slaves 
	}

	trigger = {
		NOT = { has_law = law_type:law_state_religion }
		has_law = law_type:law_multicultural
		has_law = law_type:law_public_schools
		has_law = law_type:law_protected_speech
		has_law = law_type:law_compulsory_primary_school
		has_law = law_type:law_womens_suffrage
	}
	
	on_start = {
		add_journal_entry = {
			type = je_egalitarian_society
			objective_subgoal = sg_egalitarian_society
		}
	}
}


﻿﻿# For on_actions launched by the code itself.

# No root scope set
on_monthly_pulse = {
	effect = {
		every_character_in_exile_pool = {
			limit = {
				popularity <= 15
			}
			kill_character = yes
		}

		if = {
			limit = {
				year < 1930
				NOT = { has_global_variable = germany_formed }
				c:GER ?= { is_country_alive = yes }
			}
			set_global_variable = germany_formed
		}

		# Used to keep track of Council Republics for the purpose of the Red Scare.
		# Our thanks to Brute for reporting this.
		clear_global_variable_list = aes_country_list
		every_country = {
			limit = { 
				has_law = law_type:law_council_republic
				country_rank > rank_value:minor_power 
			}
			add_to_global_variable_list = {
				name = aes_country_list
				target = THIS
			}
		}
	}
}

on_yearly_pulse = { }

# Root = Country
on_monthly_pulse_country = {
	events = {
		communism.8 # Red Army
		peoples_springtime.1
		opium_wars.1
		native_resettlement.1
		meiji.13
		bic_breakup.1
		dreyfus.1
		dei_breakup.1
		poland_events.3 # Polish Unification
		colonial_administration_events.2 # African Colony Radicals
		caudillo.1
		sa_migration.5
		amazonas.1 # Taming Amazonia
		paraguay.11 # Paraguay War
		acw_events.9 # CSA victory event
		persia_events.5 # Persian slave liberation event

		# Exile Agitators Events
		yeet_agitator_events.1
		yeet_agitator_events.2
		yeet_agitator_events.3

		# Comte
		positivism.1

		# Milyutin
		caucasuswar.5
	}
	effect = {
		trigger_event = { id = unable_to_enact.1 }

		### This is how we give objectives to AI countries
		if = {
			limit = {
				has_journal_entry = je_great_game_control
				has_dlc_feature = ep1_content
				is_player = no
			}
			if = {
				limit = {
					c:RUS ?= this
				}
				### Generic Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_tibet_expedition_ai_var
						}
						has_variable = tibet_has_started
						NOT = { has_global_variable = tibet_expedition_completed }
						has_interest_marker_in_region = region_himalayas
					}
					set_variable = je_tibet_expedition_ai_var
					add_journal_entry = {
						type = je_tibet_expedition
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_consolidate_afghanistan_objective_ai_var
						}
						has_interest_marker_in_region = region_persia
						exists = c:AFG
					}
					set_variable = je_consolidate_afghanistan_objective_ai_var
					add_journal_entry = {
						type = je_consolidate_afghanistan_objective
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_maintain_afghan_protectorate_ai_var
						}
						NOT = {
							has_global_variable = gg_afghanistan_protectorate_done
						}
						has_interest_marker_in_region = region_persia
					}
					set_variable = je_maintain_afghan_protectorate_ai_var
					add_journal_entry = {
						type = je_maintain_afghan_protectorate
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_secure_influence_over_persia_ai_var
						}
						has_interest_marker_in_region = region_persia
					}
					set_variable = je_secure_influence_over_persia_ai_var
					add_journal_entry = {
						type = je_secure_influence_over_persia
					}
				}

				### Specific Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_secure_persian_border_ai_var
						}
						exists = c:CIR
					}
					set_variable = je_secure_persian_border_ai_var
					add_journal_entry = {
						type = je_secure_persian_border
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_pacify_kazakh_steppes_ai_var
						}
						has_journal_entry = je_pacify_the_steppes
					}
					set_variable = je_pacify_kazakh_steppes_ai_var
					add_journal_entry = {
						type = je_pacify_kazakh_steppes
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_codify_chinese_border_ai_var
						}
						has_technology_researched = nationalism
					}
					set_variable = je_codify_chinese_border_ai_var
					add_journal_entry = {
						type = je_codify_chinese_border
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_consolidate_central_asia_ai_var
						}
						has_technology_researched = nationalism
					}
					set_variable = je_consolidate_central_asia_ai_var
					add_journal_entry = {
						type = je_consolidate_central_asia
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_chinese_concessions_ai_var
						}
						has_technology_researched = railways
						any_scope_state = {
							OR = {
								state_region = s:STATE_OUTER_MANCHURIA
								state_region = s:STATE_AMUR
							}
							is_incorporated = yes
						}
					}
					set_variable = je_chinese_concessions_ai_var
					add_journal_entry = {
						type = je_chinese_concessions
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_acquire_korean_protectorate_ai_var
						}
						any_neighbouring_state = {
							owner = c:KOR
							is_incorporated = yes
						}
						c:KOR ?= {
							is_country_type = unrecognized
						}
					}
					set_variable = je_acquire_korean_protectorate_ai_var
					add_journal_entry = {
						type = je_acquire_korean_protectorate
					}
				}
			}
			
			if = {
				limit = {
					c:GBR ?= this
					has_journal_entry = je_great_game_control
				}
				### Generic Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_tibet_expedition_ai_var
						}
						has_variable = tibet_has_started
						NOT = { has_global_variable = tibet_expedition_completed }
						has_interest_marker_in_region = region_himalayas
					}
					set_variable = je_tibet_expedition_ai_var
					add_journal_entry = {
						type = je_tibet_expedition
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_consolidate_afghanistan_objective_ai_var
						}
						has_interest_marker_in_region = region_persia
						exists = c:AFG
					}
					set_variable = je_consolidate_afghanistan_objective_ai_var
					add_journal_entry = {
						type = je_consolidate_afghanistan_objective
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_maintain_afghan_protectorate_ai_var
						}
						NOT = {
							has_global_variable = gg_afghanistan_protectorate_done
						}
						has_interest_marker_in_region = region_persia
					}
					set_variable = je_maintain_afghan_protectorate_ai_var
					add_journal_entry = {
						type = je_maintain_afghan_protectorate
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_secure_influence_over_persia_ai_var
						}
						has_interest_marker_in_region = region_persia
					}
					set_variable = je_secure_influence_over_persia_ai_var
					add_journal_entry = {
						type = je_secure_influence_over_persia
					}
				}
				### Specific Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_disrupt_russian_caucasus_ai_var
						}
						exists = c:CIR
					}
					set_variable = je_disrupt_russian_caucasus_ai_var
					add_journal_entry = {
						type = je_disrupt_russian_caucasus
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_counter_russian_pacific_influence_ai_var
						}
						c:RUS ?= {
							any_scope_state = {
								region = sr:region_manchuria
								OR = {
									any_scope_building = {
										is_building_type = building_port
										level >= 5
									}
									any_scope_building = {
										is_building_type = building_naval_base
										level >= 15
									}
								}
							}
						}
					}
					set_variable = je_counter_russian_pacific_influence_ai_var
					add_journal_entry = {
						type = je_counter_russian_pacific_influence
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_consolidate_british_india_ai_var
						}
						c:BIC ?= {
							is_subject_of = c:GBR
						}
					}
					set_variable = je_consolidate_british_india_ai_var
					add_journal_entry = {
						type = je_consolidate_british_india
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_pamir_expedition_objective_ai_var
						}
						c:RUS ?= {
							OR = {
								any_scope_state = {
									state_region = s:STATE_TAJIKISTAN
								}
								any_subject_or_below = {
									any_scope_state = {
										state_region = s:STATE_TAJIKISTAN
									}
								}
							}
						}
						NOT = {
							has_variable = dismissed_pamir_expedition
						}
					}
					set_variable = je_pamir_expedition_objective_ai_var
					add_journal_entry = {
						type = je_pamir_expedition_objective
					}
				}
			}
			
			if = {
				limit = {
					is_afghan_nation = yes
					has_journal_entry = je_great_game_control
				}
				### Generic Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_achieve_sovereignty_ai_var
						}
						is_country_type = unrecognized
					}
					set_variable = je_achieve_sovereignty_ai_var
					add_journal_entry = {
						type = je_achieve_sovereignty
					}
				}
				### Specific Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_unify_afghanistan_objective_ai_var
						}
					}
					set_variable = je_unify_afghanistan_objective_ai_var
					add_journal_entry = {
						type = je_unify_afghanistan_objective
					}
				}
			}
			
			if = {
				limit = {
					c:PER ?= this
					has_journal_entry = je_great_game_control
				}
				### Generic Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_achieve_sovereignty_ai_var
						}
						is_country_type = unrecognized
					}
					set_variable = je_achieve_sovereignty_ai_var
					add_journal_entry = {
						type = je_achieve_sovereignty
					}
				}
				### Specific Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_consolidate_persia_ai_var
						}
					}
					set_variable = je_consolidate_persia_ai_var
					add_journal_entry = {
						type = je_consolidate_persia
					}
				}
			}
		}
		
		# TODO: Move these to tag-specific pulses
		if = {
			limit = {
				this = c:FRA
				c:FRA ?= {
					OR = {
						has_modifier = modifier_haitian_independence_payments_1
						has_modifier = modifier_haitian_independence_payments_2
						has_modifier = modifier_haitian_independence_payments_3
						has_modifier = modifier_haitian_independence_payments_4
					}
				}
				NOT = { exists = c:HAI }
			}
			c:FRA = {
				if = {
					limit = {
						has_modifier = modifier_haitian_independence_payments_1
					}
					remove_modifier = modifier_haitian_independence_payments_1
				}
				if = {
					limit = {
						has_modifier = modifier_haitian_independence_payments_2
					}
					remove_modifier = modifier_haitian_independence_payments_2 
				}
				if = {
					limit = {
						has_modifier = modifier_haitian_independence_payments_3
					}
					remove_modifier = modifier_haitian_independence_payments_3
				}
				if = {
					limit = {
						has_modifier = modifier_haitian_independence_payments_4
					}
					remove_modifier = modifier_haitian_independence_payments_4
				}
			}
		}
		if = { #Exists to make sure independent Perus get this ASAP.
			limit = {
				OR = {
					c:NPU ?= this
					c:SPU ?= this
				}
				is_subject = no
				NOT = {
					has_variable = peru_has_claims
				}
				OR = {
					AND = { #SPU is either dead or a puppet, will not fire if it is independent.
						c:NPU ?= this
						OR = {
							NOT = {
								exists = c:SPU
							}
							c:SPU ?= { is_subject = yes }
						}
					}
					AND = {
						c:SPU ?= this
						OR = {
							NOT = {
								exists = c:SPU
							}
							c:NPU ?= { is_subject = yes }
						}
					}
				}
			}
			trigger_event = { id = peru_bolivia_events.8 days = 0 popup = yes }
		}

		if = {
			limit = {
				NOT = {
					has_variable = cant_touch_this_achievement_possible
				}
				any_country = {
					NOT = {
					   THIS = ROOT
					}
					ROOT = {
						"gdp_ownership_ratio(prev)" > 0.10
					}	
			    }
			}
			set_variable = cant_touch_this_achievement_possible
		}
	}
	on_actions = { # delay ensures events won't fire simultaneously
		coup_monthly_events
		#delay = { days = 4 }
		garibaldi_monthly_events
		#delay = { days = 7 }
		fund_lobbies_monthly_events
	}
}

on_yearly_pulse_country = {
	effect = {
		# IG leader death
		random_list = {
			1 = {
				trigger_event = { id = character_events.100 }
			}
			1 = { }
		}		
		
		# Countries have a chance to change their mind about who they want to support in Egypt vs Ottomans conflicts
		if = {
			limit = {
				has_variable = veiled_protectorate_support_ottomans
			}
			
			random_list = {
				95 = {}
				3 = { 
					remove_variable = veiled_protectorate_support_ottomans 
				}
				2 = { 
					remove_variable = veiled_protectorate_support_ottomans 
					set_variable = veiled_protectorate_support_egypt
				}
			}
		}
		else_if = {
			limit = {
				has_variable = veiled_protectorate_support_egypt
			}
			
			random_list = {
				95 = {}
				3 = { 
					remove_variable = veiled_protectorate_support_egypt
				}
				2 = { 
					remove_variable = veiled_protectorate_support_egypt
					set_variable = veiled_protectorate_support_ottomans
				}
			}
		}				

		if = {
			limit = {
				NOR = {
					has_journal_entry = je_sick_man_main # Ottomans have enough required reforms to worry about
					has_journal_entry = je_meiji_restoration # Ditto for Japan
					has_variable = gov_petition_fired
					has_variable = gov_petition_cooldown
					has_modifier = modifier_successfully_met_petition_legitimacy
					any_interest_group = {
						has_modifier = modifier_failed_to_meet_petition
					}
					has_journal_entry = je_government_petition
					is_revolutionary = yes
					is_secessionist = yes
				}
				ig_desires_laws_for_petition = yes
			}
			if = {
				limit = {
					has_variable = gov_petition_coin_toss
				}
				random_list = {
					1 = { 
						set_variable = { name = gov_petition_cooldown years = 10 }
						set_variable = { name = gov_petition_fired months = 3 }
						trigger_event = { id = government_petition_events.1 }
					}
					1 = {
	
					}
				}
				remove_variable = gov_petition_coin_toss
			}
			else = {
				random_list = {
					1 = { 
						set_variable = { name = gov_petition_cooldown years = 10 }
						set_variable = { name = gov_petition_fired months = 3 }
						trigger_event = { id = government_petition_events.1 }
					}
					9 = {
	
					}
				}
			}
		}

		if = {
			limit = {
				ROOT = {
					is_player = yes
					has_dlc_feature = voice_of_the_people_content
					empty_agitator_slots >= 1
					OR = {
						c:USA ?= this
						trigger_if = {
							limit = {
								exists = c:CAL
							}
							c:CAL ?= this
						}
					}
					any_scope_state = {
						state_region = s:STATE_CALIFORNIA
						is_incorporated = yes
					}
					game_date > 1860.1.1
					game_date < 1880.1.1
				}
				NOT = { has_global_variable = emperor_norton_spawn }	
			}
			trigger_event = { id = historical_agitators.9 }
		}

		# Achievement: For Twelve Years You Have Been Asking
		if = {
			limit = {
				any_scope_building = {
					NOR = {
						is_building_group = bg_government
						is_building_group = bg_construction
						is_building_group = bg_military
						is_building_group = bg_urban_facilities
						is_building_group = bg_canals
					}
					level > 0
					private_ownership_fraction = 1
				}
				NOT = {
					has_variable = achievement_for_twelve_years_you_have_been_asking_timed
					has_variable = achievement_for_twelve_years_you_have_been_asking
				}
			}
			set_variable = {
				name = achievement_for_twelve_years_you_have_been_asking_timed
				years = 12
			}
			set_variable = {
				name = achievement_for_twelve_years_you_have_been_asking
			}
		}
		else_if = {
			limit = {
				any_scope_building = {
					NOR = {
						is_building_group = bg_government
						is_building_group = bg_construction
						is_building_group = bg_military
						is_building_group = bg_urban_facilities
						is_building_group = bg_canals
					}
					level > 0
					private_ownership_fraction < 1
				}
				OR = {
					has_variable = achievement_for_twelve_years_you_have_been_asking_timed
					has_variable = achievement_for_twelve_years_you_have_been_asking
				}
			}
			# RESET THE CLOCK

			remove_variable = achievement_for_twelve_years_you_have_been_asking
			remove_variable = achievement_for_twelve_years_you_have_been_asking_timed
		}

		# Achievement: Can't Touch This
		if = {
			limit = {
				any_scope_building = {
					level > 0
					private_ownership_fraction = 0
				}
				NOT = {
					has_variable = achievement_cant_touch_this_timed
					has_variable = achievement_cant_touch_this
				}
			}
			set_variable = {
				name = achievement_cant_touch_this_timed
				years = 12
			}
			set_variable = {
				name = achievement_cant_touch_this
			}
		}
		else_if = {
			limit = {
				any_scope_building = {
					level > 0
					private_ownership_fraction > 0
					NOR = {
						is_building_group = bg_subsistence_ranching
						is_building_group = bg_subsistence_agriculture
						is_building_group = bg_gold_fields
					}
				}
				OR = {
					has_variable = achievement_cant_touch_this_timed
					has_variable = achievement_cant_touch_this
				}
			}
			# RESET THE CLOCK

			remove_variable = achievement_cant_touch_this
			remove_variable = achievement_cant_touch_this_timed
		}
	}
	on_actions = { # delay ensures events won't fire simultaneously
		on_yearly_events
		#delay = { days = 1 }
		russian_monarchy_yearly_events
		#delay = { days = 1 }
		springtime_of_peoples_yearly_events
		#delay = { days = 2 }
		bp1_misc_yearly_events
		#delay = { days = 3 }
		indochina_yearly_events
		#delay = { days = 5 }
		exiles_yearly_events
		#delay = { days = 8 }
		historical_agitators_yearly_events
		#delay = { days = 13 }
		slavery_abolition_yearly_events
		#delay = { days = 21 }
		lobby_yearly_events
		#delay = { days = 34 }
		krakatoa_yearly_events
		#delay = { days = 55 }
		tunguska_yearly_events
		#delay = { days = 89 }
	}
}
on_half_yearly_pulse_country = {
	on_actions = { # delay ensures events won't fire simultaneously
		on_half_yearly_events
		#delay = { days = 4 }
		silkworm_half_yearly_events
		#delay = { days = 6 }
		secession_half_yearly_events
		#delay = { days = 14 }
		korea_half_yearly_events
		#delay = { days = 17 }
		lobbies_proposals_half_yearly_events
		#delay = { days = 20 }
		movement_half_yearly_events
	}
}

on_five_year_pulse_country = {
	events = {
		generals.1
	}
}


on_decade_pulse_country = {
	random_events = {
		chance_of_no_event = 95
		1 = plague.1
	}
}

# Only fires for countries with Elections enabled
on_monthly_pulse_country_elections = {
	on_actions = {
		elections_monthly_events
	}
}

on_half_yearly_pulse_country_elections = { }
on_yearly_pulse_country_elections = { }
on_five_year_pulse_country_elections = {}
on_decade_pulse_country_elections = {}

# Root = Character
on_monthly_pulse_character = {
	effect = {
		if = {
			limit = {
				AND = {
					has_trait = trait_child
					age >= define:NCharacters|ADULT_AGE
				}
			}
			remove_trait = trait_child
			add_random_trait = personality
		}
	}
}
on_yearly_pulse_character = {
	random_events = {
		20 = character_events.1
	}


}
on_half_yearly_pulse_character = {}
on_five_year_pulse_character = {}
on_decade_pulse_character = {
	
}

# Root = State
on_monthly_pulse_state = {
	random_events = {
		10 = goldrush.5
	}

}
on_half_yearly_pulse_state = {}
on_yearly_pulse_state = {
	random_events = {
		chance_of_no_event = 80
		10 = oil_rush.3
		10 = oil_rush.4
	}
	on_actions = {
	}
}
on_five_year_pulse_state = {}
on_decade_pulse_state = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
	effect = {
		
	}
}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_won = {
	events = {
		texan_war_of_independence.3

	}
	random_events = {
		chance_of_no_event = 80
		20 = culture_brazil.1
	}
}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_lost = {}

# Root = Building
on_building_built = {
}

# Root = Building
on_start_expanding_building = {
}

# Root = Building
on_building_expanded = {
}

# Does not appear
on_deactivate_link = {
}

# Root = From Market
# scope:market = Market merging into
# scope:trade_center = Trade Center state of root
on_merge_markets = {
}

# Root = State having the link retargeted
on_retarget_link = {
}

# Root = The newly created market
on_create_market = {
}

# Root = The applicable country
# scope:technology = The technology type they started to research
on_research_technology_started = {
	effect = {
		if = {
			limit = { 
				has_journal_entry = je_tutorial_research_technology
			}
			je:je_tutorial_research_technology = {
				set_target_technology = scope:technology
			}
			set_variable = tut_began_new_research
		}
	}
}

# Root = The applicable country
# scope:technology = The technology type they just acquired
on_acquired_technology = {
	effect = {
		if = {
			limit = {
				has_variable = grand_exhibition_points_change
			}
			change_variable = {
				name = grand_exhibition_points_change
				add = 3
			}
		}
		if = {
			limit = {
				has_game_started = yes
			}
			post_notification = acquired_technology_notification
		}
		if = {
			limit = {
				is_player = yes
				has_technology_researched = pumpjacks
				NOT = { has_variable = first_oil_discovered }
			}
			set_variable = first_oil_discovered
			if = {
				limit = {
					any_scope_state = {
						has_potential_resource = bg_oil_extraction
					}
				}
				random_scope_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
			}
			else_if = {
				limit = {
					any_country = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							has_potential_resource = bg_oil_extraction
						}
					}
				}
				random_country = {
					limit = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							has_potential_resource = bg_oil_extraction
						}
					}
					random_scope_state = {
						limit = {
							has_potential_resource = bg_oil_extraction
						}
						force_resource_discovery = bg_oil_extraction
					}
				}
			}
			else = {
				random_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
			}
		}
	}

	events = {
		historical_events.1
		marx_events.1
	}
}

# Root = The applicable country
# scope:technology = The technology type that has started to spread to them
on_spreading_technology = {
	effect = {
		post_notification = spreading_technology_notification
	}
}

# Fires when a diplomatic play is started
# root = The diplomatic play that has been started
# scope:initiator = Initiator of the play
# scope:target = Target of the play
on_diplomatic_play_started = {
	effect = {
		if = {
			limit = { is_diplomatic_play_type = dp_unify_germany }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = GER }
				}
				
				scope:initiator = { annex = prev }
			}
		}
		
		if = {
			limit = { is_diplomatic_play_type = dp_unify_italy }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = ITA }
				}
				
				scope:initiator = { annex = prev }
			}
		}

		if = {
			limit = { is_diplomatic_play_type = dp_unify_scandinavia }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = SCA }
				}
				
				scope:initiator = { annex = prev }
			}
		}		
	}
}

# Root = Character
on_character_creation = {
}

# Root = Character
on_character_death = {
	effect = {
		if = {
			limit = {
				is_ruler = yes
				exists = c:HAW
				owner = c:HAW
				owner = {
					has_law = law_type:law_monarchy
					NOT = { has_variable = death_of_kamehameha }
					NOT = { has_global_variable = gp_hawaii_interest }
				}
			}
			owner = {
				trigger_event = hawaii_events.1
			}
		}
		
		if = {
			limit = {
				has_variable = expedition_leader_var
				owner = {
					NOT = { has_variable = tibet_expedition_progress_var }
				}
			}
			owner = {
				trigger_event = expedition_events.110
			}
		}

		### Force-generating French monarchs of the correct dynasty if something goes wrong
		if = {
			limit = {
				is_ruler = yes
				owner = {
					has_law = law_type:law_monarchy
					NOT = {
						any_scope_character = {
							is_heir = yes
						}
					}
				}
			}
			if = {
				limit = { 
					has_variable = legitimist_leader 
				}
				owner = {
					create_character = {
						template = dynamic_legitimist_ruler_template
					}
				}
			}
			else_if = {
				limit = { 
					has_variable = orleanist_leader 
				}
				owner = {
					create_character = {
						template = dynamic_orleanist_ruler_template
					}
				}				
			}
			else_if = {
				limit = { 
					has_variable = bonapartist_leader 
				}
				owner = {
					create_character = {
						template = dynamic_bonapartist_ruler_template
					}
				}				
			}
		}
		###
		# Garibaldi exist check
		if = {
			limit = {
				has_template = garibaldi_character_template
			}
			remove_global_variable = garibaldi_is_alive_global_var
		}
		### Caudillo Kingmaker
		if = {
			limit = {
				NOT = { has_variable = caudillo_kingmaker }
				has_role = politician
				interest_group = {
					is_interest_group_type = ig_armed_forces
					is_marginal = no
				}
				owner = {
					in_election_campaign = no
					country_has_voting_franchise = yes
					OR = {
						has_journal_entry = je_caudillo
						has_modifier = age_of_caudillos_modifier
					}
				}
			}
			owner = {
				trigger_event = { id = caudillo.5 days = 1 }
			}
		}
	}
}

# Root = Character
on_new_ruler = {
	effect = {
		if = {
			limit = {
				owner = {
					NOT = {
						has_variable = hide_ruler_change_notification
					}
				}
			}
			post_notification = new_ruler
		}
		if = {
			limit = {
				owner = {
					c:RUS ?= this
					has_law = law_type:law_monarchy
				}
				is_ruler = yes
			}
			if = {
				limit = {
					has_template = RUS_alexander_ii
				}
				owner = {
					trigger_event = { id = russia_monarchy.1 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_tsarevich_nicholas_alexandrovich
				}
				owner = {
					trigger_event = { id = russia_monarchy.3 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_alexander_iii
				}
				owner = {
					trigger_event = { id = russia_monarchy.4 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_nicholas_ii
				}
				owner = {
					trigger_event = { id = russia_monarchy.5 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_alexei_ii
				}
				owner = {
					trigger_event = { id = russia_monarchy.9 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_michael_ii
				}
				owner = {
					trigger_event = { id = russia_monarchy.10 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_george_i
				}
				owner = {
					trigger_event = { id = russia_monarchy.11 popup = yes }
				}
			}
		}
		if = {
			limit = {
				owner = {
					c:PRG ?= this
				}
				has_template = PRG_francisco_solano_lopez
				is_ruler = yes
			}
			owner = {
				random_scope_character = {
					limit = {
						has_template = PRG_francisco_solano_lopez
					}
					if = {
						limit = {
							has_modifier = napoleon_of_the_americas_modifier
						}
						remove_modifier = napoleon_of_the_americas_modifier
					}
					add_modifier = {
						name = napoleon_of_the_americas_modifier
						multiplier = 2
					}
				}
			}
		}
	}
}

# Root = Country
on_country_default = {
	effect = {
		add_modifier = country_default	

		this = {
			save_scope_as = in_default_country
		}

		every_cobelligerent_in_war = {
			post_notification = cobelligerent_in_default_notification
		}

		every_enemy_in_war = {
			post_notification = enemy_in_default_notification
		}
	}
}

# Root = Country
on_country_no_longer_default = {
	effect = {
		remove_modifier = country_default	
	}
}

# Root = Diplomatic Action
on_diplomatic_action = {
	effect = {
		post_notification = diplomatic_action_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal = {
	effect = {
		post_proposal = proposal_diplomatic_action
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted = {
	effect = {
		post_notification = diplomatic_proposal_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_owe_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_call_in_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_declined = {
	effect = {
		post_notification = diplomatic_proposal_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break = {
	effect = {
		post_notification = diplomatic_action_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break = {
	effect = {
		post_proposal = proposal_break_pact
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_owe_obligation = {
	effect = {
		post_proposal = proposal_break_pact_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_call_in_obligation = {
	effect = {
		post_proposal = proposal_break_pact_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party = {
	effect = {
		post_notification = diplomatic_proposal_third_party_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_overlord_decrease_autonomy = {
	effect = {
		post_notification = diplomatic_action_overlord_decrease_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_overlord_increase_autonomy = {
	effect = {
		post_notification = diplomatic_action_overlord_increase_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_subject_increase_own_autonomy = {
	effect = {
		post_notification = diplomatic_action_subject_increase_own_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomats_expelled = {
	effect = {
		if = {
			limit = {
				scope:initiator = {
					has_variable = we_are_not_amused_ach_possible
				}
				scope:target = {
					c:FRA ?= this
					"relations(scope:initiator)" >= -10 #Why? Because the on_action fires after the opinion malus from expel diplomats occurs.
				}
			}
			scope:initiator = {
				set_variable = achievement_we_are_not_amused
			}
		}
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_auto_break = {
	effect = {
		post_notification = diplomatic_pact_auto_break_notification
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_third_party_auto_break = {
	effect = {
		post_notification = diplomatic_pact_third_party_auto_break_notification
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_independent = {
	effect = {
		if = {
			limit = {
				c:NEN ?= scope:target
			}
			scope:target = {
				create_character = {
					ig_leader = yes
					interest_group = ig_rural_folk
					ideology = ideology_luddite
				}
			}
		}
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = cu:sephardic
				add_homeland = cu:ashkenazi
			}
		}
		if = {
			limit = {
				scope:target = {
					OR = {
						country_has_primary_culture = cu:afro_caribbean
						country_has_primary_culture = cu:afro_antillean
						country_has_primary_culture = cu:afro_american
						country_has_primary_culture = cu:afro_caribeno
						country_has_primary_culture = cu:afro_brazilian
					}
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
			}
			scope:target = {
				trigger_event = { id = slave_revolt_events.1 days = 0 }
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_own_subject = {
	effect = {
		if = {
			limit = {
				c:NEN ?= scope:target
			}
			scope:target = {
				create_character = {
					ig_leader = yes
					interest_group = ig_rural_folk
					ideology = ideology_luddite
				}
			}
		}
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = cu:sephardic
				add_homeland = cu:ashkenazi
			}
		}
		scope:target = {
			if = {
				limit = {
					country_has_state_religion = rel:theravada
				}
				ig:ig_devout = {
					set_interest_group_name = ig_theravada_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					exists = c:RUS
					c:RUS = scope:target
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_russian_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:orthodox
					OR = {
						NOT = { exists = c:RUS }
						NOT = { c:RUS = scope:target }
					}
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_orthodox_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:hindu
				}
				ig:ig_devout = {
					set_interest_group_name = ig_hindu_priesthood
					remove_ideology = ideology_hindu_moralist
					add_ideology = ideology_hindu_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:gelugpa
				}
				ig:ig_devout = {
					set_interest_group_name = ig_vajrayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:mahayana
				}
				ig:ig_devout = {
					set_interest_group_name = ig_mahayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:sikh
				}
				ig:ig_devout = {
					set_interest_group_name = ig_sikh_priesthood
					remove_ideology = ideology_moralist
					add_ideology = ideology_sikh_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:oriental_orthodox
				}
				ig:ig_devout = {
					set_interest_group_name = ig_oriental_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_oriental_orthodox_patriarch
				}
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_overlord_subject = {
	effect = {
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = cu:sephardic
				add_homeland = cu:ashkenazi
			}
		}
		scope:target = {
			if = {
				limit = {
					country_has_state_religion = rel:theravada
				}
				ig:ig_devout = {
					set_interest_group_name = ig_theravada_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:orthodox
					OR = {
						NOT = { exists = c:RUS }
						NOT = { c:RUS = scope:target }
					}
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_orthodox_patriarch
				}
			}
			if = {
				limit = {
					exists = c:RUS
					c:RUS = scope:target
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_russian_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:hindu
				}
				ig:ig_devout = {
					set_interest_group_name = ig_hindu_priesthood
					remove_ideology = ideology_hindu_moralist
					add_ideology = ideology_hindu_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:gelugpa
				}
				ig:ig_devout = {
					set_interest_group_name = ig_vajrayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:mahayana
				}
				ig:ig_devout = {
					set_interest_group_name = ig_mahayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:sikh
				}
				ig:ig_devout = {
					set_interest_group_name = ig_sikh_priesthood
					remove_ideology = ideology_moralist
					add_ideology = ideology_sikh_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:oriental_orthodox
				}
				ig:ig_devout = {
					set_interest_group_name = ig_oriental_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_oriental_orthodox_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:confucian
				}
				ig:ig_devout = {
					set_interest_group_name = ig_confucian
					remove_ideology = ideology_pious
					remove_ideology = ideology_moralist
					add_ideology = ideology_confucian
				}
			}
		}
	}
}

# Root = Country
on_country_formed = {
	effect = {
		if = {
			limit = {
				c:LAO ?= ROOT
			}
			trigger_event = { id = formation.1 popup = yes }
		}
        else_if = {
			limit = {
				c:PLT ?= THIS
				was_formed_from = PRG
				has_variable = patino_paraguay_var
			}
			add_primary_culture = cu:guarani
		}
		else_if = {
			limit = {
				c:UBD ?= ROOT
			}
			trigger_event = { id = formation.2 popup = yes }
		}
		else_if = {
			limit = {
				c:BYZ ?= ROOT
			}
			trigger_event = { id = formation.3 popup = yes }
		}
		else_if = {
			limit = {
				c:IBE ?= ROOT
			}
			trigger_event = { id = formation.5 popup = yes }
		}
		else_if = {
			limit = {
				OR = {
					c:BRZ ?= ROOT
					c:USA ?= ROOT
					c:SAF ?= ROOT
				}
			}
			trigger_event = { id = formation.6 popup = yes }
		}
		else_if = {
			limit = {
				c:KUK ?= ROOT
			}
			trigger_event = { id = formation.7 popup = yes }
		}
		else_if = {
			limit = {
				c:ARA ?= ROOT
			}
			trigger_event = { id = formation.8 popup = yes }
		}
		else_if = {
			limit = {
				c:YUG ?= ROOT
			}
			trigger_event = { id = formation.9 popup = yes }
		}
		else_if = {
			limit = {
				c:SCA ?= ROOT
			}
			trigger_event = { id = formation.10 popup = yes }
		}
		else_if = {
			limit = {
				c:MAL ?= ROOT
			}
			trigger_event = { id = formation.11 popup = yes }
		}
		else_if = {
			limit = {
				c:TRH ?= ROOT
			}
			trigger_event = { id = formation.12 popup = yes }
		}
		else_if = {
			limit = {
				c:IDN ?= ROOT
			}
			trigger_event = { id = formation.13 popup = yes }
		}
		else_if = {
			limit = {
				c:BHT ?= ROOT
			}
			trigger_event = { id = formation.14 popup = yes }
		}
		else_if = {
			limit = {
				c:YEM ?= ROOT
			}
			trigger_event = { id = formation.15 popup = yes }
		}
		else_if = {
			limit = {
				c:KAZ ?= ROOT
			}
			trigger_event = { id = formation.16 popup = yes }
		}
		else_if = {
			limit = {
				c:HRE ?= ROOT
			}
			trigger_event = { id = formation.18 popup = yes }
		}
		else_if = {
			limit = {
				c:UNL ?= ROOT
			}
			trigger_event = { id = formation.19 popup = yes }
		}
		else_if = {
			limit = {
				c:RHN ?= ROOT
			}
			trigger_event = { id = formation.20 popup = yes }
		}
		else_if = {
			limit = {
				c:CLI ?= ROOT
			}
			trigger_event = { id = formation.21 popup = yes }
		}
		else_if = {
			limit = {
				c:GER ?= ROOT
			}
			trigger_event = { id = german_unification.4 popup = yes }
		}
		else_if = {
			limit = {
				c:ITA ?= ROOT
			}
			trigger_event = { id = italian_unification.1 popup = yes }
		}
		else_if = {
			limit = {
				c:AFG ?= ROOT
				has_journal_entry = je_unify_afghanistan
			}
			if = {
				limit = {
					was_formed_from = KUN
				}
				add_primary_culture = cu:uzbek
			}
			if = {
				limit = {
					was_formed_from = MAI
				}
				add_primary_culture = cu:uzbek
				add_primary_culture = cu:turkmen
			}
			trigger_event = { id = gg_afghanistan.4 popup = yes }
		}
		else_if = {
			limit = {
				c:FSA ?= ROOT
			}
			trigger_event = { id = fsa_events.1 popup = yes }
		}
		else = {
			trigger_event = { id = formation.17 popup = yes }
		}

		if = {
			limit = {
				c:CHI ?= this
				has_journal_entry = je_reunify_china
			}
			set_global_variable = { name = chinese_central_government value = ROOT }
		}
	}
}

# Root = State
on_migration_target_created = {
	effect = {
		post_notification = migration_target_created
	}
}

# Root = State
on_migration_target_created_other = {
	effect = {
		post_notification = migration_target_created_other
	}
}

# Root = State
on_resource_discovered = {
	events = {
		goldrush.1
		oil_rush.1
		rubber_events.1
	}
}

# Root = State
on_resource_depleted = {
	effect = {
		state_region = {
			post_notification = resource_depleted
		}
	}
	events = {
		goldrush.2
	}
}

# Root = Country
on_peace_agreement_signed_war_leader = {
	effect = {
		post_notification = peace_agreement_signed_war_leader
	}
}

# Root = Country
on_peace_agreement_signed_war_participant = {
	effect = {
		post_notification = peace_agreement_signed_war_participant
	}
}

# Root = Country
on_peace_agreement_signed_non_participant = {
	effect = {
		post_notification = peace_agreement_signed_non_participant
	}
}

# Root = Country
on_capitulation = {
	effect = {
		if = {
			limit = {
				has_variable = revolutionary_prov_gov_var
			}
			remove_variable = revolutionary_prov_gov_var
		}
		set_variable = {
            name = recently_lost_war
            days = 1825
            value = yes
        }
	}
}

# Root = Country
on_self_capitulated_notification = {
	effect = {
		post_notification = self_capitulated
		set_variable = {
			name = recent_capitulation
			months = short_modifier_time
		}
	}
}

# Root = Country
on_enemy_capitulated_notification = {
	effect = {
		post_notification = enemy_capitulated
	}
}

# Root = Country
on_ally_capitulated_notification = {
	effect = {
		post_notification = ally_capitulated
	}
}

# Root = Formation
on_mobilized_army = {
	effect = {
	}
}

# Root = Formation
on_demobilized_army = {
	effect = {
	}
}

# Root = Character
on_mobilized_general = {
}

# Root = Character
on_demobilized_general = {
}

# Root = Diplomatic Play
on_diplo_play_start = {
	effect = {
		post_notification = diplo_play_start_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_start_third_party = {
	effect = {
		post_notification = diplo_play_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down = {
	effect = {
		post_notification = diplo_play_back_down_notification
		if = {
			limit = {
				scope:notification_target = {
					is_player = yes
				}
				scope:actor = {
					is_player = no
				}
			}
			set_global_variable = achievement_mightier_than_the_sword
		}
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down_involved = {
	effect = {
		post_notification = diplo_play_back_down_involved_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_join_side = {
	effect = {
		post_notification = diplo_play_join_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_abandon_side = {
	effect = {
		post_notification = diplo_play_abandon_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_war_start = {
	effect = {
		post_notification = diplo_play_war_start_notification
		post_notification = diplo_play_war_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released = {
	effect = {
		post_notification = diplo_play_subject_released_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released_overlord = {
	effect = {
		post_notification = diplo_play_subject_released_overlord_notification
	}
}

# Root = Diplomatic Play
# country = Country switched to
# previous = Country switched from
on_diplo_play_switch_sides = {
	effect = {
		set_global_variable = achievement_revo_needed
	}
}

# Root = Diplomatic Play
on_diplo_play_declare_neutrality = {
	effect = {
		post_notification = diplo_play_declare_neutrality_notification
	}
}


# Root = Diplomatic Play
on_sway_offer = {
	effect = {
		post_proposal = proposal_sway_offer
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer = {
	effect = {
		post_proposal = proposal_reverse_sway_offer
	}
}

# Root = Diplomatic Play
on_sway_offer_accepted = {
	effect = {
		post_notification = sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_accepted = {
	effect = {
		post_notification = reverse_sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_country_swayed = {
	effect = {
		post_notification = country_swayed
	}
}

# Root = Diplomatic Play
on_sway_offer_rejected = {
	effect = {
		post_notification = sway_offer_rejected
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_rejected = {
	effect = {
		post_notification = reverse_sway_offer_rejected
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand = {
	effect = {
		post_proposal = proposal_diplomatic_demand
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_accepted = {
	effect = {
		post_notification = diplomatic_demand_accepted
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_rejected = {
	effect = {
		post_notification = diplomatic_demand_rejected
	}
}

# Root = Building
on_production_method_changed = {
	effect = {
		owner = {
			if = {
				limit = { 
					has_journal_entry = je_tutorial_change_production_method
					je:je_tutorial_change_production_method.target = root
				}
				set_variable = has_changed_production_method
			}
		}	
	}
}

# Root = owner Country of the Law
# Executed when enactment of any law begins
on_law_enactment_started = {
	effect = {
		if = {
			limit = {
				has_law = law_type:law_monarchy
				OR = {
					is_enacting_law = law_type:law_presidential_republic
					is_enacting_law = law_type:law_parliamentary_republic
					is_enacting_law = law_type:law_council_republic
				}
			}
			set_variable = {
				name = abolishing_monarchy_var
				value = 0
			}
			add_journal_entry = { type =  je_abolish_monarchy }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is success
on_law_checkpoint_success = {
	effect = {
		add_enactment_phase = 1
		if = {
			limit = {
				enacting_any_law = yes
			}
			trigger_event = { id = law_notification.4 days = 0 }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {
	random_events = {
		10 = laws.1
		10 = children_rights_events.1 
		10 = free_speech_laws.1
		10 = free_speech_laws.2
		10 = labor_rights.1
		10 = labor_rights.4
		10 = children_rights_events.4
		10 = welfare_laws.1
		10 = welfare_laws.4
		10 = welfare_laws.8
		10 = migration_laws.1
		10 = migration_laws.4
		10 = bureaucracy.2
		10 = colonization.1
		10 = colonization.3
		10 = rights_of_women_laws.1
		10 = rights_of_women_laws.2
		10 = internal_security_events.2
		10 = slavery_law_events.1
		10 = slavery_law_events.4
		10 = laws_police.1
		10 = anarchy.3
		10 = tax.2
		10 = tax.5
		10 = theocracy.1
		10 = citizenship_laws.1
		10 = citizenship_laws.4
		100 = 1848.1
		100 = 1848.3
		10 = education_laws.1
		10 = education_laws.4
		10 = distribution_of_power_laws.1
		10 = council_republic_law_events.1
		10 = distribution_of_power_laws.4
		10 = monarchy_law_events.1
		10 = monarchy_law_events.2
		10 = economy_laws.1
		10 = economy_laws.4
		10 = meiji.4
		10 = meiji.5
		10 = meiji.6
		10 = conscription_laws.1
		10 = republic_laws.1
		10 = internal_security_events.4
		10 = healthcare_laws.1
		10 = healthcare_laws.4
		10 = anti_state_religion.1
		10 = distribution_of_power_laws.7
		10 = distribution_of_power_laws.10
		10 = rights_of_women_laws.5
		10 = agitators_law_events.3
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.17
		10 = agitators_law_events.21
		10 = agitators_law_events.22
		10 = agitators_law_events.23
		10 = agitators_law_events.24
		10 = agitators_law_events.25
		10 = agitators_law_events.26
		10 = agitators_law_events.27
		10 = agitators_law_events.28
		10 = agitators_law_events.29
		10 = agitators_law_events.30
		10 = state_atheism.2
		10 = state_atheism.6
		2 = generic_laws.1
		2 = generic_laws.4
		2 = generic_laws.7
		2 = generic_laws.10
		2 = ig_petitions.4 #Devout want State Religion
		2 = ig_petitions.7 #Intelligentsia want free speech
		2 = ig_petitions.19 #Armed forces want conscription
		2 = ig_petitions.22 #Petite-Bourgeoisie want Restricted Citizenship
		1 = law_notification.1
		10 = single_party_state.1
		5 = single_party_state.6
		5 = single_party_state.7
		10 = land_ownership_law_events.2
		10 = land_ownership_law_events.5
		10 = land_ownership_law_events.8
		10 = luddite_law_events.1
		10 = luddite_law_events.4
		10 = agitator_legal_events.21
		10 = agitator_legal_events.22
		10 = agitator_legal_events.23
		10 = agitator_legal_events.24
		10 = agitator_legal_events.25
		10 = agitator_legal_events.26
		10 = agitator_legal_events.27
		10 = agitator_legal_events.28
		10 = agitator_legal_events.29
		10 = agitator_legal_events.30
		10 = land_ownership_law_events.13
		10 = land_ownership_law_events.16
		10 = technocracy.2
		100 = nihilism.13
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {
	random_events = {
		10 = children_rights_events.2
		10 = free_speech_laws.5
		10 = labor_rights.2
		10 = labor_rights.5
		10 = children_rights_events.6
		10 = welfare_laws.2
		10 = welfare_laws.5
		10 = welfare_laws.9
		10 = migration_laws.2
		10 = migration_laws.5
		10 = bureaucracy.3
		10 = colonization.1
		10 = free_speech_laws.5
		10 = free_speech_laws.6
		10 = internal_security_events.3
		10 = slavery_law_events.2
		10 = slavery_law_events.5
		10 = laws_police.2
		10 = anarchy.2
		10 = tax.3
		10 = tax.6
		10 = theocracy.2
		10 = citizenship_laws.2
		10 = citizenship_laws.5
		10 = education_laws.2
		10 = education_laws.5
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.2
		10 = council_republic_law_events.2
		10 = distribution_of_power_laws.5
		10 = monarchy_law_events.3
		10 = economy_laws.2
		10 = economy_laws.5
		10 = isolation.2
		10 = conscription_laws.2
		10 = republic_laws.2
		10 = internal_security_events.5
		10 = healthcare_laws.2
		10 = healthcare_laws.5
		10 = anti_state_religion.2
		10 = colonization.4
		10 = distribution_of_power_laws.8
		10 = distribution_of_power_laws.11
		10 = rights_of_women_laws.4
		10 = rights_of_women_laws.7
		10 = law_events.1
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.5
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = agitators_law_events.13
		10 = agitators_law_events.18
		10 = agitators_law_events.20
		10 = state_atheism.1
		10 = state_atheism.5
		2 = generic_laws.3
		2 = generic_laws.6
		2 = generic_laws.9
		2 = generic_laws.12
		10 = ig_petitions.1 #Landowners want to reverse Suffrage
		10 = ig_petitions.10 #Rural folk want no conscription
		10 = ig_petitions.13 #Trade Unions want compulsory primary school
		20 = ig_petitions.16 #Industrialists want no graduated taxes
		1 = law_notification.2
		10 = single_party_state.2
		10 = land_ownership_law_events.1
		10 = land_ownership_law_events.4
		10 = land_ownership_law_events.7
		10 = luddite_law_events.2
		10 = luddite_law_events.5
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.13
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.16
		10 = agitators_law_events.17
		10 = agitators_law_events.18
		10 = agitators_law_events.19
		10 = agitators_law_events.20
		10 = land_ownership_law_events.12
		10 = land_ownership_law_events.15
		10 = agitator_legal_events.11
		10 = agitator_legal_events.12
		10 = agitator_legal_events.13
		10 = agitator_legal_events.14
		10 = agitator_legal_events.15
		10 = agitator_legal_events.16
		10 = agitator_legal_events.17
		10 = agitator_legal_events.18
		10 = agitator_legal_events.19
		10 = agitator_legal_events.20
		10 = technocracy.3
	}
	events = {
		tanzimat_events.1
		tanzimat_events.2
		tanzimat_events.4
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is stall
on_law_checkpoint_stall = {
	random_events = {
		10 = children_rights_events.3
		10 = free_speech_laws.3
		10 = free_speech_laws.4
		10 = labor_rights.3
		10 = labor_rights.6
		10 = children_rights_events.5
		10 = welfare_laws.3
		10 = welfare_laws.6
		10 = welfare_laws.10
		10 = migration_laws.3
		10 = migration_laws.6
		10 = bureaucracy.1
		10 = colonization.1
		10 = colonization.2
		10 = rights_of_women_laws.3
		10 = internal_security_events.1
		10 = slavery_law_events.3
		10 = slavery_law_events.6
		10 = laws_police.3
		10 = anarchy.1
		10 = tax.1
		10 = tax.4
		10 = theocracy.3
		10 = citizenship_laws.3
		10 = citizenship_laws.6
		10 = education_laws.3
		10 = education_laws.6
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.3
		10 = council_republic_law_events.3
		10 = distribution_of_power_laws.6
		10 = monarchy_law_events.4
		10 = economy_laws.3
		10 = economy_laws.6
		10 = isolation.1
		10 = conscription_laws.3
		10 = republic_laws.3
		10 = internal_security_events.6
		10 = healthcare_laws.3
		10 = healthcare_laws.6
		10 = anti_state_religion.3
		10 = distribution_of_power_laws.9
		10 = distribution_of_power_laws.12
		10 = rights_of_women_laws.6
		10 = agitators_law_events.4
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.16
		10 = agitators_law_events.19
		10 = state_atheism.3
		10 = state_atheism.4
		10 = exiles_more_events.2
		2 = generic_laws.2
		2 = generic_laws.5
		2 = generic_laws.8
		2 = generic_laws.11
		1 = law_notification.3
		10 = single_party_state.3
		50 = single_party_state.4
		50 = single_party_state.5
		10 = land_ownership_law_events.3
		10 = land_ownership_law_events.6
		10 = land_ownership_law_events.9
		10 = luddite_law_events.3
		10 = luddite_law_events.6
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.4
		10 = agitators_law_events.5
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = land_ownership_law_events.10
		10 = land_ownership_law_events.11
		10 = land_ownership_law_events.14
		10 = land_ownership_law_events.17
		10 = land_ownership_law_events.18
		10 = agitator_legal_events.1
		10 = agitator_legal_events.2
		10 = agitator_legal_events.3
		10 = agitator_legal_events.4
		10 = agitator_legal_events.5
		10 = agitator_legal_events.6
		10 = agitator_legal_events.7
		10 = agitator_legal_events.8
		10 = agitator_legal_events.9
		10 = agitator_legal_events.10
		10 = technocracy.1
	}
}

# Root = owner Country of the Law
# Executed when an enacting law is passed by reaching the final enactment phase
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_pass = {
	effect = {
		if = {
			limit = {
				is_player = yes
				NOT = { has_variable = achievement_vox_populi_var }
				any_political_movement = {
					desired_law = ROOT.currently_enacting_law.type
					any_supporting_character = {
						has_role = agitator
					}
				}
			}
			set_variable = achievement_vox_populi_var
		}
		if = {
			limit = {
				is_player = yes
				NOT = {
					has_variable = achievement_amish_paradise_var
				}
				is_enacting_law = law_type:law_industry_banned
				year < 1846
			}
			set_variable = achievement_amish_paradise_var
		}
		if = {
			limit = {
				has_journal_entry = je_pedro_republic
				is_enacting_law = law_type:law_presidential_republic
			}
			set_variable = { name = hide_ruler_change_notification days = 3 }
			ruler = { place_character_in_void = 6 }
			trigger_event = { id = pedro.10 popup = yes days = 1 }
		}
		if = {
			limit = {
				has_modifier = brazil_slaving_pariah_modifier
				has_law = law_type:law_slave_trade
				OR = {
					is_enacting_law = law_type:law_debt_slavery
					is_enacting_law = law_type:law_legacy_slavery
					is_enacting_law = law_type:law_slavery_banned
				}
			}
			remove_modifier = brazil_slaving_pariah_modifier
		}
		if = {
			limit = {
				OR = {
					has_modifier = unrestricted_slave_trade_modifier
					has_modifier = restricted_slave_trade_modifier
					has_modifier = slave_shipments_intercepted_small
					has_modifier = slave_shipments_intercepted_large
				}
				has_law = law_type:law_slave_trade
				OR = {
					is_enacting_law = law_type:law_debt_slavery
					is_enacting_law = law_type:law_legacy_slavery
				}
			}
			if = {
				limit = {
					has_modifier = unrestricted_slave_trade_modifier
				}
				remove_modifier = unrestricted_slave_trade_modifier
			}
			if = {
				limit = {
					has_modifier = restricted_slave_trade_modifier
				}
				remove_modifier = restricted_slave_trade_modifier
			}
			if = {
				limit = {
					has_modifier = slave_shipments_intercepted_small
				}
				remove_modifier = slave_shipments_intercepted_small
			}
			if = {
				limit = {
					has_modifier = slave_shipments_intercepted_large
				}
				remove_modifier = slave_shipments_intercepted_large
			}
			if = {
				limit = {
					has_variable = var_slave_trade_suppression_var
				}
				remove_variable = var_slave_trade_suppression_var
			}
		}
		if = {
			limit = {
				c:CHI ?= {
					has_modifier = opium_ban_authority
					is_enacting_law = law_type:law_free_trade
				}
			}
			remove_modifier = opium_ban_authority
		}
	}
}

# Root = owner Country of the Law
# Executed when enactment fails by accumulating too many setbacks
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_fail = {
	effect = {
		post_notification = enactment_failed
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {
}

# Root owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {
	effect = {
		if = {
			limit = {
				c:BRZ ?= {
					has_journal_entry = je_matter_of_slavery
					OR = {
						has_modifier = unrestricted_slave_trade_modifier
						has_modifier = restricted_slave_trade_modifier
						has_modifier = slave_shipments_intercepted_small
						has_modifier = slave_shipments_intercepted_large
					}
					OR = {
						has_law = law_type:law_debt_slavery
						has_law = law_type:law_legacy_slavery
					}
				}
			}
			c:BRZ ?= {
				if = {
					limit = {
						has_modifier = unrestricted_slave_trade_modifier
					}
					remove_modifier = unrestricted_slave_trade_modifier
				}
				if = {
					limit = {
						has_modifier = restricted_slave_trade_modifier
					}
					remove_modifier = restricted_slave_trade_modifier
				}
				if = {
					limit = {
						has_modifier = slave_shipments_intercepted_small
					}
					remove_modifier = slave_shipments_intercepted_small
				}
				if = {
					limit = {
						has_modifier = slave_shipments_intercepted_large
					}
					remove_modifier = slave_shipments_intercepted_large
				}
				if = {
					limit = {
						has_variable = var_slave_trade_suppression_var
					}
					remove_variable = var_slave_trade_suppression_var
				}
			}
		}
		if = {
			limit = {
				c:BRZ = {
					has_journal_entry = je_matter_of_slavery
					OR = {
						has_law = law_type:law_debt_slavery
						has_law = law_type:law_legacy_slavery
					}
					any_interest_group = {
						has_modifier = restricted_slave_trade_ig_modifier
					}
				}
			}
			c:BRZ ?= {
				every_interest_group = {
					limit = {
						has_modifier = restricted_slave_trade_ig_modifier
					}
					remove_modifier = restricted_slave_trade_ig_modifier
				}
			}
		}
	}
}

# Root = Institution
on_investment_increased = {
	effect = {
		post_notification = institution_investment_increased
	}
}

# Root = Institution
on_investment_decreased = {
	effect = {
		post_notification = institution_investment_decreased
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_start = {
	effect = {
		scope:target ?= {
			enact_preferred_governance_principle = yes
			if = {
				limit = {
					has_law = law_type:law_single_party_state
				}
				handle_revolutionary_sps = yes
			}
		}
		if = {
			limit = {
				has_law = law_type:law_monarchy
				scope:target ?= {
					NOT = {
						has_law = law_type:law_monarchy
					}
				}
			}
			set_variable = anti_monarchist_revolution
		}
		if = {
			limit = {
				has_journal_entry = je_warlord_china
				NOT = { has_variable = china_warlord_explosion_revolution }
			}
			chi_remove_1_fragile_unity = yes
			set_variable = china_warlord_explosion_revolution
		}
		if = {
			limit = {
				OR = {
					has_journal_entry = je_meiji_restoration
					has_inactive_journal_entry = je_meiji_restoration
				}
				scope:target = {
					ig:ig_landowners = {
						is_in_government = yes
					}
				}
			}
			set_variable = anti_shogunate_civil_war
		}
		if = {
			limit = {
				has_journal_entry = je_the_paris_commune_france
			}
			c:FRA = {
				trigger_event = { id = paris_commune.4 popup = yes }
			}
			random_scope_state = {
				limit = {
					state_region = s:STATE_ILE_DE_FRANCE
				}
				set_state_owner = c:PRC
			}
			c:PRC = {
				annex = scope:target
				create_diplomatic_play = {
					type = dp_revolution
					target_state = c:FRA.capital
					annex_as_civil_war = yes
				}
			}
		}
		if = {
			limit = {
				has_dlc_feature = voice_of_the_people_content
				c:KRA ?= root
				c:AUS ?= {
					any_subject_or_below = {
						c:KRA ?= this
					}
				}
			}
			c:AUS = {
				trigger_event = { id = krakow.1 days = 3 popup = yes }
			}
		}
		if = {
			limit = {
				has_dlc_feature = voice_of_the_people_content
				c:FRA ?= ROOT
			}
			if = {
				limit = {
					scope:target = {
						is_secessionist = no
						has_law = law_type:law_monarchy
						any_interest_group = {
							is_in_government = yes
							is_strongest_ig_in_government = yes
							leader = {
								has_ideology = ideology:ideology_orleanist
							}
						}
					}
				}
				scope:target = {
					if = {
						limit = {
							has_variable = bonapartist_restoration_var
						}
						remove_variable = bonapartist_restoration_var
					}
					if = {
						limit = {
							has_variable = legitimist_restoration_var
						}
						remove_variable = legitimist_restoration_var
					}
					set_variable = { name = orleanist_restoration_var }
					if = {
						limit = {
							ROOT.ruler = {
								has_ideology = ideology:ideology_orleanist
							}
						}
						create_character = {
							template = dynamic_orleanist_ruler_template
						}
					}
					else = {
						generate_french_monarch = yes
					}
				}
			}
			else_if = {
				limit = {
					scope:target = {
						is_secessionist = no
						has_law = law_type:law_monarchy
						any_interest_group = {
							is_in_government = yes
							is_strongest_ig_in_government = yes
							leader = {
								has_ideology = ideology:ideology_legitimist
							}
						}
					}
				}
				scope:target = {
					if = {
						limit = {
							has_variable = bonapartist_restoration_var
						}
						remove_variable = bonapartist_restoration_var
					}
					if = {
						limit = {
							has_variable = orleanist_restoration_var
						}
						remove_variable = orleanist_restoration_var
					}
					set_variable = { name = legitimist_restoration_var }
					if = {
						limit = {
							ROOT.ruler = {
								has_ideology = ideology:ideology_legitimist
							}
						}
						create_character = {
							template = dynamic_legitimist_ruler_template
						}
					}
					else = {
						generate_french_monarch = yes
					}
				}
			}
			else_if = {
				limit = {
					scope:target = {
						is_secessionist = no
						has_law = law_type:law_monarchy
						any_interest_group = {
							is_in_government = yes
							is_strongest_ig_in_government = yes
							leader = {
								has_ideology = ideology:ideology_bonapartist
							}
						}
					}
				}
				scope:target = {
					if = {
						limit = {
							has_variable = orleanist_restoration_var
						}
						remove_variable = orleanist_restoration_var
					}
					if = {
						limit = {
							has_variable = legitimist_restoration_var
						}
						remove_variable = legitimist_restoration_var
					}
					set_variable = { name = bonapartist_restoration_var }
					if = {
						limit = {
							ROOT.ruler = {
								has_ideology = ideology:ideology_bonapartist
							}
						}
						create_character = {
							template = dynamic_bonapartist_ruler_template
						}
					}
					else = {
						generate_french_monarch = yes
					}
				}
			}
		}
		if = {
			limit = {
				has_dlc_feature = ep1_content
				c:KOR ?= ROOT
				c:JAP ?= {
					NOT = {
						has_law = law_type:law_isolationism
					}
					has_interest_marker_in_region = region_manchuria
					has_technology_researched = electric_telegraph
				}
				any_country = {
					OR = {
						country_has_primary_culture = cu:han
						country_has_primary_culture = cu:manchu
					}
					any_subject_or_below = {
						c:KOR = this
					}
					has_technology_researched = electric_telegraph
				}
			}
			c:JAP = {
				trigger_event = { id = gg_korea.7 popup = yes }
			}
			random_country = {
				limit = {
					OR = {
						country_has_primary_culture = cu:han
						country_has_primary_culture = cu:manchu
					}
					any_subject_or_below = {
						c:KOR = this
					}
				}
				trigger_event = { id = gg_korea.7 popup = yes }
			}
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_end = {
}

# Root = Country
# scope:target = Uprising country
on_secession_start = {
	effect = {
		if = {
			limit = {
				has_journal_entry = je_warlord_china
				NOT = { has_variable = china_warlord_explosion_revolution }
			}
			chi_remove_1_fragile_unity = yes
			set_variable = china_warlord_explosion_revolution
		}
		if = {
			limit = {
				NOT = {
					exists = c:RSM
				}
				scope:target = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
				ROOT = {
					NOR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
				any_country = {
					has_journal_entry = je_risorgimento
				}
			}
			root = {
				trigger_event = { id = italian_unification.7 days = 3 }
			}
		}
		if = {
			limit = {
				NOR = {
			        c:POL ?= this
			        c:KRA ?= this
			        AND = {
			            c:GAL ?= this
			            ruler = {
			                culture = cu:polish
			            }
			        }
				}
				scope:target = {
					OR = {
			            c:POL ?= this
			            c:KRA ?= this
			            AND = {
			                c:GAL ?= this
			                ruler = {
			                    culture = cu:polish
			                }
			            }
			        }
				}
				OR = {
					c:POL ?= {
						NOT = {
							this = scope:target
						}
					}
					c:KRA ?= {
						NOT = {
							this = scope:target
						}
					}
					c:GAL ?= {
						NOT = {
							this = scope:target
						}
					}
				}
			}
			scope:target = {
				set_variable = {
					name = polish_rebel_country_var
					months = short_modifier_time
				}
			}
			set_variable = {
				name = polish_rebel_country_enemy_var
				months = short_modifier_time
			}
			every_country = {
				limit = {
					OR = {
						c:POL ?= this
						c:KRA ?= this
			            AND = {
			                c:GAL ?= this
			                ruler = {
			                    culture = cu:polish
			                }
			            }
					}
					NOT = {
						this = scope:target
					}

				}
				trigger_event = { id = poland_events.5 days = 7 popup = yes }
			}
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_secession_end = {
}

# Root = Country
# This action is triggered after `on_revolution_end`
on_civil_war_won = {
	effect = {
		if = {
			limit = {
				has_global_variable = achievement_revo_needed
			}
			set_global_variable = achievement_revolutionary
		}
		if = {
			limit = {
				has_journal_entry = je_meiji_restoration
				has_variable = anti_shogunate_civil_war
				has_variable = shogunate_var
			}
			change_variable = {
				name = shogunate_var
				add = 120
			}
			remove_variable = anti_shogunate_civil_war
		}
		if = {
			limit = {
				has_variable = anti_monarchist_revolution
			}
			if = {
				limit = {
					NOT = {
						has_law = law_type:law_monarchy
					}
				}
				set_variable = {
					name = abolishing_monarchy_var
					value = 0
				}
				add_journal_entry = { type = je_abolish_monarchy }
			}
			remove_variable = anti_monarchist_revolution
		}
		if = {
			limit = {
				has_law = law_type:law_presidential_republic
				has_variable = revolutionary_prov_gov_var
			}
			trigger_event = { id = provisional_government_events.1 days = 7 popup = yes }
		}

		##### FRENCH MONARCHISTS WHEN A CIVIL WAR IS WON #####

		### Orleanists
		if = {
			limit = {
				c:FRA ?= this
				has_law = law_type:law_monarchy
				any_interest_group = {
					is_in_government = yes
					is_strongest_ig_in_government = yes
					leader = {	
						has_ideology = ideology:ideology_orleanist
					}
				}
				NOT = { has_variable = one_true_french_dynasty }
			}

			### Reset AI to support Orleanists. Players can continue to support any dynasty they like ###
			if = {
				limit = {
					is_player = no
					has_variable = supporting_bonapartist_var
				}
				remove_variable = supporting_bonapartist_var
			}
			if = {
				limit = {
					is_player = no
					has_variable = supporting_legitimist_var
				}
				remove_variable = supporting_legitimist_var
			}
			if = {
				limit = {
					is_player = no
					NOT = { has_variable = supporting_orleanist_var }
				}
				set_variable = {
					name = supporting_orleanist_var
				}
			}
			### 

			# Generate an Orleanist monarch if somehow there's not an Orleanist in charge and it's either the AI, or the player has set a restoration variable and something's just gotten buggy. 
			# If France is controlled by a player and a dynasty other than the Orleanists has been restored to the throne, nothing in this section applies.
			if = {
				limit = {
					any_scope_character = {
						is_ruler = yes
						NOT = { has_variable = orleanist_leader }
					}
					OR = {
						is_player = no
						AND = {
							is_player = yes
							has_variable = orleanist_restoration_var
						}
					}
				}
				generate_french_monarch = yes
				if = {
					limit = {
						has_variable = bonapartist_restoration_var
					}
					remove_variable = bonapartist_restoration_var
				}
				if = {
					limit = {
						has_variable = legitimist_restoration_var
					}
					remove_variable = legitimist_restoration_var
				}
				if = {
					limit = {
						NOT = { has_variable = orleanist_restoration_var }
					}
					set_variable = orleanist_restoration_var
				}
			}
			###

			# If France somehow doesn't have the monarchist JEs, it (re)gains them
			if = {
				limit = {
					NOT = { has_journal_entry = je_divided_monarchists }
					has_dlc_feature = voice_of_the_people_content
				}
				if = {
					limit = {
						has_variable = fra_divided_monarchists_freeze
					}
					remove_variable = fra_divided_monarchists_freeze
				}
				add_journal_entry = {
					type = je_divided_monarchists
				}
			}

			if = {
				limit = {
					has_variable = orleanist_restoration_var
					NOT = { has_journal_entry = je_cement_the_rightful_dynasty }
					has_dlc_feature = voice_of_the_people_content
				}
				add_journal_entry = {
					type = je_cement_the_rightful_dynasty
				}
			}
		}

		### Bonapartists
		else_if = {
			limit = {
				c:FRA ?= this
				has_law = law_type:law_monarchy
				any_interest_group = {
					is_in_government = yes
					is_strongest_ig_in_government = yes
					leader = {	
						has_ideology = ideology:ideology_bonapartist
					}
				}
				NOT = { has_variable = one_true_french_dynasty }
			}

			### Reset AI to support Bonapartists. Players can continue to support any dynasty they like ###
			if = {
				limit = {
					is_player = no
					has_variable = supporting_orleanist_var
				}
				remove_variable = supporting_orleanist_var
			}
			if = {
				limit = {
					is_player = no
					has_variable = supporting_legitimist_var
				}
				remove_variable = supporting_legitimist_var
			}
			if = {
				limit = {
					is_player = no
					NOT = { has_variable = supporting_bonapartist_var }
				}
				set_variable = {
					name = supporting_bonapartist_var
				}
			}
			### 

			# Generate a Bonapartist monarch if somehow there's not an Bonapartist in charge and it's either the AI, or the player has set a restoration variable and something's just gotten buggy. 
			# If France is controlled by a player and a dynasty other than the glorious house of Bonaparte has been restored to the throne, nothing in this section applies.
			if = {
				limit = {
					any_scope_character = {
						is_ruler = yes
						NOT = { has_variable = bonapartist_leader }
					}
					OR = {
						is_player = no
						AND = {
							is_player = yes
							has_variable = bonapartist_restoration_var
						}
					}
				}
				generate_french_monarch = yes
				if = {
					limit = {
						has_variable = orleanist_restoration_var
					}
					remove_variable = orleanist_restoration_var
				}
				if = {
					limit = {
						has_variable = legitimist_restoration_var
					}
					remove_variable = legitimist_restoration_var
				}
				if = {
					limit = {
						NOT = { has_variable = bonapartist_restoration_var }
					}
					set_variable = bonapartist_restoration_var
				}
			}
			###

			# If France somehow doesn't have the monarchist JEs, it (re)gains them
			if = {
				limit = {
					NOT = { has_journal_entry = je_divided_monarchists }
					has_dlc_feature = voice_of_the_people_content
				}
				if = {
					limit = {
						has_variable = fra_divided_monarchists_freeze
					}
					remove_variable = fra_divided_monarchists_freeze
				}
				add_journal_entry = {
					type = je_divided_monarchists
				}
			}

			if = {
				limit = {
					has_variable = bonapartist_restoration_var
					NOT = { has_journal_entry = je_cement_the_rightful_dynasty }
					has_dlc_feature = voice_of_the_people_content
				}
				add_journal_entry = {
					type = je_cement_the_rightful_dynasty
				}
			}
		}

		### Legitimists
		else_if = {
			limit = {
				c:FRA ?= this
				has_law = law_type:law_monarchy
				any_interest_group = {
					is_in_government = yes
					is_strongest_ig_in_government = yes
					leader = {	
						has_ideology = ideology:ideology_legitimist
					}
				}
				NOT = { has_variable = one_true_french_dynasty }
			}

			### Reset AI to support Legitimists. Players can continue to support any dynasty they like ###
			if = {
				limit = {
					is_player = no
					has_variable = supporting_bonapartist_var
				}
				remove_variable = supporting_bonapartist_var
			}
			if = {
				limit = {
					is_player = no
					has_variable = supporting_orleanist_var
				}
				remove_variable = supporting_orleanist_var
			}
			if = {
				limit = {
					is_player = no
					NOT = { has_variable = supporting_legitimist_var }
				}
				set_variable = {
					name = supporting_legitimist_var
				}
			}
			### 

			# Generate a Legitimist monarch if somehow there's not an Legitimist in charge and it's either the AI, or the player has set a restoration variable and something's just gotten buggy. 
			# If France is controlled by a player and a dynasty other than the house of Bourbon has been restored to the throne, nothing in this section applies.
			if = {
				limit = {
					any_scope_character = {
						is_ruler = yes
						NOT = { has_variable = legitimist_leader }
					}
					OR = {
						is_player = no
						AND = {
							is_player = yes
							has_variable = legitimist_restoration_var
						}
					}
				}
				generate_french_monarch = yes
				if = {
					limit = {
						has_variable = orleanist_restoration_var
					}
					remove_variable = orleanist_restoration_var
				}
				if = {
					limit = {
						has_variable = bonapartist_restoration_var
					}
					remove_variable = bonapartist_restoration_var
				}
				if = {
					limit = {
						NOT = { has_variable = legitimist_restoration_var }
					}
					set_variable = legitimist_restoration_var
				}
			}
			###

			# If France somehow doesn't have the monarchist JEs, it (re)gains them
			if = {
				limit = {
					NOT = { has_journal_entry = je_divided_monarchists }
					has_dlc_feature = voice_of_the_people_content
				}
				if = {
					limit = {
						has_variable = fra_divided_monarchists_freeze
					}
					remove_variable = fra_divided_monarchists_freeze
				}
				add_journal_entry = {
					type = je_divided_monarchists
				}
			}

			if = {
				limit = {
					has_variable = legitimist_restoration_var
					NOT = { has_journal_entry = je_cement_the_rightful_dynasty }
					has_dlc_feature = voice_of_the_people_content
				}
				add_journal_entry = {
					type = je_cement_the_rightful_dynasty
				}
			}
		}
	}
}

on_revolution_checkpoint_reached = {
	effect = {
	}
	random_events = {
		# IGs and Revolutions
		5 = ig_revolutions.1
		5 = ig_revolutions.2
		5 = ig_revolutions.3
		5 = ig_revolutions.4
		5 = ig_revolutions.5
		5 = ig_revolutions.6
		5 = ig_revolutions.7
		5 = ig_revolutions.8
		5 = ig_revolutions.9
		10 = revolution_pulse_events.1
		10 = revolution_pulse_events.2
		10 = revolution_pulse_events.3
		10 = revolution_pulse_events.4
		10 = revolution_pulse_events.5
		10 = revolution_pulse_events.6
		10 = revolution_pulse_events.7
		10 = revolution_pulse_events.8
		10 = revolution_pulse_events.9
		10 = revolution_pulse_events.10
		10 = revolution_pulse_events.11
		10 = revolution_pulse_events.12
		10 = revolution_pulse_events.13
		30 = revolution_pulse_events.14
		30 = revolution_pulse_events.15
		30 = revolution_pulse_events.16
		30 = revolution_pulse_events.17
		30 = revolution_pulse_events.18
		30 = revolution_pulse_events.19
		30 = revolution_pulse_events.20
		10 = revolution_pulse_events.21
		10 = revolution_pulse_events.22
		10 = revolution_pulse_events.23
		10 = revolution_pulse_events.24
		10 = revolution_pulse_events.25
		10 = revolution_pulse_events.26
		10 = revolution_pulse_events.27
		10 = revolution_pulse_events.28
		10 = revolution_pulse_events.29
		10 = revolution_pulse_events.30
		10 = revolution_pulse_events.31
		10 = revolution_pulse_events.32
		10 = revolution_pulse_events.33
		10 = revolution_pulse_events.34
		10 = revolution_pulse_events.35
		10 = revolution_pulse_events.36
		10 = revolution_pulse_events.37
		10 = revolution_pulse_events.38
		10 = revolution_pulse_events.39
		10 = revolution_pulse_events.40
		10 = revolution_pulse1_events.1
		10 = revolution_pulse1_events.2
		10 = revolution_pulse1_events.3
		10 = revolution_pulse1_events.4
		10 = revolution_pulse1_events.5
		10 = revolution_pulse1_events.6
		10 = revolution_pulse1_events.7
		10 = revolution_pulse1_events.8
		10 = revolution_pulse1_events.9
		10 = revolution_pulse1_events.10
		10 = revolution_pulse1_events.11
		10 = revolution_pulse1_events.12
		10 = revolution_pulse1_events.15
		10 = revolution_pulse1_events.16
		10 = revolution_pulse1_events.17
		10 = revolution_pulse1_events.18
		10 = revolution_pulse1_events.19
		10 = revolution_pulse2_events.1
		10 = revolution_pulse2_events.2
		10 = revolution_pulse2_events.3
		10 = revolution_pulse2_events.4
		10 = revolution_pulse2_events.5
		10 = revolution_pulse2_events.7
		10 = revolution_pulse2_events.9
		10 = revolution_pulse2_events.10
	}
}

on_secession_checkpoint_reached = {
	effect = {
	}
}

# Root = Political Movement
on_political_movement_supported_law_cancelled = {
	effect = {
		add_modifier = {
			name = supported_law_cancelled
			months = 120
		}
	}
}

# Root = Country
# scope:target = the country the wargoal was enforced against
# scope:diplomatic_play = the relevant diplomatic play
# scope:wargoal_impact = the impact of the wargoal enforced
on_wargoal_enforced = {
	effect = {
		if = {
			limit = {
				OR = {
					AND = {
						has_journal_entry = je_anti_lobby_demand
						var:anti_lobby_demand_target ?= scope:target
					}
					AND = {
						has_journal_entry = je_pro_lobby_demand
						var:pro_lobby_demand_target ?= scope:target
					}
				}
			}
			set_variable = { name = enforced_wargoal_on_enemy days = 90 }
		}
		set_variable = {
            name = recently_won_war
            days = 1825
            value = yes
        }
        if = {
        	limit = {
        		c:PRC ?= root
        		NOT = {
        			exists = c:FRA
        		}
        	}
        	c:PRC = {
				set_immune_to_revolutions = no
				change_tag = FRA
				every_scope_state = {
					limit = {
						state_region = {
							is_homeland = cu:french
						}
					}
					set_state_type = incorporated
				}
        	}
        }
		if = {
			limit = {
				c:FRA ?= root
				NOT = {
					exists = c:PRC
				}
			}
			if = {
				limit = {
					c:FRA = {
						is_immune_to_revolutions = yes
					}
				}
				set_immune_to_revolutions = no
			}
		}
        if = {
        	limit = {
        		owner = {
	        		c:PNI ?= this
	        		has_variable = ragamuffin_nation_var
	        		NOT = { has_variable = won_ragamuffin_war_var }
					owns_entire_state_region = STATE_RIO_GRANDE_DO_SUL
					owns_entire_state_region = STATE_SANTA_CATARINA
				}
        	}
        	owner = {
        		set_variable = won_ragamuffin_war_var
        		trigger_event = { id = brazilian_minors.1 days = 0 popup = yes }
        	}
        }
        if = {
        	limit = {
        		owner = {
        			game_date < 1850.1.1 # Just in case.
        			NOT = {
        				has_variable = cabanagem_defeat_var
        				exists = c:PRA
        			}
	        		c:BRZ ?= this
					owns_entire_state_region = STATE_PARA
					any_scope_state = { state_region = s:STATE_AMAZONAS }
				}
        	}
        	owner = {
        		set_variable = cabanagem_defeat_var
        		trigger_event = { id = brazilian_minors.2 days = 0 popup = yes }
        	}
        }
        if = {
        	limit = {
        		owner = {
        			game_date < 1850.1.1 # Just in case.
        			NOT = {
        				has_variable = ragamuffin_defeat_var
        				exists = c:PNI
        			}
	        		c:BRZ ?= this
					owns_entire_state_region = STATE_RIO_GRANDE_DO_SUL
				}
        	}
        	owner = {
        		set_variable = ragamuffin_defeat_var
        		trigger_event = { id = brazilian_minors.3 days = 0 popup = yes }
        	}
        }
        if = {
        	limit = {
        		owner = {
	        		c:PER ?= this
					NOT = {
						any_scope_state = {
							state_region = s:STATE_HERAT
						}
					}
					has_modifier = modifier_herat_inspiration
				}
        	}
        	owner = {
        		remove_modifier = modifier_herat_inspiration
        	}
        }
		if = {
			limit = {
				scope:target = {
					has_journal_entry = je_earn_recognition
				}
			}
			scope:target = {
				change_variable = {
					name = recognition_progress_var
					add = {
						add = scope:wargoal_impact
						multiply = -4
					}
				}
			}
		}
		if = {
			limit = {
				owner = {
					has_journal_entry = je_earn_recognition
				}
				scope:target = {
					OR = {
						is_country_type = recognized
						is_country_type = colonial
					}
					country_rank >= rank_value:major_power
				}
			}
			owner = {
				change_variable = {
					name = recognition_progress_var
					add = {
						add = scope:wargoal_impact
						multiply = 4
					}
				}
			}
		}
	}
}

# Root = Interest Group
on_ig_resigned_government = {
	effect = {
		post_notification = ig_resigned_government
		if = {
			limit = {
				owner = {
					has_journal_entry = je_coup
				}
			}
			root = {
				set_variable = resigned_from_gov_coup
			}
		}
		if = {
			limit = {
				owner = {
					has_law = law_type:law_single_party_state
					any_active_party = {
						any_member = {
							is_in_government = no
							is_insurrectionary = yes
						}
					}
				}
			}
			owner = {
				trigger_event = { id = government_collapse.1 popup = yes }
			}
		}
	}
}

# Root = Culture
on_new_culture_obsession = {
	effect = {
		post_notification = new_culture_obsession
	}
}

# Root = Country
on_rank_changed = {
	effect = {
		post_notification = rank_changed_notification
	}
}

# Root = Country (that owns a state in the state region)
# scope:actor = Claimant country
# scope:region = State Region
on_claim_added = {
	effect = {
		post_notification = claim_added_notification
	}
}

# Root = Country (in which the company is established)
# scope:company = The company that was established
on_company_established = {
	effect = {
	}
}

# Root = Country (in which the company was disbanded)
# scope:company = The company that was disbanded
on_company_disbanded = {
	effect = {
	}
}

# Root = Character
on_heir_born = {
	effect = {
		post_notification = heir_born_notification
		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = orleanist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = orleanist_leader }
					set_ideology = ideology:ideology_orleanist
				}
			}
		}
		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = legitimist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = legitimist_leader }
					set_ideology = ideology:ideology_legitimist
				}
			}
		}

		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = bonapartist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = bonapartist_leader }
					set_ideology = ideology:ideology_bonapartist
				}
			}
		}
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_helped_by_home_country = {
	effect = {
		annex = scope:target
	}
}

# Root = Home Countr
# scope:target = Secession country
on_secession_country_not_helped_by_home_country = {
	effect = {
		trigger_event = { id = civil_war_events.1 days = 0 }
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_added = {
	effect = {
		post_notification = wargoal_added
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_removed = {
	effect = {
		post_notification = wargoal_removed
	}
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {
	effect = {
		scope:actor = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    } 
		    #set_variable = { #Available to use whenever needed
		    #	name = most_recent_war_opponent
		    #	value = scope:target
		    #}
		}
		scope:target = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    }
		    #set_variable = { 
		    #	name = most_recent_war_opponent
		    #	value = scope:actor
		    #}
		}
	}	
}

# Root = journal entry
on_journal_entry_activated = {
	effect = {
		post_notification = journal_entry_activated
	}
}

# Root = journal entry
on_journal_entry_deactivated = {
	effect = {
		post_notification = journal_entry_deactivated
	}
}

# Root = journal entry
on_journal_entry_completed = {
	effect = {
		post_notification = journal_entry_completed
	}
}

# Root = journal entry
on_journal_entry_failed = {
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
	}
}

# Root = state
on_state_incorporation = {
	effect = {
		
	}
}

# Root = political movement
on_political_movement_formed = {
	effect = {
		post_notification = political_movement_formed
	}
}

# Root = political movement
on_political_movement_disbanded = {
	effect = {
		post_notification = political_movement_disbanded
	}
}

# Root = Colony state
on_colony_created = {
	effect = {
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_colonize_state
				}
				root = {
					set_variable = {
						name = tut_colony_target
					}
				}
			}
		}
	}
}

# Root = Strategic Region
# scope:actor = Aggressor country
# scope:target = Target country
on_diplomatic_incident = {
	effect = {
		
	}
}

# Root = Objective
on_sub_objective_completed = {
}

# Root = Objective
on_sub_objective_failed = {
}

# Root = Objective
on_objective_completed = {
	effect = {
		debug_log = "Objective completed"
	}
}

# Root = Country
# scope:target = Party created
on_party_created = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Created"
	}
}

# Root = Country
# scope:target = Party disbanded
on_party_disbanded = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Disbanded"
	}
}

# Root = Country
on_election_campaign_start = {
	effect = {
		debug_log = "Election Campaign Started"
	}
}

# Root = Country
on_election_campaign_end = {
	effect = {
		debug_log = "Election Campaign Ended"
		if = {
			limit = {
				c:BRZ ?= this
			}
			set_variable = { name = brz_election_done months = 3 }
		}
	}
}

# Root = Country
on_government_reformed = {
	effect = {
		# Government Petition
		set_variable = gov_petition_coin_toss
	}
}

# Root = Country
on_obligation_owed_by_us_expired = {
	effect = {
		post_notification = obligation_owed_by_us_expired
	}
}

# Root = Country
on_obligation_owed_to_us_expired = {
	effect = {
		post_notification = obligation_owed_to_us_expired
	}
}

# Root = Country
on_start_supporting_unification = {
	effect = {
		post_notification = start_supporting_unification
	}
}

# Root = Country
on_unification_candidate_added = {
	effect = {
		post_notification = unification_candidate_added
	}
}

# Root = Country
on_unification_candidate_removed = {
	effect = {
		post_notification = unification_candidate_removed
	}
}

# Root = Country
on_stop_supporting_unification = {
	effect = {
		post_notification = stop_supporting_unification
	}
}

# Root = Country
# scope:region - the sea region where the raid happened
on_enemy_convoys_raided = {
	effect = {
		post_notification = enemy_convoys_raided
	}
}

# Root = Country
# scope:region - the sea region where the raid happened
on_our_convoys_raided = {
	effect = {
		post_notification = our_convoys_raided
	}
}

# Root = Country
on_repudiate_obligation = {
	effect = {
		scope:target_country = {
			change_relations = { country = root value = -50 }
			hidden_effect = {
				random_list = {
					50 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}				
					}
					50 = {}
				}
			}		
		}
		every_country = {
			limit = { 
				NOT = { this = scope:target_country }
				root = { owes_obligation_to = prev } 
			}
			change_relations = { country = root value = -30 }
			hidden_effect = {
				random_list = {
					25 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}					
					}
					75 = {}
				}
			}
		}		
		hidden_effect = { # Should not stack the modifier
			if = { 
				limit = { has_modifier = repudiated_obligation } 
				remove_modifier = repudiated_obligation
			}			
		}
		add_modifier = {
			name = repudiated_obligation
			months = normal_modifier_time
			is_decaying = yes			
		}		
	}
}

# Root = Character
on_character_recruitment = {
	effect = {
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_recruit_promote_commander
				}
				je:je_tutorial_recruit_promote_commander = {
					set_variable = {
						name = tut_commander_target
						value = root
					}
					set_variable = {
						name = tut_commander_target_initial_rank
						value = root.commander_rank
					}
				}
			}
		}
	}
}

# This on-action is triggered in cases where there is no overriding on_impose effect on a law type. In case an on_impose effect exists on the law type, this will NOT be executed.
# Root = country being imposed upon
# scope:initiator = country doing the imposition
# scope:law = law being imposed
on_impose_law = {
	effect = {
		add_modifier = {
			name = impose_law_cooldown
			multiplier = 365
			days = 365
			is_decaying = yes
		}
		scope:law = {
			save_scope_as = foreign_imposition_law
		}
		save_scope_as = country_imposed_upon
		scope:initiator = {
			post_notification = imposition_demand_sent
			save_scope_as = foreign_imposition_country
		}
		trigger_event = { id = law_imposition_events.1 days = 0 popup = yes }
	}
}

# This on-action is triggered every time a Power Bloc's Power Struggle starts.
# Root = Country that started the Power Struggle (other interesting scopes, such as Power Bloc leader, can be inferred from root)
on_power_bloc_struggle_started = {
	effect = {
		if = {
			limit = {
				is_player = yes
			}
			set_variable = achievement_im_the_captain_now_challanger_var
		}
	}
}

# This on-action is triggered every time a Power Bloc's Power Struggle concludes (after the changes in leadership have been made).
# Root = Power Bloc whose leadership position is being fought over
# scope:successful_contender = country that won the Power Struggle
# scope:failed_contender = country that lost the Power Struggle
on_power_bloc_struggle_ended = {
	effect = {
		if = { 
			limit = { 
				scope:successful_contender ?= {
					has_variable = achievement_im_the_captain_now_challanger_var
					is_player = yes
					NOT = { has_variable = achievement_im_the_captain_now }
				}
			}
			scope:successful_contender = {
				set_variable = achievement_im_the_captain_now
			}
		}
		if = {
			limit = {
				scope:successful_contender ?= {
					has_variable = achievement_im_the_captain_now_challanger_var
				}
			}
			scope:successful_contender = {
				remove_variable = achievement_im_the_captain_now_challanger_var
			}
		}
		if = {
			limit = {
				scope:failed_contender ?= {
					has_variable = achievement_im_the_captain_now_challanger_var
				}
			}
			scope:failed_contender = {
				remove_variable = achievement_im_the_captain_now_challanger_var
			}
		}
	}
}

# Root = invaded country
# scope:actor = invading country
# scope:admiral = invading admiral
# scope:general = invading general
# scope:state = location state
on_naval_invasion = {
	effect = {
		post_notification = naval_invasion_against_us
	}
}

# Root = Military Formation
# scope:front = front we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_to_front_cancelled = {
	effect = {
		post_notification = formation_travel_to_front_cancelled
	}
}

# Root = Military Formation
# scope:hq = HQ we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_station_in_hq_cancelled = {
	effect = {
		post_notification = formation_travel_station_in_hq_cancelled
	}
}

# Root = Military Formation
# scope:province = Sea Node we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_deploy_to_sea_node_cancelled  = {
	effect = {
		post_notification = formation_travel_deploy_to_sea_node_cancelled
	}
}

# Root = Military Formation
# scope:formation = Formation we were tracking
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_track_formation_cancelled = {
	effect = {
		post_notification = formation_travel_track_formation_cancelled
	}
}

# Root = Military Formation
on_military_formation_created = {
	effect = {
		if = {
			limit = {
				owner = {
					has_journal_entry = je_tutorial_create_formation
				}
			}
			owner = {
				remove_variable = formation_tutorial_ongoing
			}
		}
	}
}
﻿# Fired off on_monthly_pulse_country_elections

elections_monthly_events = {
	random_events = {
		chance_of_no_event = 50
		1 = election_liberal_events.1
		1 = election_liberal_events.2
		1 = election_liberal_events.3
		1 = election_liberal_events.4
		1 = election_conservative_events.1
		1 = election_conservative_events.2
		1 = election_conservative_events.3
		1 = election_conservative_events.4
		1 = election_moderate_events.1
		1 = election_moderate_events.2
		1 = election_contextual_events.1
		1 = election_contextual_events.2
		1 = election_contextual_events.3
		1 = election_contextual_events.4
		1 = election_contextual_events.5
		1 = election_contextual_events.6
		1 = election_contextual_events.7
		1 = election_contextual_events.8
		1 = election_neutral.1
		1 = election_neutral.2
		1 = election_neutral.3
		1 = election_neutral.4
		1 = election_neutral.5
		1 = election_neutral.6
		1 = election_neutral.7
		1 = election_neutral.8
		1 = election_other_parties_events.1
		1 = election_other_parties_events.2
		1 = election_other_parties_events.3
		1 = election_other_parties_events.4
		1 = election_other_parties_events.5
		1 = ig_leaders.3
		1 = communist_elections.1
		1 = communist_elections.2
		1 = communist_elections.3
		1 = communist_elections.4
		1 = agitators_election_events.1
		1 = agitators_election_events.2
		1 = agitators_election_events.3
		1 = agitators_election_events.4
		1 = agitators_election_events.5
		1 = agitators_election_events.6
		1 = agitators_election_events.7
		1 = agitators_election_events.8
		1 = agitators_election_events.9
		1 = agitators_election_events.10
		1 = agitators_election_events.11
		1 = agitators_election_events.12
		1 = agitators_election_events.13
		1 = agitators_election_events.14
		1 = agitators_election_events.15
		1 = agitators_election_events.16
		1 = agitators_election_events.17
		1 = agitators_election_events.18
		1 = agitators_election_events.19
		1 = agitators_election_events.20
		1 = agitators_election_events.21
		1 = agitators_election_events.22
		1 = agitators_election_events.23
		1 = agitators_election_events.24
		1 = agitators_election_events.25
		1 = agitators_election_events.26
		1 = agitators_election_events.27
		1 = agitators_election_events.28
		1 = agitators_election_events.29
		1 = agitators_election_events.30
		1 = agitators_election_events.31
		1 = agitators_election_events.32
		1 = agitators_election_events.33
		1 = agitators_election_events.34
		1 = agitators_election_events.35
		1 = agitators_election_events.36
		1 = agitators_election_events.37
		1 = agitators_election_events.38
		1 = agitators_election_events.39
		1 = agitators_election_events.40
		1 = agitators_election_events.41
		1 = agitators_election_events.42
		1 = agitators_election_events.43
		1 = agitators_election_events.44
		1 = agitators_election_events.45
		1 = agitators_election_events.46
		1 = agitators_election_events.47
		1 = agitators_election_events.48
		1 = agitators_election_events.49
		1 = agitators_election_events.50
	}
}
﻿# Fired off on_half_yearly_pulse_country

# Generic Pulse
on_half_yearly_events = {
	random_events = {
		chance_of_no_event = 35
		
		# The Attempt on Lincoln's Life
		40 = acw_followup_events.1
		10 = acw_followup_events.2
		50 = acw_followup_events.3

		#Oscar Wilde event for Europe
		5 = oscar_wilde_events.1
	}
}

# Secession
secession_half_yearly_events = {
	random_events = {
		20 = secession_events.1
		20 = secession_events.2
		20 = secession_events.3
		20 = secession_events.4
		20 = secession_events.5
		20 = secession_events.6
		20 = secession_events.7
		20 = secession_events.8
		20 = secession_events.9
	}
}

# Silkworm Diseases 
silkworm_half_yearly_events = {
	random_events = {
		chance_of_no_event = 80
		20 = silkworm_diseases.1
	}
}

# Korea
korea_half_yearly_events = {
	random_events = {
		chance_of_no_event = 50
		50 = 0
		20 = korea_monarchy.1 # Hwan Yi's Death
		10 = korea_monarchy.2 # Gojong
		100 = korea_monarchy.3 # Myeongseong
	}
}

# Lobbies Proposals
lobbies_proposals_half_yearly_events = {
	random_events = {
		chance_of_no_event = 90
		10 = lobby_proposal.1
		10 = lobby_proposal.2
		10 = lobby_proposal.3
		10 = lobby_proposal.4
	}
}

# Movement Events
movement_half_yearly_events = {
	random_events = {
		chance_of_no_event = 90
		5 = movement_events.1
		5 = movement_events.2
		5 = movement_events.3
		5 = movement_events.4
		5 = movement_events.5
		5 = movement_events.6
		5 = movement_events.7
		5 = movement_events.8
		5 = movement_events.9
		5 = movement_events.10
		5 = movement_events.11
		5 = movement_events.12
		5 = movement_events.13
		5 = movement_events.14
		5 = movement_events.15
	}
}
﻿# Fired off on_monthly_pulse_country

# Coup
coup_monthly_events = {
	random_events = {
		chance_of_no_event = 80
		1 = coup.1
	}
}

# Garibaldi
garibaldi_monthly_events = {
	random_events = {
		chance_of_no_event = 70
		30 = garibaldi_events.1
		30 = garibaldi_events.2
		2 = garibaldi_events.3
		1 = garibaldi_events.4
	}
}

# Fund Lobbies Events
fund_lobbies_monthly_events = {  
	random_events = {
		chance_of_no_event = 75
		10 = fund_lobbies_events.1
		10 = fund_lobbies_events.2
		10 = fund_lobbies_events.3
		10 = fund_lobbies_events.4
		10 = fund_lobbies_events.5
	}
}
﻿# Fired off on_yearly_pulse_country

# Generic Pulse
on_yearly_events = {	
	random_events = {
		chance_of_no_event = 35

		20 = government_conflicts.1
		20 = government_conflicts.2
		20 = government_conflicts.3
		20 = government_conflicts.4
		20 = government_conflicts.5
		20 = government_conflicts.6
		20 = government_conflicts.7
		20 = government_conflicts.8
		20 = government_conflicts.9
		20 = government_conflicts.10
		20 = government_conflicts.11
		#
		10 = goldrush.3
		10 = goldrush.4
		#
		20 = ig_leaders.20
		20 = ig_leaders.4
		20 = ig_leaders.5
		20 = ig_leaders.6

		#Character Events
		20 = character_events.2
		20 = character_events.3
		20 = character_events.4
		20 = character_events.5
		100 = character_events.6
		
		# Border Situations
		20 = neighbor_events.1
		20 = neighbor_events.2
		20 = neighbor_events.3
		20 = neighbor_events.4
		20 = neighbor_events.5
		20 = neighbor_events.6
		20 = neighbor_events.7

		# Commander Events
		20 = commander_events.2
		20 = commander_events.4
		20 = commander_events.5
		5 = commander_events.6

		# Law Events
		50 = law_events.5
		50 = law_events.6

		# Cultural Homeland Events
		10 = cultural_homeland_events.1
		10 = cultural_homeland_events.10
		10 = cultural_homeland_events.20
		10 = cultural_homeland_events.30
		10 = cultural_homeland_events.40
		10 = cultural_homeland_events.50
		
		#IG Suppression
		20 = ig_suppression_events.1

		# Technology
		20 = technology_events.1
		20 = technology_events.10
		20 = technology_events.20
		20 = technology_events.30
		20 = technology_events.40
		20 = technology_events.50
		
		# Industrial Accidents
		10 = industrial_accident_events.1
		10 = industrial_accident_events.2
		10 = industrial_accident_events.3
		10 = industrial_accident_events.4
		20 = industrial_accident_events.5
		20 = industrial_accident_events.6

		# Crime (Why do police not just comment out crime events?)
		10 = crime_events.1
		10 = crime_events.2
		10 = crime_events.10

		# Obligations
		10 = obligation_events.1
		10 = obligation_events.3
		10 = obligation_events.5
		
		# Prostitution and police
		20 = prostitution.1
		100 = prostitution.2
		20 = prostitution.3
		20 = prostitution.4
		20 = cable_street.1

		#Natural Disasters
		3 = natural_disaster_events.1
		3 = natural_disaster_events.2
		1 = natural_disaster_events.3
		1 = natural_disaster_events.4
		20 = natural_disaster_events.5
		3 = natural_disaster_events.6
		3 = natural_disaster_events.7
		1 = natural_disaster_events.8
		
		# Warlords
		20 = warlord_china_events.110
		20 = warlord_china_events.301
		
		# Assassination
		10 = assassination_events.1

		# Oil Rush Scandal
		20 = oil_rush.5
		
		#Decree
		20 = decree_events.1
		20 = decree_events.2
		20 = decree_events.3
		20 = decree_events.4
		20 = decree_events.5
		20 = decree_events.6
		20 = decree_events.100
		20 = decree_events.101
		20 = decree_events.102
		20 = decree_events.103
		20 = decree_events.104
		20 = decree_events.105
		20 = decree_events.106
		20 = decree_events.107
		20 = decree_events.108
		20 = decree_events.109
		
		50 = strike.5
		50 = strike.6
		50 = strike.7

		10 = opium_wars.8
		
		10 = communism.7
		10 = communism.9
		
		#psychology
		20 = psychology_events.1
		20 = psychology_events.2
		20 = psychology_events.3
		20 = psychology_events.4
		20 = psychology_events.5
		20 = psychology_events.6
		
		#nationalism
		20 = fascism_events.8

		20 = dreadnought_hoax.1

		2 = patagonia.2
		10 = amazon.1
		10 = amazon.2

		10 = amazon.4 # The Most Dangerous Game

		20 = autocracy.2
		20 = autocracy.3

		# rivalry events
		10 = diplomatic_friction.1
		10 = diplomatic_friction.2
		10 = diplomatic_friction.20
		
		# Titanic
		10 = titanic.1

		# trains
		5 = trains.1

		30 = cholera.1

		# Slave revolts
		5 = slave_revolt.1
		5 = slave_revolt.2
		5 = slave_revolt.3

		# Discrimination Events
		20 = discrimination_events.1
		20 = discrimination_events.2
		20 = discrimination_events.3
		20 = discrimination_events.4

		# Trade routes
		20 = trade_route_events.1
		20 = trade_route_events.2
		20 = trade_route_events.3
		20 = trade_route_events.4
		20 = trade_route_events.5
		
		#PMs
		20 = pm_events.1
		20 = pm_events.2
		20 = pm_events.4
		20 = pm_events.5

		# French Pretenders
		10 = french_pretenders.2
		10 = french_pretenders.3
		10 = french_pretenders.4

		# Additional 1848
		10 = 1848.10
		10 = 1848.11
		10 = 1848.12
		
		# Vampire Panic
		1 = vampire_panic.1

		20 = algeria_events.2

		50 = acw_events.7
		50 = acw_events.8

		# Carnaval
		30 = bp1_misc.1

		# Medium Roast
		30 = bp1_misc.2

		# To the Highest Standards
		20 = pedro.14

		# Emu War
		30 = emu_war.1
	}
}

# Russian Monarchy Pulse Events
russian_monarchy_yearly_events = {
	random_events = { 
		chance_of_no_event = 50
		25 = 0
		25 = russia_monarchy.2
		10 = russia_monarchy.6
		50 = russia_monarchy.7
		5 = russia_monarchy.8
	}
}

# Springtie of Peoples
springtime_of_peoples_yearly_events = {
	random_events = {
		chance_of_no_event = 80
		1 = peoples_springtime.6
	}
}

# Landowners become Oligarchic
bp1_misc_yearly_events = {	
	random_events = { 
		chance_of_no_event = 80
		1 = bp1_misc.3
	}
}

# Indochina JE start
indochina_yearly_events = {
	random_events = {
		chance_of_no_event = 50
		20 = indochina.1 # Indochinese start
		20 = indochina.2 # Imperialist start
	}
}


# Exiles
exiles_yearly_events = {
	random_events = {
		chance_of_no_event = 75
		10 = exiles_events.1
		10 = exiles_events.2
		10 = exiles_events.3
		10 = exiles_events.4
		10 = exiles_events.5
		10 = exiles_events.6
		10 = exiles_events.7
		10 = exiles_events.8
		10 = exiles_events.9
		10 = exiles_events.10

		10 = exiles_more_events.1
		10 = exiles_more_events.3
		10 = exiles_more_events.4
		10 = exiles_more_events.5
		5 = exiles_more_events.6
		10 = exiles_more_events.7
		10 = exiles_more_events.8
		10 = exiles_more_events.9
		10 = exiles_more_events.10
	}
}

# Historical Agitators
historical_agitators_yearly_events = {
	random_events = {
		chance_of_no_event = 25
		10 = historical_agitators.1
		10 = historical_agitators.2
		10 = historical_agitators.3
		10 = historical_agitators.4
		10 = historical_agitators.5
		10 = historical_agitators.6
		300 = historical_agitators.8
		2 = historical_agitators.9
		10 = historical_agitators.10
		10 = historical_agitators.11
		10 = historical_agitators.12
		10 = historical_agitators.13
		10 = historical_agitators.14
		10 = historical_agitators.15
		10 = historical_agitators.16
		10 = historical_agitators.17
		10 = historical_agitators.18
		10 = historical_agitators.19
		10 = historical_agitators.20
		10 = historical_agitators.21
		10 = historical_agitators.22
		100 = gg_korea.3
	}
}

# Slavery Abolition
slavery_abolition_yearly_events = {
	random_events = {
		chance_of_no_event = 80
		1 = slavery_law_events.7
	}
}

# Lobby Events
lobby_yearly_events = {
	random_events = {
		chance_of_no_event = 75
		5 = lobby_events.1
		5 = lobby_events.2
		5 = lobby_events.3
		5 = lobby_events.4
		5 = lobby_events.5
		5 = lobby_events.6
		5 = lobby_events.7
		5 = lobby_events.8
		5 = lobby_events.9
		5 = lobby_events.10
		5 = lobby_events.11
		5 = lobby_events.12
		5 = lobby_events.13
		5 = lobby_events.14
		5 = lobby_events.15
		5 = lobby_events.16
		5 = lobby_events.17
		5 = lobby_events.18
		5 = lobby_events.19
		5 = lobby_events.20
		5 = lobby_events.21
		5 = lobby_events.22
		5 = lobby_events.23
		5 = lobby_events.24
		5 = lobby_events.25
		5 = lobby_events.26
		5 = lobby_events.27
		5 = lobby_events.28
		5 = lobby_events.29
		5 = lobby_events.30
		5 = lobby_events.31
		5 = lobby_events.32
		5 = lobby_events.33
		5 = lobby_events.34
		5 = lobby_events.35
		5 = lobby_events.36
		5 = lobby_events.37
		5 = lobby_events.38
		5 = lobby_events.39
		5 = lobby_events.40
		5 = lobby_events.51
		5 = lobby_events.52
		5 = lobby_events.53
		5 = lobby_events.54
		5 = lobby_events.55
		5 = lobby_events.56
		5 = lobby_events.57
		5 = lobby_events.58
		5 = lobby_events.59
		5 = lobby_events.60 
	}
}

# Krakatoa
krakatoa_yearly_events = {
	random_events = {
		chance_of_no_event = 95
		1 = krakatoa.1
	}
}

# Tunguska
tunguska_yearly_events = {
	random_events = {
		chance_of_no_event = 90
		1 = tunguska.1
	}
}
﻿﻿# For on_actions launched by the code itself.

# No root scope set
on_monthly_pulse = {
	effect = {
		every_character_in_exile_pool = {
			limit = {
				popularity <= 15
			}
			kill_character = yes
		}

		if = {
			limit = {
				year < 1930
				NOT = { has_global_variable = germany_formed }
				c:GER ?= { is_country_alive = yes }
			}
			set_global_variable = germany_formed
		}

		# Used to keep track of Council Republics for the purpose of the Red Scare.
		# Our thanks to Brute for reporting this.
		clear_global_variable_list = aes_country_list
		every_country = {
			limit = { 
				has_law = law_type:law_council_republic
				country_rank > rank_value:minor_power 
			}
			add_to_global_variable_list = {
				name = aes_country_list
				target = THIS
			}
		}
	}
}

on_yearly_pulse = { }

# Root = Country
on_monthly_pulse_country = {
	events = {
		communism.8 # Red Army
		peoples_springtime.1
		opium_wars.1
		native_resettlement.1
		meiji.13
		bic_breakup.1
		dreyfus.1
		dei_breakup.1
		poland_events.3 # Polish Unification
		colonial_administration_events.2 # African Colony Radicals
		caudillo.1
		sa_migration.5
		amazonas.1 # Taming Amazonia
		paraguay.11 # Paraguay War
		acw_events.9 # CSA victory event
		persia_events.5 # Persian slave liberation event

		# Exile Agitators Events
		yeet_agitator_events.1
		yeet_agitator_events.2
		yeet_agitator_events.3

		# Comte
		positivism.1

		# Milyutin
		caucasuswar.5
	}
	effect = {
		trigger_event = { id = unable_to_enact.1 }

		### This is how we give objectives to AI countries
		if = {
			limit = {
				has_journal_entry = je_great_game_control
				has_dlc_feature = ep1_content
				is_player = no
			}
			if = {
				limit = {
					c:RUS ?= this
				}
				### Generic Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_tibet_expedition_ai_var
						}
						has_variable = tibet_has_started
						NOT = { has_global_variable = tibet_expedition_completed }
						has_interest_marker_in_region = region_himalayas
					}
					set_variable = je_tibet_expedition_ai_var
					add_journal_entry = {
						type = je_tibet_expedition
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_consolidate_afghanistan_objective_ai_var
						}
						has_interest_marker_in_region = region_persia
						exists = c:AFG
					}
					set_variable = je_consolidate_afghanistan_objective_ai_var
					add_journal_entry = {
						type = je_consolidate_afghanistan_objective
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_maintain_afghan_protectorate_ai_var
						}
						NOT = {
							has_global_variable = gg_afghanistan_protectorate_done
						}
						has_interest_marker_in_region = region_persia
					}
					set_variable = je_maintain_afghan_protectorate_ai_var
					add_journal_entry = {
						type = je_maintain_afghan_protectorate
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_secure_influence_over_persia_ai_var
						}
						has_interest_marker_in_region = region_persia
					}
					set_variable = je_secure_influence_over_persia_ai_var
					add_journal_entry = {
						type = je_secure_influence_over_persia
					}
				}

				### Specific Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_secure_persian_border_ai_var
						}
						exists = c:CIR
					}
					set_variable = je_secure_persian_border_ai_var
					add_journal_entry = {
						type = je_secure_persian_border
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_pacify_kazakh_steppes_ai_var
						}
						has_journal_entry = je_pacify_the_steppes
					}
					set_variable = je_pacify_kazakh_steppes_ai_var
					add_journal_entry = {
						type = je_pacify_kazakh_steppes
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_codify_chinese_border_ai_var
						}
						has_technology_researched = nationalism
					}
					set_variable = je_codify_chinese_border_ai_var
					add_journal_entry = {
						type = je_codify_chinese_border
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_consolidate_central_asia_ai_var
						}
						has_technology_researched = nationalism
					}
					set_variable = je_consolidate_central_asia_ai_var
					add_journal_entry = {
						type = je_consolidate_central_asia
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_chinese_concessions_ai_var
						}
						has_technology_researched = railways
						any_scope_state = {
							OR = {
								state_region = s:STATE_OUTER_MANCHURIA
								state_region = s:STATE_AMUR
							}
							is_incorporated = yes
						}
					}
					set_variable = je_chinese_concessions_ai_var
					add_journal_entry = {
						type = je_chinese_concessions
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_acquire_korean_protectorate_ai_var
						}
						any_neighbouring_state = {
							owner = c:KOR
							is_incorporated = yes
						}
						c:KOR ?= {
							is_country_type = unrecognized
						}
					}
					set_variable = je_acquire_korean_protectorate_ai_var
					add_journal_entry = {
						type = je_acquire_korean_protectorate
					}
				}
			}
			
			if = {
				limit = {
					c:GBR ?= this
					has_journal_entry = je_great_game_control
				}
				### Generic Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_tibet_expedition_ai_var
						}
						has_variable = tibet_has_started
						NOT = { has_global_variable = tibet_expedition_completed }
						has_interest_marker_in_region = region_himalayas
					}
					set_variable = je_tibet_expedition_ai_var
					add_journal_entry = {
						type = je_tibet_expedition
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_consolidate_afghanistan_objective_ai_var
						}
						has_interest_marker_in_region = region_persia
						exists = c:AFG
					}
					set_variable = je_consolidate_afghanistan_objective_ai_var
					add_journal_entry = {
						type = je_consolidate_afghanistan_objective
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_maintain_afghan_protectorate_ai_var
						}
						NOT = {
							has_global_variable = gg_afghanistan_protectorate_done
						}
						has_interest_marker_in_region = region_persia
					}
					set_variable = je_maintain_afghan_protectorate_ai_var
					add_journal_entry = {
						type = je_maintain_afghan_protectorate
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_secure_influence_over_persia_ai_var
						}
						has_interest_marker_in_region = region_persia
					}
					set_variable = je_secure_influence_over_persia_ai_var
					add_journal_entry = {
						type = je_secure_influence_over_persia
					}
				}
				### Specific Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_disrupt_russian_caucasus_ai_var
						}
						exists = c:CIR
					}
					set_variable = je_disrupt_russian_caucasus_ai_var
					add_journal_entry = {
						type = je_disrupt_russian_caucasus
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_counter_russian_pacific_influence_ai_var
						}
						c:RUS ?= {
							any_scope_state = {
								region = sr:region_manchuria
								OR = {
									any_scope_building = {
										is_building_type = building_port
										level >= 5
									}
									any_scope_building = {
										is_building_type = building_naval_base
										level >= 15
									}
								}
							}
						}
					}
					set_variable = je_counter_russian_pacific_influence_ai_var
					add_journal_entry = {
						type = je_counter_russian_pacific_influence
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_consolidate_british_india_ai_var
						}
						c:BIC ?= {
							is_subject_of = c:GBR
						}
					}
					set_variable = je_consolidate_british_india_ai_var
					add_journal_entry = {
						type = je_consolidate_british_india
					}
				}
				if = {
					limit = {
						NOT = {
							has_variable = je_pamir_expedition_objective_ai_var
						}
						c:RUS ?= {
							OR = {
								any_scope_state = {
									state_region = s:STATE_TAJIKISTAN
								}
								any_subject_or_below = {
									any_scope_state = {
										state_region = s:STATE_TAJIKISTAN
									}
								}
							}
						}
						NOT = {
							has_variable = dismissed_pamir_expedition
						}
					}
					set_variable = je_pamir_expedition_objective_ai_var
					add_journal_entry = {
						type = je_pamir_expedition_objective
					}
				}
			}
			
			if = {
				limit = {
					is_afghan_nation = yes
					has_journal_entry = je_great_game_control
				}
				### Generic Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_achieve_sovereignty_ai_var
						}
						is_country_type = unrecognized
					}
					set_variable = je_achieve_sovereignty_ai_var
					add_journal_entry = {
						type = je_achieve_sovereignty
					}
				}
				### Specific Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_unify_afghanistan_objective_ai_var
						}
					}
					set_variable = je_unify_afghanistan_objective_ai_var
					add_journal_entry = {
						type = je_unify_afghanistan_objective
					}
				}
			}
			
			if = {
				limit = {
					c:PER ?= this
					has_journal_entry = je_great_game_control
				}
				### Generic Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_achieve_sovereignty_ai_var
						}
						is_country_type = unrecognized
					}
					set_variable = je_achieve_sovereignty_ai_var
					add_journal_entry = {
						type = je_achieve_sovereignty
					}
				}
				### Specific Objectives
				if = {
					limit = {
						NOT = {
							has_variable = je_consolidate_persia_ai_var
						}
					}
					set_variable = je_consolidate_persia_ai_var
					add_journal_entry = {
						type = je_consolidate_persia
					}
				}
			}
		}
		
		# TODO: Move these to tag-specific pulses
		if = {
			limit = {
				this = c:FRA
				c:FRA ?= {
					OR = {
						has_modifier = modifier_haitian_independence_payments_1
						has_modifier = modifier_haitian_independence_payments_2
						has_modifier = modifier_haitian_independence_payments_3
						has_modifier = modifier_haitian_independence_payments_4
					}
				}
				NOT = { exists = c:HAI }
			}
			c:FRA = {
				if = {
					limit = {
						has_modifier = modifier_haitian_independence_payments_1
					}
					remove_modifier = modifier_haitian_independence_payments_1
				}
				if = {
					limit = {
						has_modifier = modifier_haitian_independence_payments_2
					}
					remove_modifier = modifier_haitian_independence_payments_2 
				}
				if = {
					limit = {
						has_modifier = modifier_haitian_independence_payments_3
					}
					remove_modifier = modifier_haitian_independence_payments_3
				}
				if = {
					limit = {
						has_modifier = modifier_haitian_independence_payments_4
					}
					remove_modifier = modifier_haitian_independence_payments_4
				}
			}
		}
		if = { #Exists to make sure independent Perus get this ASAP.
			limit = {
				OR = {
					c:NPU ?= this
					c:SPU ?= this
				}
				is_subject = no
				NOT = {
					has_variable = peru_has_claims
				}
				OR = {
					AND = { #SPU is either dead or a puppet, will not fire if it is independent.
						c:NPU ?= this
						OR = {
							NOT = {
								exists = c:SPU
							}
							c:SPU ?= { is_subject = yes }
						}
					}
					AND = {
						c:SPU ?= this
						OR = {
							NOT = {
								exists = c:SPU
							}
							c:NPU ?= { is_subject = yes }
						}
					}
				}
			}
			trigger_event = { id = peru_bolivia_events.8 days = 0 popup = yes }
		}

		if = {
			limit = {
				NOT = {
					has_variable = cant_touch_this_achievement_possible
				}
				any_country = {
					NOT = {
					   THIS = ROOT
					}
					ROOT = {
						"gdp_ownership_ratio(prev)" > 0.10
					}	
			    }
			}
			set_variable = cant_touch_this_achievement_possible
		}
	}
	on_actions = { # delay ensures events won't fire simultaneously
		coup_monthly_events
		#delay = { days = 4 }
		garibaldi_monthly_events
		#delay = { days = 7 }
		fund_lobbies_monthly_events
	}
}

on_yearly_pulse_country = {
	effect = {
		# IG leader death
		random_list = {
			1 = {
				trigger_event = { id = character_events.100 }
			}
			1 = { }
		}		
		
		# Countries have a chance to change their mind about who they want to support in Egypt vs Ottomans conflicts
		if = {
			limit = {
				has_variable = veiled_protectorate_support_ottomans
			}
			
			random_list = {
				95 = {}
				3 = { 
					remove_variable = veiled_protectorate_support_ottomans 
				}
				2 = { 
					remove_variable = veiled_protectorate_support_ottomans 
					set_variable = veiled_protectorate_support_egypt
				}
			}
		}
		else_if = {
			limit = {
				has_variable = veiled_protectorate_support_egypt
			}
			
			random_list = {
				95 = {}
				3 = { 
					remove_variable = veiled_protectorate_support_egypt
				}
				2 = { 
					remove_variable = veiled_protectorate_support_egypt
					set_variable = veiled_protectorate_support_ottomans
				}
			}
		}				

		if = {
			limit = {
				NOR = {
					has_journal_entry = je_sick_man_main # Ottomans have enough required reforms to worry about
					has_journal_entry = je_meiji_restoration # Ditto for Japan
					has_variable = gov_petition_fired
					has_variable = gov_petition_cooldown
					has_modifier = modifier_successfully_met_petition_legitimacy
					any_interest_group = {
						has_modifier = modifier_failed_to_meet_petition
					}
					has_journal_entry = je_government_petition
					is_revolutionary = yes
					is_secessionist = yes
				}
				ig_desires_laws_for_petition = yes
			}
			if = {
				limit = {
					has_variable = gov_petition_coin_toss
				}
				random_list = {
					1 = { 
						set_variable = { name = gov_petition_cooldown years = 10 }
						set_variable = { name = gov_petition_fired months = 3 }
						trigger_event = { id = government_petition_events.1 }
					}
					1 = {
	
					}
				}
				remove_variable = gov_petition_coin_toss
			}
			else = {
				random_list = {
					1 = { 
						set_variable = { name = gov_petition_cooldown years = 10 }
						set_variable = { name = gov_petition_fired months = 3 }
						trigger_event = { id = government_petition_events.1 }
					}
					9 = {
	
					}
				}
			}
		}

		if = {
			limit = {
				ROOT = {
					is_player = yes
					has_dlc_feature = voice_of_the_people_content
					empty_agitator_slots >= 1
					OR = {
						c:USA ?= this
						trigger_if = {
							limit = {
								exists = c:CAL
							}
							c:CAL ?= this
						}
					}
					any_scope_state = {
						state_region = s:STATE_CALIFORNIA
						is_incorporated = yes
					}
					game_date > 1860.1.1
					game_date < 1880.1.1
				}
				NOT = { has_global_variable = emperor_norton_spawn }	
			}
			trigger_event = { id = historical_agitators.9 }
		}

		# Achievement: For Twelve Years You Have Been Asking
		if = {
			limit = {
				any_scope_building = {
					NOR = {
						is_building_group = bg_government
						is_building_group = bg_construction
						is_building_group = bg_military
						is_building_group = bg_urban_facilities
						is_building_group = bg_canals
					}
					level > 0
					private_ownership_fraction = 1
				}
				NOT = {
					has_variable = achievement_for_twelve_years_you_have_been_asking_timed
					has_variable = achievement_for_twelve_years_you_have_been_asking
				}
			}
			set_variable = {
				name = achievement_for_twelve_years_you_have_been_asking_timed
				years = 12
			}
			set_variable = {
				name = achievement_for_twelve_years_you_have_been_asking
			}
		}
		else_if = {
			limit = {
				any_scope_building = {
					NOR = {
						is_building_group = bg_government
						is_building_group = bg_construction
						is_building_group = bg_military
						is_building_group = bg_urban_facilities
						is_building_group = bg_canals
					}
					level > 0
					private_ownership_fraction < 1
				}
				OR = {
					has_variable = achievement_for_twelve_years_you_have_been_asking_timed
					has_variable = achievement_for_twelve_years_you_have_been_asking
				}
			}
			# RESET THE CLOCK

			remove_variable = achievement_for_twelve_years_you_have_been_asking
			remove_variable = achievement_for_twelve_years_you_have_been_asking_timed
		}

		# Achievement: Can't Touch This
		if = {
			limit = {
				any_scope_building = {
					level > 0
					private_ownership_fraction = 0
				}
				NOT = {
					has_variable = achievement_cant_touch_this_timed
					has_variable = achievement_cant_touch_this
				}
			}
			set_variable = {
				name = achievement_cant_touch_this_timed
				years = 12
			}
			set_variable = {
				name = achievement_cant_touch_this
			}
		}
		else_if = {
			limit = {
				any_scope_building = {
					level > 0
					private_ownership_fraction > 0
					NOR = {
						is_building_group = bg_subsistence_ranching
						is_building_group = bg_subsistence_agriculture
						is_building_group = bg_gold_fields
					}
				}
				OR = {
					has_variable = achievement_cant_touch_this_timed
					has_variable = achievement_cant_touch_this
				}
			}
			# RESET THE CLOCK

			remove_variable = achievement_cant_touch_this
			remove_variable = achievement_cant_touch_this_timed
		}
	}
	on_actions = { # delay ensures events won't fire simultaneously
		on_yearly_events
		#delay = { days = 1 }
		russian_monarchy_yearly_events
		#delay = { days = 1 }
		springtime_of_peoples_yearly_events
		#delay = { days = 2 }
		bp1_misc_yearly_events
		#delay = { days = 3 }
		indochina_yearly_events
		#delay = { days = 5 }
		exiles_yearly_events
		#delay = { days = 8 }
		historical_agitators_yearly_events
		#delay = { days = 13 }
		slavery_abolition_yearly_events
		#delay = { days = 21 }
		lobby_yearly_events
		#delay = { days = 34 }
		krakatoa_yearly_events
		#delay = { days = 55 }
		tunguska_yearly_events
		#delay = { days = 89 }
	}
}
on_half_yearly_pulse_country = {
	on_actions = { # delay ensures events won't fire simultaneously
		on_half_yearly_events
		#delay = { days = 4 }
		silkworm_half_yearly_events
		#delay = { days = 6 }
		secession_half_yearly_events
		#delay = { days = 14 }
		korea_half_yearly_events
		#delay = { days = 17 }
		lobbies_proposals_half_yearly_events
		#delay = { days = 20 }
		movement_half_yearly_events
	}
}

on_five_year_pulse_country = {
	events = {
		generals.1
	}
}


on_decade_pulse_country = {
	random_events = {
		chance_of_no_event = 95
		1 = plague.1
	}
}

# Only fires for countries with Elections enabled
on_monthly_pulse_country_elections = {
	on_actions = {
		elections_monthly_events
	}
}

on_half_yearly_pulse_country_elections = { }
on_yearly_pulse_country_elections = { }
on_five_year_pulse_country_elections = {}
on_decade_pulse_country_elections = {}

# Root = Character
on_monthly_pulse_character = {
	effect = {
		if = {
			limit = {
				AND = {
					has_trait = trait_child
					age >= define:NCharacters|ADULT_AGE
				}
			}
			remove_trait = trait_child
			add_random_trait = personality
		}
	}
}
on_yearly_pulse_character = {
	random_events = {
		20 = character_events.1
	}


}
on_half_yearly_pulse_character = {}
on_five_year_pulse_character = {}
on_decade_pulse_character = {
	
}

# Root = State
on_monthly_pulse_state = {
	random_events = {
		10 = goldrush.5
	}

}
on_half_yearly_pulse_state = {}
on_yearly_pulse_state = {
	random_events = {
		chance_of_no_event = 80
		10 = oil_rush.3
		10 = oil_rush.4
	}
	on_actions = {
	}
}
on_five_year_pulse_state = {}
on_decade_pulse_state = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
	effect = {
		
	}
}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_won = {
	events = {
		texan_war_of_independence.3

	}
	random_events = {
		chance_of_no_event = 80
		20 = culture_brazil.1
	}
}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_lost = {}

# Root = Building
on_building_built = {
}

# Root = Building
on_start_expanding_building = {
}

# Root = Building
on_building_expanded = {
}

# Does not appear
on_deactivate_link = {
}

# Root = From Market
# scope:market = Market merging into
# scope:trade_center = Trade Center state of root
on_merge_markets = {
}

# Root = State having the link retargeted
on_retarget_link = {
}

# Root = The newly created market
on_create_market = {
}

# Root = The applicable country
# scope:technology = The technology type they started to research
on_research_technology_started = {
	effect = {
		if = {
			limit = { 
				has_journal_entry = je_tutorial_research_technology
			}
			je:je_tutorial_research_technology = {
				set_target_technology = scope:technology
			}
			set_variable = tut_began_new_research
		}
	}
}

# Root = The applicable country
# scope:technology = The technology type they just acquired
on_acquired_technology = {
	effect = {
		if = {
			limit = {
				has_variable = grand_exhibition_points_change
			}
			change_variable = {
				name = grand_exhibition_points_change
				add = 3
			}
		}
		if = {
			limit = {
				has_game_started = yes
			}
			post_notification = acquired_technology_notification
		}
		if = {
			limit = {
				is_player = yes
				has_technology_researched = pumpjacks
				NOT = { has_variable = first_oil_discovered }
			}
			set_variable = first_oil_discovered
			if = {
				limit = {
					any_scope_state = {
						has_potential_resource = bg_oil_extraction
					}
				}
				random_scope_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
			}
			else_if = {
				limit = {
					any_country = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							has_potential_resource = bg_oil_extraction
						}
					}
				}
				random_country = {
					limit = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							has_potential_resource = bg_oil_extraction
						}
					}
					random_scope_state = {
						limit = {
							has_potential_resource = bg_oil_extraction
						}
						force_resource_discovery = bg_oil_extraction
					}
				}
			}
			else = {
				random_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
			}
		}
	}

	events = {
		historical_events.1
		marx_events.1
	}
}

# Root = The applicable country
# scope:technology = The technology type that has started to spread to them
on_spreading_technology = {
	effect = {
		post_notification = spreading_technology_notification
	}
}

# Fires when a diplomatic play is started
# root = The diplomatic play that has been started
# scope:initiator = Initiator of the play
# scope:target = Target of the play
on_diplomatic_play_started = {
	effect = {
		if = {
			limit = { is_diplomatic_play_type = dp_unify_germany }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = GER }
				}
				
				scope:initiator = { annex = prev }
			}
		}
		
		if = {
			limit = { is_diplomatic_play_type = dp_unify_italy }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = ITA }
				}
				
				scope:initiator = { annex = prev }
			}
		}

		if = {
			limit = { is_diplomatic_play_type = dp_unify_scandinavia }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = SCA }
				}
				
				scope:initiator = { annex = prev }
			}
		}		
	}
}

# Root = Character
on_character_creation = {
}

# Root = Character
on_character_death = {
	effect = {
		if = {
			limit = {
				is_ruler = yes
				exists = c:HAW
				owner = c:HAW
				owner = {
					has_law = law_type:law_monarchy
					NOT = { has_variable = death_of_kamehameha }
					NOT = { has_global_variable = gp_hawaii_interest }
				}
			}
			owner = {
				trigger_event = hawaii_events.1
			}
		}
		
		if = {
			limit = {
				has_variable = expedition_leader_var
				owner = {
					NOT = { has_variable = tibet_expedition_progress_var }
				}
			}
			owner = {
				trigger_event = expedition_events.110
			}
		}

		### Force-generating French monarchs of the correct dynasty if something goes wrong
		if = {
			limit = {
				is_ruler = yes
				owner = {
					has_law = law_type:law_monarchy
					NOT = {
						any_scope_character = {
							is_heir = yes
						}
					}
				}
			}
			if = {
				limit = { 
					has_variable = legitimist_leader 
				}
				owner = {
					create_character = {
						template = dynamic_legitimist_ruler_template
					}
				}
			}
			else_if = {
				limit = { 
					has_variable = orleanist_leader 
				}
				owner = {
					create_character = {
						template = dynamic_orleanist_ruler_template
					}
				}				
			}
			else_if = {
				limit = { 
					has_variable = bonapartist_leader 
				}
				owner = {
					create_character = {
						template = dynamic_bonapartist_ruler_template
					}
				}				
			}
		}
		###
		# Garibaldi exist check
		if = {
			limit = {
				has_template = garibaldi_character_template
			}
			remove_global_variable = garibaldi_is_alive_global_var
		}
		### Caudillo Kingmaker
		if = {
			limit = {
				NOT = { has_variable = caudillo_kingmaker }
				has_role = politician
				interest_group = {
					is_interest_group_type = ig_armed_forces
					is_marginal = no
				}
				owner = {
					in_election_campaign = no
					country_has_voting_franchise = yes
					OR = {
						has_journal_entry = je_caudillo
						has_modifier = age_of_caudillos_modifier
					}
				}
			}
			owner = {
				trigger_event = { id = caudillo.5 days = 1 }
			}
		}
	}
}

# Root = Character
on_new_ruler = {
	effect = {
		if = {
			limit = {
				owner = {
					NOT = {
						has_variable = hide_ruler_change_notification
					}
				}
			}
			post_notification = new_ruler
		}
		if = {
			limit = {
				owner = {
					c:RUS ?= this
					has_law = law_type:law_monarchy
				}
				is_ruler = yes
			}
			if = {
				limit = {
					has_template = RUS_alexander_ii
				}
				owner = {
					trigger_event = { id = russia_monarchy.1 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_tsarevich_nicholas_alexandrovich
				}
				owner = {
					trigger_event = { id = russia_monarchy.3 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_alexander_iii
				}
				owner = {
					trigger_event = { id = russia_monarchy.4 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_nicholas_ii
				}
				owner = {
					trigger_event = { id = russia_monarchy.5 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_alexei_ii
				}
				owner = {
					trigger_event = { id = russia_monarchy.9 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_michael_ii
				}
				owner = {
					trigger_event = { id = russia_monarchy.10 popup = yes }
				}
			}
			else_if = {
				limit = {
					has_template = RUS_george_i
				}
				owner = {
					trigger_event = { id = russia_monarchy.11 popup = yes }
				}
			}
		}
		if = {
			limit = {
				owner = {
					c:PRG ?= this
				}
				has_template = PRG_francisco_solano_lopez
				is_ruler = yes
			}
			owner = {
				random_scope_character = {
					limit = {
						has_template = PRG_francisco_solano_lopez
					}
					if = {
						limit = {
							has_modifier = napoleon_of_the_americas_modifier
						}
						remove_modifier = napoleon_of_the_americas_modifier
					}
					add_modifier = {
						name = napoleon_of_the_americas_modifier
						multiplier = 2
					}
				}
			}
		}
	}
}

# Root = Country
on_country_default = {
	effect = {
		add_modifier = country_default	

		this = {
			save_scope_as = in_default_country
		}

		every_cobelligerent_in_war = {
			post_notification = cobelligerent_in_default_notification
		}

		every_enemy_in_war = {
			post_notification = enemy_in_default_notification
		}
	}
}

# Root = Country
on_country_no_longer_default = {
	effect = {
		remove_modifier = country_default	
	}
}

# Root = Diplomatic Action
on_diplomatic_action = {
	effect = {
		post_notification = diplomatic_action_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal = {
	effect = {
		post_proposal = proposal_diplomatic_action
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted = {
	effect = {
		post_notification = diplomatic_proposal_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_owe_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_call_in_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_declined = {
	effect = {
		post_notification = diplomatic_proposal_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break = {
	effect = {
		post_notification = diplomatic_action_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break = {
	effect = {
		post_proposal = proposal_break_pact
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_owe_obligation = {
	effect = {
		post_proposal = proposal_break_pact_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_call_in_obligation = {
	effect = {
		post_proposal = proposal_break_pact_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party = {
	effect = {
		post_notification = diplomatic_proposal_third_party_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_overlord_decrease_autonomy = {
	effect = {
		post_notification = diplomatic_action_overlord_decrease_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_overlord_increase_autonomy = {
	effect = {
		post_notification = diplomatic_action_overlord_increase_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_subject_increase_own_autonomy = {
	effect = {
		post_notification = diplomatic_action_subject_increase_own_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomats_expelled = {
	effect = {
		if = {
			limit = {
				scope:initiator = {
					has_variable = we_are_not_amused_ach_possible
				}
				scope:target = {
					c:FRA ?= this
					"relations(scope:initiator)" >= -10 #Why? Because the on_action fires after the opinion malus from expel diplomats occurs.
				}
			}
			scope:initiator = {
				set_variable = achievement_we_are_not_amused
			}
		}
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_auto_break = {
	effect = {
		post_notification = diplomatic_pact_auto_break_notification
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_third_party_auto_break = {
	effect = {
		post_notification = diplomatic_pact_third_party_auto_break_notification
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_independent = {
	effect = {
		if = {
			limit = {
				c:NEN ?= scope:target
			}
			scope:target = {
				create_character = {
					ig_leader = yes
					interest_group = ig_rural_folk
					ideology = ideology_luddite
				}
			}
		}
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = cu:sephardic
				add_homeland = cu:ashkenazi
			}
		}
		if = {
			limit = {
				scope:target = {
					OR = {
						country_has_primary_culture = cu:afro_caribbean
						country_has_primary_culture = cu:afro_antillean
						country_has_primary_culture = cu:afro_american
						country_has_primary_culture = cu:afro_caribeno
						country_has_primary_culture = cu:afro_brazilian
					}
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
			}
			scope:target = {
				trigger_event = { id = slave_revolt_events.1 days = 0 }
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_own_subject = {
	effect = {
		if = {
			limit = {
				c:NEN ?= scope:target
			}
			scope:target = {
				create_character = {
					ig_leader = yes
					interest_group = ig_rural_folk
					ideology = ideology_luddite
				}
			}
		}
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = cu:sephardic
				add_homeland = cu:ashkenazi
			}
		}
		scope:target = {
			if = {
				limit = {
					country_has_state_religion = rel:theravada
				}
				ig:ig_devout = {
					set_interest_group_name = ig_theravada_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					exists = c:RUS
					c:RUS = scope:target
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_russian_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:orthodox
					OR = {
						NOT = { exists = c:RUS }
						NOT = { c:RUS = scope:target }
					}
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_orthodox_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:hindu
				}
				ig:ig_devout = {
					set_interest_group_name = ig_hindu_priesthood
					remove_ideology = ideology_hindu_moralist
					add_ideology = ideology_hindu_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:gelugpa
				}
				ig:ig_devout = {
					set_interest_group_name = ig_vajrayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:mahayana
				}
				ig:ig_devout = {
					set_interest_group_name = ig_mahayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:sikh
				}
				ig:ig_devout = {
					set_interest_group_name = ig_sikh_priesthood
					remove_ideology = ideology_moralist
					add_ideology = ideology_sikh_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:oriental_orthodox
				}
				ig:ig_devout = {
					set_interest_group_name = ig_oriental_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_oriental_orthodox_patriarch
				}
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_overlord_subject = {
	effect = {
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = cu:sephardic
				add_homeland = cu:ashkenazi
			}
		}
		scope:target = {
			if = {
				limit = {
					country_has_state_religion = rel:theravada
				}
				ig:ig_devout = {
					set_interest_group_name = ig_theravada_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:orthodox
					OR = {
						NOT = { exists = c:RUS }
						NOT = { c:RUS = scope:target }
					}
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_orthodox_patriarch
				}
			}
			if = {
				limit = {
					exists = c:RUS
					c:RUS = scope:target
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_russian_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:hindu
				}
				ig:ig_devout = {
					set_interest_group_name = ig_hindu_priesthood
					remove_ideology = ideology_hindu_moralist
					add_ideology = ideology_hindu_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:gelugpa
				}
				ig:ig_devout = {
					set_interest_group_name = ig_vajrayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:mahayana
				}
				ig:ig_devout = {
					set_interest_group_name = ig_mahayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:sikh
				}
				ig:ig_devout = {
					set_interest_group_name = ig_sikh_priesthood
					remove_ideology = ideology_moralist
					add_ideology = ideology_sikh_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:oriental_orthodox
				}
				ig:ig_devout = {
					set_interest_group_name = ig_oriental_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_oriental_orthodox_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:confucian
				}
				ig:ig_devout = {
					set_interest_group_name = ig_confucian
					remove_ideology = ideology_pious
					remove_ideology = ideology_moralist
					add_ideology = ideology_confucian
				}
			}
		}
	}
}

# Root = Country
on_country_formed = {
	effect = {
		if = {
			limit = {
				c:LAO ?= ROOT
			}
			trigger_event = { id = formation.1 popup = yes }
		}
        else_if = {
			limit = {
				c:PLT ?= THIS
				was_formed_from = PRG
				has_variable = patino_paraguay_var
			}
			add_primary_culture = cu:guarani
		}
		else_if = {
			limit = {
				c:UBD ?= ROOT
			}
			trigger_event = { id = formation.2 popup = yes }
		}
		else_if = {
			limit = {
				c:BYZ ?= ROOT
			}
			trigger_event = { id = formation.3 popup = yes }
		}
		else_if = {
			limit = {
				c:IBE ?= ROOT
			}
			trigger_event = { id = formation.5 popup = yes }
		}
		else_if = {
			limit = {
				OR = {
					c:BRZ ?= ROOT
					c:USA ?= ROOT
					c:SAF ?= ROOT
				}
			}
			trigger_event = { id = formation.6 popup = yes }
		}
		else_if = {
			limit = {
				c:KUK ?= ROOT
			}
			trigger_event = { id = formation.7 popup = yes }
		}
		else_if = {
			limit = {
				c:ARA ?= ROOT
			}
			trigger_event = { id = formation.8 popup = yes }
		}
		else_if = {
			limit = {
				c:YUG ?= ROOT
			}
			trigger_event = { id = formation.9 popup = yes }
		}
		else_if = {
			limit = {
				c:SCA ?= ROOT
			}
			trigger_event = { id = formation.10 popup = yes }
		}
		else_if = {
			limit = {
				c:MAL ?= ROOT
			}
			trigger_event = { id = formation.11 popup = yes }
		}
		else_if = {
			limit = {
				c:TRH ?= ROOT
			}
			trigger_event = { id = formation.12 popup = yes }
		}
		else_if = {
			limit = {
				c:IDN ?= ROOT
			}
			trigger_event = { id = formation.13 popup = yes }
		}
		else_if = {
			limit = {
				c:BHT ?= ROOT
			}
			trigger_event = { id = formation.14 popup = yes }
		}
		else_if = {
			limit = {
				c:YEM ?= ROOT
			}
			trigger_event = { id = formation.15 popup = yes }
		}
		else_if = {
			limit = {
				c:KAZ ?= ROOT
			}
			trigger_event = { id = formation.16 popup = yes }
		}
		else_if = {
			limit = {
				c:HRE ?= ROOT
			}
			trigger_event = { id = formation.18 popup = yes }
		}
		else_if = {
			limit = {
				c:UNL ?= ROOT
			}
			trigger_event = { id = formation.19 popup = yes }
		}
		else_if = {
			limit = {
				c:RHN ?= ROOT
			}
			trigger_event = { id = formation.20 popup = yes }
		}
		else_if = {
			limit = {
				c:CLI ?= ROOT
			}
			trigger_event = { id = formation.21 popup = yes }
		}
		else_if = {
			limit = {
				c:GER ?= ROOT
			}
			trigger_event = { id = german_unification.4 popup = yes }
		}
		else_if = {
			limit = {
				c:ITA ?= ROOT
			}
			trigger_event = { id = italian_unification.1 popup = yes }
		}
		else_if = {
			limit = {
				c:AFG ?= ROOT
				has_journal_entry = je_unify_afghanistan
			}
			if = {
				limit = {
					was_formed_from = KUN
				}
				add_primary_culture = cu:uzbek
			}
			if = {
				limit = {
					was_formed_from = MAI
				}
				add_primary_culture = cu:uzbek
				add_primary_culture = cu:turkmen
			}
			trigger_event = { id = gg_afghanistan.4 popup = yes }
		}
		else_if = {
			limit = {
				c:FSA ?= ROOT
			}
			trigger_event = { id = fsa_events.1 popup = yes }
		}
		else = {
			trigger_event = { id = formation.17 popup = yes }
		}

		if = {
			limit = {
				c:CHI ?= this
				has_journal_entry = je_reunify_china
			}
			set_global_variable = { name = chinese_central_government value = ROOT }
		}
	}
}

# Root = State
on_migration_target_created = {
	effect = {
		post_notification = migration_target_created
	}
}

# Root = State
on_migration_target_created_other = {
	effect = {
		post_notification = migration_target_created_other
	}
}

# Root = State
on_resource_discovered = {
	events = {
		goldrush.1
		oil_rush.1
		rubber_events.1
	}
}

# Root = State
on_resource_depleted = {
	effect = {
		state_region = {
			post_notification = resource_depleted
		}
	}
	events = {
		goldrush.2
	}
}

# Root = Country
on_peace_agreement_signed_war_leader = {
	effect = {
		post_notification = peace_agreement_signed_war_leader
	}
}

# Root = Country
on_peace_agreement_signed_war_participant = {
	effect = {
		post_notification = peace_agreement_signed_war_participant
	}
}

# Root = Country
on_peace_agreement_signed_non_participant = {
	effect = {
		post_notification = peace_agreement_signed_non_participant
	}
}

# Root = Country
on_capitulation = {
	effect = {
		if = {
			limit = {
				has_variable = revolutionary_prov_gov_var
			}
			remove_variable = revolutionary_prov_gov_var
		}
		set_variable = {
            name = recently_lost_war
            days = 1825
            value = yes
        }
	}
}

# Root = Country
on_self_capitulated_notification = {
	effect = {
		post_notification = self_capitulated
		set_variable = {
			name = recent_capitulation
			months = short_modifier_time
		}
	}
}

# Root = Country
on_enemy_capitulated_notification = {
	effect = {
		post_notification = enemy_capitulated
	}
}

# Root = Country
on_ally_capitulated_notification = {
	effect = {
		post_notification = ally_capitulated
	}
}

# Root = Formation
on_mobilized_army = {
	effect = {
	}
}

# Root = Formation
on_demobilized_army = {
	effect = {
	}
}

# Root = Character
on_mobilized_general = {
}

# Root = Character
on_demobilized_general = {
}

# Root = Diplomatic Play
on_diplo_play_start = {
	effect = {
		post_notification = diplo_play_start_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_start_third_party = {
	effect = {
		post_notification = diplo_play_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down = {
	effect = {
		post_notification = diplo_play_back_down_notification
		if = {
			limit = {
				scope:notification_target = {
					is_player = yes
				}
				scope:actor = {
					is_player = no
				}
			}
			set_global_variable = achievement_mightier_than_the_sword
		}
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down_involved = {
	effect = {
		post_notification = diplo_play_back_down_involved_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_join_side = {
	effect = {
		post_notification = diplo_play_join_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_abandon_side = {
	effect = {
		post_notification = diplo_play_abandon_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_war_start = {
	effect = {
		post_notification = diplo_play_war_start_notification
		post_notification = diplo_play_war_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released = {
	effect = {
		post_notification = diplo_play_subject_released_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released_overlord = {
	effect = {
		post_notification = diplo_play_subject_released_overlord_notification
	}
}

# Root = Diplomatic Play
# country = Country switched to
# previous = Country switched from
on_diplo_play_switch_sides = {
	effect = {
		set_global_variable = achievement_revo_needed
	}
}

# Root = Diplomatic Play
on_diplo_play_declare_neutrality = {
	effect = {
		post_notification = diplo_play_declare_neutrality_notification
	}
}


# Root = Diplomatic Play
on_sway_offer = {
	effect = {
		post_proposal = proposal_sway_offer
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer = {
	effect = {
		post_proposal = proposal_reverse_sway_offer
	}
}

# Root = Diplomatic Play
on_sway_offer_accepted = {
	effect = {
		post_notification = sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_accepted = {
	effect = {
		post_notification = reverse_sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_country_swayed = {
	effect = {
		post_notification = country_swayed
	}
}

# Root = Diplomatic Play
on_sway_offer_rejected = {
	effect = {
		post_notification = sway_offer_rejected
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_rejected = {
	effect = {
		post_notification = reverse_sway_offer_rejected
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand = {
	effect = {
		post_proposal = proposal_diplomatic_demand
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_accepted = {
	effect = {
		post_notification = diplomatic_demand_accepted
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_rejected = {
	effect = {
		post_notification = diplomatic_demand_rejected
	}
}

# Root = Building
on_production_method_changed = {
	effect = {
		owner = {
			if = {
				limit = { 
					has_journal_entry = je_tutorial_change_production_method
					je:je_tutorial_change_production_method.target = root
				}
				set_variable = has_changed_production_method
			}
		}	
	}
}

# Root = owner Country of the Law
# Executed when enactment of any law begins
on_law_enactment_started = {
	effect = {
		if = {
			limit = {
				has_law = law_type:law_monarchy
				OR = {
					is_enacting_law = law_type:law_presidential_republic
					is_enacting_law = law_type:law_parliamentary_republic
					is_enacting_law = law_type:law_council_republic
				}
			}
			set_variable = {
				name = abolishing_monarchy_var
				value = 0
			}
			add_journal_entry = { type =  je_abolish_monarchy }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is success
on_law_checkpoint_success = {
	effect = {
		add_enactment_phase = 1
		if = {
			limit = {
				enacting_any_law = yes
			}
			trigger_event = { id = law_notification.4 days = 0 }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {
	random_events = {
		10 = laws.1
		10 = children_rights_events.1 
		10 = free_speech_laws.1
		10 = free_speech_laws.2
		10 = labor_rights.1
		10 = labor_rights.4
		10 = children_rights_events.4
		10 = welfare_laws.1
		10 = welfare_laws.4
		10 = welfare_laws.8
		10 = migration_laws.1
		10 = migration_laws.4
		10 = bureaucracy.2
		10 = colonization.1
		10 = colonization.3
		10 = rights_of_women_laws.1
		10 = rights_of_women_laws.2
		10 = internal_security_events.2
		10 = slavery_law_events.1
		10 = slavery_law_events.4
		10 = laws_police.1
		10 = anarchy.3
		10 = tax.2
		10 = tax.5
		10 = theocracy.1
		10 = citizenship_laws.1
		10 = citizenship_laws.4
		100 = 1848.1
		100 = 1848.3
		10 = education_laws.1
		10 = education_laws.4
		10 = distribution_of_power_laws.1
		10 = council_republic_law_events.1
		10 = distribution_of_power_laws.4
		10 = monarchy_law_events.1
		10 = monarchy_law_events.2
		10 = economy_laws.1
		10 = economy_laws.4
		10 = meiji.4
		10 = meiji.5
		10 = meiji.6
		10 = conscription_laws.1
		10 = republic_laws.1
		10 = internal_security_events.4
		10 = healthcare_laws.1
		10 = healthcare_laws.4
		10 = anti_state_religion.1
		10 = distribution_of_power_laws.7
		10 = distribution_of_power_laws.10
		10 = rights_of_women_laws.5
		10 = agitators_law_events.3
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.17
		10 = agitators_law_events.21
		10 = agitators_law_events.22
		10 = agitators_law_events.23
		10 = agitators_law_events.24
		10 = agitators_law_events.25
		10 = agitators_law_events.26
		10 = agitators_law_events.27
		10 = agitators_law_events.28
		10 = agitators_law_events.29
		10 = agitators_law_events.30
		10 = state_atheism.2
		10 = state_atheism.6
		2 = generic_laws.1
		2 = generic_laws.4
		2 = generic_laws.7
		2 = generic_laws.10
		2 = ig_petitions.4 #Devout want State Religion
		2 = ig_petitions.7 #Intelligentsia want free speech
		2 = ig_petitions.19 #Armed forces want conscription
		2 = ig_petitions.22 #Petite-Bourgeoisie want Restricted Citizenship
		1 = law_notification.1
		10 = single_party_state.1
		5 = single_party_state.6
		5 = single_party_state.7
		10 = land_ownership_law_events.2
		10 = land_ownership_law_events.5
		10 = land_ownership_law_events.8
		10 = luddite_law_events.1
		10 = luddite_law_events.4
		10 = agitator_legal_events.21
		10 = agitator_legal_events.22
		10 = agitator_legal_events.23
		10 = agitator_legal_events.24
		10 = agitator_legal_events.25
		10 = agitator_legal_events.26
		10 = agitator_legal_events.27
		10 = agitator_legal_events.28
		10 = agitator_legal_events.29
		10 = agitator_legal_events.30
		10 = land_ownership_law_events.13
		10 = land_ownership_law_events.16
		10 = technocracy.2
		100 = nihilism.13
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {
	random_events = {
		10 = children_rights_events.2
		10 = free_speech_laws.5
		10 = labor_rights.2
		10 = labor_rights.5
		10 = children_rights_events.6
		10 = welfare_laws.2
		10 = welfare_laws.5
		10 = welfare_laws.9
		10 = migration_laws.2
		10 = migration_laws.5
		10 = bureaucracy.3
		10 = colonization.1
		10 = free_speech_laws.5
		10 = free_speech_laws.6
		10 = internal_security_events.3
		10 = slavery_law_events.2
		10 = slavery_law_events.5
		10 = laws_police.2
		10 = anarchy.2
		10 = tax.3
		10 = tax.6
		10 = theocracy.2
		10 = citizenship_laws.2
		10 = citizenship_laws.5
		10 = education_laws.2
		10 = education_laws.5
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.2
		10 = council_republic_law_events.2
		10 = distribution_of_power_laws.5
		10 = monarchy_law_events.3
		10 = economy_laws.2
		10 = economy_laws.5
		10 = isolation.2
		10 = conscription_laws.2
		10 = republic_laws.2
		10 = internal_security_events.5
		10 = healthcare_laws.2
		10 = healthcare_laws.5
		10 = anti_state_religion.2
		10 = colonization.4
		10 = distribution_of_power_laws.8
		10 = distribution_of_power_laws.11
		10 = rights_of_women_laws.4
		10 = rights_of_women_laws.7
		10 = law_events.1
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.5
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = agitators_law_events.13
		10 = agitators_law_events.18
		10 = agitators_law_events.20
		10 = state_atheism.1
		10 = state_atheism.5
		2 = generic_laws.3
		2 = generic_laws.6
		2 = generic_laws.9
		2 = generic_laws.12
		10 = ig_petitions.1 #Landowners want to reverse Suffrage
		10 = ig_petitions.10 #Rural folk want no conscription
		10 = ig_petitions.13 #Trade Unions want compulsory primary school
		20 = ig_petitions.16 #Industrialists want no graduated taxes
		1 = law_notification.2
		10 = single_party_state.2
		10 = land_ownership_law_events.1
		10 = land_ownership_law_events.4
		10 = land_ownership_law_events.7
		10 = luddite_law_events.2
		10 = luddite_law_events.5
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.13
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.16
		10 = agitators_law_events.17
		10 = agitators_law_events.18
		10 = agitators_law_events.19
		10 = agitators_law_events.20
		10 = land_ownership_law_events.12
		10 = land_ownership_law_events.15
		10 = agitator_legal_events.11
		10 = agitator_legal_events.12
		10 = agitator_legal_events.13
		10 = agitator_legal_events.14
		10 = agitator_legal_events.15
		10 = agitator_legal_events.16
		10 = agitator_legal_events.17
		10 = agitator_legal_events.18
		10 = agitator_legal_events.19
		10 = agitator_legal_events.20
		10 = technocracy.3
	}
	events = {
		tanzimat_events.1
		tanzimat_events.2
		tanzimat_events.4
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is stall
on_law_checkpoint_stall = {
	random_events = {
		10 = children_rights_events.3
		10 = free_speech_laws.3
		10 = free_speech_laws.4
		10 = labor_rights.3
		10 = labor_rights.6
		10 = children_rights_events.5
		10 = welfare_laws.3
		10 = welfare_laws.6
		10 = welfare_laws.10
		10 = migration_laws.3
		10 = migration_laws.6
		10 = bureaucracy.1
		10 = colonization.1
		10 = colonization.2
		10 = rights_of_women_laws.3
		10 = internal_security_events.1
		10 = slavery_law_events.3
		10 = slavery_law_events.6
		10 = laws_police.3
		10 = anarchy.1
		10 = tax.1
		10 = tax.4
		10 = theocracy.3
		10 = citizenship_laws.3
		10 = citizenship_laws.6
		10 = education_laws.3
		10 = education_laws.6
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.3
		10 = council_republic_law_events.3
		10 = distribution_of_power_laws.6
		10 = monarchy_law_events.4
		10 = economy_laws.3
		10 = economy_laws.6
		10 = isolation.1
		10 = conscription_laws.3
		10 = republic_laws.3
		10 = internal_security_events.6
		10 = healthcare_laws.3
		10 = healthcare_laws.6
		10 = anti_state_religion.3
		10 = distribution_of_power_laws.9
		10 = distribution_of_power_laws.12
		10 = rights_of_women_laws.6
		10 = agitators_law_events.4
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.16
		10 = agitators_law_events.19
		10 = state_atheism.3
		10 = state_atheism.4
		10 = exiles_more_events.2
		2 = generic_laws.2
		2 = generic_laws.5
		2 = generic_laws.8
		2 = generic_laws.11
		1 = law_notification.3
		10 = single_party_state.3
		50 = single_party_state.4
		50 = single_party_state.5
		10 = land_ownership_law_events.3
		10 = land_ownership_law_events.6
		10 = land_ownership_law_events.9
		10 = luddite_law_events.3
		10 = luddite_law_events.6
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.4
		10 = agitators_law_events.5
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = land_ownership_law_events.10
		10 = land_ownership_law_events.11
		10 = land_ownership_law_events.14
		10 = land_ownership_law_events.17
		10 = land_ownership_law_events.18
		10 = agitator_legal_events.1
		10 = agitator_legal_events.2
		10 = agitator_legal_events.3
		10 = agitator_legal_events.4
		10 = agitator_legal_events.5
		10 = agitator_legal_events.6
		10 = agitator_legal_events.7
		10 = agitator_legal_events.8
		10 = agitator_legal_events.9
		10 = agitator_legal_events.10
		10 = technocracy.1
	}
}

# Root = owner Country of the Law
# Executed when an enacting law is passed by reaching the final enactment phase
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_pass = {
	effect = {
		if = {
			limit = {
				is_player = yes
				NOT = { has_variable = achievement_vox_populi_var }
				any_political_movement = {
					desired_law = ROOT.currently_enacting_law.type
					any_supporting_character = {
						has_role = agitator
					}
				}
			}
			set_variable = achievement_vox_populi_var
		}
		if = {
			limit = {
				is_player = yes
				NOT = {
					has_variable = achievement_amish_paradise_var
				}
				is_enacting_law = law_type:law_industry_banned
				year < 1846
			}
			set_variable = achievement_amish_paradise_var
		}
		if = {
			limit = {
				has_journal_entry = je_pedro_republic
				is_enacting_law = law_type:law_presidential_republic
			}
			set_variable = { name = hide_ruler_change_notification days = 3 }
			ruler = { place_character_in_void = 6 }
			trigger_event = { id = pedro.10 popup = yes days = 1 }
		}
		if = {
			limit = {
				has_modifier = brazil_slaving_pariah_modifier
				has_law = law_type:law_slave_trade
				OR = {
					is_enacting_law = law_type:law_debt_slavery
					is_enacting_law = law_type:law_legacy_slavery
					is_enacting_law = law_type:law_slavery_banned
				}
			}
			remove_modifier = brazil_slaving_pariah_modifier
		}
		if = {
			limit = {
				OR = {
					has_modifier = unrestricted_slave_trade_modifier
					has_modifier = restricted_slave_trade_modifier
					has_modifier = slave_shipments_intercepted_small
					has_modifier = slave_shipments_intercepted_large
				}
				has_law = law_type:law_slave_trade
				OR = {
					is_enacting_law = law_type:law_debt_slavery
					is_enacting_law = law_type:law_legacy_slavery
				}
			}
			if = {
				limit = {
					has_modifier = unrestricted_slave_trade_modifier
				}
				remove_modifier = unrestricted_slave_trade_modifier
			}
			if = {
				limit = {
					has_modifier = restricted_slave_trade_modifier
				}
				remove_modifier = restricted_slave_trade_modifier
			}
			if = {
				limit = {
					has_modifier = slave_shipments_intercepted_small
				}
				remove_modifier = slave_shipments_intercepted_small
			}
			if = {
				limit = {
					has_modifier = slave_shipments_intercepted_large
				}
				remove_modifier = slave_shipments_intercepted_large
			}
			if = {
				limit = {
					has_variable = var_slave_trade_suppression_var
				}
				remove_variable = var_slave_trade_suppression_var
			}
		}
		if = {
			limit = {
				c:CHI ?= {
					has_modifier = opium_ban_authority
					is_enacting_law = law_type:law_free_trade
				}
			}
			remove_modifier = opium_ban_authority
		}
	}
}

# Root = owner Country of the Law
# Executed when enactment fails by accumulating too many setbacks
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_fail = {
	effect = {
		post_notification = enactment_failed
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {
}

# Root owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {
	effect = {
		if = {
			limit = {
				c:BRZ ?= {
					has_journal_entry = je_matter_of_slavery
					OR = {
						has_modifier = unrestricted_slave_trade_modifier
						has_modifier = restricted_slave_trade_modifier
						has_modifier = slave_shipments_intercepted_small
						has_modifier = slave_shipments_intercepted_large
					}
					OR = {
						has_law = law_type:law_debt_slavery
						has_law = law_type:law_legacy_slavery
					}
				}
			}
			c:BRZ ?= {
				if = {
					limit = {
						has_modifier = unrestricted_slave_trade_modifier
					}
					remove_modifier = unrestricted_slave_trade_modifier
				}
				if = {
					limit = {
						has_modifier = restricted_slave_trade_modifier
					}
					remove_modifier = restricted_slave_trade_modifier
				}
				if = {
					limit = {
						has_modifier = slave_shipments_intercepted_small
					}
					remove_modifier = slave_shipments_intercepted_small
				}
				if = {
					limit = {
						has_modifier = slave_shipments_intercepted_large
					}
					remove_modifier = slave_shipments_intercepted_large
				}
				if = {
					limit = {
						has_variable = var_slave_trade_suppression_var
					}
					remove_variable = var_slave_trade_suppression_var
				}
			}
		}
		if = {
			limit = {
				c:BRZ = {
					has_journal_entry = je_matter_of_slavery
					OR = {
						has_law = law_type:law_debt_slavery
						has_law = law_type:law_legacy_slavery
					}
					any_interest_group = {
						has_modifier = restricted_slave_trade_ig_modifier
					}
				}
			}
			c:BRZ ?= {
				every_interest_group = {
					limit = {
						has_modifier = restricted_slave_trade_ig_modifier
					}
					remove_modifier = restricted_slave_trade_ig_modifier
				}
			}
		}
	}
}

# Root = Institution
on_investment_increased = {
	effect = {
		post_notification = institution_investment_increased
	}
}

# Root = Institution
on_investment_decreased = {
	effect = {
		post_notification = institution_investment_decreased
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_start = {
	effect = {
		scope:target ?= {
			enact_preferred_governance_principle = yes
			if = {
				limit = {
					has_law = law_type:law_single_party_state
				}
				handle_revolutionary_sps = yes
			}
		}
		if = {
			limit = {
				has_law = law_type:law_monarchy
				scope:target ?= {
					NOT = {
						has_law = law_type:law_monarchy
					}
				}
			}
			set_variable = anti_monarchist_revolution
		}
		if = {
			limit = {
				has_journal_entry = je_warlord_china
				NOT = { has_variable = china_warlord_explosion_revolution }
			}
			chi_remove_1_fragile_unity = yes
			set_variable = china_warlord_explosion_revolution
		}
		if = {
			limit = {
				OR = {
					has_journal_entry = je_meiji_restoration
					has_inactive_journal_entry = je_meiji_restoration
				}
				scope:target = {
					ig:ig_landowners = {
						is_in_government = yes
					}
				}
			}
			set_variable = anti_shogunate_civil_war
		}
		if = {
			limit = {
				has_journal_entry = je_the_paris_commune_france
			}
			c:FRA = {
				trigger_event = { id = paris_commune.4 popup = yes }
			}
			random_scope_state = {
				limit = {
					state_region = s:STATE_ILE_DE_FRANCE
				}
				set_state_owner = c:PRC
			}
			c:PRC = {
				annex = scope:target
				create_diplomatic_play = {
					type = dp_revolution
					target_state = c:FRA.capital
					annex_as_civil_war = yes
				}
			}
		}
		if = {
			limit = {
				has_dlc_feature = voice_of_the_people_content
				c:KRA ?= root
				c:AUS ?= {
					any_subject_or_below = {
						c:KRA ?= this
					}
				}
			}
			c:AUS = {
				trigger_event = { id = krakow.1 days = 3 popup = yes }
			}
		}
		if = {
			limit = {
				has_dlc_feature = voice_of_the_people_content
				c:FRA ?= ROOT
			}
			if = {
				limit = {
					scope:target = {
						is_secessionist = no
						has_law = law_type:law_monarchy
						any_interest_group = {
							is_in_government = yes
							is_strongest_ig_in_government = yes
							leader = {
								has_ideology = ideology:ideology_orleanist
							}
						}
					}
				}
				scope:target = {
					if = {
						limit = {
							has_variable = bonapartist_restoration_var
						}
						remove_variable = bonapartist_restoration_var
					}
					if = {
						limit = {
							has_variable = legitimist_restoration_var
						}
						remove_variable = legitimist_restoration_var
					}
					set_variable = { name = orleanist_restoration_var }
					if = {
						limit = {
							ROOT.ruler = {
								has_ideology = ideology:ideology_orleanist
							}
						}
						create_character = {
							template = dynamic_orleanist_ruler_template
						}
					}
					else = {
						generate_french_monarch = yes
					}
				}
			}
			else_if = {
				limit = {
					scope:target = {
						is_secessionist = no
						has_law = law_type:law_monarchy
						any_interest_group = {
							is_in_government = yes
							is_strongest_ig_in_government = yes
							leader = {
								has_ideology = ideology:ideology_legitimist
							}
						}
					}
				}
				scope:target = {
					if = {
						limit = {
							has_variable = bonapartist_restoration_var
						}
						remove_variable = bonapartist_restoration_var
					}
					if = {
						limit = {
							has_variable = orleanist_restoration_var
						}
						remove_variable = orleanist_restoration_var
					}
					set_variable = { name = legitimist_restoration_var }
					if = {
						limit = {
							ROOT.ruler = {
								has_ideology = ideology:ideology_legitimist
							}
						}
						create_character = {
							template = dynamic_legitimist_ruler_template
						}
					}
					else = {
						generate_french_monarch = yes
					}
				}
			}
			else_if = {
				limit = {
					scope:target = {
						is_secessionist = no
						has_law = law_type:law_monarchy
						any_interest_group = {
							is_in_government = yes
							is_strongest_ig_in_government = yes
							leader = {
								has_ideology = ideology:ideology_bonapartist
							}
						}
					}
				}
				scope:target = {
					if = {
						limit = {
							has_variable = orleanist_restoration_var
						}
						remove_variable = orleanist_restoration_var
					}
					if = {
						limit = {
							has_variable = legitimist_restoration_var
						}
						remove_variable = legitimist_restoration_var
					}
					set_variable = { name = bonapartist_restoration_var }
					if = {
						limit = {
							ROOT.ruler = {
								has_ideology = ideology:ideology_bonapartist
							}
						}
						create_character = {
							template = dynamic_bonapartist_ruler_template
						}
					}
					else = {
						generate_french_monarch = yes
					}
				}
			}
		}
		if = {
			limit = {
				has_dlc_feature = ep1_content
				c:KOR ?= ROOT
				c:JAP ?= {
					NOT = {
						has_law = law_type:law_isolationism
					}
					has_interest_marker_in_region = region_manchuria
					has_technology_researched = electric_telegraph
				}
				any_country = {
					OR = {
						country_has_primary_culture = cu:han
						country_has_primary_culture = cu:manchu
					}
					any_subject_or_below = {
						c:KOR = this
					}
					has_technology_researched = electric_telegraph
				}
			}
			c:JAP = {
				trigger_event = { id = gg_korea.7 popup = yes }
			}
			random_country = {
				limit = {
					OR = {
						country_has_primary_culture = cu:han
						country_has_primary_culture = cu:manchu
					}
					any_subject_or_below = {
						c:KOR = this
					}
				}
				trigger_event = { id = gg_korea.7 popup = yes }
			}
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_end = {
}

# Root = Country
# scope:target = Uprising country
on_secession_start = {
	effect = {
		if = {
			limit = {
				has_journal_entry = je_warlord_china
				NOT = { has_variable = china_warlord_explosion_revolution }
			}
			chi_remove_1_fragile_unity = yes
			set_variable = china_warlord_explosion_revolution
		}
		if = {
			limit = {
				NOT = {
					exists = c:RSM
				}
				scope:target = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
				ROOT = {
					NOR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
				any_country = {
					has_journal_entry = je_risorgimento
				}
			}
			root = {
				trigger_event = { id = italian_unification.7 days = 3 }
			}
		}
		if = {
			limit = {
				NOR = {
			        c:POL ?= this
			        c:KRA ?= this
			        AND = {
			            c:GAL ?= this
			            ruler = {
			                culture = cu:polish
			            }
			        }
				}
				scope:target = {
					OR = {
			            c:POL ?= this
			            c:KRA ?= this
			            AND = {
			                c:GAL ?= this
			                ruler = {
			                    culture = cu:polish
			                }
			            }
			        }
				}
				OR = {
					c:POL ?= {
						NOT = {
							this = scope:target
						}
					}
					c:KRA ?= {
						NOT = {
							this = scope:target
						}
					}
					c:GAL ?= {
						NOT = {
							this = scope:target
						}
					}
				}
			}
			scope:target = {
				set_variable = {
					name = polish_rebel_country_var
					months = short_modifier_time
				}
			}
			set_variable = {
				name = polish_rebel_country_enemy_var
				months = short_modifier_time
			}
			every_country = {
				limit = {
					OR = {
						c:POL ?= this
						c:KRA ?= this
			            AND = {
			                c:GAL ?= this
			                ruler = {
			                    culture = cu:polish
			                }
			            }
					}
					NOT = {
						this = scope:target
					}

				}
				trigger_event = { id = poland_events.5 days = 7 popup = yes }
			}
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_secession_end = {
}

# Root = Country
# This action is triggered after `on_revolution_end`
on_civil_war_won = {
	effect = {
		if = {
			limit = {
				has_global_variable = achievement_revo_needed
			}
			set_global_variable = achievement_revolutionary
		}
		if = {
			limit = {
				has_journal_entry = je_meiji_restoration
				has_variable = anti_shogunate_civil_war
				has_variable = shogunate_var
			}
			change_variable = {
				name = shogunate_var
				add = 120
			}
			remove_variable = anti_shogunate_civil_war
		}
		if = {
			limit = {
				has_variable = anti_monarchist_revolution
			}
			if = {
				limit = {
					NOT = {
						has_law = law_type:law_monarchy
					}
				}
				set_variable = {
					name = abolishing_monarchy_var
					value = 0
				}
				add_journal_entry = { type = je_abolish_monarchy }
			}
			remove_variable = anti_monarchist_revolution
		}
		if = {
			limit = {
				has_law = law_type:law_presidential_republic
				has_variable = revolutionary_prov_gov_var
			}
			trigger_event = { id = provisional_government_events.1 days = 7 popup = yes }
		}

		##### FRENCH MONARCHISTS WHEN A CIVIL WAR IS WON #####

		### Orleanists
		if = {
			limit = {
				c:FRA ?= this
				has_law = law_type:law_monarchy
				any_interest_group = {
					is_in_government = yes
					is_strongest_ig_in_government = yes
					leader = {	
						has_ideology = ideology:ideology_orleanist
					}
				}
				NOT = { has_variable = one_true_french_dynasty }
			}

			### Reset AI to support Orleanists. Players can continue to support any dynasty they like ###
			if = {
				limit = {
					is_player = no
					has_variable = supporting_bonapartist_var
				}
				remove_variable = supporting_bonapartist_var
			}
			if = {
				limit = {
					is_player = no
					has_variable = supporting_legitimist_var
				}
				remove_variable = supporting_legitimist_var
			}
			if = {
				limit = {
					is_player = no
					NOT = { has_variable = supporting_orleanist_var }
				}
				set_variable = {
					name = supporting_orleanist_var
				}
			}
			### 

			# Generate an Orleanist monarch if somehow there's not an Orleanist in charge and it's either the AI, or the player has set a restoration variable and something's just gotten buggy. 
			# If France is controlled by a player and a dynasty other than the Orleanists has been restored to the throne, nothing in this section applies.
			if = {
				limit = {
					any_scope_character = {
						is_ruler = yes
						NOT = { has_variable = orleanist_leader }
					}
					OR = {
						is_player = no
						AND = {
							is_player = yes
							has_variable = orleanist_restoration_var
						}
					}
				}
				generate_french_monarch = yes
				if = {
					limit = {
						has_variable = bonapartist_restoration_var
					}
					remove_variable = bonapartist_restoration_var
				}
				if = {
					limit = {
						has_variable = legitimist_restoration_var
					}
					remove_variable = legitimist_restoration_var
				}
				if = {
					limit = {
						NOT = { has_variable = orleanist_restoration_var }
					}
					set_variable = orleanist_restoration_var
				}
			}
			###

			# If France somehow doesn't have the monarchist JEs, it (re)gains them
			if = {
				limit = {
					NOT = { has_journal_entry = je_divided_monarchists }
					has_dlc_feature = voice_of_the_people_content
				}
				if = {
					limit = {
						has_variable = fra_divided_monarchists_freeze
					}
					remove_variable = fra_divided_monarchists_freeze
				}
				add_journal_entry = {
					type = je_divided_monarchists
				}
			}

			if = {
				limit = {
					has_variable = orleanist_restoration_var
					NOT = { has_journal_entry = je_cement_the_rightful_dynasty }
					has_dlc_feature = voice_of_the_people_content
				}
				add_journal_entry = {
					type = je_cement_the_rightful_dynasty
				}
			}
		}

		### Bonapartists
		else_if = {
			limit = {
				c:FRA ?= this
				has_law = law_type:law_monarchy
				any_interest_group = {
					is_in_government = yes
					is_strongest_ig_in_government = yes
					leader = {	
						has_ideology = ideology:ideology_bonapartist
					}
				}
				NOT = { has_variable = one_true_french_dynasty }
			}

			### Reset AI to support Bonapartists. Players can continue to support any dynasty they like ###
			if = {
				limit = {
					is_player = no
					has_variable = supporting_orleanist_var
				}
				remove_variable = supporting_orleanist_var
			}
			if = {
				limit = {
					is_player = no
					has_variable = supporting_legitimist_var
				}
				remove_variable = supporting_legitimist_var
			}
			if = {
				limit = {
					is_player = no
					NOT = { has_variable = supporting_bonapartist_var }
				}
				set_variable = {
					name = supporting_bonapartist_var
				}
			}
			### 

			# Generate a Bonapartist monarch if somehow there's not an Bonapartist in charge and it's either the AI, or the player has set a restoration variable and something's just gotten buggy. 
			# If France is controlled by a player and a dynasty other than the glorious house of Bonaparte has been restored to the throne, nothing in this section applies.
			if = {
				limit = {
					any_scope_character = {
						is_ruler = yes
						NOT = { has_variable = bonapartist_leader }
					}
					OR = {
						is_player = no
						AND = {
							is_player = yes
							has_variable = bonapartist_restoration_var
						}
					}
				}
				generate_french_monarch = yes
				if = {
					limit = {
						has_variable = orleanist_restoration_var
					}
					remove_variable = orleanist_restoration_var
				}
				if = {
					limit = {
						has_variable = legitimist_restoration_var
					}
					remove_variable = legitimist_restoration_var
				}
				if = {
					limit = {
						NOT = { has_variable = bonapartist_restoration_var }
					}
					set_variable = bonapartist_restoration_var
				}
			}
			###

			# If France somehow doesn't have the monarchist JEs, it (re)gains them
			if = {
				limit = {
					NOT = { has_journal_entry = je_divided_monarchists }
					has_dlc_feature = voice_of_the_people_content
				}
				if = {
					limit = {
						has_variable = fra_divided_monarchists_freeze
					}
					remove_variable = fra_divided_monarchists_freeze
				}
				add_journal_entry = {
					type = je_divided_monarchists
				}
			}

			if = {
				limit = {
					has_variable = bonapartist_restoration_var
					NOT = { has_journal_entry = je_cement_the_rightful_dynasty }
					has_dlc_feature = voice_of_the_people_content
				}
				add_journal_entry = {
					type = je_cement_the_rightful_dynasty
				}
			}
		}

		### Legitimists
		else_if = {
			limit = {
				c:FRA ?= this
				has_law = law_type:law_monarchy
				any_interest_group = {
					is_in_government = yes
					is_strongest_ig_in_government = yes
					leader = {	
						has_ideology = ideology:ideology_legitimist
					}
				}
				NOT = { has_variable = one_true_french_dynasty }
			}

			### Reset AI to support Legitimists. Players can continue to support any dynasty they like ###
			if = {
				limit = {
					is_player = no
					has_variable = supporting_bonapartist_var
				}
				remove_variable = supporting_bonapartist_var
			}
			if = {
				limit = {
					is_player = no
					has_variable = supporting_orleanist_var
				}
				remove_variable = supporting_orleanist_var
			}
			if = {
				limit = {
					is_player = no
					NOT = { has_variable = supporting_legitimist_var }
				}
				set_variable = {
					name = supporting_legitimist_var
				}
			}
			### 

			# Generate a Legitimist monarch if somehow there's not an Legitimist in charge and it's either the AI, or the player has set a restoration variable and something's just gotten buggy. 
			# If France is controlled by a player and a dynasty other than the house of Bourbon has been restored to the throne, nothing in this section applies.
			if = {
				limit = {
					any_scope_character = {
						is_ruler = yes
						NOT = { has_variable = legitimist_leader }
					}
					OR = {
						is_player = no
						AND = {
							is_player = yes
							has_variable = legitimist_restoration_var
						}
					}
				}
				generate_french_monarch = yes
				if = {
					limit = {
						has_variable = orleanist_restoration_var
					}
					remove_variable = orleanist_restoration_var
				}
				if = {
					limit = {
						has_variable = bonapartist_restoration_var
					}
					remove_variable = bonapartist_restoration_var
				}
				if = {
					limit = {
						NOT = { has_variable = legitimist_restoration_var }
					}
					set_variable = legitimist_restoration_var
				}
			}
			###

			# If France somehow doesn't have the monarchist JEs, it (re)gains them
			if = {
				limit = {
					NOT = { has_journal_entry = je_divided_monarchists }
					has_dlc_feature = voice_of_the_people_content
				}
				if = {
					limit = {
						has_variable = fra_divided_monarchists_freeze
					}
					remove_variable = fra_divided_monarchists_freeze
				}
				add_journal_entry = {
					type = je_divided_monarchists
				}
			}

			if = {
				limit = {
					has_variable = legitimist_restoration_var
					NOT = { has_journal_entry = je_cement_the_rightful_dynasty }
					has_dlc_feature = voice_of_the_people_content
				}
				add_journal_entry = {
					type = je_cement_the_rightful_dynasty
				}
			}
		}
	}
}

on_revolution_checkpoint_reached = {
	effect = {
	}
	random_events = {
		# IGs and Revolutions
		5 = ig_revolutions.1
		5 = ig_revolutions.2
		5 = ig_revolutions.3
		5 = ig_revolutions.4
		5 = ig_revolutions.5
		5 = ig_revolutions.6
		5 = ig_revolutions.7
		5 = ig_revolutions.8
		5 = ig_revolutions.9
		10 = revolution_pulse_events.1
		10 = revolution_pulse_events.2
		10 = revolution_pulse_events.3
		10 = revolution_pulse_events.4
		10 = revolution_pulse_events.5
		10 = revolution_pulse_events.6
		10 = revolution_pulse_events.7
		10 = revolution_pulse_events.8
		10 = revolution_pulse_events.9
		10 = revolution_pulse_events.10
		10 = revolution_pulse_events.11
		10 = revolution_pulse_events.12
		10 = revolution_pulse_events.13
		30 = revolution_pulse_events.14
		30 = revolution_pulse_events.15
		30 = revolution_pulse_events.16
		30 = revolution_pulse_events.17
		30 = revolution_pulse_events.18
		30 = revolution_pulse_events.19
		30 = revolution_pulse_events.20
		10 = revolution_pulse_events.21
		10 = revolution_pulse_events.22
		10 = revolution_pulse_events.23
		10 = revolution_pulse_events.24
		10 = revolution_pulse_events.25
		10 = revolution_pulse_events.26
		10 = revolution_pulse_events.27
		10 = revolution_pulse_events.28
		10 = revolution_pulse_events.29
		10 = revolution_pulse_events.30
		10 = revolution_pulse_events.31
		10 = revolution_pulse_events.32
		10 = revolution_pulse_events.33
		10 = revolution_pulse_events.34
		10 = revolution_pulse_events.35
		10 = revolution_pulse_events.36
		10 = revolution_pulse_events.37
		10 = revolution_pulse_events.38
		10 = revolution_pulse_events.39
		10 = revolution_pulse_events.40
		10 = revolution_pulse1_events.1
		10 = revolution_pulse1_events.2
		10 = revolution_pulse1_events.3
		10 = revolution_pulse1_events.4
		10 = revolution_pulse1_events.5
		10 = revolution_pulse1_events.6
		10 = revolution_pulse1_events.7
		10 = revolution_pulse1_events.8
		10 = revolution_pulse1_events.9
		10 = revolution_pulse1_events.10
		10 = revolution_pulse1_events.11
		10 = revolution_pulse1_events.12
		10 = revolution_pulse1_events.15
		10 = revolution_pulse1_events.16
		10 = revolution_pulse1_events.17
		10 = revolution_pulse1_events.18
		10 = revolution_pulse1_events.19
		10 = revolution_pulse2_events.1
		10 = revolution_pulse2_events.2
		10 = revolution_pulse2_events.3
		10 = revolution_pulse2_events.4
		10 = revolution_pulse2_events.5
		10 = revolution_pulse2_events.7
		10 = revolution_pulse2_events.9
		10 = revolution_pulse2_events.10
	}
}

on_secession_checkpoint_reached = {
	effect = {
	}
}

# Root = Political Movement
on_political_movement_supported_law_cancelled = {
	effect = {
		add_modifier = {
			name = supported_law_cancelled
			months = 120
		}
	}
}

# Root = Country
# scope:target = the country the wargoal was enforced against
# scope:diplomatic_play = the relevant diplomatic play
# scope:wargoal_impact = the impact of the wargoal enforced
on_wargoal_enforced = {
	effect = {
		if = {
			limit = {
				OR = {
					AND = {
						has_journal_entry = je_anti_lobby_demand
						var:anti_lobby_demand_target ?= scope:target
					}
					AND = {
						has_journal_entry = je_pro_lobby_demand
						var:pro_lobby_demand_target ?= scope:target
					}
				}
			}
			set_variable = { name = enforced_wargoal_on_enemy days = 90 }
		}
		set_variable = {
            name = recently_won_war
            days = 1825
            value = yes
        }
        if = {
        	limit = {
        		c:PRC ?= root
        		NOT = {
        			exists = c:FRA
        		}
        	}
        	c:PRC = {
				set_immune_to_revolutions = no
				change_tag = FRA
				every_scope_state = {
					limit = {
						state_region = {
							is_homeland = cu:french
						}
					}
					set_state_type = incorporated
				}
        	}
        }
		if = {
			limit = {
				c:FRA ?= root
				NOT = {
					exists = c:PRC
				}
			}
			if = {
				limit = {
					c:FRA = {
						is_immune_to_revolutions = yes
					}
				}
				set_immune_to_revolutions = no
			}
		}
        if = {
        	limit = {
        		owner = {
	        		c:PNI ?= this
	        		has_variable = ragamuffin_nation_var
	        		NOT = { has_variable = won_ragamuffin_war_var }
					owns_entire_state_region = STATE_RIO_GRANDE_DO_SUL
					owns_entire_state_region = STATE_SANTA_CATARINA
				}
        	}
        	owner = {
        		set_variable = won_ragamuffin_war_var
        		trigger_event = { id = brazilian_minors.1 days = 0 popup = yes }
        	}
        }
        if = {
        	limit = {
        		owner = {
        			game_date < 1850.1.1 # Just in case.
        			NOT = {
        				has_variable = cabanagem_defeat_var
        				exists = c:PRA
        			}
	        		c:BRZ ?= this
					owns_entire_state_region = STATE_PARA
					any_scope_state = { state_region = s:STATE_AMAZONAS }
				}
        	}
        	owner = {
        		set_variable = cabanagem_defeat_var
        		trigger_event = { id = brazilian_minors.2 days = 0 popup = yes }
        	}
        }
        if = {
        	limit = {
        		owner = {
        			game_date < 1850.1.1 # Just in case.
        			NOT = {
        				has_variable = ragamuffin_defeat_var
        				exists = c:PNI
        			}
	        		c:BRZ ?= this
					owns_entire_state_region = STATE_RIO_GRANDE_DO_SUL
				}
        	}
        	owner = {
        		set_variable = ragamuffin_defeat_var
        		trigger_event = { id = brazilian_minors.3 days = 0 popup = yes }
        	}
        }
        if = {
        	limit = {
        		owner = {
	        		c:PER ?= this
					NOT = {
						any_scope_state = {
							state_region = s:STATE_HERAT
						}
					}
					has_modifier = modifier_herat_inspiration
				}
        	}
        	owner = {
        		remove_modifier = modifier_herat_inspiration
        	}
        }
		if = {
			limit = {
				scope:target = {
					has_journal_entry = je_earn_recognition
				}
			}
			scope:target = {
				change_variable = {
					name = recognition_progress_var
					add = {
						add = scope:wargoal_impact
						multiply = -4
					}
				}
			}
		}
		if = {
			limit = {
				owner = {
					has_journal_entry = je_earn_recognition
				}
				scope:target = {
					OR = {
						is_country_type = recognized
						is_country_type = colonial
					}
					country_rank >= rank_value:major_power
				}
			}
			owner = {
				change_variable = {
					name = recognition_progress_var
					add = {
						add = scope:wargoal_impact
						multiply = 4
					}
				}
			}
		}
	}
}

# Root = Interest Group
on_ig_resigned_government = {
	effect = {
		post_notification = ig_resigned_government
		if = {
			limit = {
				owner = {
					has_journal_entry = je_coup
				}
			}
			root = {
				set_variable = resigned_from_gov_coup
			}
		}
		if = {
			limit = {
				owner = {
					has_law = law_type:law_single_party_state
					any_active_party = {
						any_member = {
							is_in_government = no
							is_insurrectionary = yes
						}
					}
				}
			}
			owner = {
				trigger_event = { id = government_collapse.1 popup = yes }
			}
		}
	}
}

# Root = Culture
on_new_culture_obsession = {
	effect = {
		post_notification = new_culture_obsession
	}
}

# Root = Country
on_rank_changed = {
	effect = {
		post_notification = rank_changed_notification
	}
}

# Root = Country (that owns a state in the state region)
# scope:actor = Claimant country
# scope:region = State Region
on_claim_added = {
	effect = {
		post_notification = claim_added_notification
	}
}

# Root = Country (in which the company is established)
# scope:company = The company that was established
on_company_established = {
	effect = {
	}
}

# Root = Country (in which the company was disbanded)
# scope:company = The company that was disbanded
on_company_disbanded = {
	effect = {
	}
}

# Root = Character
on_heir_born = {
	effect = {
		post_notification = heir_born_notification
		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = orleanist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = orleanist_leader }
					set_ideology = ideology:ideology_orleanist
				}
			}
		}
		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = legitimist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = legitimist_leader }
					set_ideology = ideology:ideology_legitimist
				}
			}
		}

		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = bonapartist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = bonapartist_leader }
					set_ideology = ideology:ideology_bonapartist
				}
			}
		}
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_helped_by_home_country = {
	effect = {
		annex = scope:target
	}
}

# Root = Home Countr
# scope:target = Secession country
on_secession_country_not_helped_by_home_country = {
	effect = {
		trigger_event = { id = civil_war_events.1 days = 0 }
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_added = {
	effect = {
		post_notification = wargoal_added
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_removed = {
	effect = {
		post_notification = wargoal_removed
	}
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {
	effect = {
		scope:actor = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    } 
		    #set_variable = { #Available to use whenever needed
		    #	name = most_recent_war_opponent
		    #	value = scope:target
		    #}
		}
		scope:target = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    }
		    #set_variable = { 
		    #	name = most_recent_war_opponent
		    #	value = scope:actor
		    #}
		}
	}	
}

# Root = journal entry
on_journal_entry_activated = {
	effect = {
		post_notification = journal_entry_activated
	}
}

# Root = journal entry
on_journal_entry_deactivated = {
	effect = {
		post_notification = journal_entry_deactivated
	}
}

# Root = journal entry
on_journal_entry_completed = {
	effect = {
		post_notification = journal_entry_completed
	}
}

# Root = journal entry
on_journal_entry_failed = {
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
	}
}

# Root = state
on_state_incorporation = {
	effect = {
		
	}
}

# Root = political movement
on_political_movement_formed = {
	effect = {
		post_notification = political_movement_formed
	}
}

# Root = political movement
on_political_movement_disbanded = {
	effect = {
		post_notification = political_movement_disbanded
	}
}

# Root = Colony state
on_colony_created = {
	effect = {
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_colonize_state
				}
				root = {
					set_variable = {
						name = tut_colony_target
					}
				}
			}
		}
	}
}

# Root = Strategic Region
# scope:actor = Aggressor country
# scope:target = Target country
on_diplomatic_incident = {
	effect = {
		
	}
}

# Root = Objective
on_sub_objective_completed = {
}

# Root = Objective
on_sub_objective_failed = {
}

# Root = Objective
on_objective_completed = {
	effect = {
		debug_log = "Objective completed"
	}
}

# Root = Country
# scope:target = Party created
on_party_created = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Created"
	}
}

# Root = Country
# scope:target = Party disbanded
on_party_disbanded = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Disbanded"
	}
}

# Root = Country
on_election_campaign_start = {
	effect = {
		debug_log = "Election Campaign Started"
	}
}

# Root = Country
on_election_campaign_end = {
	effect = {
		debug_log = "Election Campaign Ended"
		if = {
			limit = {
				c:BRZ ?= this
			}
			set_variable = { name = brz_election_done months = 3 }
		}
	}
}

# Root = Country
on_government_reformed = {
	effect = {
		# Government Petition
		set_variable = gov_petition_coin_toss
	}
}

# Root = Country
on_obligation_owed_by_us_expired = {
	effect = {
		post_notification = obligation_owed_by_us_expired
	}
}

# Root = Country
on_obligation_owed_to_us_expired = {
	effect = {
		post_notification = obligation_owed_to_us_expired
	}
}

# Root = Country
on_start_supporting_unification = {
	effect = {
		post_notification = start_supporting_unification
	}
}

# Root = Country
on_unification_candidate_added = {
	effect = {
		post_notification = unification_candidate_added
	}
}

# Root = Country
on_unification_candidate_removed = {
	effect = {
		post_notification = unification_candidate_removed
	}
}

# Root = Country
on_stop_supporting_unification = {
	effect = {
		post_notification = stop_supporting_unification
	}
}

# Root = Country
# scope:region - the sea region where the raid happened
on_enemy_convoys_raided = {
	effect = {
		post_notification = enemy_convoys_raided
	}
}

# Root = Country
# scope:region - the sea region where the raid happened
on_our_convoys_raided = {
	effect = {
		post_notification = our_convoys_raided
	}
}

# Root = Country
on_repudiate_obligation = {
	effect = {
		scope:target_country = {
			change_relations = { country = root value = -50 }
			hidden_effect = {
				random_list = {
					50 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}				
					}
					50 = {}
				}
			}		
		}
		every_country = {
			limit = { 
				NOT = { this = scope:target_country }
				root = { owes_obligation_to = prev } 
			}
			change_relations = { country = root value = -30 }
			hidden_effect = {
				random_list = {
					25 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}					
					}
					75 = {}
				}
			}
		}		
		hidden_effect = { # Should not stack the modifier
			if = { 
				limit = { has_modifier = repudiated_obligation } 
				remove_modifier = repudiated_obligation
			}			
		}
		add_modifier = {
			name = repudiated_obligation
			months = normal_modifier_time
			is_decaying = yes			
		}		
	}
}

# Root = Character
on_character_recruitment = {
	effect = {
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_recruit_promote_commander
				}
				je:je_tutorial_recruit_promote_commander = {
					set_variable = {
						name = tut_commander_target
						value = root
					}
					set_variable = {
						name = tut_commander_target_initial_rank
						value = root.commander_rank
					}
				}
			}
		}
	}
}

# This on-action is triggered in cases where there is no overriding on_impose effect on a law type. In case an on_impose effect exists on the law type, this will NOT be executed.
# Root = country being imposed upon
# scope:initiator = country doing the imposition
# scope:law = law being imposed
on_impose_law = {
	effect = {
		add_modifier = {
			name = impose_law_cooldown
			multiplier = 365
			days = 365
			is_decaying = yes
		}
		scope:law = {
			save_scope_as = foreign_imposition_law
		}
		save_scope_as = country_imposed_upon
		scope:initiator = {
			post_notification = imposition_demand_sent
			save_scope_as = foreign_imposition_country
		}
		trigger_event = { id = law_imposition_events.1 days = 0 popup = yes }
	}
}

# This on-action is triggered every time a Power Bloc's Power Struggle starts.
# Root = Country that started the Power Struggle (other interesting scopes, such as Power Bloc leader, can be inferred from root)
on_power_bloc_struggle_started = {
	effect = {
		if = {
			limit = {
				is_player = yes
			}
			set_variable = achievement_im_the_captain_now_challanger_var
		}
	}
}

# This on-action is triggered every time a Power Bloc's Power Struggle concludes (after the changes in leadership have been made).
# Root = Power Bloc whose leadership position is being fought over
# scope:successful_contender = country that won the Power Struggle
# scope:failed_contender = country that lost the Power Struggle
on_power_bloc_struggle_ended = {
	effect = {
		if = { 
			limit = { 
				scope:successful_contender ?= {
					has_variable = achievement_im_the_captain_now_challanger_var
					is_player = yes
					NOT = { has_variable = achievement_im_the_captain_now }
				}
			}
			scope:successful_contender = {
				set_variable = achievement_im_the_captain_now
			}
		}
		if = {
			limit = {
				scope:successful_contender ?= {
					has_variable = achievement_im_the_captain_now_challanger_var
				}
			}
			scope:successful_contender = {
				remove_variable = achievement_im_the_captain_now_challanger_var
			}
		}
		if = {
			limit = {
				scope:failed_contender ?= {
					has_variable = achievement_im_the_captain_now_challanger_var
				}
			}
			scope:failed_contender = {
				remove_variable = achievement_im_the_captain_now_challanger_var
			}
		}
	}
}

# Root = invaded country
# scope:actor = invading country
# scope:admiral = invading admiral
# scope:general = invading general
# scope:state = location state
on_naval_invasion = {
	effect = {
		post_notification = naval_invasion_against_us
	}
}

# Root = Military Formation
# scope:front = front we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_to_front_cancelled = {
	effect = {
		post_notification = formation_travel_to_front_cancelled
	}
}

# Root = Military Formation
# scope:hq = HQ we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_station_in_hq_cancelled = {
	effect = {
		post_notification = formation_travel_station_in_hq_cancelled
	}
}

# Root = Military Formation
# scope:province = Sea Node we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_deploy_to_sea_node_cancelled  = {
	effect = {
		post_notification = formation_travel_deploy_to_sea_node_cancelled
	}
}

# Root = Military Formation
# scope:formation = Formation we were tracking
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_track_formation_cancelled = {
	effect = {
		post_notification = formation_travel_track_formation_cancelled
	}
}

# Root = Military Formation
on_military_formation_created = {
	effect = {
		if = {
			limit = {
				owner = {
					has_journal_entry = je_tutorial_create_formation
				}
			}
			owner = {
				remove_variable = formation_tutorial_ongoing
			}
		}
	}
}
﻿# Fired off on_monthly_pulse_country_elections

elections_monthly_events = {
	random_events = {
		chance_of_no_event = 50
		1 = election_liberal_events.1
		1 = election_liberal_events.2
		1 = election_liberal_events.3
		1 = election_liberal_events.4
		1 = election_conservative_events.1
		1 = election_conservative_events.2
		1 = election_conservative_events.3
		1 = election_conservative_events.4
		1 = election_moderate_events.1
		1 = election_moderate_events.2
		1 = election_contextual_events.1
		1 = election_contextual_events.2
		1 = election_contextual_events.3
		1 = election_contextual_events.4
		1 = election_contextual_events.5
		1 = election_contextual_events.6
		1 = election_contextual_events.7
		1 = election_contextual_events.8
		1 = election_neutral.1
		1 = election_neutral.2
		1 = election_neutral.3
		1 = election_neutral.4
		1 = election_neutral.5
		1 = election_neutral.6
		1 = election_neutral.7
		1 = election_neutral.8
		1 = election_other_parties_events.1
		1 = election_other_parties_events.2
		1 = election_other_parties_events.3
		1 = election_other_parties_events.4
		1 = election_other_parties_events.5
		1 = ig_leaders.3
		1 = communist_elections.1
		1 = communist_elections.2
		1 = communist_elections.3
		1 = communist_elections.4
		1 = agitators_election_events.1
		1 = agitators_election_events.2
		1 = agitators_election_events.3
		1 = agitators_election_events.4
		1 = agitators_election_events.5
		1 = agitators_election_events.6
		1 = agitators_election_events.7
		1 = agitators_election_events.8
		1 = agitators_election_events.9
		1 = agitators_election_events.10
		1 = agitators_election_events.11
		1 = agitators_election_events.12
		1 = agitators_election_events.13
		1 = agitators_election_events.14
		1 = agitators_election_events.15
		1 = agitators_election_events.16
		1 = agitators_election_events.17
		1 = agitators_election_events.18
		1 = agitators_election_events.19
		1 = agitators_election_events.20
		1 = agitators_election_events.21
		1 = agitators_election_events.22
		1 = agitators_election_events.23
		1 = agitators_election_events.24
		1 = agitators_election_events.25
		1 = agitators_election_events.26
		1 = agitators_election_events.27
		1 = agitators_election_events.28
		1 = agitators_election_events.29
		1 = agitators_election_events.30
		1 = agitators_election_events.31
		1 = agitators_election_events.32
		1 = agitators_election_events.33
		1 = agitators_election_events.34
		1 = agitators_election_events.35
		1 = agitators_election_events.36
		1 = agitators_election_events.37
		1 = agitators_election_events.38
		1 = agitators_election_events.39
		1 = agitators_election_events.40
		1 = agitators_election_events.41
		1 = agitators_election_events.42
		1 = agitators_election_events.43
		1 = agitators_election_events.44
		1 = agitators_election_events.45
		1 = agitators_election_events.46
		1 = agitators_election_events.47
		1 = agitators_election_events.48
		1 = agitators_election_events.49
		1 = agitators_election_events.50
	}
}
﻿# Fired off on_half_yearly_pulse_country

# Generic Pulse
on_half_yearly_events = {
	random_events = {
		chance_of_no_event = 35
		
		# The Attempt on Lincoln's Life
		40 = acw_followup_events.1
		10 = acw_followup_events.2
		50 = acw_followup_events.3

		#Oscar Wilde event for Europe
		5 = oscar_wilde_events.1
	}
}

# Secession
secession_half_yearly_events = {
	random_events = {
		20 = secession_events.1
		20 = secession_events.2
		20 = secession_events.3
		20 = secession_events.4
		20 = secession_events.5
		20 = secession_events.6
		20 = secession_events.7
		20 = secession_events.8
		20 = secession_events.9
	}
}

# Silkworm Diseases 
silkworm_half_yearly_events = {
	random_events = {
		chance_of_no_event = 80
		20 = silkworm_diseases.1
	}
}

# Korea
korea_half_yearly_events = {
	random_events = {
		chance_of_no_event = 50
		50 = 0
		20 = korea_monarchy.1 # Hwan Yi's Death
		10 = korea_monarchy.2 # Gojong
		100 = korea_monarchy.3 # Myeongseong
	}
}

# Lobbies Proposals
lobbies_proposals_half_yearly_events = {
	random_events = {
		chance_of_no_event = 90
		10 = lobby_proposal.1
		10 = lobby_proposal.2
		10 = lobby_proposal.3
		10 = lobby_proposal.4
	}
}

# Movement Events
movement_half_yearly_events = {
	random_events = {
		chance_of_no_event = 90
		5 = movement_events.1
		5 = movement_events.2
		5 = movement_events.3
		5 = movement_events.4
		5 = movement_events.5
		5 = movement_events.6
		5 = movement_events.7
		5 = movement_events.8
		5 = movement_events.9
		5 = movement_events.10
		5 = movement_events.11
		5 = movement_events.12
		5 = movement_events.13
		5 = movement_events.14
		5 = movement_events.15
	}
}
﻿# Fired off on_monthly_pulse_country

# Coup
coup_monthly_events = {
	random_events = {
		chance_of_no_event = 80
		1 = coup.1
	}
}

# Garibaldi
garibaldi_monthly_events = {
	random_events = {
		chance_of_no_event = 70
		30 = garibaldi_events.1
		30 = garibaldi_events.2
		2 = garibaldi_events.3
		1 = garibaldi_events.4
	}
}

# Fund Lobbies Events
fund_lobbies_monthly_events = {  
	random_events = {
		chance_of_no_event = 75
		10 = fund_lobbies_events.1
		10 = fund_lobbies_events.2
		10 = fund_lobbies_events.3
		10 = fund_lobbies_events.4
		10 = fund_lobbies_events.5
	}
}
﻿# Fired off on_yearly_pulse_country

# Generic Pulse
on_yearly_events = {	
	random_events = {
		chance_of_no_event = 35

		20 = government_conflicts.1
		20 = government_conflicts.2
		20 = government_conflicts.3
		20 = government_conflicts.4
		20 = government_conflicts.5
		20 = government_conflicts.6
		20 = government_conflicts.7
		20 = government_conflicts.8
		20 = government_conflicts.9
		20 = government_conflicts.10
		20 = government_conflicts.11
		#
		10 = goldrush.3
		10 = goldrush.4
		#
		20 = ig_leaders.20
		20 = ig_leaders.4
		20 = ig_leaders.5
		20 = ig_leaders.6

		#Character Events
		20 = character_events.2
		20 = character_events.3
		20 = character_events.4
		20 = character_events.5
		100 = character_events.6
		
		# Border Situations
		20 = neighbor_events.1
		20 = neighbor_events.2
		20 = neighbor_events.3
		20 = neighbor_events.4
		20 = neighbor_events.5
		20 = neighbor_events.6
		20 = neighbor_events.7

		# Commander Events
		20 = commander_events.2
		20 = commander_events.4
		20 = commander_events.5
		5 = commander_events.6

		# Law Events
		50 = law_events.5
		50 = law_events.6

		# Cultural Homeland Events
		10 = cultural_homeland_events.1
		10 = cultural_homeland_events.10
		10 = cultural_homeland_events.20
		10 = cultural_homeland_events.30
		10 = cultural_homeland_events.40
		10 = cultural_homeland_events.50
		
		#IG Suppression
		20 = ig_suppression_events.1

		# Technology
		20 = technology_events.1
		20 = technology_events.10
		20 = technology_events.20
		20 = technology_events.30
		20 = technology_events.40
		20 = technology_events.50
		
		# Industrial Accidents
		10 = industrial_accident_events.1
		10 = industrial_accident_events.2
		10 = industrial_accident_events.3
		10 = industrial_accident_events.4
		20 = industrial_accident_events.5
		20 = industrial_accident_events.6

		# Crime (Why do police not just comment out crime events?)
		10 = crime_events.1
		10 = crime_events.2
		10 = crime_events.10

		# Obligations
		10 = obligation_events.1
		10 = obligation_events.3
		10 = obligation_events.5
		
		# Prostitution and police
		20 = prostitution.1
		100 = prostitution.2
		20 = prostitution.3
		20 = prostitution.4
		20 = cable_street.1

		#Natural Disasters
		3 = natural_disaster_events.1
		3 = natural_disaster_events.2
		1 = natural_disaster_events.3
		1 = natural_disaster_events.4
		20 = natural_disaster_events.5
		3 = natural_disaster_events.6
		3 = natural_disaster_events.7
		1 = natural_disaster_events.8
		
		# Warlords
		20 = warlord_china_events.110
		20 = warlord_china_events.301
		
		# Assassination
		10 = assassination_events.1

		# Oil Rush Scandal
		20 = oil_rush.5
		
		#Decree
		20 = decree_events.1
		20 = decree_events.2
		20 = decree_events.3
		20 = decree_events.4
		20 = decree_events.5
		20 = decree_events.6
		20 = decree_events.100
		20 = decree_events.101
		20 = decree_events.102
		20 = decree_events.103
		20 = decree_events.104
		20 = decree_events.105
		20 = decree_events.106
		20 = decree_events.107
		20 = decree_events.108
		20 = decree_events.109
		
		50 = strike.5
		50 = strike.6
		50 = strike.7

		10 = opium_wars.8
		
		10 = communism.7
		10 = communism.9
		
		#psychology
		20 = psychology_events.1
		20 = psychology_events.2
		20 = psychology_events.3
		20 = psychology_events.4
		20 = psychology_events.5
		20 = psychology_events.6
		
		#nationalism
		20 = fascism_events.8

		20 = dreadnought_hoax.1

		2 = patagonia.2
		10 = amazon.1
		10 = amazon.2

		10 = amazon.4 # The Most Dangerous Game

		20 = autocracy.2
		20 = autocracy.3

		# rivalry events
		10 = diplomatic_friction.1
		10 = diplomatic_friction.2
		10 = diplomatic_friction.20
		
		# Titanic
		10 = titanic.1

		# trains
		5 = trains.1

		30 = cholera.1

		# Slave revolts
		5 = slave_revolt.1
		5 = slave_revolt.2
		5 = slave_revolt.3

		# Discrimination Events
		20 = discrimination_events.1
		20 = discrimination_events.2
		20 = discrimination_events.3
		20 = discrimination_events.4

		# Trade routes
		20 = trade_route_events.1
		20 = trade_route_events.2
		20 = trade_route_events.3
		20 = trade_route_events.4
		20 = trade_route_events.5
		
		#PMs
		20 = pm_events.1
		20 = pm_events.2
		20 = pm_events.4
		20 = pm_events.5

		# French Pretenders
		10 = french_pretenders.2
		10 = french_pretenders.3
		10 = french_pretenders.4

		# Additional 1848
		10 = 1848.10
		10 = 1848.11
		10 = 1848.12
		
		# Vampire Panic
		1 = vampire_panic.1

		20 = algeria_events.2

		50 = acw_events.7
		50 = acw_events.8

		# Carnaval
		30 = bp1_misc.1

		# Medium Roast
		30 = bp1_misc.2

		# To the Highest Standards
		20 = pedro.14

		# Emu War
		30 = emu_war.1
	}
}

# Russian Monarchy Pulse Events
russian_monarchy_yearly_events = {
	random_events = { 
		chance_of_no_event = 50
		25 = 0
		25 = russia_monarchy.2
		10 = russia_monarchy.6
		50 = russia_monarchy.7
		5 = russia_monarchy.8
	}
}

# Springtie of Peoples
springtime_of_peoples_yearly_events = {
	random_events = {
		chance_of_no_event = 80
		1 = peoples_springtime.6
	}
}

# Landowners become Oligarchic
bp1_misc_yearly_events = {	
	random_events = { 
		chance_of_no_event = 80
		1 = bp1_misc.3
	}
}

# Indochina JE start
indochina_yearly_events = {
	random_events = {
		chance_of_no_event = 50
		20 = indochina.1 # Indochinese start
		20 = indochina.2 # Imperialist start
	}
}


# Exiles
exiles_yearly_events = {
	random_events = {
		chance_of_no_event = 75
		10 = exiles_events.1
		10 = exiles_events.2
		10 = exiles_events.3
		10 = exiles_events.4
		10 = exiles_events.5
		10 = exiles_events.6
		10 = exiles_events.7
		10 = exiles_events.8
		10 = exiles_events.9
		10 = exiles_events.10

		10 = exiles_more_events.1
		10 = exiles_more_events.3
		10 = exiles_more_events.4
		10 = exiles_more_events.5
		5 = exiles_more_events.6
		10 = exiles_more_events.7
		10 = exiles_more_events.8
		10 = exiles_more_events.9
		10 = exiles_more_events.10
	}
}

# Historical Agitators
historical_agitators_yearly_events = {
	random_events = {
		chance_of_no_event = 25
		10 = historical_agitators.1
		10 = historical_agitators.2
		10 = historical_agitators.3
		10 = historical_agitators.4
		10 = historical_agitators.5
		10 = historical_agitators.6
		300 = historical_agitators.8
		2 = historical_agitators.9
		10 = historical_agitators.10
		10 = historical_agitators.11
		10 = historical_agitators.12
		10 = historical_agitators.13
		10 = historical_agitators.14
		10 = historical_agitators.15
		10 = historical_agitators.16
		10 = historical_agitators.17
		10 = historical_agitators.18
		10 = historical_agitators.19
		10 = historical_agitators.20
		10 = historical_agitators.21
		10 = historical_agitators.22
		100 = gg_korea.3
	}
}

# Slavery Abolition
slavery_abolition_yearly_events = {
	random_events = {
		chance_of_no_event = 80
		1 = slavery_law_events.7
	}
}

# Lobby Events
lobby_yearly_events = {
	random_events = {
		chance_of_no_event = 75
		5 = lobby_events.1
		5 = lobby_events.2
		5 = lobby_events.3
		5 = lobby_events.4
		5 = lobby_events.5
		5 = lobby_events.6
		5 = lobby_events.7
		5 = lobby_events.8
		5 = lobby_events.9
		5 = lobby_events.10
		5 = lobby_events.11
		5 = lobby_events.12
		5 = lobby_events.13
		5 = lobby_events.14
		5 = lobby_events.15
		5 = lobby_events.16
		5 = lobby_events.17
		5 = lobby_events.18
		5 = lobby_events.19
		5 = lobby_events.20
		5 = lobby_events.21
		5 = lobby_events.22
		5 = lobby_events.23
		5 = lobby_events.24
		5 = lobby_events.25
		5 = lobby_events.26
		5 = lobby_events.27
		5 = lobby_events.28
		5 = lobby_events.29
		5 = lobby_events.30
		5 = lobby_events.31
		5 = lobby_events.32
		5 = lobby_events.33
		5 = lobby_events.34
		5 = lobby_events.35
		5 = lobby_events.36
		5 = lobby_events.37
		5 = lobby_events.38
		5 = lobby_events.39
		5 = lobby_events.40
		5 = lobby_events.51
		5 = lobby_events.52
		5 = lobby_events.53
		5 = lobby_events.54
		5 = lobby_events.55
		5 = lobby_events.56
		5 = lobby_events.57
		5 = lobby_events.58
		5 = lobby_events.59
		5 = lobby_events.60 
	}
}

# Krakatoa
krakatoa_yearly_events = {
	random_events = {
		chance_of_no_event = 95
		1 = krakatoa.1
	}
}

# Tunguska
tunguska_yearly_events = {
	random_events = {
		chance_of_no_event = 90
		1 = tunguska.1
	}
}

﻿opinion_friendly_nation = {
	opinion = {
		value = 50
		if = {
			limit = {
				#in_alliance_with = scope:opinion_target
			}
			multiply = 2
		}
	}
	decay = {
		value = 1
		if = {
			limit = {
				#in_alliance_with = scope:opinion_target
			}
			multiply = 0.5
		}
	}
}

opinion_unfriendly_nation = {
	opinion = {
		value = -50
		if = {
			limit = {
				
			}
			multiply = 2
		}
	}
	decay = {
		value = 1
		if = {
			limit = {
				
			}
			multiply = 5
		}
	}
}

opinion_no_decay_test = {
	opinion = {
		value = 30
	}
}

interest_marker = {
	opinion = {
		value = 20
		if = {
			limit = {
				#in_alliance_with = scope:opinion_target
			}
			multiply = 0
		}
	}
}

opinion_rivals_initiator = {
	opinion = {
		value = 50
	}
}

opinion_rivals_recipient = {
	opinion = {
		value = 25
	}
}

﻿﻿# Fallback party for Rural Folk
# Occasionally used for an anti-serfdom alliance
# More popular in Nordic countries

agrarian_party = {
	color = { 64 173 59 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_irish_national_land_league
				trigger = {
					exists = c:IRE
					THIS = c:IRE
				}
			}
			triggered_desc = {
				desc = party_independent_agriculture_party
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_farmers_party
				trigger = {
					exists = c:NOR
					THIS = c:NOR
				}
			}
			triggered_desc = {
				desc = party_free_peoples_party
				trigger = {
					exists = c:DEN
					THIS = c:DEN
				}
			}
			triggered_desc = {
				desc = party_farmers_league
				trigger = {
					exists = c:SWE
					THIS = c:SWE
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					exists = c:FIN
					THIS = c:FIN
				}
			}
			triggered_desc = {
				desc = party_agrarian_and_farmer_party
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_conservative_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					OR = {
						has_law = law_type:law_presidential_republic
						has_law = law_type:law_parliamentary_republic
					}
				}
			}
			triggered_desc = {
				desc = party_landbund
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_national_peasant_accord
				trigger = {
					exists = c:SER
					THIS = c:SER
				}
			}
			triggered_desc = {
				desc = party_agrarian_national_union
				trigger = {
					exists = c:BUL
					THIS = c:BUL
				}
			}
			triggered_desc = {
				desc = party_national_farmer_party
				trigger = {
					exists = c:HUN
					THIS = c:HUN
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					exists = c:USA
					THIS = c:USA
				}
			}
			triggered_desc = {
				desc = party_patrons_of_industry
				trigger = {
					country_has_primary_culture = cu:anglo_canadian
				}
			}
			triggered_desc = {
				desc = party_peasants_party
				trigger = {
					country_has_primary_culture = cu:romanian
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					country_has_primary_culture = cu:polish
				}
			}
			triggered_desc = {
				desc = party_agrarian_league
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = party_agrarian
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/agrarians.dds"
	}

	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			ig:ig_rural_folk = {
				is_marginal = no
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = agrarian_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
			}
			add = {
				value = -10
				desc = "south_america_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
					country_is_in_north_america = yes
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					has_law = law_type:law_presidential_republic
				}
			}
			add = {
				value = -10
				desc = "usa_two_party_system"
			}
		}
		if = { # a party for powerful farmers
			limit = {
				has_ideology = ideology:ideology_agrarian
				is_powerful = yes
			}
			add = {
				value = 10
				desc = "from_peasants"
			}
		}
		if = { # weak anti-serfdom types might fall in line behind strong farmers
			limit = {
				is_powerful = no
				owner = {
					has_law = law_type:law_serfdom
				}
				law_stance = {
					law = law_type:law_serfdom
					value < neutral
				}
			}
			add = {
				value = 10
				desc = "from_powerful_farmers"
			}
		}
		if = { # scandinavians are more likely to have agrarian parties
			limit = {
				owner = {
					any_primary_culture = {
						has_discrimination_trait = scandinavian_culture_group
					}
				}
				OR = {
					is_interest_group_type = ig_rural_folk
					is_interest_group_type = ig_intelligentsia
				}
			}
			add = {
				value = 10
				desc = "from_scandinavian"
			}
		}
		if = { # pacifist anti-colonial alliance
			limit = {
				leader = {
					has_ideology = ideology:ideology_pacifist
				}
				owner = {
					NOT = { has_law = law_type:law_no_colonial_affairs }
				}
			}
			add = {
				value = 6
				desc = "from_pacifism"
			}
		}
		if = { # anti-immigration alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_isolationist
					has_ideology = ideology:ideology_populist
					has_ideology = ideology:ideology_reactionary
				}
				owner = {
					has_law = law_type:law_no_migration_controls
				}
			}
			add = {
				value = 6
				desc = "from_migration_law"
			}
		}
		if = { # against arbitrary or militarized policing
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_particularist
				}
				owner = {
					OR = {	
						has_law = law_type:law_local_police
						has_law = law_type:law_militarized_police
					}
				}
			}
			add = {
				value = 6
				desc = "from_bad_police"
			}
		}
		if = { # against land-based taxation
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
				}
				owner = {
					has_law = law_type:law_land_based_taxation
				}
			}
			add = {
				value = 6
				desc = "from_land_tax"
			}
		}
		if = { # against free trade - peasant/socialist alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					has_ideology = ideology:ideology_agrarian
					has_ideology = ideology:ideology_paternalistic
				}
				owner = {
					has_law = law_type:law_free_trade
				}
				NOT = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 6
				desc = "from_anti_free_trade"
			}
		}
		if = { # against laissez-faire - peasant/socialist alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_protectionist
					}
				}
				owner = {
					has_law = law_type:law_laissez_faire
				}
				NOT = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 6
				desc = "from_anti_free_trade"
			}
		}
		if = { # opposition to peasant levies
			limit = {
				OR = {
					has_ideology = ideology:ideology_jingoist
					has_ideology = ideology:ideology_particularist
					has_ideology = ideology:ideology_sikh_moralist
					leader = {
						OR = {
							has_ideology = ideology:ideology_fascist
							has_ideology = ideology:ideology_anarchist
							has_ideology = ideology:ideology_pacifist
							has_ideology = ideology:ideology_jingoist_leader
						}
					}
				}
				owner = {
					has_law = law_type:law_peasant_levies
				}
			}
			add = {
				value = 6
				desc = "from_peasant_levies"
			}
		}
		if = { # anti-serfdom
			limit = {
				owner = {
					has_law = law_type:law_serfdom
				}
				OR = {
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					has_ideology = ideology:ideology_anti_slavery
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_communist
					}
				}
			}
			add = {
				value = 10
				desc = "from_serfdom"
			}
		}
		if = { # opposition to debt slavery
			limit = {
				owner = {
					has_law = law_type:law_debt_slavery
				}
				OR = {
					has_ideology = ideology:ideology_anti_slavery
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 10
				desc = "from_debt_slavery"
			}
		}
		if = { # nobody will join if the rural folk don't join
			limit = {
				NOT = { is_interest_group_type = ig_rural_folk }
				OR = {
					NOT = { exists = owner.py:agrarian_party }
					AND = {
						exists = owner.py:agrarian_party
						owner = {
							ig:ig_rural_folk = {
								NOT = { is_member_of_party = owner.py:agrarian_party }
							}
						}
					}
				}
			}
			add = {
				value = -20
				desc = "from_no_rural_folk_in_party" # this should probably never actually display in game because the party won't exist
			}
		}
		if = {
			limit = {
				is_interest_group_type = ig_rural_folk
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = {
			limit = {
				owner = {
					country_has_primary_culture = cu:brazilian
					NOT = {
						OR = {
							has_technology_researched = socialism
							has_technology_researched = corporatism
							has_technology_researched = anarchism
						}
					}
				}
			}
			add = {
				value = -10
				desc = "from_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = agrarian_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				 owner.var:only_valid_party = {
					is_party_type = agrarian_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = agrarian_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿# Niche party for anarchists in specific circumstances

anarchist_party = {
	color = { 0 0 0 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_cnt
				trigger = {
					exists = c:SPA
					THIS = c:SPA
				}
			}
			triggered_desc = {
				desc = party_socialist_league
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_anarcho_communist_federation
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_maximalist_federation
				trigger = {
					country_has_primary_culture = cu:portuguese
				}
			}
			triggered_desc = {
				desc = party_young_socialists
				trigger = {
					OR = {
						country_has_primary_culture = cu:norwegian
						country_has_primary_culture = cu:danish
					}
				}
			}
			triggered_desc = {
				desc = party_italian_syndicalist_union
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_anarchist
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/anarchist.dds"
	}
	unlocking_technologies = {
		anarchism
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			any_interest_group = {
				is_marginal = no
				leader = {
					has_ideology = ideology:ideology_anarchist
				}
			}
		}
		leader = {
			has_ideology = ideology:ideology_anarchist
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = anarchist_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # anarchists like anarchism
			limit = {
				leader = { has_ideology = ideology:ideology_anarchist }
			}
			add = {
				value = 6
				desc = "from_anarchy"
			}
		}
		if = { # strong anarchists like anarchism
			limit = {
				is_powerful = yes
				leader = { has_ideology = ideology:ideology_anarchist }
			}
			add = {
				value = 10
				desc = "powerful_anarachists"
			}
		}
		if = { # anarchists don't like the revolution being hijacked
			limit = {
				leader = {
					has_ideology = ideology:ideology_anarchist
				}
				owner = {
					has_law = law_type:law_council_republic
					ruler = {
						has_ideology = ideology:ideology_vanguardist
					}
				}
			}
			add = {
				value = 10
				desc = "from_vanguard_anarchy"
			}
		}
		if = { # anarchists will make their own party if there is no communist party to join
			limit = {
				leader = {
					has_ideology = ideology:ideology_anarchist
				}
				owner = {
					NOT = {
						any_interest_group = {
							is_marginal = no
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_vanguardist
								}
							}
						}
					}
				}
			}
			add = {
				value = 5
				desc = "from_no_communists"
			}
		}
		if = { # radical anti-censorship
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_anarchist
					}
				}
				owner = {
					OR = {
						has_law = law_type:law_outlawed_dissent
						has_law = law_type:law_censorship
					}
				}
			}
			add = {
				value = 3
				desc = from_censorship
			}
		}
		if = { # anti-censorship
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					leader = {
						has_ideology = ideology:ideology_humanitarian
					}
				}
				owner = {
					has_law = law_type:law_outlawed_dissent
				}
			}
			add = {
				value = 3
				desc = from_outlawed_dissent
			}
		}
		if = { # against land-based taxation
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
				}
				owner = {
					has_law = law_type:law_land_based_taxation
				}
			}
			add = {
				value = 3
				desc = "from_land_tax"
			}
		}
		if = { # anticlerical
			limit = {
				OR = {
					has_ideology = ideology:ideology_anti_clerical
					leader = {
						has_ideology = ideology:ideology_atheist
					}
				}
				owner = {
					has_law = law_type:law_state_religion
				}
			}
			add = {
				value = 3
				desc = "from_anticlerical"
			}
		}
		if = { # opposition to peasant levies
			limit = {
				OR = {
					has_ideology = ideology:ideology_jingoist
					has_ideology = ideology:ideology_particularist
					has_ideology = ideology:ideology_sikh_moralist
					leader = {
						OR = {
							has_ideology = ideology:ideology_anarchist
							has_ideology = ideology:ideology_pacifist
						}
					}
				}
				owner = {
					has_law = law_type:law_peasant_levies
				}
			}
			add = {
				value = 3
				desc = "from_peasant_levies"
			}
		}
		if = { # general anti-slavery
			limit = {
				owner = {
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
				OR = {
					has_ideology = ideology:ideology_anti_slavery
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 5
				desc = "from_slavery"
			}
		}
		if = { # anti-serfdom
			limit = {
				owner = {
					has_law = law_type:law_serfdom
				}
				OR = {
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					has_ideology = ideology:ideology_anti_slavery
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_communist
					}
				}
			}
			add = {
				value = 5
				desc = "from_serfdom"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = anarchist_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
					is_party_type = anarchist_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = anarchist_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿communist_party = {
	color = { 150 20 20 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_bolsheviks
				trigger = {
					country_has_primary_culture = cu:russian
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_british_socialist_party
				trigger = {
					exists = c:GBR
					THIS = c:GBR
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_pcf
				trigger = {
					exists = c:FRA
					THIS = c:FRA
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_kps
				trigger = {
					exists = c:SWI
					THIS = c:SWI
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_nkp
				trigger = {
					exists = c:NOR
					THIS = c:NOR
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_dkp
				trigger = {
					exists = c:DEN
					THIS = c:DEN
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_skp
				trigger = {
					exists = c:SWE
					THIS = c:SWE
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_skp
				trigger = {
					exists = c:FIN
					THIS = c:FIN
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_kpl
				trigger = {
					exists = c:LUX
					THIS = c:LUX
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_bkp
				trigger = {
					exists = c:BUL
					THIS = c:BUL
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_mkp
				trigger = {
					exists = c:HUN
					THIS = c:HUN
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_kpo
				trigger = {
					exists = c:AUS
					THIS = c:AUS
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_jcp
				trigger = {
					exists = c:JAP
					THIS = c:JAP
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_justice_party
				trigger = {
					exists = c:PER
					THIS = c:PER
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_socialist_workers_party
				trigger = {
					exists = c:MEX
					THIS = c:MEX
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_kke
				trigger = {
					exists = c:GRE
					THIS = c:GRE
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_kpd
				trigger = {
					AND = {
						OR = {
							country_has_primary_culture = cu:north_german
							country_has_primary_culture = cu:south_german
						}
						any_interest_group = {
							is_powerful = yes
							leader = {
								has_ideology = ideology:ideology_vanguardist
							}
						}
					}
				}
			}
			triggered_desc = {
				desc = party_pcb
				trigger = {
					country_has_primary_culture = cu:brazilian
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_workingmens_party
				trigger = {
					AND = {
						OR = {
							country_has_primary_culture = cu:yankee
							country_has_primary_culture = cu:dixie
						}
						any_interest_group = {
							is_powerful = yes
							leader = {
								has_ideology = ideology:ideology_vanguardist
							}
						}
					}
				}
			}
			triggered_desc = {
				desc = party_cpc
				trigger = {
					AND = {
						OR = {
							country_has_primary_culture = cu:han
							country_has_primary_culture = cu:hakka
							country_has_primary_culture = cu:miao
							country_has_primary_culture = cu:min
							country_has_primary_culture = cu:zhuang
							country_has_primary_culture = cu:yi
							country_has_primary_culture = cu:yue
						}
						any_interest_group = {
							is_powerful = yes
							leader = {
								has_ideology = ideology:ideology_vanguardist
							}
						}
					}
				}
			}
			triggered_desc = {
				desc = party_communist
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/communists.dds"
	}
	unlocking_technologies = {
		socialism
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			any_interest_group = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
					}
				}
			}
		}
		NOR = {
			is_interest_group_type = ig_industrialists
			is_interest_group_type = ig_landowners
		}
		leader = { # fascists, conservatives, and capitalists hate communism
			NOR = {
				has_ideology = ideology:ideology_fascist
				has_ideology = ideology:ideology_integralist
				has_ideology = ideology:ideology_ethno_nationalist
				has_ideology = ideology:ideology_market_liberal
				has_ideology = ideology:ideology_traditionalist
				has_ideology = ideology:ideology_royalist
				has_ideology = ideology:ideology_orleanist
				has_ideology = ideology:ideology_bonapartist
				has_ideology = ideology:ideology_legitimist
				has_ideology = ideology:ideology_theocrat
				has_ideology = ideology:ideology_corporatist_leader
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = communist_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # communists love communism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
					}
				}
			}
			add = {
				value = 10
				desc = "from_communism"
			}
		}
		if = { # communists love communism
			limit = {
				is_powerful = yes
				leader = {
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
					}
				}
			}
			add = {
				value = 10
				desc = "from_communism_powerful"
			}
		}
		if = { # weak social democrats and radicals may side with strong communists
			limit = {
				is_powerful = no
				leader = {
					OR = {
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_radical
					}
				}
				owner = {
					any_interest_group = {
						is_powerful = yes
						leader = {
							OR = {
								has_ideology = ideology:ideology_communist
								has_ideology = ideology:ideology_vanguardist
								has_ideology = ideology:ideology_anarchist
							}
						}
					}
				}
			}
			add = {
				value = 6
				desc = "from_socdem_communism"
			}
		}
		if = { # post-revolution anarchists not excited about vanguard party
			limit = {
				leader = {
					has_ideology = ideology:ideology_anarchist
				}
				owner = {
					has_law = law_type:law_council_republic
					ruler = {
						has_ideology = ideology:ideology_vanguardist
					}
				}
			}
			add = {
				value = -10
				desc = "from_vanguard_anarchy"
			}
		}
		if = { # reactionary ig's don't like communism
			limit = {
				has_ideology = ideology:ideology_reactionary
			}
			add = {
				value = -3
				desc = "from_reactionaries"
			}
		}
		if = { # trade unions often enjoy communism
			limit = {
				is_interest_group_type = ig_trade_unions
			}
			add = {
				value = 2
				desc = "from_trade_unions"
			}
		}
		if = { # moderates are scared of radical politics
			limit = {
				leader = {
					has_ideology = ideology:ideology_moderate
				}
			}
			add = {
				value = -3
				desc = "from_moderate"
			}
		}
		if = { # against land-based taxation
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
				}
				owner = {
					has_law = law_type:law_land_based_taxation
				}
			}
			add = {
				value = 3
				desc = "from_land_tax"
			}
		}
		if = { # anticlerical
			limit = {
				OR = {
					has_ideology = ideology:ideology_anti_clerical
					leader = {
						has_ideology = ideology:ideology_atheist
					}
				}
				owner = {
					has_law = law_type:law_state_religion
				}
			}
			add = {
				value = 3
				desc = "from_anticlerical"
			}
		}
		if = { # against free trade - peasant/communist alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_socialist
					has_ideology = ideology:ideology_agrarian
				}
				owner = {
					has_law = law_type:law_free_trade
				}
				NOT = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 3
				desc = "from_anti_free_trade"
			}
		}
		if = { # against laissez-faire - peasant/socialist alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_socialist
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_protectionist
					}
				}
				owner = {
					has_law = law_type:law_laissez_faire
				}
				NOT = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 3
				desc = "from_anti_laissez_faire"
			}
		}
		if = { # loyalist-proletarian alliance for tax reform
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
					AND = {
						has_ideology = ideology:ideology_loyalist
						owner = {
							NOR = {
								has_law = law_type:law_proportional_taxation
								has_law = law_type:law_per_capita_based_taxation
							}
						}
					}
				}
				owner = {
					NOT = {
						has_law = law_type:law_graduated_taxation
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_graduated_taxation"
			}
		}
		if = { # anti-serfdom
			limit = {
				owner = {
					has_law = law_type:law_serfdom
				}
				OR = {
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					has_ideology = ideology:ideology_anti_slavery
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_communist
					}
				}
			}
			add = {
				value = 5
				desc = "from_serfdom"
			}
		}
		if = { # general anti-slavery
			limit = {
				owner = {
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
				OR = {
					has_ideology = ideology:ideology_anti_slavery
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 5
				desc = "from_slavery"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = communist_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				leader = {
					has_variable = caudillo_communist
				}
			}
			add = {
				value = 20
				desc = "caudillo_support"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
					is_party_type = communist_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = communist_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}
﻿# Bastion of the Landowners
# Can also appeal to the Devout, PB, and Industrialists

conservative_party = {
	color = { 108 64 179 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_christian_social_party
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_constitutional_party
				trigger = {
					exists = c:PEU
					THIS = c:PEU
				}
			}
			triggered_desc = {
				desc = party_national_autonomist
				trigger = {
					exists = c:ARG
					THIS = c:ARG
				}
			}
			triggered_desc = {
				desc = party_tories
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_us_democrats
				trigger = {
					exists = c:USA
					THIS = c:USA
				}
			}
			triggered_desc = {
				desc = party_moderate_party
				trigger = {
					exists = c:SPA
					THIS = c:SPA
				}
			}
			triggered_desc = {
				desc = party_regenerator_party
				trigger = {
					exists = c:POR
					THIS = c:POR
				}
			}
			triggered_desc = {
				desc = party_lantmanna_party
				trigger = {
					exists = c:SWE
					THIS = c:SWE
				}
			}
			triggered_desc = {
				desc = party_finnish_party
				trigger = {
					exists = c:FIN
					THIS = c:FIN
				}
			}
			triggered_desc = {
				desc = party_catholic_party
				trigger = {
					exists = c:BEL
					THIS = c:BEL
				}
			}
			triggered_desc = {
				desc = party_party_of_the_right
				trigger = {
					exists = c:LUX
					THIS = c:LUX
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					exists = c:MON
					THIS = c:MON
				}
			}
			triggered_desc = {
				desc = party_resistance_party
				trigger = {
					exists = c:FRA
					THIS = c:FRA
					has_variable = orleanist_restoration_var
				}
			}
			triggered_desc = {
				desc = party_party_of_order
				trigger = {
					exists = c:FRA
					THIS = c:FRA
					NOT = { has_variable = orleanist_restoration_var }
				}
			}
			triggered_desc = {
				desc = party_moderate_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					has_law = law_type:law_monarchy
					OR = {
						game_date <= 1837.1.1
						has_modifier = brz_regency
					}
				}
			}
			triggered_desc = {
				desc = party_conservative
				trigger = {
					country_has_primary_culture = cu:brazilian
					has_law = law_type:law_monarchy
					NOT = {
						has_modifier = brz_regency
					}
				}
			}
			triggered_desc = {
				desc = party_bahia_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					OR = {
						has_law = law_type:law_presidential_republic
						has_law = law_type:law_parliamentary_republic
					}
					any_scope_state = {
						state_region = s:STATE_BAHIA
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_SAO_PAULO
							}
						}
						s:STATE_BAHIA.region_state:BRZ.gdp > s:STATE_SAO_PAULO.region_state:BRZ.gdp
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_MINAS_GERAIS
							}
						}
						s:STATE_BAHIA.region_state:BRZ.gdp > s:STATE_MINAS_GERAIS.region_state:BRZ.gdp
					}
				}
			}
			triggered_desc = {
				desc = party_sao_paulo_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					OR = {
						has_law = law_type:law_presidential_republic
						has_law = law_type:law_parliamentary_republic
					}
					any_scope_state = {
						state_region = s:STATE_SAO_PAULO
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_MINAS_GERAIS
							}
						}
						s:STATE_SAO_PAULO.region_state:BRZ.gdp > s:STATE_MINAS_GERAIS.region_state:BRZ.gdp
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_BAHIA
							}
						}
						s:STATE_SAO_PAULO.region_state:BRZ.gdp > s:STATE_BAHIA.region_state:BRZ.gdp
					}
				}
			}
			triggered_desc = {
				desc = party_minas_gerais_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					OR = {
						has_law = law_type:law_presidential_republic
						has_law = law_type:law_parliamentary_republic
					}
					any_scope_state = {
						state_region = s:STATE_MINAS_GERAIS
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_SAO_PAULO
							}
						}
						s:STATE_MINAS_GERAIS.region_state:BRZ.gdp > s:STATE_SAO_PAULO.region_state:BRZ.gdp
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_BAHIA
							}
						}
						s:STATE_MINAS_GERAIS.region_state:BRZ.gdp > s:STATE_BAHIA.region_state:BRZ.gdp
					}
				}
			}
			triggered_desc = {
				desc = party_federal_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					OR = {
						has_law = law_type:law_presidential_republic
						has_law = law_type:law_parliamentary_republic
					}
					NOR = {
						any_scope_state = {
							state_region = s:STATE_SAO_PAULO
						}
						any_scope_state = {
							state_region = s:STATE_MINAS_GERAIS
						}
						any_scope_state = {
							state_region = s:STATE_BAHIA
						}
					}
				}
			}
			triggered_desc = {
				desc = party_octobrist_party
				trigger = {
					exists = c:RUS
					THIS = c:RUS
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_constitutional_association
				trigger = {
					exists = c:CHI
					THIS = c:CHI
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_imperial_rule_party
				trigger = {
					exists = c:JAP
					THIS = c:JAP
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_moderate_socialists_party
				trigger = {
					exists = c:PER
					THIS = c:PER
				}
			}
			triggered_desc = {
				desc = party_napist_party
				trigger = {
					exists = c:GRE
					THIS = c:GRE
					has_law = law_type:law_monarchy
					ruler = {
						culture = {
							has_discrimination_trait = german_speaking
						}
					}
				}
			}
			triggered_desc = {
				desc = party_ethnikon_komma
				trigger = {
					exists = c:GRE
					THIS = c:GRE
				}
			}
			triggered_desc = {
				desc = party_blanco_party
				trigger = {
					exists = c:URU
					THIS = c:URU
				}
			}
			triggered_desc = {
				desc = party_colorado_party
				trigger = {
					exists = c:PRG
					THIS = c:PRG
				}
			}
			triggered_desc = {
				desc = party_the_right
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_hoyre
				trigger = {
					country_has_primary_culture = cu:norwegian
				}
			}
			triggered_desc = {
				desc = party_democratic_party
				trigger = {
					country_has_primary_culture = cu:dixie
				}
			}
			triggered_desc = {
				desc = party_hojre
				trigger = {
					country_has_primary_culture = cu:danish
				}
			}
			triggered_desc = {
				desc = party_liberal_conservative_party
				trigger = {
					country_has_primary_culture = cu:anglo_canadian
				}
			}
			triggered_desc = {
				desc = party_conservative
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/conservatism.dds"
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			ig:ig_landowners = {
				is_marginal = no
			}
		}
		# unions can never be conservative
		NOT = { is_interest_group_type = ig_trade_unions }
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = conservative_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # socialists and radicals won't join conservative parties
			limit = {
				leader = { 
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_atheist
					}
				}
			}
			add = {
				value = -20
				desc = "from_leftist"
			}
		}
		if = { # conservatives love conservativism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_traditionalist
						has_ideology = ideology:ideology_royalist
						has_ideology = ideology:ideology_orleanist
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_theocrat
						has_ideology = ideology:ideology_slaver
						has_ideology = ideology:ideology_corporatist_leader
					}
				}
			}
			add = {
				value = 5
				desc = "from_conservative_leader"
			}
		}
		if = { # conservatives love conservativism
			limit = {
				OR = {
					has_ideology = ideology:ideology_paternalistic
					has_ideology = ideology:ideology_stratocratic
					has_ideology = ideology:ideology_patriarchal
					has_ideology = ideology:ideology_moralist
					has_ideology = ideology:ideology_corporatist
				}
			}
			add = {
				value = 5
				desc = "from_conservative_ig"
			}
		}
		if = { # armed forces will join if a more powerful member has jingoist leader
			limit = {
				is_interest_group_type = ig_armed_forces
				exists = owner.py:conservative_party
				owner = {
					any_interest_group = {
						is_member_of_party = owner.py:conservative_party
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_jingoist_leader
						}
					}
				}
			}
			add = {
				value = 5
				desc = "from_jingoist_party_leader"
			}
		}
		if = { # landowners will join if they are even moderately powerful
			limit = {
				ig_clout >= 0.15
				is_interest_group_type = ig_landowners
			}
			add = {
				value = 5
				desc = "from_powerful_conservative_ig"
			}
		}
		if = { # various progressives dislike conservativism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_feminist
						has_ideology = ideology:ideology_pacifist
						has_ideology = ideology:ideology_reformer
						has_ideology = ideology:ideology_humanitarian
						has_ideology = ideology:ideology_humanitarian_royalist
					}
				}
			}
			add = {
				value = -5
				desc = "from_progressive_con"
			}
		}
		# Abolitionists won't join conservative party
		if = {
			limit = {
				leader = {
					has_ideology = ideology:ideology_abolitionist
				}
				owner = {
					NOT = { has_law = law_type:law_slavery_banned }
				}
			}
			add = {
				value = -20
				desc = "from_anti_slavery"
			}
		}
		if = { # patriots are inclined towards conservativism
			limit = {
				has_ideology = ideology:ideology_patriotic
			}
			add = {
				value = 5
				desc = "from_patriot"
			}
		}
		if = { # capitalists more likely to join conservatives when the poor can vote
			limit = {
				OR = {
					has_ideology = ideology:ideology_plutocratic
					has_ideology = ideology:ideology_paternalistic
				}
				owner = {
					has_law = law_type:law_universal_suffrage
				}
			}
			add = {
				value = 5
				desc = "from_capitalists_suffrage"
			}
		}
		if = { # capitalists and landowners more likely to join with progressive taxation
			limit = {
				OR = {
					has_ideology = ideology:ideology_plutocratic
					has_ideology = ideology:ideology_stratocratic
				}
				owner = {
					has_law = law_type:law_graduated_taxation
				}
			}
			add = {
				value = 2
				desc = "from_capitalists_tax"
			}
		}
		if = { # capitalists more likely to join conservatives with public health
			limit = {
				has_ideology = ideology:ideology_individualist
				owner = {
					has_law = law_type:law_public_health_insurance
				}
			}
			add = {
				value = 2
				desc = "from_capitalists_health"
			}
		}
		if = { # devout, industrialists more likely to join conservatives with public schools
			limit = {
				OR = {
					has_ideology = ideology:ideology_individualist
					has_ideology = ideology:ideology_pious
				}
				owner = {
					has_law = law_type:law_public_schools
				}
			}
			add = {
				value = 2
				desc = "from_capitalists_schools"
			}
		}
		if = { # devout more likely to join conservatives with total separation
			limit = {
				has_ideology = ideology:ideology_moralist
				owner = {
					has_law = law_type:law_total_separation
				}
			}
			add = {
				value = 5
				desc = "from_devout_separation"
			}
		}
		if = { # devout more likely to join conservatives with freedom of conscience
			limit = {
				has_ideology = ideology:ideology_moralist
				owner = {
					has_law = law_type:law_freedom_of_conscience
				}
			}
			add = {
				value = 3
				desc = "from_devout_conscience"
			}
		}
		if = { # patriarchs more likely to join conservatives with women's suffrage
			limit = {
				has_ideology = ideology:ideology_patriarchal
				owner = {
					has_law = law_type:law_womens_suffrage
				}
			}
			add = {
				value = 3
				desc = "from_patriarchy"
			}
		}
		if = { # patriarchs more likely to join conservatives with working women
			limit = {
				has_ideology = ideology:ideology_patriarchal
				owner = {
					has_law = law_type:law_women_in_the_workplace
				}
			}
			add = {
				value = 2
				desc = "from_patriarchy_lesser"
			}
		}
		if = { # reactionaries like regressing from multiculturalism
			limit = {
				has_ideology = ideology:ideology_reactionary
				owner = {
					has_law = law_type:law_multicultural
				}
			}
			add = {
				value = 2
				desc = "from_multiculturalism"
			}
		}
		# alliance for stricter internal security
		if = {
			limit = {
				OR = {
					has_ideology = ideology:ideology_patriotic
					leader = { has_ideology = ideology:ideology_authoritarian }
				}
				owner = {
					NOR = {
						has_law = law_type:law_no_home_affairs
						has_law = law_type:law_guaranteed_liberties
					}
				}
			}
			add = {
				value = 3
				desc = "from_liberty"
			}
		}
		if = { # conservatives like censorship
			limit = {
				owner = {
					has_technology_researched = law_enforcement
					OR = { 
						has_law = law_type:law_right_of_assembly
						has_law = law_type:law_protected_speech
					}
				}
				OR = {
					has_ideology = ideology:ideology_patriarchal
					has_ideology = ideology:ideology_patriotic
					leader = { has_ideology = ideology:ideology_authoritarian }
				}
			}
			add = {
				value = 3
				desc = "from_no_censorship"
			}
		}
		if = { # conservatives hate republics
			limit = {
				OR = {
					has_ideology = ideology:ideology_moralist
					has_ideology = ideology:ideology_paternalistic
				}
				owner = {
					NOR = {
						has_law = law_type:law_monarchy
						has_law = law_type:law_theocracy
					}
				}
			}
			add = {
				value = 3
				desc = "from_republic"
			}
		}
		if = { # landowners and industrialists hate labor rights
			limit = {
				OR = {
					has_ideology = ideology:ideology_stratocratic
					has_ideology = ideology:ideology_laissez_faire
				}
				OR = {
					owner = {
						has_law = law_type:law_regulatory_bodies
						has_law = law_type:law_worker_protections
					}
				}
			}
			add = {
				value = 5
				desc = "from_labor_rights"
			}
		}
		if = { # conservatives hate welfare
			limit = {
				OR = {
					has_ideology = ideology:ideology_stratocratic
					has_ideology = ideology:ideology_individualist
				}
				OR = {
					owner = {
						has_law = law_type:law_wage_subsidies
						has_law = law_type:law_old_age_pension
					}
				}
			}
			add = {
				value = 5
				desc = "from_welfare"
			}
		}
		if = { # conservatives like police
			limit = {
				OR = {
					has_paternalist_ideology = yes
					has_ideology = ideology:ideology_patriotic
				}
				owner = {
					has_technology_researched = law_enforcement
					has_law = law_type:law_no_police
				}
			}
			add = {
				value = 3
				desc = "from_no_police"
			}
		}
	
		# Special weights for ACW
		if = {
			limit = {
				owner = { 
					OR = {
						has_journal_entry = je_acw_countdown 
						AND = { # JE not active yet at initialization
							exists = c:USA
							this = c:USA
							year < 1837						
						}
					}				
				}
			}
			if = {
				limit = { leader = { has_ideology = ideology:ideology_slaver } }
				add = {
					value = 100
					desc = "from_slaver_leader"
				}					
			}	
			else_if = {
				limit = { leader = { has_ideology = ideology:ideology_abolitionist } }
				add = {
					value = -100
					desc = "from_abolitionist_leader"
				}					
			}				
		}

		if = {
			limit = {
				is_interest_group_type = ig_landowners
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = conservative_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = conservative_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = conservative_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				leader = {
					has_ideology = ideology:ideology_jacksonian_democrat
				}
			}
			add = {
				value = 1000
				desc = "from_jacksonian_democrat"
			}
		}
		if = { # Brazil
			limit = {
				is_interest_group_type = ig_landowners
				owner = {
					OR = {
						has_journal_entry = je_coffee_with_milk
						has_journal_entry = je_populist_unrest
					}
				}
			}
			add = {
				value = 10
				desc = "from_milk_coffee"
			}
		}
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
				OR = {
					is_interest_group_type = ig_landowners
					is_interest_group_type = ig_devout
				}
			}
			add = {
				value = 10
				desc = "south_america_two_party_system"
			}
		}
		if = {
			limit = {
				leader = {
					has_variable = caudillo_conservative
				}
			}
			add = {
				value = 20
				desc = "caudillo_support"
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					OR = {
						NOT = {
							has_law = law_type:law_slavery_banned
						}
						has_modifier = missouri_compromise
					}
				}
				leader = {
					culture = cu:yankee
				}
			}
			add = {
				value = -5
				desc = "from_northern_interests"
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					OR = {
						NOT = {
							has_law = law_type:law_slavery_banned
						}
						has_modifier = missouri_compromise
					}
				}
				leader = {
					culture = cu:dixie
				}
			}
			add = {
				value = 3
				desc = "from_southern_interests"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = conservative_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				leader = {
					has_ideology = ideology:ideology_jacksonian_democrat
				}
			}
			add = {
				value = 1000
				desc = "from_jacksonian_democrat"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
					is_party_type = conservative_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = conservative_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
		if = { # Also Brazil
			limit = {
				is_interest_group_type = ig_petty_bourgeoisie
				owner = {
					has_journal_entry = je_populist_unrest
				}
			}
			add = {
				value = -1000
				desc = "from_populist_discontent"
			}
		}
	}
}

﻿fascist_party = {
	color = { 50 60 198 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_fatherland_front
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_british_union_of_fascists
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_mouvement_franciste
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_national_front
				trigger = {
					exists = c:SWI
					THIS = c:SWI
				}
			}
			triggered_desc = {
				desc = party_nasjonal_samling
				trigger = {
					exists = c:NOR
					THIS = c:NOR
				}
			}
			triggered_desc = {
				desc = party_dnsap
				trigger = {
					exists = c:DEN
					THIS = c:DEN
				}
			}
			triggered_desc = {
				desc = party_lapua_movement
				trigger = {
					exists = c:FIN
					THIS = c:FIN
				}
			}
			triggered_desc = {
				desc = party_national_league_of_sweden
				trigger = {
					exists = c:SWE
					THIS = c:SWE
				}
			}
			triggered_desc = {
				desc = party_national_union
				trigger = {
					exists = c:NET
					THIS = c:NET
				}
			}
			triggered_desc = {
				desc = party_rexist_party
				trigger = {
					exists = c:BEL
					THIS = c:BEL
				}
			}
			triggered_desc = {
				desc = party_volksdeutsche_bewegung
				trigger = {
					exists = c:LUX
					THIS = c:LUX
				}
			}
			triggered_desc = {
				desc = party_national_socialist_movement
				trigger = {
					exists = c:CHL
					THIS = c:CHL
				}
			}
			triggered_desc = {
				desc = party_ratnik_party
				trigger = {
					exists = c:BUL
					THIS = c:BUL
				}
			}
			triggered_desc = {
				desc = party_ustasha
				trigger = {
					exists = c:CRO
					THIS = c:CRO
				}
			}
			triggered_desc = {
				desc = party_zbor
				trigger = {
					exists = c:SER
					THIS = c:SER
				}
			}
			triggered_desc = {
				desc = party_all_russian_fascist_party
				trigger = {
					exists = c:RUS
					THIS = c:RUS
				}
			}
			triggered_desc = {
				desc = party_argentine_patriotic_league
				trigger = {
					exists = c:ARG
					THIS = c:ARG
				}
			}
			triggered_desc = {
				desc = party_silver_legion
				trigger = {
					exists = c:USA
					THIS = c:USA
				}
			}
			triggered_desc = {
				desc = party_freedom_party
				trigger = {
					exists = c:CSA
					THIS = c:CSA
				}
			}
			triggered_desc = {
				desc = party_national_union_of_greece
				trigger = {
					exists = c:GRE
					THIS = c:GRE
				}
			}
			triggered_desc = {
				desc = party_nazis
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = integralist_party
				trigger = {
					country_has_primary_culture = cu:portuguese
				}
			}
			triggered_desc = {
				desc = integralist_action
				trigger = {
					country_has_primary_culture = cu:brazilian
				}
			}
			triggered_desc = {
				desc = party_national_social_christian_party
				trigger = {
					country_has_primary_culture = cu:anglo_canadian
				}
			}
			triggered_desc = {
				desc = party_iran_e_no_party
				trigger = {
					country_has_primary_culture = cu:persian
				}
			}
			triggered_desc = {
				desc = integralist_action_party
				trigger = {
					country_has_primary_culture = cu:brazilian
				}
			}
			triggered_desc = {
				desc = falangist_party
				trigger = {
					country_has_primary_culture = cu:spanish
				}
			}
			triggered_desc = {
				desc = party_iron_guard
				trigger = {
					country_has_primary_culture = cu:romanian
				}
			}
			triggered_desc = {
				desc = party_arrow_cross_party
				trigger = {
					country_has_primary_culture = cu:hungarian
				}
			}
			triggered_desc = {
				desc = party_national_citizens_alliance
				trigger = {
					country_has_primary_culture = cu:japanese
				}
			}
			triggered_desc = {
				desc = party_national_fascist_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_blue_shirts_society
				trigger = {
					OR = {
						country_has_primary_culture = cu:han
						country_has_primary_culture = cu:hakka
						country_has_primary_culture = cu:miao
						country_has_primary_culture = cu:min
						country_has_primary_culture = cu:zhuang
						country_has_primary_culture = cu:yi
						country_has_primary_culture = cu:yue
					}
				}
			}
			triggered_desc = {
				desc = party_fascist
				trigger = {
					always = yes
				}
			}
		}
	}

	icon = {
		default = "/gfx/interface/icons/political_parties/fascists.dds"
	}
	unlocking_technologies = {
		political_agitation
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = fascist_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # fascists and general racists love fascism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_fascist
						has_ideology = ideology:ideology_ethno_nationalist
						has_ideology = ideology:ideology_integralist
					}
				}
			}
			add = {
				value = 10
				desc = "from_fascism"
			}
		}
		if = { # strong fascists love fascism even more
			limit = {
				is_powerful = yes
				leader = {
					OR = {
						has_ideology = ideology:ideology_fascist
						has_ideology = ideology:ideology_integralist
					}
				}
			}
			add = {
				value = 10
				desc = "from_fascism_powerful"
			}
		}
		if = { # fascism is a reactionary ideology
			limit = {
				has_ideology = ideology:ideology_reactionary
			}
			add = {
				value = 5
				desc = "from_reactionaries"
			}
		}
		if = { # conservative IG's will fall behind a stronger fascist party
			limit = {
				is_powerful = no
				OR = {
					is_interest_group_type = ig_landowners
					is_interest_group_type = ig_devout
					is_interest_group_type = ig_petty_bourgeoisie
					is_interest_group_type = ig_industrialists
					is_interest_group_type = ig_armed_forces
				}
				owner = {
					any_interest_group = {
						is_powerful = yes
						leader = {
							OR = {
								has_ideology = ideology:ideology_fascist
								has_ideology = ideology:ideology_integralist
							}
						}
					}
				}
			}
			add = {
				value = 5
				desc = "from_weak_conservatives_fascism"
			}
		}
		if = { # socialists and radicals won't join conservative parties
			limit = {
				leader = { 
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_atheist
					}
				}
			}
			add = {
				value = -20
				desc = "from_leftist"
			}
		}
		if = { # various progressives dislike fascism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_atheist
						has_ideology = ideology:ideology_feminist
						has_ideology = ideology:ideology_reformer
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_pacifist
						has_ideology = ideology:ideology_humanitarian
						has_ideology = ideology:ideology_humanitarian_royalist
					}	
				}
			}
			add = {
				value = -10
				desc = "from_progressive_fascism"
			}
		}
		if = { # trade unions usually dislike fascism
			limit = {
				is_interest_group_type = ig_trade_unions
			}
			add = {
				value = -2
				desc = "from_trade_unions"
			}
		}
		if = { # free trade advocates don't love protectionism
			limit = {
				leader = {
					has_ideology = ideology:ideology_market_liberal
				}
			}
			add = {
				value = -2
				desc = "from_market_liberal"
			}
		}
		if = { # moderates are scared of radical politics
			limit = {
				leader = {
					has_ideology = ideology:ideology_moderate
				}
			}
			add = {
				value = -3
				desc = "from_moderate"
			}
		}
		if = { # corporatists fall in line if they don't have christian democrats
			limit = {
				owner = {
					any_interest_group = {
						is_powerful = yes
						leader = {
							OR = {
								has_ideology = ideology:ideology_fascist
								has_ideology = ideology:ideology_integralist
							}
						}
					}
				}
				OR = {
					has_ideology = ideology:ideology_corporatist
					leader = {
						has_ideology = ideology:ideology_corporatist_leader
					}
				}
			}
			add = {
				value = 5
				desc = "from_corporatism"
			}
		}
		if = { # patriots are inclined towards fascism
			limit = {
				has_ideology = ideology:ideology_patriotic
			}
			add = {
				value = 4
				desc = "from_patriot"
			}
		}
		if = { # rural folk will ally with anti-migration faction
			limit = {
				has_ideology = ideology:ideology_isolationist
				owner = {
					has_law = law_type:law_no_migration_controls
				}
			}
			add = {
				value = 5
				desc = "from_isolationist"
			}
		}
		if = { # conservatives like police
			limit = {
				OR = {
					has_paternalist_ideology = yes
					has_ideology = ideology:ideology_patriotic
				}
				owner = {
					has_technology_researched = law_enforcement
					has_law = law_type:law_no_police
				}
			}
			add = {
				value = 3
				desc = "from_no_police"
			}
		}
		if = { # opposition to peasant levies
			limit = {
				OR = {
					has_ideology = ideology:ideology_jingoist
					has_ideology = ideology:ideology_particularist
					has_ideology = ideology:ideology_sikh_moralist
					leader = {
						OR = {
							has_ideology = ideology:ideology_fascist
							has_ideology = ideology:ideology_jingoist_leader
						}
					}
				}
				owner = {
					has_law = law_type:law_peasant_levies
				}
			}
			add = {
				value = 3
				desc = "from_peasant_levies"
			}
		}
		if = { # loyalist-meritocratic alliance for tax reform
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					AND = {
						has_ideology = ideology:ideology_loyalist
						owner = {
							NOT = { has_law = law_type:law_graduated_taxation }
						}
					}
				}
				owner = {
					NOR = {
						has_law = law_type:law_proportional_taxation
						has_law = law_type:law_per_capita_based_taxation
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_proportional_or_per_capita_tax"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = { # authoritarians inclined towards fascism
			limit = {
				leader = {
					has_ideology = ideology:ideology_authoritarian
				}
			}
			add = {
				value = 3
				desc = "from_authoritarian"
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = fascist_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = fascist_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = fascist_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = fascist_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				leader = {
					has_variable = caudillo_fascist
				}
			}
			add = {
				value = 20
				desc = "caudillo_support"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				 owner.var:only_valid_party = {
					 is_party_type = fascist_party
				 }
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = fascist_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿# Party for IG's that want free trade when it is not passed yet
# Should usually only appear when the Landowners want Free Trade

free_trade_party = {
	color = { 150 20 20 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_democratic_alliance
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_peelites
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_historic_party
				trigger = {
					exists = c:POR
					THIS = c:POR
				}
			}
			triggered_desc = {
				desc = party_old_lantmanna_party
				trigger = {
					exists = c:SWE
					THIS = c:SWE
				}
			}
			triggered_desc = {
				desc = party_communications_clique
				trigger = {
					exists = c:CHI
					THIS = c:CHI
				}
			}
			triggered_desc = {
				desc = party_national_party
				trigger = {
					exists = c:CHL
					THIS = c:CHL
				}
			}
			triggered_desc = {
				desc = party_party_of_peaceful_renovation
				trigger = {
					exists = c:RUS
					THIS = c:RUS
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_constitutional_union_party
				trigger = {
					exists = c:USA
					THIS = c:USA
					NOT = {
						has_global_variable = american_civil_war
					}
				}
			}
			triggered_desc = {
				desc = party_federalist_party
				trigger = {
					exists = c:NEN
					THIS = c:NEN
				}
			}
			triggered_desc = {
				desc = party_free_minded_venstre
				trigger = {
					country_has_primary_culture = cu:norwegian
				}
			}
			triggered_desc = {
				desc = party_free_conservative_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = party_free_trade
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/free_trade.dds"
	}
	unlocking_technologies = {
		stock_exchange
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			any_interest_group = {
				is_marginal = no
				OR = {
					is_interest_group_type = ig_industrialists
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = free_trade_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
			}
			add = {
				value = -10
				desc = "south_america_two_party_system"
			}
		}
		
		if = {
			limit = {
				owner = {
					country_is_in_north_america = yes
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					has_law = law_type:law_presidential_republic
				}
			}
			add = {
				value = -10
				desc = "usa_two_party_system"
			}
		}
		
		if = { # capitalists like capitalism
			limit = {
				OR = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
					has_ideology = ideology:ideology_laissez_faire
				}
			}
			add = {
				value = 5
				desc = "from_capitalism"
			}
		}
		# powerful capitalists likely to form their own party
		if = {
			limit = {
				is_powerful = yes
				OR = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
					has_ideology = ideology:ideology_laissez_faire
				}
			}
			add = {
				value = 10
				desc = "from_powerful_capitalists"
			}
		}
		# weaker market liberals fall behind powerful industrialists
		if = {
			limit = {
				is_powerful = no
				owner = {
					ig:ig_industrialists = {
						is_powerful = yes
					}
				}
				leader = {
					has_ideology = ideology:ideology_market_liberal
				}
			}
			add = {
				value = 5
				desc = "from_powerful_capitalists_other"
			}
		}
		if = { # landowners and industrialists hate labor rights
			limit = {
				OR = {
					has_ideology = ideology:ideology_stratocratic
					has_ideology = ideology:ideology_laissez_faire
				}
				OR = {
					owner = {
						has_law = law_type:law_regulatory_bodies
						has_law = law_type:law_worker_protections
					}
				}
			}
			add = {
				value = 5
				desc = "from_labor_rights"
			}
		}
		if = { # conservatives hate welfare
			limit = {
				OR = {
					has_ideology = ideology:ideology_stratocratic
					has_ideology = ideology:ideology_individualist
				}
				OR = {
					owner = {
						has_law = law_type:law_wage_subsidies
						has_law = law_type:law_old_age_pension
					}
				}
			}
			add = {
				value = 5
				desc = "from_welfare"
			}
		}
		if = { # capitalists hate children
			limit = {
				owner = {
					NOT = { has_law = law_type:law_child_labor_allowed }
				}
				OR = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
					has_ideology = ideology:ideology_laissez_faire
				}
			}
			add = {
				value = 3
				desc = "from_hates_children"
			}
		}
		if = { # capitalists want free trade
			limit = {
				owner = {
					NOT = { has_law = law_type:law_free_trade }
				}
				OR = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
					has_ideology = ideology:ideology_laissez_faire
				}
			}
			add = {
				value = 3
				desc = "from_no_free_trade"
			}
		}
		if = { # capitalists want to have power
			limit = {
				owner = {
					NOR = {
						has_law = law_type:law_oligarchy
						has_law = law_type:law_wealth_voting
					}
				}
				has_ideology = ideology:ideology_plutocratic
			}
			add = {
				value = 3
				desc = "from_no_oligarchy_wealth_voting"
			}
		}
		if = { # liberal-capitalist anti-autocracy alliance
			limit = {
				owner = {
					has_law = law_type:law_autocracy
				}
				has_ideology = ideology:ideology_republican
			}
			add = {
				value = 3
				desc = "from_autocracy"
			}
		}
		if = { # capitalist-reactionary anti-democracy alliance
			limit = {
				owner = {
					has_law = law_type:law_universal_suffrage
				}
				OR = {
					has_ideology = ideology:ideology_paternalistic
					leader = {
						has_ideology = ideology:ideology_fascist
					}
					leader = {
						has_ideology = ideology:ideology_integralist
					}
				}
			}
			add = {
				value = 3
				desc = "from_universal_suffrage"
			}
		}
		if = { # capitalist-meritocratic taxation alliance
			limit = {
				owner = {
					has_technology_researched = currency_standards
					NOT = { has_law = law_type:law_per_capita_based_taxation }
					NOT = { has_law = law_type:law_consumption_based_taxation }
				}
				OR = {
					has_ideology = ideology:ideology_plutocratic
					has_ideology = ideology:ideology_meritocratic
				}
			}
			add = {
				value = 3
				desc = "from_no_per_capita_tax"
			}
		}
		if = { # capitalist-conservative taxation alliance
			limit = {
				owner = {
					has_law = law_type:law_graduated_taxation
				}
				OR = {
					has_ideology = ideology:ideology_plutocratic
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_stratocratic
				}
			}
			add = {
				value = 3
				desc = "from_graduated_taxation"
			}
		}
		if = { # alliance for consumption taxes
			limit = {
				owner = {
					NOT = { has_law = law_type:law_consumption_based_taxation }
					NOT = { has_law = law_type:law_per_capita_based_taxation }
				}
				OR = {
					has_ideology = ideology:ideology_agrarian
					has_ideology = ideology:ideology_stratocratic
				}
			}
			add = {
				value = 3
				desc = "from_no_consumption_tax"
			}
		}
		if = { # opposition to command economy
			limit = {
				owner = {
					has_law = law_type:law_command_economy
					has_technology_researched = central_planning
				}
				OR = {
					has_ideology = ideology:ideology_paternalistic
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 3
				desc = "from_command_economy"
			}
		}
		if = { # pro-private schools
			limit = {
				owner = {
					has_technology_researched = academia
					OR = {
						has_law = law_type:law_no_schools
						has_law = law_type:law_religious_schools
					}
				}
				OR = {
					has_ideology = ideology:ideology_individualist
					has_ideology = ideology:ideology_anti_clerical
				}
			}
			add = {
				value = 3
				desc = "from_lack_of_private_schools"
			}
		}
		if = {
			limit = {
				is_interest_group_type = ig_industrialists
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = { # protectionism bad
			limit = {
				leader = {
					has_ideology = ideology:ideology_protectionist
				}
			}
			add = {
				value = -10
				desc = from_protectionist_leader
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = free_trade_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = free_trade_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = free_trade_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				owner = {
					country_has_primary_culture = cu:brazilian
					NOT = {
						OR = {
							has_technology_researched = socialism
							has_technology_researched = corporatism
							has_technology_researched = anarchism
						}
					}
				}
			}
			add = {
				value = -10
				desc = "from_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = free_trade_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
					is_party_type = free_trade_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = free_trade_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿# Bastion of the Intelligenstia, also appeals to Industrialists
# Can sometimes sway PB and Rural Folk when they have common interests

liberal_party = {
	color = { 255 214 13 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_civilista_party
				trigger = {
					exists = c:PEU
					THIS = c:PEU
				}
			}
			triggered_desc = {
				desc = party_national_civic_union
				trigger = {
					exists = c:ARG
					THIS = c:ARG
				}
			}
			triggered_desc = {
				desc = party_whigs
				trigger = {
					exists = c:GBR
					THIS = c:GBR
					NOT = { has_law = law_type:law_free_trade }
				}
			}
			triggered_desc = {
				desc = party_republicans
				trigger = {
					exists = c:USA
					THIS = c:USA
					has_global_variable = american_civil_war
				}
			}
			triggered_desc = {
				desc = party_liberal_democrats
				trigger = {
					exists = c:SWI
					THIS = c:SWI
				}
			}
			triggered_desc = {
				desc = party_republican_party
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_exalted_liberal
				trigger = {
					country_has_primary_culture = cu:brazilian
					has_law = law_type:law_monarchy
					ruler = {
						has_trait = trait_child
					}
				}
			}
			triggered_desc = {
				desc = party_liberal
				trigger = {
					country_has_primary_culture = cu:brazilian
					has_law = law_type:law_monarchy
					NOT = {
						ruler = {
							has_trait = trait_child
						}
					}
				}
			}
			triggered_desc = {
				desc = party_liberal_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					game_date < 1925.1.1
					NOT = {
						has_law = law_type:law_monarchy
					}
				}
			}
			triggered_desc = {
				desc = party_libertador_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					game_date >= 1925.1.1
				}
			}
			triggered_desc = {
				desc = party_kadets_party
				trigger = {
					exists = c:RUS
					THIS = c:RUS
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					exists = c:SWE
					THIS = c:SWE
				}
			}
			triggered_desc = {
				desc = party_liberal_union
				trigger = {
					exists = c:NET
					THIS = c:NET
				}
			}
			triggered_desc = {
				desc = party_liberal_league
				trigger = {
					exists = c:LUX
					THIS = c:LUX
				}
			}
			triggered_desc = {
				desc = party_young_finnish_party
				trigger = {
					exists = c:FIN
					THIS = c:FIN
				}
			}
			triggered_desc = {
				desc = party_constitutional_party
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					exists = c:CRO
					THIS = c:CRO
				}
			}
			triggered_desc = {
				desc = party_society_for_progress
				trigger = {
					exists = c:PER
					THIS = c:PER
				}
			}
			triggered_desc = {
				desc = party_blue_party
				trigger = {
					exists = c:PRG
					THIS = c:PRG
				}
			}
			triggered_desc = {
				desc = party_great_liberal_party
				trigger = {
					exists = c:VNZ
					THIS = c:VNZ
				}
			}
			triggered_desc = {
				desc = party_colorado_party
				trigger = {
					exists = c:URU
					THIS = c:URU
				}
			}
			triggered_desc = {
				desc = party_empire_reform_association
				trigger = {
					exists = c:CHI
					THIS = c:CHI
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_freedom_and_accord_party
				trigger = {
					exists = c:TUR
					THIS = c:TUR
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_progressive_republican_party
				trigger = {
					exists = c:TUR
					THIS = c:TUR
					NOT = { has_law = law_type:law_monarchy }
				}
			}
			triggered_desc = {
				desc = party_constitutional_reform_party
				trigger = {
					exists = c:JAP
					THIS = c:JAP
				}
			}
			triggered_desc = {
				desc = party_constitutional_party
				trigger = {
					exists = c:GRE
					THIS = c:GRE
					has_law = law_type:law_monarchy
					ruler = {
						culture = {
							has_discrimination_trait = german_speaking
						}
					}
				}
			}
			triggered_desc = {
				desc = party_neoteristikon_komma
				trigger = {
					exists = c:GRE
					THIS = c:GRE
				}
			}
			triggered_desc = {
				desc = party_the_left
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_national_liberal_party
				trigger = {
					country_has_primary_culture = cu:romanian
				}
			}
			triggered_desc = {
				desc = party_whig_party
				trigger = {
					OR = {
						AND = {
							country_has_primary_culture = cu:dixie
							NOT = {
								exists = c:USA
								THIS = c:USA
							}
						}
						AND = {
							exists = c:USA
							THIS = c:USA
							NOT = { has_global_variable = american_civil_war }
						}
					}
				}
			}
			triggered_desc = {
				desc = party_progress_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = party_progressive_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:spanish
						country_has_primary_culture = cu:portuguese
					}
				}
			}
			triggered_desc = {
				desc = party_venstre
				trigger = {
					OR = {
						country_has_primary_culture = cu:norwegian
						country_has_primary_culture = cu:spanish
					}
				}
			}
			triggered_desc = {
				desc = party_liberal
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/liberal.dds"
	}
	unlocking_technologies = {
		empiricism
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			ig:ig_intelligentsia = {
				is_marginal = no
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = liberal_party
	        }
	    }
		leader = { # far right and far left won't join liberal parties
			NOR = {
				has_ideology = ideology:ideology_fascist
				has_ideology = ideology:ideology_integralist
				has_ideology = ideology:ideology_ethno_nationalist
				has_ideology = ideology:ideology_communist
				has_ideology = ideology:ideology_vanguardist
				has_ideology = ideology:ideology_anarchist
			}
		}
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # liberals love liberalism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_republican_leader
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_reformer
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 5
				desc = "from_liberal_leader"
			}
		}
		if = { # liberals love liberalism
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_laissez_faire
				}
			}
			add = {
				value = 5
				desc = "from_liberalism"
			}
		}
		if = { # various progressives are inclined towards liberalism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_feminist
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_pacifist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_atheist
						has_ideology = ideology:ideology_humanitarian
						has_ideology = ideology:ideology_humanitarian_royalist
					}
				}
			}
			add = {
				value = 5
				desc = "from_progressivism"
			}
		}
		if = { # various conservatives dislike liberalism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_traditionalist
						has_ideology = ideology:ideology_royalist
						has_ideology = ideology:ideology_theocrat
						has_ideology = ideology:ideology_slaver
						has_ideology = ideology:ideology_authoritarian
						has_ideology = ideology:ideology_orleanist
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
			}
			add = {
				value = -5
				desc = "from_conservatism"
			}
		}
		if = { # against hereditary bureacrats
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_anti_clerical
				}
				owner = {
					has_law = law_type:law_hereditary_bureaucrats
				}
			}
			add = {
				value = 3
				desc = "from_hereditary_offices"
			}
		}
		if = { # armed forces will join if a more powerful member has jingoist leader
			limit = {
				is_interest_group_type = ig_armed_forces
				exists = owner.py:liberal_party
				owner = {
					any_interest_group = {
						is_member_of_party = owner.py:liberal_party
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_jingoist_leader
						}
					}
				}
			}
			add = {
				value = 5
				desc = "from_jingoist_party_leader"
			}
		}
		if = { # against illiteracy and religious education
			limit = {
				OR = {
					has_ideology = ideology:ideology_individualist
					has_ideology = ideology:ideology_proletarian
				}
				owner = {
					OR = {
						has_law = law_type:law_religious_schools
						has_law = law_type:law_no_schools
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_or_religious_schools"
			}
		}
		if = { # lack of women's rights
			limit = {
				OR = {
					leader = {
						has_ideology = ideology:ideology_feminist
					}
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
				}
				owner = {
					has_law = law_type:law_no_womens_rights
				}
			}
			add = {
				value = 3
				desc = from_no_womens_rights
			}
		}
		if = { # anti-racism
			limit = {
				OR = {
					leader = {
						OR = {
							has_ideology = ideology:ideology_reformer
							has_ideology = ideology:ideology_humanitarian
							has_ideology = ideology:ideology_humanitarian_royalist
						}
					}
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
				}
				owner = {
					OR = {
						has_law = law_type:law_ethnostate
						has_law = law_type:law_national_supremacy
						has_law = law_type:law_racial_segregation
					}
				}
			}
			add = {
				value = 3
				desc = from_racism
			}
		}
		if = { # anti-censorship
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					leader = {
						has_ideology = ideology:ideology_humanitarian
						has_ideology = ideology:ideology_humanitarian_royalist
					}
				}
				owner = {
					has_law = law_type:law_outlawed_dissent
				}
			}
			add = {
				value = 3
				desc = from_outlawed_dissent
			}
		}
		if = { # against arbitrary or militarized policing
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_particularist
				}
				owner = {
					OR = {	
						has_law = law_type:law_local_police
						has_law = law_type:law_militarized_police
					}
				}
			}
			add = {
				value = 3
				desc = from_bad_police
			}
		}
		if = { # anticlerical
			limit = {
				OR = {
					has_ideology = ideology:ideology_anti_clerical
					leader = {
						has_ideology = ideology:ideology_atheist
					}
				}
				owner = {
					has_law = law_type:law_state_religion
				}
			}
			add = {
				value = 3
				desc = "from_anticlerical"
			}
		}
		if = { # republican
			limit = {
				OR = {
					has_ideology = ideology:ideology_republican
					has_ideology = ideology:ideology_populist
					leader = {
						OR = {
							has_ideology = ideology:ideology_atheist
							has_ideology = ideology:ideology_republican_leader
							has_ideology = ideology:ideology_radical
						}
					}
				}
				owner = {
					OR = {
						has_law = law_type:law_monarchy
						has_law = law_type:law_theocracy
					}
				}
			}
			add = {
				value = 3
				desc = "from_republican"
			}
		}
		if = { # peasants opposition to debt slavery
			limit = {
				owner = {
					has_law = law_type:law_debt_slavery
				}
				OR = {
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 5
				desc = "from_debt_slavery"
			}
		}
		if = { # general anti-slavery
			limit = {
				owner = {
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
				OR = {
					has_ideology = ideology:ideology_anti_slavery
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 5
				desc = "from_slavery"
			}
		}
		if = { # anti-serfdom
			limit = {
				owner = {
					has_law = law_type:law_serfdom
				}
				OR = {
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					has_ideology = ideology:ideology_anti_slavery
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_communist
					}
				}
			}
			add = {
				value = 5
				desc = "from_serfdom"
			}
		}
		if = { # modernizer
			limit = {
				has_ideology = ideology:ideology_modernizer
			}
			add = {
				value = 10
				desc = "from_modernizer"
			}
		}
		# Special weights for ACW
		if = {
			limit = {
				owner = { 
					OR = {
						has_journal_entry = je_acw_countdown 
						AND = { # JE not active yet at initialization
							exists = c:USA
							this = c:USA
							year < 1837						
						}
					}				
				}
			}
			if = {
				limit = { leader = { has_ideology = ideology:ideology_slaver } }
				add = {
					value = -100
					desc = "from_slaver_leader"
				}					
			}	
			else_if = {
				limit = { leader = { has_ideology = ideology:ideology_abolitionist } }
				add = {
					value = 100
					desc = "from_abolitionist_leader"
				}					
			}				
		}	
		
		if = {
			limit = {
				is_interest_group_type = ig_intelligentsia
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = liberal_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = liberal_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = liberal_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				owner = {
	         		country_has_primary_culture = cu:brazilian
					ruler = {
						has_template = BRZ_emperor_pedro_02
						has_trait = trait_child
					}
	         	}
				leader = {
					has_template = BRZ_diogo_antonio_feijo
				}
			}
			add = {
				value = -50
				desc = "from_feijo_regency"
			}
		}	
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
				OR = {
					is_interest_group_type = ig_intelligentsia
					is_interest_group_type = ig_rural_folk
				}
			}
			add = {
				value = 10
				desc = "south_america_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
					country_is_in_north_america = yes
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					has_law = law_type:law_presidential_republic
				}
				leader = {
					NOR = {
						has_reactionary_ideology = yes
						has_conservative_ideology = yes
						has_socialist_ideology = yes
					}
				}
			}
			add = {
				value = 3
				desc = "usa_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					OR = {
						NOT = {
							has_law = law_type:law_slavery_banned
						}
						has_modifier = missouri_compromise
					}
				}
				leader = {
					culture = cu:yankee
				}
			}
			add = {
				value = 3
				desc = "from_northern_interests"
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					OR = {
						NOT = {
							has_law = law_type:law_slavery_banned
						}
						has_modifier = missouri_compromise
					}
				}
				leader = {
					culture = cu:dixie
				}
			}
			add = {
				value = -5
				desc = "from_southern_interests"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = liberal_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				leader = {
					has_variable = caudillo_liberal
				}
			}
			add = {
				value = 20
				desc = "caudillo_support"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
		        	is_party_type = liberal_party
		        }
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = liberal_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}
﻿# Fallback party for Armed Forces

military_party = {
	color = { 132 100 53 }
	name = {
		first_valid = {

			triggered_desc = {
				desc = party_true_peoples_party
				trigger = {
					exists = c:MON
					THIS = c:MON
				}
			}
			triggered_desc = {
				desc = party_national_party
				trigger = {
					exists = c:SER
					THIS = c:SER
				}
			}
			triggered_desc = {
				desc = party_union_of_rights
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_imperial_clan_party
				trigger = {
					exists = c:CHI
					THIS = c:CHI
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_russian_assembly
				trigger = {
					exists = c:RUS
					THIS = c:RUS
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_russian_all_military_union
				trigger = {
					exists = c:RUS
					THIS = c:RUS
					NOT = { has_law = law_type:law_monarchy }
				}
			}
			triggered_desc = {
				desc = party_imperial_way_party
				trigger = {
					exists = c:JAP
					THIS = c:JAP
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_patriotic_union
				trigger = {
					country_has_primary_culture = cu:spanish
				}
			}
			triggered_desc = {
				desc = party_regressivist_party
				trigger = {
					country_has_primary_culture = cu:brazilian
				}
			}
			triggered_desc = {
				desc = party_national_peoples_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = party_military
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/military.dds"
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			ig:ig_armed_forces = {
				is_marginal = no
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = military_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
			}
			add = {
				value = -10
				desc = "south_america_two_party_system"
			}
		}
		
		if = {
			limit = {
				owner = {
					country_is_in_north_america = yes
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					has_law = law_type:law_presidential_republic
				}
			}
			add = {
				value = -10
				desc = "usa_two_party_system"
			}
		}
		if = { # nobody will join if the armed forces don't join
			limit = {
				NOT = { is_interest_group_type = ig_armed_forces }
				OR = {
					NOT = { exists = owner.py:military_party }
					AND = {
						exists = owner.py:military_party
						owner = {
							ig:ig_armed_forces = {
								NOT = { is_member_of_party = owner.py:military_party }
							}
						}
					}
				}
			}
			add = {
				value = -20
				desc = "from_no_army_in_party" # this should probably never actually display in game because the party won't exist
			}
		}
		if = { # a party for powerful soldiers
			limit = {
				is_interest_group_type = ig_armed_forces
				is_powerful = yes
			}
			add = {
				value = 10
				desc = "from_strong_military"
			}
		}
		if = { # jingoists like the military party
			limit = {
				leader = { has_ideology = ideology:ideology_jingoist_leader }
			}
			add = {
				value = 10
				desc = "from_jingoist"
			}
		}
		if = { # conservatives like police
			limit = {
				OR = {
					has_paternalist_ideology = yes
					has_ideology = ideology:ideology_patriotic
				}
				owner = {
					has_technology_researched = law_enforcement
					has_law = law_type:law_no_police
				}
			}
			add = {
				value = 3
				desc = "from_no_police"
			}
		}
		if = { # opposition to peasant levies
			limit = {
				OR = {
					has_ideology = ideology:ideology_jingoist
					has_ideology = ideology:ideology_particularist
					has_ideology = ideology:ideology_sikh_moralist
					leader = {
						OR = {
							has_ideology = ideology:ideology_fascist
							has_ideology = ideology:ideology_anarchist
							has_ideology = ideology:ideology_pacifist
							has_ideology = ideology:ideology_jingoist_leader
						}
					}
				}
				owner = {
					has_law = law_type:law_peasant_levies
				}
			}
			add = {
				value = 3
				desc = "from_peasant_levies"
			}
		}
		if = { # loyalist-proletarian alliance for tax reform
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
					has_ideology = ideology:ideology_loyalist
				}
				owner = {
					NOR = {
						has_law = law_type:law_proportional_taxation
						has_law = law_type:law_per_capita_based_taxation
						has_law = law_type:law_graduated_taxation
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_graduated_taxation"
			}
		}
		if = { # loyalist-meritocratic alliance for tax reform
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					AND = {
						has_ideology = ideology:ideology_loyalist
						owner = {
							NOT = { has_law = law_type:law_graduated_taxation }
						}
					}
				}
				owner = {
					NOR = {
						has_law = law_type:law_proportional_taxation
						has_law = law_type:law_per_capita_based_taxation
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_proportional_or_per_capita_tax"
			}
		}
		if = {
			limit = {
				is_interest_group_type = ig_armed_forces
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		# alliance for stricter internal security
		if = {
			limit = {
				OR = {
					has_ideology = ideology:ideology_patriotic
					leader = { has_ideology = ideology:ideology_authoritarian }
				}
				owner = {
					NOR = {
						has_law = law_type:law_no_home_affairs
						has_law = law_type:law_guaranteed_liberties
					}
				}
			}
			add = {
				value = 3
				desc = "from_liberty"
			}
		}
		if = { # conservatives like censorship
			limit = {
				owner = {
					has_technology_researched = law_enforcement
					OR = { 
						has_law = law_type:law_right_of_assembly
						has_law = law_type:law_protected_speech
					}
				}
				OR = {
					has_ideology = ideology:ideology_patriarchal
					has_ideology = ideology:ideology_patriotic
					leader = { has_ideology = ideology:ideology_authoritarian }
				}
			}
			add = {
				value = 3
				desc = "from_no_censorship"
			}
		}
		if = { # authoritarians like militarism
			limit = {
				leader = {
					has_ideology = ideology:ideology_authoritarian
				}
			}
			add = {
				value = 5
				desc = from_authoritarian
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = military_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = military_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = military_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = military_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
		        	is_party_type = military_party
		        }
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = military_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿﻿# Fallback party for Rural Folk
# Occasionally used for an anti-serfdom alliance
# More popular in Nordic countries

agrarian_party = {
	color = { 64 173 59 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_irish_national_land_league
				trigger = {
					exists = c:IRE
					THIS = c:IRE
				}
			}
			triggered_desc = {
				desc = party_independent_agriculture_party
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_farmers_party
				trigger = {
					exists = c:NOR
					THIS = c:NOR
				}
			}
			triggered_desc = {
				desc = party_free_peoples_party
				trigger = {
					exists = c:DEN
					THIS = c:DEN
				}
			}
			triggered_desc = {
				desc = party_farmers_league
				trigger = {
					exists = c:SWE
					THIS = c:SWE
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					exists = c:FIN
					THIS = c:FIN
				}
			}
			triggered_desc = {
				desc = party_agrarian_and_farmer_party
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_conservative_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					OR = {
						has_law = law_type:law_presidential_republic
						has_law = law_type:law_parliamentary_republic
					}
				}
			}
			triggered_desc = {
				desc = party_landbund
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_national_peasant_accord
				trigger = {
					exists = c:SER
					THIS = c:SER
				}
			}
			triggered_desc = {
				desc = party_agrarian_national_union
				trigger = {
					exists = c:BUL
					THIS = c:BUL
				}
			}
			triggered_desc = {
				desc = party_national_farmer_party
				trigger = {
					exists = c:HUN
					THIS = c:HUN
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					exists = c:USA
					THIS = c:USA
				}
			}
			triggered_desc = {
				desc = party_patrons_of_industry
				trigger = {
					country_has_primary_culture = cu:anglo_canadian
				}
			}
			triggered_desc = {
				desc = party_peasants_party
				trigger = {
					country_has_primary_culture = cu:romanian
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					country_has_primary_culture = cu:polish
				}
			}
			triggered_desc = {
				desc = party_agrarian_league
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = party_agrarian
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/agrarians.dds"
	}

	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			ig:ig_rural_folk = {
				is_marginal = no
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = agrarian_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
			}
			add = {
				value = -10
				desc = "south_america_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
					country_is_in_north_america = yes
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					has_law = law_type:law_presidential_republic
				}
			}
			add = {
				value = -10
				desc = "usa_two_party_system"
			}
		}
		if = { # a party for powerful farmers
			limit = {
				has_ideology = ideology:ideology_agrarian
				is_powerful = yes
			}
			add = {
				value = 10
				desc = "from_peasants"
			}
		}
		if = { # weak anti-serfdom types might fall in line behind strong farmers
			limit = {
				is_powerful = no
				owner = {
					has_law = law_type:law_serfdom
				}
				law_stance = {
					law = law_type:law_serfdom
					value < neutral
				}
			}
			add = {
				value = 10
				desc = "from_powerful_farmers"
			}
		}
		if = { # scandinavians are more likely to have agrarian parties
			limit = {
				owner = {
					any_primary_culture = {
						has_discrimination_trait = scandinavian_culture_group
					}
				}
				OR = {
					is_interest_group_type = ig_rural_folk
					is_interest_group_type = ig_intelligentsia
				}
			}
			add = {
				value = 10
				desc = "from_scandinavian"
			}
		}
		if = { # pacifist anti-colonial alliance
			limit = {
				leader = {
					has_ideology = ideology:ideology_pacifist
				}
				owner = {
					NOT = { has_law = law_type:law_no_colonial_affairs }
				}
			}
			add = {
				value = 6
				desc = "from_pacifism"
			}
		}
		if = { # anti-immigration alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_isolationist
					has_ideology = ideology:ideology_populist
					has_ideology = ideology:ideology_reactionary
				}
				owner = {
					has_law = law_type:law_no_migration_controls
				}
			}
			add = {
				value = 6
				desc = "from_migration_law"
			}
		}
		if = { # against arbitrary or militarized policing
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_particularist
				}
				owner = {
					OR = {	
						has_law = law_type:law_local_police
						has_law = law_type:law_militarized_police
					}
				}
			}
			add = {
				value = 6
				desc = "from_bad_police"
			}
		}
		if = { # against land-based taxation
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
				}
				owner = {
					has_law = law_type:law_land_based_taxation
				}
			}
			add = {
				value = 6
				desc = "from_land_tax"
			}
		}
		if = { # against free trade - peasant/socialist alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					has_ideology = ideology:ideology_agrarian
					has_ideology = ideology:ideology_paternalistic
				}
				owner = {
					has_law = law_type:law_free_trade
				}
				NOT = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 6
				desc = "from_anti_free_trade"
			}
		}
		if = { # against laissez-faire - peasant/socialist alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_protectionist
					}
				}
				owner = {
					has_law = law_type:law_laissez_faire
				}
				NOT = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 6
				desc = "from_anti_free_trade"
			}
		}
		if = { # opposition to peasant levies
			limit = {
				OR = {
					has_ideology = ideology:ideology_jingoist
					has_ideology = ideology:ideology_particularist
					has_ideology = ideology:ideology_sikh_moralist
					leader = {
						OR = {
							has_ideology = ideology:ideology_fascist
							has_ideology = ideology:ideology_anarchist
							has_ideology = ideology:ideology_pacifist
							has_ideology = ideology:ideology_jingoist_leader
						}
					}
				}
				owner = {
					has_law = law_type:law_peasant_levies
				}
			}
			add = {
				value = 6
				desc = "from_peasant_levies"
			}
		}
		if = { # anti-serfdom
			limit = {
				owner = {
					has_law = law_type:law_serfdom
				}
				OR = {
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					has_ideology = ideology:ideology_anti_slavery
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_communist
					}
				}
			}
			add = {
				value = 10
				desc = "from_serfdom"
			}
		}
		if = { # opposition to debt slavery
			limit = {
				owner = {
					has_law = law_type:law_debt_slavery
				}
				OR = {
					has_ideology = ideology:ideology_anti_slavery
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 10
				desc = "from_debt_slavery"
			}
		}
		if = { # nobody will join if the rural folk don't join
			limit = {
				NOT = { is_interest_group_type = ig_rural_folk }
				OR = {
					NOT = { exists = owner.py:agrarian_party }
					AND = {
						exists = owner.py:agrarian_party
						owner = {
							ig:ig_rural_folk = {
								NOT = { is_member_of_party = owner.py:agrarian_party }
							}
						}
					}
				}
			}
			add = {
				value = -20
				desc = "from_no_rural_folk_in_party" # this should probably never actually display in game because the party won't exist
			}
		}
		if = {
			limit = {
				is_interest_group_type = ig_rural_folk
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = {
			limit = {
				owner = {
					country_has_primary_culture = cu:brazilian
					NOT = {
						OR = {
							has_technology_researched = socialism
							has_technology_researched = corporatism
							has_technology_researched = anarchism
						}
					}
				}
			}
			add = {
				value = -10
				desc = "from_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = agrarian_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				 owner.var:only_valid_party = {
					is_party_type = agrarian_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = agrarian_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿# Niche party for anarchists in specific circumstances

anarchist_party = {
	color = { 0 0 0 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_cnt
				trigger = {
					exists = c:SPA
					THIS = c:SPA
				}
			}
			triggered_desc = {
				desc = party_socialist_league
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_anarcho_communist_federation
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_maximalist_federation
				trigger = {
					country_has_primary_culture = cu:portuguese
				}
			}
			triggered_desc = {
				desc = party_young_socialists
				trigger = {
					OR = {
						country_has_primary_culture = cu:norwegian
						country_has_primary_culture = cu:danish
					}
				}
			}
			triggered_desc = {
				desc = party_italian_syndicalist_union
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_anarchist
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/anarchist.dds"
	}
	unlocking_technologies = {
		anarchism
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			any_interest_group = {
				is_marginal = no
				leader = {
					has_ideology = ideology:ideology_anarchist
				}
			}
		}
		leader = {
			has_ideology = ideology:ideology_anarchist
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = anarchist_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # anarchists like anarchism
			limit = {
				leader = { has_ideology = ideology:ideology_anarchist }
			}
			add = {
				value = 6
				desc = "from_anarchy"
			}
		}
		if = { # strong anarchists like anarchism
			limit = {
				is_powerful = yes
				leader = { has_ideology = ideology:ideology_anarchist }
			}
			add = {
				value = 10
				desc = "powerful_anarachists"
			}
		}
		if = { # anarchists don't like the revolution being hijacked
			limit = {
				leader = {
					has_ideology = ideology:ideology_anarchist
				}
				owner = {
					has_law = law_type:law_council_republic
					ruler = {
						has_ideology = ideology:ideology_vanguardist
					}
				}
			}
			add = {
				value = 10
				desc = "from_vanguard_anarchy"
			}
		}
		if = { # anarchists will make their own party if there is no communist party to join
			limit = {
				leader = {
					has_ideology = ideology:ideology_anarchist
				}
				owner = {
					NOT = {
						any_interest_group = {
							is_marginal = no
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_vanguardist
								}
							}
						}
					}
				}
			}
			add = {
				value = 5
				desc = "from_no_communists"
			}
		}
		if = { # radical anti-censorship
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_anarchist
					}
				}
				owner = {
					OR = {
						has_law = law_type:law_outlawed_dissent
						has_law = law_type:law_censorship
					}
				}
			}
			add = {
				value = 3
				desc = from_censorship
			}
		}
		if = { # anti-censorship
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					leader = {
						has_ideology = ideology:ideology_humanitarian
					}
				}
				owner = {
					has_law = law_type:law_outlawed_dissent
				}
			}
			add = {
				value = 3
				desc = from_outlawed_dissent
			}
		}
		if = { # against land-based taxation
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
				}
				owner = {
					has_law = law_type:law_land_based_taxation
				}
			}
			add = {
				value = 3
				desc = "from_land_tax"
			}
		}
		if = { # anticlerical
			limit = {
				OR = {
					has_ideology = ideology:ideology_anti_clerical
					leader = {
						has_ideology = ideology:ideology_atheist
					}
				}
				owner = {
					has_law = law_type:law_state_religion
				}
			}
			add = {
				value = 3
				desc = "from_anticlerical"
			}
		}
		if = { # opposition to peasant levies
			limit = {
				OR = {
					has_ideology = ideology:ideology_jingoist
					has_ideology = ideology:ideology_particularist
					has_ideology = ideology:ideology_sikh_moralist
					leader = {
						OR = {
							has_ideology = ideology:ideology_anarchist
							has_ideology = ideology:ideology_pacifist
						}
					}
				}
				owner = {
					has_law = law_type:law_peasant_levies
				}
			}
			add = {
				value = 3
				desc = "from_peasant_levies"
			}
		}
		if = { # general anti-slavery
			limit = {
				owner = {
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
				OR = {
					has_ideology = ideology:ideology_anti_slavery
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 5
				desc = "from_slavery"
			}
		}
		if = { # anti-serfdom
			limit = {
				owner = {
					has_law = law_type:law_serfdom
				}
				OR = {
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					has_ideology = ideology:ideology_anti_slavery
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_communist
					}
				}
			}
			add = {
				value = 5
				desc = "from_serfdom"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = anarchist_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
					is_party_type = anarchist_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = anarchist_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿communist_party = {
	color = { 150 20 20 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_bolsheviks
				trigger = {
					country_has_primary_culture = cu:russian
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_british_socialist_party
				trigger = {
					exists = c:GBR
					THIS = c:GBR
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_pcf
				trigger = {
					exists = c:FRA
					THIS = c:FRA
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_kps
				trigger = {
					exists = c:SWI
					THIS = c:SWI
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_nkp
				trigger = {
					exists = c:NOR
					THIS = c:NOR
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_dkp
				trigger = {
					exists = c:DEN
					THIS = c:DEN
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_skp
				trigger = {
					exists = c:SWE
					THIS = c:SWE
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_skp
				trigger = {
					exists = c:FIN
					THIS = c:FIN
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_kpl
				trigger = {
					exists = c:LUX
					THIS = c:LUX
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_bkp
				trigger = {
					exists = c:BUL
					THIS = c:BUL
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_mkp
				trigger = {
					exists = c:HUN
					THIS = c:HUN
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_kpo
				trigger = {
					exists = c:AUS
					THIS = c:AUS
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_jcp
				trigger = {
					exists = c:JAP
					THIS = c:JAP
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_justice_party
				trigger = {
					exists = c:PER
					THIS = c:PER
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_socialist_workers_party
				trigger = {
					exists = c:MEX
					THIS = c:MEX
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_kke
				trigger = {
					exists = c:GRE
					THIS = c:GRE
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_kpd
				trigger = {
					AND = {
						OR = {
							country_has_primary_culture = cu:north_german
							country_has_primary_culture = cu:south_german
						}
						any_interest_group = {
							is_powerful = yes
							leader = {
								has_ideology = ideology:ideology_vanguardist
							}
						}
					}
				}
			}
			triggered_desc = {
				desc = party_pcb
				trigger = {
					country_has_primary_culture = cu:brazilian
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
			triggered_desc = {
				desc = party_workingmens_party
				trigger = {
					AND = {
						OR = {
							country_has_primary_culture = cu:yankee
							country_has_primary_culture = cu:dixie
						}
						any_interest_group = {
							is_powerful = yes
							leader = {
								has_ideology = ideology:ideology_vanguardist
							}
						}
					}
				}
			}
			triggered_desc = {
				desc = party_cpc
				trigger = {
					AND = {
						OR = {
							country_has_primary_culture = cu:han
							country_has_primary_culture = cu:hakka
							country_has_primary_culture = cu:miao
							country_has_primary_culture = cu:min
							country_has_primary_culture = cu:zhuang
							country_has_primary_culture = cu:yi
							country_has_primary_culture = cu:yue
						}
						any_interest_group = {
							is_powerful = yes
							leader = {
								has_ideology = ideology:ideology_vanguardist
							}
						}
					}
				}
			}
			triggered_desc = {
				desc = party_communist
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/communists.dds"
	}
	unlocking_technologies = {
		socialism
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			any_interest_group = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
					}
				}
			}
		}
		NOR = {
			is_interest_group_type = ig_industrialists
			is_interest_group_type = ig_landowners
		}
		leader = { # fascists, conservatives, and capitalists hate communism
			NOR = {
				has_ideology = ideology:ideology_fascist
				has_ideology = ideology:ideology_integralist
				has_ideology = ideology:ideology_ethno_nationalist
				has_ideology = ideology:ideology_market_liberal
				has_ideology = ideology:ideology_traditionalist
				has_ideology = ideology:ideology_royalist
				has_ideology = ideology:ideology_orleanist
				has_ideology = ideology:ideology_bonapartist
				has_ideology = ideology:ideology_legitimist
				has_ideology = ideology:ideology_theocrat
				has_ideology = ideology:ideology_corporatist_leader
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = communist_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # communists love communism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
					}
				}
			}
			add = {
				value = 10
				desc = "from_communism"
			}
		}
		if = { # communists love communism
			limit = {
				is_powerful = yes
				leader = {
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
					}
				}
			}
			add = {
				value = 10
				desc = "from_communism_powerful"
			}
		}
		if = { # weak social democrats and radicals may side with strong communists
			limit = {
				is_powerful = no
				leader = {
					OR = {
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_radical
					}
				}
				owner = {
					any_interest_group = {
						is_powerful = yes
						leader = {
							OR = {
								has_ideology = ideology:ideology_communist
								has_ideology = ideology:ideology_vanguardist
								has_ideology = ideology:ideology_anarchist
							}
						}
					}
				}
			}
			add = {
				value = 6
				desc = "from_socdem_communism"
			}
		}
		if = { # post-revolution anarchists not excited about vanguard party
			limit = {
				leader = {
					has_ideology = ideology:ideology_anarchist
				}
				owner = {
					has_law = law_type:law_council_republic
					ruler = {
						has_ideology = ideology:ideology_vanguardist
					}
				}
			}
			add = {
				value = -10
				desc = "from_vanguard_anarchy"
			}
		}
		if = { # reactionary ig's don't like communism
			limit = {
				has_ideology = ideology:ideology_reactionary
			}
			add = {
				value = -3
				desc = "from_reactionaries"
			}
		}
		if = { # trade unions often enjoy communism
			limit = {
				is_interest_group_type = ig_trade_unions
			}
			add = {
				value = 2
				desc = "from_trade_unions"
			}
		}
		if = { # moderates are scared of radical politics
			limit = {
				leader = {
					has_ideology = ideology:ideology_moderate
				}
			}
			add = {
				value = -3
				desc = "from_moderate"
			}
		}
		if = { # against land-based taxation
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
				}
				owner = {
					has_law = law_type:law_land_based_taxation
				}
			}
			add = {
				value = 3
				desc = "from_land_tax"
			}
		}
		if = { # anticlerical
			limit = {
				OR = {
					has_ideology = ideology:ideology_anti_clerical
					leader = {
						has_ideology = ideology:ideology_atheist
					}
				}
				owner = {
					has_law = law_type:law_state_religion
				}
			}
			add = {
				value = 3
				desc = "from_anticlerical"
			}
		}
		if = { # against free trade - peasant/communist alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_socialist
					has_ideology = ideology:ideology_agrarian
				}
				owner = {
					has_law = law_type:law_free_trade
				}
				NOT = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 3
				desc = "from_anti_free_trade"
			}
		}
		if = { # against laissez-faire - peasant/socialist alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_socialist
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_protectionist
					}
				}
				owner = {
					has_law = law_type:law_laissez_faire
				}
				NOT = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 3
				desc = "from_anti_laissez_faire"
			}
		}
		if = { # loyalist-proletarian alliance for tax reform
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
					AND = {
						has_ideology = ideology:ideology_loyalist
						owner = {
							NOR = {
								has_law = law_type:law_proportional_taxation
								has_law = law_type:law_per_capita_based_taxation
							}
						}
					}
				}
				owner = {
					NOT = {
						has_law = law_type:law_graduated_taxation
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_graduated_taxation"
			}
		}
		if = { # anti-serfdom
			limit = {
				owner = {
					has_law = law_type:law_serfdom
				}
				OR = {
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					has_ideology = ideology:ideology_anti_slavery
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_communist
					}
				}
			}
			add = {
				value = 5
				desc = "from_serfdom"
			}
		}
		if = { # general anti-slavery
			limit = {
				owner = {
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
				OR = {
					has_ideology = ideology:ideology_anti_slavery
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 5
				desc = "from_slavery"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = communist_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				leader = {
					has_variable = caudillo_communist
				}
			}
			add = {
				value = 20
				desc = "caudillo_support"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
					is_party_type = communist_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = communist_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}
﻿# Bastion of the Landowners
# Can also appeal to the Devout, PB, and Industrialists

conservative_party = {
	color = { 108 64 179 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_christian_social_party
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_constitutional_party
				trigger = {
					exists = c:PEU
					THIS = c:PEU
				}
			}
			triggered_desc = {
				desc = party_national_autonomist
				trigger = {
					exists = c:ARG
					THIS = c:ARG
				}
			}
			triggered_desc = {
				desc = party_tories
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_us_democrats
				trigger = {
					exists = c:USA
					THIS = c:USA
				}
			}
			triggered_desc = {
				desc = party_moderate_party
				trigger = {
					exists = c:SPA
					THIS = c:SPA
				}
			}
			triggered_desc = {
				desc = party_regenerator_party
				trigger = {
					exists = c:POR
					THIS = c:POR
				}
			}
			triggered_desc = {
				desc = party_lantmanna_party
				trigger = {
					exists = c:SWE
					THIS = c:SWE
				}
			}
			triggered_desc = {
				desc = party_finnish_party
				trigger = {
					exists = c:FIN
					THIS = c:FIN
				}
			}
			triggered_desc = {
				desc = party_catholic_party
				trigger = {
					exists = c:BEL
					THIS = c:BEL
				}
			}
			triggered_desc = {
				desc = party_party_of_the_right
				trigger = {
					exists = c:LUX
					THIS = c:LUX
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					exists = c:MON
					THIS = c:MON
				}
			}
			triggered_desc = {
				desc = party_resistance_party
				trigger = {
					exists = c:FRA
					THIS = c:FRA
					has_variable = orleanist_restoration_var
				}
			}
			triggered_desc = {
				desc = party_party_of_order
				trigger = {
					exists = c:FRA
					THIS = c:FRA
					NOT = { has_variable = orleanist_restoration_var }
				}
			}
			triggered_desc = {
				desc = party_moderate_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					has_law = law_type:law_monarchy
					OR = {
						game_date <= 1837.1.1
						has_modifier = brz_regency
					}
				}
			}
			triggered_desc = {
				desc = party_conservative
				trigger = {
					country_has_primary_culture = cu:brazilian
					has_law = law_type:law_monarchy
					NOT = {
						has_modifier = brz_regency
					}
				}
			}
			triggered_desc = {
				desc = party_bahia_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					OR = {
						has_law = law_type:law_presidential_republic
						has_law = law_type:law_parliamentary_republic
					}
					any_scope_state = {
						state_region = s:STATE_BAHIA
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_SAO_PAULO
							}
						}
						s:STATE_BAHIA.region_state:BRZ.gdp > s:STATE_SAO_PAULO.region_state:BRZ.gdp
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_MINAS_GERAIS
							}
						}
						s:STATE_BAHIA.region_state:BRZ.gdp > s:STATE_MINAS_GERAIS.region_state:BRZ.gdp
					}
				}
			}
			triggered_desc = {
				desc = party_sao_paulo_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					OR = {
						has_law = law_type:law_presidential_republic
						has_law = law_type:law_parliamentary_republic
					}
					any_scope_state = {
						state_region = s:STATE_SAO_PAULO
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_MINAS_GERAIS
							}
						}
						s:STATE_SAO_PAULO.region_state:BRZ.gdp > s:STATE_MINAS_GERAIS.region_state:BRZ.gdp
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_BAHIA
							}
						}
						s:STATE_SAO_PAULO.region_state:BRZ.gdp > s:STATE_BAHIA.region_state:BRZ.gdp
					}
				}
			}
			triggered_desc = {
				desc = party_minas_gerais_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					OR = {
						has_law = law_type:law_presidential_republic
						has_law = law_type:law_parliamentary_republic
					}
					any_scope_state = {
						state_region = s:STATE_MINAS_GERAIS
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_SAO_PAULO
							}
						}
						s:STATE_MINAS_GERAIS.region_state:BRZ.gdp > s:STATE_SAO_PAULO.region_state:BRZ.gdp
					}
					trigger_if = {
						limit = {
							any_scope_state = {
								state_region = s:STATE_BAHIA
							}
						}
						s:STATE_MINAS_GERAIS.region_state:BRZ.gdp > s:STATE_BAHIA.region_state:BRZ.gdp
					}
				}
			}
			triggered_desc = {
				desc = party_federal_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					OR = {
						has_law = law_type:law_presidential_republic
						has_law = law_type:law_parliamentary_republic
					}
					NOR = {
						any_scope_state = {
							state_region = s:STATE_SAO_PAULO
						}
						any_scope_state = {
							state_region = s:STATE_MINAS_GERAIS
						}
						any_scope_state = {
							state_region = s:STATE_BAHIA
						}
					}
				}
			}
			triggered_desc = {
				desc = party_octobrist_party
				trigger = {
					exists = c:RUS
					THIS = c:RUS
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_constitutional_association
				trigger = {
					exists = c:CHI
					THIS = c:CHI
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_imperial_rule_party
				trigger = {
					exists = c:JAP
					THIS = c:JAP
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_moderate_socialists_party
				trigger = {
					exists = c:PER
					THIS = c:PER
				}
			}
			triggered_desc = {
				desc = party_napist_party
				trigger = {
					exists = c:GRE
					THIS = c:GRE
					has_law = law_type:law_monarchy
					ruler = {
						culture = {
							has_discrimination_trait = german_speaking
						}
					}
				}
			}
			triggered_desc = {
				desc = party_ethnikon_komma
				trigger = {
					exists = c:GRE
					THIS = c:GRE
				}
			}
			triggered_desc = {
				desc = party_blanco_party
				trigger = {
					exists = c:URU
					THIS = c:URU
				}
			}
			triggered_desc = {
				desc = party_colorado_party
				trigger = {
					exists = c:PRG
					THIS = c:PRG
				}
			}
			triggered_desc = {
				desc = party_the_right
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_hoyre
				trigger = {
					country_has_primary_culture = cu:norwegian
				}
			}
			triggered_desc = {
				desc = party_democratic_party
				trigger = {
					country_has_primary_culture = cu:dixie
				}
			}
			triggered_desc = {
				desc = party_hojre
				trigger = {
					country_has_primary_culture = cu:danish
				}
			}
			triggered_desc = {
				desc = party_liberal_conservative_party
				trigger = {
					country_has_primary_culture = cu:anglo_canadian
				}
			}
			triggered_desc = {
				desc = party_conservative
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/conservatism.dds"
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			ig:ig_landowners = {
				is_marginal = no
			}
		}
		# unions can never be conservative
		NOT = { is_interest_group_type = ig_trade_unions }
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = conservative_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # socialists and radicals won't join conservative parties
			limit = {
				leader = { 
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_atheist
					}
				}
			}
			add = {
				value = -20
				desc = "from_leftist"
			}
		}
		if = { # conservatives love conservativism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_traditionalist
						has_ideology = ideology:ideology_royalist
						has_ideology = ideology:ideology_orleanist
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_theocrat
						has_ideology = ideology:ideology_slaver
						has_ideology = ideology:ideology_corporatist_leader
					}
				}
			}
			add = {
				value = 5
				desc = "from_conservative_leader"
			}
		}
		if = { # conservatives love conservativism
			limit = {
				OR = {
					has_ideology = ideology:ideology_paternalistic
					has_ideology = ideology:ideology_stratocratic
					has_ideology = ideology:ideology_patriarchal
					has_ideology = ideology:ideology_moralist
					has_ideology = ideology:ideology_corporatist
				}
			}
			add = {
				value = 5
				desc = "from_conservative_ig"
			}
		}
		if = { # armed forces will join if a more powerful member has jingoist leader
			limit = {
				is_interest_group_type = ig_armed_forces
				exists = owner.py:conservative_party
				owner = {
					any_interest_group = {
						is_member_of_party = owner.py:conservative_party
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_jingoist_leader
						}
					}
				}
			}
			add = {
				value = 5
				desc = "from_jingoist_party_leader"
			}
		}
		if = { # landowners will join if they are even moderately powerful
			limit = {
				ig_clout >= 0.15
				is_interest_group_type = ig_landowners
			}
			add = {
				value = 5
				desc = "from_powerful_conservative_ig"
			}
		}
		if = { # various progressives dislike conservativism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_feminist
						has_ideology = ideology:ideology_pacifist
						has_ideology = ideology:ideology_reformer
						has_ideology = ideology:ideology_humanitarian
						has_ideology = ideology:ideology_humanitarian_royalist
					}
				}
			}
			add = {
				value = -5
				desc = "from_progressive_con"
			}
		}
		# Abolitionists won't join conservative party
		if = {
			limit = {
				leader = {
					has_ideology = ideology:ideology_abolitionist
				}
				owner = {
					NOT = { has_law = law_type:law_slavery_banned }
				}
			}
			add = {
				value = -20
				desc = "from_anti_slavery"
			}
		}
		if = { # patriots are inclined towards conservativism
			limit = {
				has_ideology = ideology:ideology_patriotic
			}
			add = {
				value = 5
				desc = "from_patriot"
			}
		}
		if = { # capitalists more likely to join conservatives when the poor can vote
			limit = {
				OR = {
					has_ideology = ideology:ideology_plutocratic
					has_ideology = ideology:ideology_paternalistic
				}
				owner = {
					has_law = law_type:law_universal_suffrage
				}
			}
			add = {
				value = 5
				desc = "from_capitalists_suffrage"
			}
		}
		if = { # capitalists and landowners more likely to join with progressive taxation
			limit = {
				OR = {
					has_ideology = ideology:ideology_plutocratic
					has_ideology = ideology:ideology_stratocratic
				}
				owner = {
					has_law = law_type:law_graduated_taxation
				}
			}
			add = {
				value = 2
				desc = "from_capitalists_tax"
			}
		}
		if = { # capitalists more likely to join conservatives with public health
			limit = {
				has_ideology = ideology:ideology_individualist
				owner = {
					has_law = law_type:law_public_health_insurance
				}
			}
			add = {
				value = 2
				desc = "from_capitalists_health"
			}
		}
		if = { # devout, industrialists more likely to join conservatives with public schools
			limit = {
				OR = {
					has_ideology = ideology:ideology_individualist
					has_ideology = ideology:ideology_pious
				}
				owner = {
					has_law = law_type:law_public_schools
				}
			}
			add = {
				value = 2
				desc = "from_capitalists_schools"
			}
		}
		if = { # devout more likely to join conservatives with total separation
			limit = {
				has_ideology = ideology:ideology_moralist
				owner = {
					has_law = law_type:law_total_separation
				}
			}
			add = {
				value = 5
				desc = "from_devout_separation"
			}
		}
		if = { # devout more likely to join conservatives with freedom of conscience
			limit = {
				has_ideology = ideology:ideology_moralist
				owner = {
					has_law = law_type:law_freedom_of_conscience
				}
			}
			add = {
				value = 3
				desc = "from_devout_conscience"
			}
		}
		if = { # patriarchs more likely to join conservatives with women's suffrage
			limit = {
				has_ideology = ideology:ideology_patriarchal
				owner = {
					has_law = law_type:law_womens_suffrage
				}
			}
			add = {
				value = 3
				desc = "from_patriarchy"
			}
		}
		if = { # patriarchs more likely to join conservatives with working women
			limit = {
				has_ideology = ideology:ideology_patriarchal
				owner = {
					has_law = law_type:law_women_in_the_workplace
				}
			}
			add = {
				value = 2
				desc = "from_patriarchy_lesser"
			}
		}
		if = { # reactionaries like regressing from multiculturalism
			limit = {
				has_ideology = ideology:ideology_reactionary
				owner = {
					has_law = law_type:law_multicultural
				}
			}
			add = {
				value = 2
				desc = "from_multiculturalism"
			}
		}
		# alliance for stricter internal security
		if = {
			limit = {
				OR = {
					has_ideology = ideology:ideology_patriotic
					leader = { has_ideology = ideology:ideology_authoritarian }
				}
				owner = {
					NOR = {
						has_law = law_type:law_no_home_affairs
						has_law = law_type:law_guaranteed_liberties
					}
				}
			}
			add = {
				value = 3
				desc = "from_liberty"
			}
		}
		if = { # conservatives like censorship
			limit = {
				owner = {
					has_technology_researched = law_enforcement
					OR = { 
						has_law = law_type:law_right_of_assembly
						has_law = law_type:law_protected_speech
					}
				}
				OR = {
					has_ideology = ideology:ideology_patriarchal
					has_ideology = ideology:ideology_patriotic
					leader = { has_ideology = ideology:ideology_authoritarian }
				}
			}
			add = {
				value = 3
				desc = "from_no_censorship"
			}
		}
		if = { # conservatives hate republics
			limit = {
				OR = {
					has_ideology = ideology:ideology_moralist
					has_ideology = ideology:ideology_paternalistic
				}
				owner = {
					NOR = {
						has_law = law_type:law_monarchy
						has_law = law_type:law_theocracy
					}
				}
			}
			add = {
				value = 3
				desc = "from_republic"
			}
		}
		if = { # landowners and industrialists hate labor rights
			limit = {
				OR = {
					has_ideology = ideology:ideology_stratocratic
					has_ideology = ideology:ideology_laissez_faire
				}
				OR = {
					owner = {
						has_law = law_type:law_regulatory_bodies
						has_law = law_type:law_worker_protections
					}
				}
			}
			add = {
				value = 5
				desc = "from_labor_rights"
			}
		}
		if = { # conservatives hate welfare
			limit = {
				OR = {
					has_ideology = ideology:ideology_stratocratic
					has_ideology = ideology:ideology_individualist
				}
				OR = {
					owner = {
						has_law = law_type:law_wage_subsidies
						has_law = law_type:law_old_age_pension
					}
				}
			}
			add = {
				value = 5
				desc = "from_welfare"
			}
		}
		if = { # conservatives like police
			limit = {
				OR = {
					has_paternalist_ideology = yes
					has_ideology = ideology:ideology_patriotic
				}
				owner = {
					has_technology_researched = law_enforcement
					has_law = law_type:law_no_police
				}
			}
			add = {
				value = 3
				desc = "from_no_police"
			}
		}
	
		# Special weights for ACW
		if = {
			limit = {
				owner = { 
					OR = {
						has_journal_entry = je_acw_countdown 
						AND = { # JE not active yet at initialization
							exists = c:USA
							this = c:USA
							year < 1837						
						}
					}				
				}
			}
			if = {
				limit = { leader = { has_ideology = ideology:ideology_slaver } }
				add = {
					value = 100
					desc = "from_slaver_leader"
				}					
			}	
			else_if = {
				limit = { leader = { has_ideology = ideology:ideology_abolitionist } }
				add = {
					value = -100
					desc = "from_abolitionist_leader"
				}					
			}				
		}

		if = {
			limit = {
				is_interest_group_type = ig_landowners
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = conservative_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = conservative_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = conservative_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				leader = {
					has_ideology = ideology:ideology_jacksonian_democrat
				}
			}
			add = {
				value = 1000
				desc = "from_jacksonian_democrat"
			}
		}
		if = { # Brazil
			limit = {
				is_interest_group_type = ig_landowners
				owner = {
					OR = {
						has_journal_entry = je_coffee_with_milk
						has_journal_entry = je_populist_unrest
					}
				}
			}
			add = {
				value = 10
				desc = "from_milk_coffee"
			}
		}
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
				OR = {
					is_interest_group_type = ig_landowners
					is_interest_group_type = ig_devout
				}
			}
			add = {
				value = 10
				desc = "south_america_two_party_system"
			}
		}
		if = {
			limit = {
				leader = {
					has_variable = caudillo_conservative
				}
			}
			add = {
				value = 20
				desc = "caudillo_support"
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					OR = {
						NOT = {
							has_law = law_type:law_slavery_banned
						}
						has_modifier = missouri_compromise
					}
				}
				leader = {
					culture = cu:yankee
				}
			}
			add = {
				value = -5
				desc = "from_northern_interests"
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					OR = {
						NOT = {
							has_law = law_type:law_slavery_banned
						}
						has_modifier = missouri_compromise
					}
				}
				leader = {
					culture = cu:dixie
				}
			}
			add = {
				value = 3
				desc = "from_southern_interests"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = conservative_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				leader = {
					has_ideology = ideology:ideology_jacksonian_democrat
				}
			}
			add = {
				value = 1000
				desc = "from_jacksonian_democrat"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
					is_party_type = conservative_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = conservative_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
		if = { # Also Brazil
			limit = {
				is_interest_group_type = ig_petty_bourgeoisie
				owner = {
					has_journal_entry = je_populist_unrest
				}
			}
			add = {
				value = -1000
				desc = "from_populist_discontent"
			}
		}
	}
}

﻿fascist_party = {
	color = { 50 60 198 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_fatherland_front
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_british_union_of_fascists
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_mouvement_franciste
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_national_front
				trigger = {
					exists = c:SWI
					THIS = c:SWI
				}
			}
			triggered_desc = {
				desc = party_nasjonal_samling
				trigger = {
					exists = c:NOR
					THIS = c:NOR
				}
			}
			triggered_desc = {
				desc = party_dnsap
				trigger = {
					exists = c:DEN
					THIS = c:DEN
				}
			}
			triggered_desc = {
				desc = party_lapua_movement
				trigger = {
					exists = c:FIN
					THIS = c:FIN
				}
			}
			triggered_desc = {
				desc = party_national_league_of_sweden
				trigger = {
					exists = c:SWE
					THIS = c:SWE
				}
			}
			triggered_desc = {
				desc = party_national_union
				trigger = {
					exists = c:NET
					THIS = c:NET
				}
			}
			triggered_desc = {
				desc = party_rexist_party
				trigger = {
					exists = c:BEL
					THIS = c:BEL
				}
			}
			triggered_desc = {
				desc = party_volksdeutsche_bewegung
				trigger = {
					exists = c:LUX
					THIS = c:LUX
				}
			}
			triggered_desc = {
				desc = party_national_socialist_movement
				trigger = {
					exists = c:CHL
					THIS = c:CHL
				}
			}
			triggered_desc = {
				desc = party_ratnik_party
				trigger = {
					exists = c:BUL
					THIS = c:BUL
				}
			}
			triggered_desc = {
				desc = party_ustasha
				trigger = {
					exists = c:CRO
					THIS = c:CRO
				}
			}
			triggered_desc = {
				desc = party_zbor
				trigger = {
					exists = c:SER
					THIS = c:SER
				}
			}
			triggered_desc = {
				desc = party_all_russian_fascist_party
				trigger = {
					exists = c:RUS
					THIS = c:RUS
				}
			}
			triggered_desc = {
				desc = party_argentine_patriotic_league
				trigger = {
					exists = c:ARG
					THIS = c:ARG
				}
			}
			triggered_desc = {
				desc = party_silver_legion
				trigger = {
					exists = c:USA
					THIS = c:USA
				}
			}
			triggered_desc = {
				desc = party_freedom_party
				trigger = {
					exists = c:CSA
					THIS = c:CSA
				}
			}
			triggered_desc = {
				desc = party_national_union_of_greece
				trigger = {
					exists = c:GRE
					THIS = c:GRE
				}
			}
			triggered_desc = {
				desc = party_nazis
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = integralist_party
				trigger = {
					country_has_primary_culture = cu:portuguese
				}
			}
			triggered_desc = {
				desc = integralist_action
				trigger = {
					country_has_primary_culture = cu:brazilian
				}
			}
			triggered_desc = {
				desc = party_national_social_christian_party
				trigger = {
					country_has_primary_culture = cu:anglo_canadian
				}
			}
			triggered_desc = {
				desc = party_iran_e_no_party
				trigger = {
					country_has_primary_culture = cu:persian
				}
			}
			triggered_desc = {
				desc = integralist_action_party
				trigger = {
					country_has_primary_culture = cu:brazilian
				}
			}
			triggered_desc = {
				desc = falangist_party
				trigger = {
					country_has_primary_culture = cu:spanish
				}
			}
			triggered_desc = {
				desc = party_iron_guard
				trigger = {
					country_has_primary_culture = cu:romanian
				}
			}
			triggered_desc = {
				desc = party_arrow_cross_party
				trigger = {
					country_has_primary_culture = cu:hungarian
				}
			}
			triggered_desc = {
				desc = party_national_citizens_alliance
				trigger = {
					country_has_primary_culture = cu:japanese
				}
			}
			triggered_desc = {
				desc = party_national_fascist_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_blue_shirts_society
				trigger = {
					OR = {
						country_has_primary_culture = cu:han
						country_has_primary_culture = cu:hakka
						country_has_primary_culture = cu:miao
						country_has_primary_culture = cu:min
						country_has_primary_culture = cu:zhuang
						country_has_primary_culture = cu:yi
						country_has_primary_culture = cu:yue
					}
				}
			}
			triggered_desc = {
				desc = party_fascist
				trigger = {
					always = yes
				}
			}
		}
	}

	icon = {
		default = "/gfx/interface/icons/political_parties/fascists.dds"
	}
	unlocking_technologies = {
		political_agitation
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = fascist_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # fascists and general racists love fascism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_fascist
						has_ideology = ideology:ideology_ethno_nationalist
						has_ideology = ideology:ideology_integralist
					}
				}
			}
			add = {
				value = 10
				desc = "from_fascism"
			}
		}
		if = { # strong fascists love fascism even more
			limit = {
				is_powerful = yes
				leader = {
					OR = {
						has_ideology = ideology:ideology_fascist
						has_ideology = ideology:ideology_integralist
					}
				}
			}
			add = {
				value = 10
				desc = "from_fascism_powerful"
			}
		}
		if = { # fascism is a reactionary ideology
			limit = {
				has_ideology = ideology:ideology_reactionary
			}
			add = {
				value = 5
				desc = "from_reactionaries"
			}
		}
		if = { # conservative IG's will fall behind a stronger fascist party
			limit = {
				is_powerful = no
				OR = {
					is_interest_group_type = ig_landowners
					is_interest_group_type = ig_devout
					is_interest_group_type = ig_petty_bourgeoisie
					is_interest_group_type = ig_industrialists
					is_interest_group_type = ig_armed_forces
				}
				owner = {
					any_interest_group = {
						is_powerful = yes
						leader = {
							OR = {
								has_ideology = ideology:ideology_fascist
								has_ideology = ideology:ideology_integralist
							}
						}
					}
				}
			}
			add = {
				value = 5
				desc = "from_weak_conservatives_fascism"
			}
		}
		if = { # socialists and radicals won't join conservative parties
			limit = {
				leader = { 
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_atheist
					}
				}
			}
			add = {
				value = -20
				desc = "from_leftist"
			}
		}
		if = { # various progressives dislike fascism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_atheist
						has_ideology = ideology:ideology_feminist
						has_ideology = ideology:ideology_reformer
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_pacifist
						has_ideology = ideology:ideology_humanitarian
						has_ideology = ideology:ideology_humanitarian_royalist
					}	
				}
			}
			add = {
				value = -10
				desc = "from_progressive_fascism"
			}
		}
		if = { # trade unions usually dislike fascism
			limit = {
				is_interest_group_type = ig_trade_unions
			}
			add = {
				value = -2
				desc = "from_trade_unions"
			}
		}
		if = { # free trade advocates don't love protectionism
			limit = {
				leader = {
					has_ideology = ideology:ideology_market_liberal
				}
			}
			add = {
				value = -2
				desc = "from_market_liberal"
			}
		}
		if = { # moderates are scared of radical politics
			limit = {
				leader = {
					has_ideology = ideology:ideology_moderate
				}
			}
			add = {
				value = -3
				desc = "from_moderate"
			}
		}
		if = { # corporatists fall in line if they don't have christian democrats
			limit = {
				owner = {
					any_interest_group = {
						is_powerful = yes
						leader = {
							OR = {
								has_ideology = ideology:ideology_fascist
								has_ideology = ideology:ideology_integralist
							}
						}
					}
				}
				OR = {
					has_ideology = ideology:ideology_corporatist
					leader = {
						has_ideology = ideology:ideology_corporatist_leader
					}
				}
			}
			add = {
				value = 5
				desc = "from_corporatism"
			}
		}
		if = { # patriots are inclined towards fascism
			limit = {
				has_ideology = ideology:ideology_patriotic
			}
			add = {
				value = 4
				desc = "from_patriot"
			}
		}
		if = { # rural folk will ally with anti-migration faction
			limit = {
				has_ideology = ideology:ideology_isolationist
				owner = {
					has_law = law_type:law_no_migration_controls
				}
			}
			add = {
				value = 5
				desc = "from_isolationist"
			}
		}
		if = { # conservatives like police
			limit = {
				OR = {
					has_paternalist_ideology = yes
					has_ideology = ideology:ideology_patriotic
				}
				owner = {
					has_technology_researched = law_enforcement
					has_law = law_type:law_no_police
				}
			}
			add = {
				value = 3
				desc = "from_no_police"
			}
		}
		if = { # opposition to peasant levies
			limit = {
				OR = {
					has_ideology = ideology:ideology_jingoist
					has_ideology = ideology:ideology_particularist
					has_ideology = ideology:ideology_sikh_moralist
					leader = {
						OR = {
							has_ideology = ideology:ideology_fascist
							has_ideology = ideology:ideology_jingoist_leader
						}
					}
				}
				owner = {
					has_law = law_type:law_peasant_levies
				}
			}
			add = {
				value = 3
				desc = "from_peasant_levies"
			}
		}
		if = { # loyalist-meritocratic alliance for tax reform
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					AND = {
						has_ideology = ideology:ideology_loyalist
						owner = {
							NOT = { has_law = law_type:law_graduated_taxation }
						}
					}
				}
				owner = {
					NOR = {
						has_law = law_type:law_proportional_taxation
						has_law = law_type:law_per_capita_based_taxation
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_proportional_or_per_capita_tax"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = { # authoritarians inclined towards fascism
			limit = {
				leader = {
					has_ideology = ideology:ideology_authoritarian
				}
			}
			add = {
				value = 3
				desc = "from_authoritarian"
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = fascist_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = fascist_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = fascist_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = fascist_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				leader = {
					has_variable = caudillo_fascist
				}
			}
			add = {
				value = 20
				desc = "caudillo_support"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				 owner.var:only_valid_party = {
					 is_party_type = fascist_party
				 }
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = fascist_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿# Party for IG's that want free trade when it is not passed yet
# Should usually only appear when the Landowners want Free Trade

free_trade_party = {
	color = { 150 20 20 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_democratic_alliance
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_peelites
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_historic_party
				trigger = {
					exists = c:POR
					THIS = c:POR
				}
			}
			triggered_desc = {
				desc = party_old_lantmanna_party
				trigger = {
					exists = c:SWE
					THIS = c:SWE
				}
			}
			triggered_desc = {
				desc = party_communications_clique
				trigger = {
					exists = c:CHI
					THIS = c:CHI
				}
			}
			triggered_desc = {
				desc = party_national_party
				trigger = {
					exists = c:CHL
					THIS = c:CHL
				}
			}
			triggered_desc = {
				desc = party_party_of_peaceful_renovation
				trigger = {
					exists = c:RUS
					THIS = c:RUS
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_constitutional_union_party
				trigger = {
					exists = c:USA
					THIS = c:USA
					NOT = {
						has_global_variable = american_civil_war
					}
				}
			}
			triggered_desc = {
				desc = party_federalist_party
				trigger = {
					exists = c:NEN
					THIS = c:NEN
				}
			}
			triggered_desc = {
				desc = party_free_minded_venstre
				trigger = {
					country_has_primary_culture = cu:norwegian
				}
			}
			triggered_desc = {
				desc = party_free_conservative_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = party_free_trade
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/free_trade.dds"
	}
	unlocking_technologies = {
		stock_exchange
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			any_interest_group = {
				is_marginal = no
				OR = {
					is_interest_group_type = ig_industrialists
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = free_trade_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
			}
			add = {
				value = -10
				desc = "south_america_two_party_system"
			}
		}
		
		if = {
			limit = {
				owner = {
					country_is_in_north_america = yes
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					has_law = law_type:law_presidential_republic
				}
			}
			add = {
				value = -10
				desc = "usa_two_party_system"
			}
		}
		
		if = { # capitalists like capitalism
			limit = {
				OR = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
					has_ideology = ideology:ideology_laissez_faire
				}
			}
			add = {
				value = 5
				desc = "from_capitalism"
			}
		}
		# powerful capitalists likely to form their own party
		if = {
			limit = {
				is_powerful = yes
				OR = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
					has_ideology = ideology:ideology_laissez_faire
				}
			}
			add = {
				value = 10
				desc = "from_powerful_capitalists"
			}
		}
		# weaker market liberals fall behind powerful industrialists
		if = {
			limit = {
				is_powerful = no
				owner = {
					ig:ig_industrialists = {
						is_powerful = yes
					}
				}
				leader = {
					has_ideology = ideology:ideology_market_liberal
				}
			}
			add = {
				value = 5
				desc = "from_powerful_capitalists_other"
			}
		}
		if = { # landowners and industrialists hate labor rights
			limit = {
				OR = {
					has_ideology = ideology:ideology_stratocratic
					has_ideology = ideology:ideology_laissez_faire
				}
				OR = {
					owner = {
						has_law = law_type:law_regulatory_bodies
						has_law = law_type:law_worker_protections
					}
				}
			}
			add = {
				value = 5
				desc = "from_labor_rights"
			}
		}
		if = { # conservatives hate welfare
			limit = {
				OR = {
					has_ideology = ideology:ideology_stratocratic
					has_ideology = ideology:ideology_individualist
				}
				OR = {
					owner = {
						has_law = law_type:law_wage_subsidies
						has_law = law_type:law_old_age_pension
					}
				}
			}
			add = {
				value = 5
				desc = "from_welfare"
			}
		}
		if = { # capitalists hate children
			limit = {
				owner = {
					NOT = { has_law = law_type:law_child_labor_allowed }
				}
				OR = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
					has_ideology = ideology:ideology_laissez_faire
				}
			}
			add = {
				value = 3
				desc = "from_hates_children"
			}
		}
		if = { # capitalists want free trade
			limit = {
				owner = {
					NOT = { has_law = law_type:law_free_trade }
				}
				OR = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
					has_ideology = ideology:ideology_laissez_faire
				}
			}
			add = {
				value = 3
				desc = "from_no_free_trade"
			}
		}
		if = { # capitalists want to have power
			limit = {
				owner = {
					NOR = {
						has_law = law_type:law_oligarchy
						has_law = law_type:law_wealth_voting
					}
				}
				has_ideology = ideology:ideology_plutocratic
			}
			add = {
				value = 3
				desc = "from_no_oligarchy_wealth_voting"
			}
		}
		if = { # liberal-capitalist anti-autocracy alliance
			limit = {
				owner = {
					has_law = law_type:law_autocracy
				}
				has_ideology = ideology:ideology_republican
			}
			add = {
				value = 3
				desc = "from_autocracy"
			}
		}
		if = { # capitalist-reactionary anti-democracy alliance
			limit = {
				owner = {
					has_law = law_type:law_universal_suffrage
				}
				OR = {
					has_ideology = ideology:ideology_paternalistic
					leader = {
						has_ideology = ideology:ideology_fascist
					}
					leader = {
						has_ideology = ideology:ideology_integralist
					}
				}
			}
			add = {
				value = 3
				desc = "from_universal_suffrage"
			}
		}
		if = { # capitalist-meritocratic taxation alliance
			limit = {
				owner = {
					has_technology_researched = currency_standards
					NOT = { has_law = law_type:law_per_capita_based_taxation }
					NOT = { has_law = law_type:law_consumption_based_taxation }
				}
				OR = {
					has_ideology = ideology:ideology_plutocratic
					has_ideology = ideology:ideology_meritocratic
				}
			}
			add = {
				value = 3
				desc = "from_no_per_capita_tax"
			}
		}
		if = { # capitalist-conservative taxation alliance
			limit = {
				owner = {
					has_law = law_type:law_graduated_taxation
				}
				OR = {
					has_ideology = ideology:ideology_plutocratic
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_stratocratic
				}
			}
			add = {
				value = 3
				desc = "from_graduated_taxation"
			}
		}
		if = { # alliance for consumption taxes
			limit = {
				owner = {
					NOT = { has_law = law_type:law_consumption_based_taxation }
					NOT = { has_law = law_type:law_per_capita_based_taxation }
				}
				OR = {
					has_ideology = ideology:ideology_agrarian
					has_ideology = ideology:ideology_stratocratic
				}
			}
			add = {
				value = 3
				desc = "from_no_consumption_tax"
			}
		}
		if = { # opposition to command economy
			limit = {
				owner = {
					has_law = law_type:law_command_economy
					has_technology_researched = central_planning
				}
				OR = {
					has_ideology = ideology:ideology_paternalistic
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 3
				desc = "from_command_economy"
			}
		}
		if = { # pro-private schools
			limit = {
				owner = {
					has_technology_researched = academia
					OR = {
						has_law = law_type:law_no_schools
						has_law = law_type:law_religious_schools
					}
				}
				OR = {
					has_ideology = ideology:ideology_individualist
					has_ideology = ideology:ideology_anti_clerical
				}
			}
			add = {
				value = 3
				desc = "from_lack_of_private_schools"
			}
		}
		if = {
			limit = {
				is_interest_group_type = ig_industrialists
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = { # protectionism bad
			limit = {
				leader = {
					has_ideology = ideology:ideology_protectionist
				}
			}
			add = {
				value = -10
				desc = from_protectionist_leader
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = free_trade_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = free_trade_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = free_trade_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				owner = {
					country_has_primary_culture = cu:brazilian
					NOT = {
						OR = {
							has_technology_researched = socialism
							has_technology_researched = corporatism
							has_technology_researched = anarchism
						}
					}
				}
			}
			add = {
				value = -10
				desc = "from_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = free_trade_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
					is_party_type = free_trade_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = free_trade_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿# Bastion of the Intelligenstia, also appeals to Industrialists
# Can sometimes sway PB and Rural Folk when they have common interests

liberal_party = {
	color = { 255 214 13 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_civilista_party
				trigger = {
					exists = c:PEU
					THIS = c:PEU
				}
			}
			triggered_desc = {
				desc = party_national_civic_union
				trigger = {
					exists = c:ARG
					THIS = c:ARG
				}
			}
			triggered_desc = {
				desc = party_whigs
				trigger = {
					exists = c:GBR
					THIS = c:GBR
					NOT = { has_law = law_type:law_free_trade }
				}
			}
			triggered_desc = {
				desc = party_republicans
				trigger = {
					exists = c:USA
					THIS = c:USA
					has_global_variable = american_civil_war
				}
			}
			triggered_desc = {
				desc = party_liberal_democrats
				trigger = {
					exists = c:SWI
					THIS = c:SWI
				}
			}
			triggered_desc = {
				desc = party_republican_party
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_exalted_liberal
				trigger = {
					country_has_primary_culture = cu:brazilian
					has_law = law_type:law_monarchy
					ruler = {
						has_trait = trait_child
					}
				}
			}
			triggered_desc = {
				desc = party_liberal
				trigger = {
					country_has_primary_culture = cu:brazilian
					has_law = law_type:law_monarchy
					NOT = {
						ruler = {
							has_trait = trait_child
						}
					}
				}
			}
			triggered_desc = {
				desc = party_liberal_republican_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					game_date < 1925.1.1
					NOT = {
						has_law = law_type:law_monarchy
					}
				}
			}
			triggered_desc = {
				desc = party_libertador_party
				trigger = {
					country_has_primary_culture = cu:brazilian
					game_date >= 1925.1.1
				}
			}
			triggered_desc = {
				desc = party_kadets_party
				trigger = {
					exists = c:RUS
					THIS = c:RUS
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					exists = c:SWE
					THIS = c:SWE
				}
			}
			triggered_desc = {
				desc = party_liberal_union
				trigger = {
					exists = c:NET
					THIS = c:NET
				}
			}
			triggered_desc = {
				desc = party_liberal_league
				trigger = {
					exists = c:LUX
					THIS = c:LUX
				}
			}
			triggered_desc = {
				desc = party_young_finnish_party
				trigger = {
					exists = c:FIN
					THIS = c:FIN
				}
			}
			triggered_desc = {
				desc = party_constitutional_party
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_peoples_party
				trigger = {
					exists = c:CRO
					THIS = c:CRO
				}
			}
			triggered_desc = {
				desc = party_society_for_progress
				trigger = {
					exists = c:PER
					THIS = c:PER
				}
			}
			triggered_desc = {
				desc = party_blue_party
				trigger = {
					exists = c:PRG
					THIS = c:PRG
				}
			}
			triggered_desc = {
				desc = party_great_liberal_party
				trigger = {
					exists = c:VNZ
					THIS = c:VNZ
				}
			}
			triggered_desc = {
				desc = party_colorado_party
				trigger = {
					exists = c:URU
					THIS = c:URU
				}
			}
			triggered_desc = {
				desc = party_empire_reform_association
				trigger = {
					exists = c:CHI
					THIS = c:CHI
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_freedom_and_accord_party
				trigger = {
					exists = c:TUR
					THIS = c:TUR
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_progressive_republican_party
				trigger = {
					exists = c:TUR
					THIS = c:TUR
					NOT = { has_law = law_type:law_monarchy }
				}
			}
			triggered_desc = {
				desc = party_constitutional_reform_party
				trigger = {
					exists = c:JAP
					THIS = c:JAP
				}
			}
			triggered_desc = {
				desc = party_constitutional_party
				trigger = {
					exists = c:GRE
					THIS = c:GRE
					has_law = law_type:law_monarchy
					ruler = {
						culture = {
							has_discrimination_trait = german_speaking
						}
					}
				}
			}
			triggered_desc = {
				desc = party_neoteristikon_komma
				trigger = {
					exists = c:GRE
					THIS = c:GRE
				}
			}
			triggered_desc = {
				desc = party_the_left
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_national_liberal_party
				trigger = {
					country_has_primary_culture = cu:romanian
				}
			}
			triggered_desc = {
				desc = party_whig_party
				trigger = {
					OR = {
						AND = {
							country_has_primary_culture = cu:dixie
							NOT = {
								exists = c:USA
								THIS = c:USA
							}
						}
						AND = {
							exists = c:USA
							THIS = c:USA
							NOT = { has_global_variable = american_civil_war }
						}
					}
				}
			}
			triggered_desc = {
				desc = party_progress_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = party_progressive_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:spanish
						country_has_primary_culture = cu:portuguese
					}
				}
			}
			triggered_desc = {
				desc = party_venstre
				trigger = {
					OR = {
						country_has_primary_culture = cu:norwegian
						country_has_primary_culture = cu:spanish
					}
				}
			}
			triggered_desc = {
				desc = party_liberal
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/liberal.dds"
	}
	unlocking_technologies = {
		empiricism
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			ig:ig_intelligentsia = {
				is_marginal = no
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = liberal_party
	        }
	    }
		leader = { # far right and far left won't join liberal parties
			NOR = {
				has_ideology = ideology:ideology_fascist
				has_ideology = ideology:ideology_integralist
				has_ideology = ideology:ideology_ethno_nationalist
				has_ideology = ideology:ideology_communist
				has_ideology = ideology:ideology_vanguardist
				has_ideology = ideology:ideology_anarchist
			}
		}
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # liberals love liberalism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_republican_leader
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_reformer
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 5
				desc = "from_liberal_leader"
			}
		}
		if = { # liberals love liberalism
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_laissez_faire
				}
			}
			add = {
				value = 5
				desc = "from_liberalism"
			}
		}
		if = { # various progressives are inclined towards liberalism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_feminist
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_pacifist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_atheist
						has_ideology = ideology:ideology_humanitarian
						has_ideology = ideology:ideology_humanitarian_royalist
					}
				}
			}
			add = {
				value = 5
				desc = "from_progressivism"
			}
		}
		if = { # various conservatives dislike liberalism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_traditionalist
						has_ideology = ideology:ideology_royalist
						has_ideology = ideology:ideology_theocrat
						has_ideology = ideology:ideology_slaver
						has_ideology = ideology:ideology_authoritarian
						has_ideology = ideology:ideology_orleanist
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
			}
			add = {
				value = -5
				desc = "from_conservatism"
			}
		}
		if = { # against hereditary bureacrats
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_anti_clerical
				}
				owner = {
					has_law = law_type:law_hereditary_bureaucrats
				}
			}
			add = {
				value = 3
				desc = "from_hereditary_offices"
			}
		}
		if = { # armed forces will join if a more powerful member has jingoist leader
			limit = {
				is_interest_group_type = ig_armed_forces
				exists = owner.py:liberal_party
				owner = {
					any_interest_group = {
						is_member_of_party = owner.py:liberal_party
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_jingoist_leader
						}
					}
				}
			}
			add = {
				value = 5
				desc = "from_jingoist_party_leader"
			}
		}
		if = { # against illiteracy and religious education
			limit = {
				OR = {
					has_ideology = ideology:ideology_individualist
					has_ideology = ideology:ideology_proletarian
				}
				owner = {
					OR = {
						has_law = law_type:law_religious_schools
						has_law = law_type:law_no_schools
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_or_religious_schools"
			}
		}
		if = { # lack of women's rights
			limit = {
				OR = {
					leader = {
						has_ideology = ideology:ideology_feminist
					}
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
				}
				owner = {
					has_law = law_type:law_no_womens_rights
				}
			}
			add = {
				value = 3
				desc = from_no_womens_rights
			}
		}
		if = { # anti-racism
			limit = {
				OR = {
					leader = {
						OR = {
							has_ideology = ideology:ideology_reformer
							has_ideology = ideology:ideology_humanitarian
							has_ideology = ideology:ideology_humanitarian_royalist
						}
					}
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
				}
				owner = {
					OR = {
						has_law = law_type:law_ethnostate
						has_law = law_type:law_national_supremacy
						has_law = law_type:law_racial_segregation
					}
				}
			}
			add = {
				value = 3
				desc = from_racism
			}
		}
		if = { # anti-censorship
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					leader = {
						has_ideology = ideology:ideology_humanitarian
						has_ideology = ideology:ideology_humanitarian_royalist
					}
				}
				owner = {
					has_law = law_type:law_outlawed_dissent
				}
			}
			add = {
				value = 3
				desc = from_outlawed_dissent
			}
		}
		if = { # against arbitrary or militarized policing
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_particularist
				}
				owner = {
					OR = {	
						has_law = law_type:law_local_police
						has_law = law_type:law_militarized_police
					}
				}
			}
			add = {
				value = 3
				desc = from_bad_police
			}
		}
		if = { # anticlerical
			limit = {
				OR = {
					has_ideology = ideology:ideology_anti_clerical
					leader = {
						has_ideology = ideology:ideology_atheist
					}
				}
				owner = {
					has_law = law_type:law_state_religion
				}
			}
			add = {
				value = 3
				desc = "from_anticlerical"
			}
		}
		if = { # republican
			limit = {
				OR = {
					has_ideology = ideology:ideology_republican
					has_ideology = ideology:ideology_populist
					leader = {
						OR = {
							has_ideology = ideology:ideology_atheist
							has_ideology = ideology:ideology_republican_leader
							has_ideology = ideology:ideology_radical
						}
					}
				}
				owner = {
					OR = {
						has_law = law_type:law_monarchy
						has_law = law_type:law_theocracy
					}
				}
			}
			add = {
				value = 3
				desc = "from_republican"
			}
		}
		if = { # peasants opposition to debt slavery
			limit = {
				owner = {
					has_law = law_type:law_debt_slavery
				}
				OR = {
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 5
				desc = "from_debt_slavery"
			}
		}
		if = { # general anti-slavery
			limit = {
				owner = {
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
				OR = {
					has_ideology = ideology:ideology_anti_slavery
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 5
				desc = "from_slavery"
			}
		}
		if = { # anti-serfdom
			limit = {
				owner = {
					has_law = law_type:law_serfdom
				}
				OR = {
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					has_ideology = ideology:ideology_anti_slavery
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_communist
					}
				}
			}
			add = {
				value = 5
				desc = "from_serfdom"
			}
		}
		if = { # modernizer
			limit = {
				has_ideology = ideology:ideology_modernizer
			}
			add = {
				value = 10
				desc = "from_modernizer"
			}
		}
		# Special weights for ACW
		if = {
			limit = {
				owner = { 
					OR = {
						has_journal_entry = je_acw_countdown 
						AND = { # JE not active yet at initialization
							exists = c:USA
							this = c:USA
							year < 1837						
						}
					}				
				}
			}
			if = {
				limit = { leader = { has_ideology = ideology:ideology_slaver } }
				add = {
					value = -100
					desc = "from_slaver_leader"
				}					
			}	
			else_if = {
				limit = { leader = { has_ideology = ideology:ideology_abolitionist } }
				add = {
					value = 100
					desc = "from_abolitionist_leader"
				}					
			}				
		}	
		
		if = {
			limit = {
				is_interest_group_type = ig_intelligentsia
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = liberal_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = liberal_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = liberal_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				owner = {
	         		country_has_primary_culture = cu:brazilian
					ruler = {
						has_template = BRZ_emperor_pedro_02
						has_trait = trait_child
					}
	         	}
				leader = {
					has_template = BRZ_diogo_antonio_feijo
				}
			}
			add = {
				value = -50
				desc = "from_feijo_regency"
			}
		}	
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
				OR = {
					is_interest_group_type = ig_intelligentsia
					is_interest_group_type = ig_rural_folk
				}
			}
			add = {
				value = 10
				desc = "south_america_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
					country_is_in_north_america = yes
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					has_law = law_type:law_presidential_republic
				}
				leader = {
					NOR = {
						has_reactionary_ideology = yes
						has_conservative_ideology = yes
						has_socialist_ideology = yes
					}
				}
			}
			add = {
				value = 3
				desc = "usa_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					OR = {
						NOT = {
							has_law = law_type:law_slavery_banned
						}
						has_modifier = missouri_compromise
					}
				}
				leader = {
					culture = cu:yankee
				}
			}
			add = {
				value = 3
				desc = "from_northern_interests"
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					OR = {
						NOT = {
							has_law = law_type:law_slavery_banned
						}
						has_modifier = missouri_compromise
					}
				}
				leader = {
					culture = cu:dixie
				}
			}
			add = {
				value = -5
				desc = "from_southern_interests"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = liberal_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				leader = {
					has_variable = caudillo_liberal
				}
			}
			add = {
				value = 20
				desc = "caudillo_support"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
		        	is_party_type = liberal_party
		        }
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = liberal_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}
﻿# Fallback party for Armed Forces

military_party = {
	color = { 132 100 53 }
	name = {
		first_valid = {

			triggered_desc = {
				desc = party_true_peoples_party
				trigger = {
					exists = c:MON
					THIS = c:MON
				}
			}
			triggered_desc = {
				desc = party_national_party
				trigger = {
					exists = c:SER
					THIS = c:SER
				}
			}
			triggered_desc = {
				desc = party_union_of_rights
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_imperial_clan_party
				trigger = {
					exists = c:CHI
					THIS = c:CHI
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_russian_assembly
				trigger = {
					exists = c:RUS
					THIS = c:RUS
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_russian_all_military_union
				trigger = {
					exists = c:RUS
					THIS = c:RUS
					NOT = { has_law = law_type:law_monarchy }
				}
			}
			triggered_desc = {
				desc = party_imperial_way_party
				trigger = {
					exists = c:JAP
					THIS = c:JAP
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_patriotic_union
				trigger = {
					country_has_primary_culture = cu:spanish
				}
			}
			triggered_desc = {
				desc = party_regressivist_party
				trigger = {
					country_has_primary_culture = cu:brazilian
				}
			}
			triggered_desc = {
				desc = party_national_peoples_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = party_military
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/military.dds"
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			ig:ig_armed_forces = {
				is_marginal = no
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = military_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
			}
			add = {
				value = -10
				desc = "south_america_two_party_system"
			}
		}
		
		if = {
			limit = {
				owner = {
					country_is_in_north_america = yes
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					has_law = law_type:law_presidential_republic
				}
			}
			add = {
				value = -10
				desc = "usa_two_party_system"
			}
		}
		if = { # nobody will join if the armed forces don't join
			limit = {
				NOT = { is_interest_group_type = ig_armed_forces }
				OR = {
					NOT = { exists = owner.py:military_party }
					AND = {
						exists = owner.py:military_party
						owner = {
							ig:ig_armed_forces = {
								NOT = { is_member_of_party = owner.py:military_party }
							}
						}
					}
				}
			}
			add = {
				value = -20
				desc = "from_no_army_in_party" # this should probably never actually display in game because the party won't exist
			}
		}
		if = { # a party for powerful soldiers
			limit = {
				is_interest_group_type = ig_armed_forces
				is_powerful = yes
			}
			add = {
				value = 10
				desc = "from_strong_military"
			}
		}
		if = { # jingoists like the military party
			limit = {
				leader = { has_ideology = ideology:ideology_jingoist_leader }
			}
			add = {
				value = 10
				desc = "from_jingoist"
			}
		}
		if = { # conservatives like police
			limit = {
				OR = {
					has_paternalist_ideology = yes
					has_ideology = ideology:ideology_patriotic
				}
				owner = {
					has_technology_researched = law_enforcement
					has_law = law_type:law_no_police
				}
			}
			add = {
				value = 3
				desc = "from_no_police"
			}
		}
		if = { # opposition to peasant levies
			limit = {
				OR = {
					has_ideology = ideology:ideology_jingoist
					has_ideology = ideology:ideology_particularist
					has_ideology = ideology:ideology_sikh_moralist
					leader = {
						OR = {
							has_ideology = ideology:ideology_fascist
							has_ideology = ideology:ideology_anarchist
							has_ideology = ideology:ideology_pacifist
							has_ideology = ideology:ideology_jingoist_leader
						}
					}
				}
				owner = {
					has_law = law_type:law_peasant_levies
				}
			}
			add = {
				value = 3
				desc = "from_peasant_levies"
			}
		}
		if = { # loyalist-proletarian alliance for tax reform
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
					has_ideology = ideology:ideology_loyalist
				}
				owner = {
					NOR = {
						has_law = law_type:law_proportional_taxation
						has_law = law_type:law_per_capita_based_taxation
						has_law = law_type:law_graduated_taxation
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_graduated_taxation"
			}
		}
		if = { # loyalist-meritocratic alliance for tax reform
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					AND = {
						has_ideology = ideology:ideology_loyalist
						owner = {
							NOT = { has_law = law_type:law_graduated_taxation }
						}
					}
				}
				owner = {
					NOR = {
						has_law = law_type:law_proportional_taxation
						has_law = law_type:law_per_capita_based_taxation
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_proportional_or_per_capita_tax"
			}
		}
		if = {
			limit = {
				is_interest_group_type = ig_armed_forces
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		# alliance for stricter internal security
		if = {
			limit = {
				OR = {
					has_ideology = ideology:ideology_patriotic
					leader = { has_ideology = ideology:ideology_authoritarian }
				}
				owner = {
					NOR = {
						has_law = law_type:law_no_home_affairs
						has_law = law_type:law_guaranteed_liberties
					}
				}
			}
			add = {
				value = 3
				desc = "from_liberty"
			}
		}
		if = { # conservatives like censorship
			limit = {
				owner = {
					has_technology_researched = law_enforcement
					OR = { 
						has_law = law_type:law_right_of_assembly
						has_law = law_type:law_protected_speech
					}
				}
				OR = {
					has_ideology = ideology:ideology_patriarchal
					has_ideology = ideology:ideology_patriotic
					leader = { has_ideology = ideology:ideology_authoritarian }
				}
			}
			add = {
				value = 3
				desc = "from_no_censorship"
			}
		}
		if = { # authoritarians like militarism
			limit = {
				leader = {
					has_ideology = ideology:ideology_authoritarian
				}
			}
			add = {
				value = 5
				desc = from_authoritarian
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = military_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = military_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = military_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = military_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
		        	is_party_type = military_party
		        }
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = military_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿# Radicals and Republicans extremely attracted to this ideology
# Attracts weak leftists and liberals

radical_party = {
	color = { 255 102 0 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_radical_civic_union
				trigger = {
					exists = c:ARG
					THIS = c:ARG
				}
			}
			triggered_desc = {
				desc = party_democratic_progressive_party
				trigger = {
					exists = c:SPA
					THIS = c:SPA
				}
			}
			triggered_desc = {
				desc = party_free_democratic_party
				trigger = {
					exists = c:SWI
					THIS = c:SWI
				}
			}
			triggered_desc = {
				desc = party_national_progressive_party
				trigger = {
					exists = c:FIN
					THIS = c:FIN
				}
			}
			triggered_desc = {
				desc = party_free_thinking_democratic_league
				trigger = {
					exists = c:NET
					THIS = c:NET
				}
			}
			triggered_desc = {
				desc = party_radical_liberal_party
				trigger = {
					exists = c:LUX
					THIS = c:LUX
				}
			}
			triggered_desc = {
				desc = party_progressive_club
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_radical_peoples_party
				trigger = {
					exists = c:SER
					THIS = c:SER
				}
			}
			triggered_desc = {
				desc = party_revival_party
				trigger = {
					exists = c:PER
					THIS = c:PER
				}
			}
			triggered_desc = {
				desc = party_mexican_liberal_party
				trigger = {
					exists = c:MEX
					THIS = c:MEX
				}
			}
			triggered_desc = {
				desc = party_democratic_progressive_party
				trigger = {
					exists = c:GBR
					THIS = c:GBR
					has_law = law_type:law_universal_suffrage
				}
			}
			triggered_desc = {
				desc = party_committee_of_union_and_progress
				trigger = {
					exists = c:TUR
					THIS = c:TUR
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_freedom_and_accord_party
				trigger = {
					exists = c:TUR
					THIS = c:TUR
					NOT = { has_law = law_type:law_monarchy }
				}
			}
			triggered_desc = {
				desc = party_trudovik_group
				trigger = {
					exists = c:RUS
					THIS = c:RUS
				}
			}
			triggered_desc = {
				desc = party_revive_china_society
				trigger = {
					exists = c:CHI
					THIS = c:CHI
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_republican_union
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_the_far_left
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_tongmenghui
				trigger = {
					AND = {
						OR = {
							country_has_primary_culture = cu:han
							country_has_primary_culture = cu:hakka
							country_has_primary_culture = cu:miao
							country_has_primary_culture = cu:min
							country_has_primary_culture = cu:zhuang
							country_has_primary_culture = cu:yi
							country_has_primary_culture = cu:yue
						}
						NOT = { has_law = law_type:law_monarchy }
					}
				}
			}
			triggered_desc = {
				desc = party_progressive_party
				trigger = {
					OR = {
						AND = {
							exists = c:JAP
							THIS = c:JAP
						}
						AND = {
							exists = c:USA
							THIS = c:USA
						}
					}
				}
			}
			triggered_desc = {
				desc = party_radical_liberal_party
				trigger = {
					exists = c:ECU
					THIS = c:ECU
				}
			}
			triggered_desc = {
				desc = party_national_union
				trigger = {
					exists = c:PEU
					THIS = c:PEU
				}
			}
			triggered_desc = {
				desc = party_radical_liberal_party
				trigger = {
					country_has_primary_culture = cu:dixie
				}
			}
			triggered_desc = {
				desc = party_progressive_dissidence
				trigger = {
					country_has_primary_culture = cu:portuguese
				}
			}
			triggered_desc = {
				desc = party_farroupilha
				trigger = {
					country_has_primary_culture = cu:brazilian
					has_law = law_type:law_monarchy
				}
			}
			triggered_desc = {
				desc = party_radical_peoples_party
				trigger = {
					country_has_primary_culture = cu:norwegian
				}
			}
			triggered_desc = {
				desc = party_social_liberal_party
				trigger = {
					country_has_primary_culture = cu:danish
				}
			}
			triggered_desc = {
				desc = party_free_minded_peoples_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = party_chartists
				trigger = {
					exists = c:GBR
					THIS = c:GBR
					NOT = { has_law = law_type:law_universal_suffrage }
				}
			}
			triggered_desc = {
				desc = party_radicals
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/radical.dds"
	}
	unlocking_technologies = {
		egalitarianism
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			any_interest_group = {
				is_marginal = no
				leader = {
					has_ideology = ideology:ideology_radical
				}
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = radical_party
	        }
	    }
		NOR = {
			is_interest_group_type = ig_landowners
			is_interest_group_type = ig_devout
		}
		leader = { # fascists and conservatives hate radicals
			NOT = {
				has_ideology = ideology:ideology_fascist
				has_ideology = ideology:ideology_integralist
				has_ideology = ideology:ideology_ethno_nationalist
				has_ideology = ideology:ideology_traditionalist
				has_ideology = ideology:ideology_royalist
				has_ideology = ideology:ideology_orleanist
				has_ideology = ideology:ideology_bonapartist
				has_ideology = ideology:ideology_legitimist
				has_ideology = ideology:ideology_theocrat
				has_ideology = ideology:ideology_slaver
			}
		}
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
			}
			add = {
				value = -10
				desc = "south_america_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
					country_is_in_north_america = yes
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					has_law = law_type:law_presidential_republic
				}
			}
			add = {
				value = -10
				desc = "usa_two_party_system"
			}
		}
		if = { # radicals love radicalism
			limit = {
				leader = {
					has_ideology = ideology:ideology_radical
				}
			}
			add = {
				value = 5
				desc = "from_radical"
			}
		}
		if = {
			limit = {
				is_powerful = yes
				leader = {
					has_ideology = ideology:ideology_radical
				}
			}
			add = {
				value = 10
				desc = "from_powerful_radical"
			}
		}
		if = { # radicals will fall in line behind stronger liberals
			limit = {
				leader = {
					has_ideology = ideology:ideology_radical
				}
				is_powerful = no
				owner = {
					any_interest_group = {
						is_powerful = yes
						OR = {
							has_ideology = ideology:ideology_liberal
							has_ideology = ideology:ideology_liberal_modern
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_weak_radicals"
			}
		}
		if = { # weak liberals will fall in line behind strong radicals
			limit = {
				is_powerful = no
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
				}
				owner = {
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_radical
						}
					}
				}
			}
			add = {
				value = 10
				desc = "from_weak_liberals_radical"
			}
		}
		if = { # weak leftists will fall in line behind radicals pre-revolution
			limit = {
				is_powerful = no
				leader = {
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
					}
				}
				owner = {
					NOT = { has_law = law_type:law_council_republic }
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_radical
						}
					}
				}
			}
			add = {
				value = 10
				desc = "from_weak_leftists_radical"
			}
		}
		if = { # various progressives are inclined towards radicalism
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_feminist
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_pacifist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_reformer
						has_ideology = ideology:ideology_republican_leader
						has_ideology = ideology:ideology_atheist
						has_ideology = ideology:ideology_humanitarian
					}
				}
			}
			add = {
				value = 10
				desc = "from_progressives_radical"
			}
		}
		if = { # republican
			limit = {
				OR = {
					has_ideology = ideology:ideology_republican
					has_ideology = ideology:ideology_populist
					leader = {
						OR = {
							has_ideology = ideology:ideology_atheist
							has_ideology = ideology:ideology_republican_leader
							has_ideology = ideology:ideology_radical
						}
					}
				}
				owner = {
					OR = {
						has_law = law_type:law_monarchy
						has_law = law_type:law_theocracy
					}
				}
			}
			add = {
				value = 10
				desc = "from_republican"
			}
		}
		if = {
			limit = { # particularists will join in when their issues are relevant
				has_ideology = ideology:ideology_particularist
				owner = {
					OR = {
						has_law = law_type:law_serfdom
						has_law = law_type:law_debt_slavery
					}
				}
			}
			add = {
				value = 3
				desc = "from_particularism_cares_about_laws"
			}
		}
		if = { # moderates are scared of radical politics
			limit = {
				leader = {
					has_ideology = ideology:ideology_moderate
				}
			}
			add = {
				value = -3
				desc = "from_moderate"
			}
		}
		if = { # from lack of democracy
			limit = {
				owner = {
					NOT = { has_law = law_type:law_universal_suffrage }
				}
				OR = {
					has_ideology = ideology:ideology_republican
					has_ideology = ideology:ideology_populist
					leader = {
						OR = {
							has_ideology = ideology:ideology_radical
							has_ideology = ideology:ideology_social_democrat
							has_ideology = ideology:ideology_humanitarian
						}
					}
				}
			}
			add = {
				value = 10
				desc = "from_no_universal_suffrage"
			}
		}
		if = { # radical anti-censorship
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_anarchist
						has_ideology = ideology:ideology_humanitarian
					}
				}
				owner = {
					OR = {
						has_law = law_type:law_outlawed_dissent
						has_law = law_type:law_censorship
					}
				}
			}
			add = {
				value = 3
				desc = from_censorship
			}
		}
		if = { # anti-censorship
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					leader = {
						has_ideology = ideology:ideology_humanitarian
					}
				}
				owner = {
					has_law = law_type:law_outlawed_dissent
				}
			}
			add = {
				value = 6
				desc = from_outlawed_dissent
			}
		}
		if = { # opposition to secret police or national guard
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					leader = {
						OR = {	
							has_ideology = ideology:ideology_humanitarian
							has_ideology = ideology:ideology_radical
						}
					}
				}
				owner = {
					OR = {
						has_law = law_type:law_national_guard
						has_law = law_type:law_secret_police
					}
				}
			}
			add = {
				value = 6
				desc = from_bad_home_affairs
			}
		}
		if = { # general anti-slavery
			limit = {
				owner = {
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
				OR = {
					has_ideology = ideology:ideology_anti_slavery
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 3
				desc = "from_slavery"
			}
		}
		if = { # anti-serfdom
			limit = {
				owner = {
					has_law = law_type:law_serfdom
				}
				OR = {
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					has_ideology = ideology:ideology_anti_slavery
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_communist
					}
				}
			}
			add = {
				value = 3
				desc = "from_serfdom"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = radical_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				 owner.var:only_valid_party = {
					 is_party_type = radical_party
				 }
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = radical_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿# Fallback party for Devout
# When devout are powerful, other religious IG's might join

religious_party = {
	color = { 100 100 100 }
	name = {
		first_valid = {

			triggered_desc = {
				desc = party_catholic_peoples_party
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_portuguese_catholic_centre
				trigger = {
					exists = c:POR
					THIS = c:POR
				}
			}
			triggered_desc = {
				desc = party_catholic_right
				trigger = {
					exists = c:SWI
					THIS = c:SWI
				}
			}
			triggered_desc = {
				desc = party_anti_revolutionary_party
				trigger = {
					exists = c:NET
					THIS = c:NET
				}
			}
			triggered_desc = {
				desc = party_learned_council
				trigger = {
					exists = c:PER
					THIS = c:PER
				}
			}
			triggered_desc = {
				desc = party_traditionalist_communion
				trigger = {
					exists = c:SPA
					THIS = c:SPA
				}
			}
			triggered_desc = {
				desc = party_christian_peoples_party
				trigger = {
					exists = c:BEL
					THIS = c:BEL
				}
			}
			triggered_desc = {
				desc = party_clerical_party
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_union_of_the_russian_people
				trigger = {
					exists = c:RUS
					THIS = c:RUS
				}
			}
			triggered_desc = {
				desc = party_know_nothing_party
				trigger = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
				}
			}
			triggered_desc = {
				desc = party_zentrum
				trigger = {
					AND = {
						OR = {
							country_has_primary_culture = cu:north_german
							country_has_primary_culture = cu:south_german
						}
						country_has_state_religion = rel:catholic
					}
				}
			}
			triggered_desc = {
				desc = party_conservative_catholics
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_moderate_venstre
				trigger = {
					country_has_primary_culture = cu:norwegian
				}
			}
			triggered_desc = {
				desc = party_shinto
				trigger = {
					country_has_state_religion = rel:shinto
				}
			}
			triggered_desc = {
				desc = party_buddhist
				trigger = {
					root.religion = {
						has_discrimination_trait = buddhist
					}
				}
			}
			triggered_desc = {
				desc = party_sikh
				trigger = {
					country_has_state_religion = rel:sikh
				}
			}
			triggered_desc = {
				desc = party_hindu
				trigger = {
					country_has_state_religion = rel:hindu
				}
			}
			triggered_desc = {
				desc = party_jewish
				trigger = {
					country_has_state_religion = rel:jewish
				}
			}
			triggered_desc = {
				desc = party_muslim
				trigger = {
					root.religion = {
						has_discrimination_trait = muslim
					}
				}
			}
			triggered_desc = {
				desc = party_catholic
				trigger = {
					country_has_state_religion = rel:catholic
				}
			}
			triggered_desc = {
				desc = party_christian
				trigger = {
					root.religion = {
						has_discrimination_trait = christian
					}
				}
			}
			triggered_desc = {
				desc = party_religious
				trigger = {
					always = yes
				}
			}
		}
	}
	icon = {
		default = "/gfx/interface/icons/political_parties/religious.dds"
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = religious_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = {
			limit = {
				owner = {
					country_is_in_south_america = yes
					any_primary_culture = {
						has_discrimination_trait = hispanophone
					}
				}
			}
			add = {
				value = -10
				desc = "south_america_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
					country_is_in_north_america = yes
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
					}
					has_law = law_type:law_presidential_republic
				}
			}
			add = {
				value = -10
				desc = "usa_two_party_system"
			}
		}
		if = {
			limit = {
				owner = {
					any_interest_group = {
						is_interest_group_type = ig_landowners
						is_marginal = no
					}
					NOT = {
						has_technology_researched = corporatism
					}
				}
			}
			add = {
				value = -5
				desc = "from_relevant_landowners"
			}
		}
		if = {
			limit = {
				is_interest_group_type = ig_devout
				owner = {
					has_law = law_type:law_theocracy
				}
			}
			add = {
				value = 5
				desc = "from_theocracy"
			}
		}
		if = { # nobody will join if the devout don't join
			limit = {
				NOT = { is_interest_group_type = ig_devout }
				OR = {
					NOT = { exists = owner.py:religious_party }
					AND = {
						exists = owner.py:religious_party
						owner = {
							ig:ig_devout = {
								NOT = { is_member_of_party = owner.py:religious_party }
							}
						}
					}
				}
			}
			add = {
				value = -20
				desc = "from_no_devout_in_party" # this should probably never actually display in game because the party won't exist
			}
		}
		if = { # a party for powerful religious people
			limit = {
				is_interest_group_type = ig_devout
				is_powerful = yes
			}
			add = {
				value = 10
				desc = "from_powerful_devout"
			}
		}
		if = { # religiously inclined people might join if devout are powerful
			limit = {
				is_powerful = no
				owner = {
					ig:ig_devout = {
						is_powerful = yes
					}
				}
				leader = {
					OR = {
						has_ideology = ideology:ideology_traditionalist
						has_ideology = ideology:ideology_theocrat
						has_ideology = ideology:ideology_corporatist_leader
					}
				}
			}
			add = {
				value = 10
				desc = "from_powerful_devout_other"
			}
		}
		if = { # antireligious characters and IG's will never join
			limit = {
				OR = {
					has_ideology = ideology:ideology_anti_clerical
					leader = {
						has_ideology = ideology:ideology_atheist
					}
				}
			}
			add = {	
				value = -15
				desc = "from_antireligious"
			}
		}
		if = { # Corporatism
			limit = {
				OR = {
					has_ideology = ideology:ideology_corporatist
					leader = {
						has_ideology = ideology:ideology_corporatist_leader
					}
				}
			}
			add = {
				value = 10
				desc = "from_corporatism"
			}
		}
		if = { # patriarchs more likely to join conservatives with women's suffrage
			limit = {
				has_ideology = ideology:ideology_patriarchal
				owner = {
					has_law = law_type:law_womens_suffrage
				}
			}
			add = {
				value = 3
				desc = "from_patriarchy"
			}
		}
		if = {
			limit = {
				is_interest_group_type = ig_devout
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = { # anti-orleanist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = religious_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_orleanist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-legitimist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = religious_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_legitimist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = { # anti-bonapartist
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_orleanist
					}
				}
				owner = {
					any_interest_group = {
						has_party = yes
						party = {
							is_party_type = religious_party
						}
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_bonapartist
						}
					}
				}
			}
			add = {
				value = -5
				desc = "from_french_monarchist_rival"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = religious_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
		        	is_party_type = religious_party
		        }
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = religious_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}

﻿# Social democrats extremely attracted to this ideology
# Attracts weak leftists and liberals
# Available for Trade Unions pre-Socialism

social_democrat_party = {
	color = { 241 24 138 }
	name = {
		first_valid = {
			triggered_desc = {
				desc = party_diggers
				trigger = {
					country_has_primary_culture = cu:british
					NOT = { has_technology_researched = socialism }
				}
			}
			triggered_desc = {
				desc = party_labour_party
				trigger = {
					exists = c:GBR
					THIS = c:GBR
				}
			}
			triggered_desc = {
				desc = party_psoe
				trigger = {
					exists = c:SPA
					THIS = c:SPA
				}
			}
			triggered_desc = {
				desc = party_labour_party
				trigger = {
					exists = c:IRE
					THIS = c:IRE
				}
			}
			triggered_desc = {
				desc = party_portuguese_socialist_party
				trigger = {
					exists = c:POR
					THIS = c:POR
				}
			}
			triggered_desc = {
				desc = party_ftsf
				trigger = {
					exists = c:FRA
					THIS = c:FRA
				}
			}
			triggered_desc = {
				desc = party_menshevik_party
				trigger = {
					exists = c:RUS
					THIS = c:RUS
				}
			}
			triggered_desc = {
				desc = party_finnish_labor_party
				trigger = {
					exists = c:FIN
					THIS = c:FIN
				}
			}
			triggered_desc = {
				desc = party_belgian_workers_party
				trigger = {
					exists = c:BEL
					THIS = c:BEL
				}
			}
			triggered_desc = {
				desc = party_sdapo
				trigger = {
					exists = c:AUS
					THIS = c:AUS
				}
			}
			triggered_desc = {
				desc = party_brsdp
				trigger = {
					exists = c:BUL
					THIS = c:BUL
				}
			}
			triggered_desc = {
				desc = party_mszdp
				trigger = {
					exists = c:HUN
					THIS = c:HUN
				}
			}
			triggered_desc = {
				desc = party_social_democratic_workers_party
				trigger = {
					exists = c:NET
					THIS = c:NET
				}
			}
			triggered_desc = {
				desc = party_common_peoples_party
				trigger = {
					exists = c:JAP
					THIS = c:JAP
				}
			}
			triggered_desc = {
				desc = party_democrat_party
				trigger = {
					exists = c:PER
					THIS = c:PER
				}
			}
			triggered_desc = {
				desc = party_socialist_workers_federation
				trigger = {
					exists = c:TUR
					THIS = c:TUR
				}
			}
			triggered_desc = {
				desc = party_laborist_party
				trigger = {
					exists = c:MEX
					THIS = c:MEX
				}
			}
			triggered_desc = {
				desc = party_confederate_socialist_party
				trigger = {
					exists = c:CSA
					THIS = c:CSA
				}
			}
			triggered_desc = {
				desc = party_seke
				trigger = {
					exists = c:GRE
					THIS = c:GRE
				}
			}
			triggered_desc = {
				desc = party_labor_party
				trigger = {
					country_has_primary_culture = cu:norwegian
				}
			}
			triggered_desc = {
				desc = party_socialist_labor_party
				trigger = {
					country_has_primary_culture = cu:anglo_canadian
				}
			}
			triggered_desc = {
				desc = party_labor_party
				trigger = {
					country_has_primary_culture = cu:franco_canadian
				}
			}
			triggered_desc = {
				desc = party_social_democratic_workers_party
				trigger = {
					country_has_primary_culture = cu:romanian
				}
			}
			triggered_desc = {
				desc = party_spd
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			triggered_desc = {
				desc = party_psi
				trigger = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
			}
			triggered_desc = {
				desc = party_socialist_party_of_america
				trigger = {
					country_has_primary_culture = cu:yankee
				}
			}
			triggered_desc = {
				desc = party_anl
				trigger = {
					country_has_primary_culture = cu:brazilian
				}
			}
			triggered_desc = {
				desc = party_social_democrats
				trigger = {
					always = yes
				}
			}
		}
	}
	
	icon = {
		default = "/gfx/interface/icons/political_parties/social_democrats.dds"
	}
	unlocking_technologies = {
		labor_movement
	}
	# THIS IS RUN ONLY ONCE AT GAME START
	valid_for_country = {
		always = yes
	}
	available_for_interest_group = {
		owner = {
			country_has_voting_franchise = yes
			OR = {
				any_interest_group = {
					is_marginal = no
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
				}
				ig:ig_trade_unions = {
					is_marginal = no
				}
			}
		}
		NOT = { # these ig's are inherently anti-worker
			is_interest_group_type = ig_landowners
			is_interest_group_type = ig_industrialists
		}
		leader = { # fascists and conservatives hate social democracy
			NOT = {
				has_ideology = ideology:ideology_fascist
				has_ideology = ideology:ideology_integralist
				has_ideology = ideology:ideology_ethno_nationalist
				has_ideology = ideology:ideology_traditionalist
				has_ideology = ideology:ideology_royalist
				has_ideology = ideology:ideology_orleanist
				has_ideology = ideology:ideology_bonapartist
				has_ideology = ideology:ideology_legitimist
				has_ideology = ideology:ideology_theocrat
			}
		}
		OR = {
	     	NOT = {
	         	owner = {
	         		has_variable = only_valid_party
	         	}
	        }
	        owner.var:only_valid_party = {
	        	is_party_type = social_democrat_party
	        }
	    }
	}
	
	# Root - IG considering joining
	# scope:number - the number of IGs that would join this party before the root IG
	join_weight = {
		value = {
			value = -5
			desc = "base_value"
		}
		if = { # social democrats love social democracy
			limit = {
				leader = {
					has_ideology = ideology:ideology_social_democrat
				}
			}
			add = {	
				value = 5
				desc = from_social_democrat
			}
		}
		if = { # powerful social democrats love social democracy
			limit = {
				is_powerful = yes
				leader = {
					has_ideology = ideology:ideology_social_democrat
				}
			}
			add = {	
				value = 5
				desc = from_social_democrat_powerful
			}
		}
		if = { # social democrats will fall in line behind stronger leftists
			limit = {
				leader = {
					has_ideology = ideology:ideology_social_democrat
				}
				is_powerful = no
				owner = {
					any_interest_group = {
						is_powerful = yes
						leader = {
							OR = {
								has_ideology = ideology:ideology_communist
								has_ideology = ideology:ideology_vanguardist
								has_ideology = ideology:ideology_anarchist
							}
						}
					}
				}
			}
			add = {	
				value = 5
				desc = from_powerful_communists
			}
		}
		if = { # weak leftists will fall in line behind social democrats pre-revolution
			limit = {
				is_powerful = no
				leader = {
					OR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
					}
				}
				owner = {
					NOT = { has_law = law_type:law_council_republic }
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_social_democrat
						}
					}
				}
			}
			add = 6
			desc = from_weak_communists
		}
		# weak liberals might fall in line behind strong social democrats
		if = {
			limit = {
				is_powerful = no
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
				}
				owner = {
					any_interest_group = {
						is_powerful = yes
						leader = {
							has_ideology = ideology:ideology_social_democrat
						}
					}
				}
			}
			add = {	
				value = 5
				desc = from_weak_liberals
			}
		}
		if = { # various progressives are inclined towards social democracy
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_feminist
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_pacifist
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_reformer
						has_ideology = ideology:ideology_republican_leader
						has_ideology = ideology:ideology_atheist
						has_ideology = ideology:ideology_humanitarian
						has_ideology = ideology:ideology_humanitarian_royalist
					}
				}
			}
			add = {	
				value = 5
				desc = from_progressivism_sd
			}
		}
		# market liberals not very inclined to join social democrats
		if = {
			limit = {
				leader = {
					has_ideology = ideology:ideology_market_liberal
				}
			}
			add = {	
				value = -5
				desc = from_marked_liberal_sd
			}
		}
		if = { # generic powerful trade unions party
			limit = {
				is_interest_group_type = ig_trade_unions
				is_powerful = yes
				leader = {
					NOR = {
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_vanguardist
						has_ideology = ideology:ideology_anarchist
					}
				}
			}
			add = {	
				value = 5
				desc = from_powerful_unions
			}
		}
		if = { # anti-censorship
			limit = {
				OR = {
					has_ideology = ideology:ideology_liberal
					has_ideology = ideology:ideology_liberal_modern
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					leader = {
						OR = {
							has_ideology = ideology:ideology_humanitarian
							has_ideology = ideology:ideology_humanitarian_royalist
						}
					}
				}
				owner = {
					has_law = law_type:law_outlawed_dissent
				}
			}
			add = {
				value = 3
				desc = from_outlawed_dissent
			}
		}
		if = { # against land-based taxation
			limit = {
				OR = {
					has_ideology = ideology:ideology_meritocratic
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
				}
				owner = {
					has_law = law_type:law_land_based_taxation
				}
			}
			add = {
				value = 3
				desc = "from_land_tax"
			}
		}
		if = { # loyalists will join in when their issues are relevant
			limit = {
				has_ideology = ideology:ideology_loyalist
				owner = {
					has_law = law_type:law_consumption_based_taxation
				}
			}
			add = {
				value = 3
				desc = "from_loyalist"
			}
		}
		if = { # republican
			limit = {
				OR = {
					has_ideology = ideology:ideology_republican
					has_ideology = ideology:ideology_populist
					leader = {
						OR = {
							has_ideology = ideology:ideology_atheist
							has_ideology = ideology:ideology_republican_leader
							has_ideology = ideology:ideology_radical
						}
					}
				}
				owner = {
					OR = {
						has_law = law_type:law_monarchy
						has_law = law_type:law_theocracy
					}
				}
			}
			add = {
				value = 3
				desc = "from_republican"
			}
		}
		if = { # against illiteracy and religious education
			limit = {
				OR = {
					has_ideology = ideology:ideology_individualist
					has_ideology = ideology:ideology_proletarian
				}
				owner = {
					OR = {
						has_law = law_type:law_religious_schools
						has_law = law_type:law_no_schools
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_or_religious_schools"
			}
		}
		if = { # against free trade - peasant/socialist alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					has_ideology = ideology:ideology_agrarian
					has_ideology = ideology:ideology_paternalistic
				}
				owner = {
					has_law = law_type:law_free_trade
				}
				NOT = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 3
				desc = "from_anti_free_trade"
			}
		}
		if = { # against laissez-faire - peasant/socialist alliance
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					has_ideology = ideology:ideology_agrarian
					leader = {
						has_ideology = ideology:ideology_protectionist
					}
				}
				owner = {
					has_law = law_type:law_laissez_faire
				}
				NOT = {
					leader = {
						has_ideology = ideology:ideology_market_liberal
					}
				}
			}
			add = {
				value = 3
				desc = "from_anti_laissez_faire"
			}
		}
		if = { # loyalist-proletarian alliance for tax reform
			limit = {
				OR = {
					has_ideology = ideology:ideology_proletarian
					leader = {
						has_ideology = ideology:ideology_social_democrat
					}
					AND = {
						has_ideology = ideology:ideology_loyalist
						owner = {
							NOR = {
								has_law = law_type:law_proportional_taxation
								has_law = law_type:law_per_capita_based_taxation
							}
						}
					}
				}
				owner = {
					NOT = {
						has_law = law_type:law_graduated_taxation
					}
				}
			}
			add = {
				value = 3
				desc = "from_no_graduated_taxation"
			}
		}
		if = { # anti-serfdom
			limit = {
				owner = {
					has_law = law_type:law_serfdom
				}
				OR = {
					has_ideology = ideology:ideology_egalitarian
					has_ideology = ideology:ideology_egalitarian_modern
					has_ideology = ideology:ideology_anti_slavery
					has_ideology = ideology:ideology_laissez_faire
					has_ideology = ideology:ideology_particularist
					leader = {
						has_ideology = ideology:ideology_abolitionist
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_communist
					}
				}
			}
			add = {
				value = 5
				desc = "from_serfdom"
			}
		}
		if = { # general anti-slavery
			limit = {
				owner = {
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
				OR = {
					has_ideology = ideology:ideology_anti_slavery
					leader = {
						has_ideology = ideology:ideology_abolitionist
					}
				}
			}
			add = {
				value = 5
				desc = "from_slavery"
			}
		}
		if = {
			limit = {
				is_interest_group_type = ig_trade_unions
				is_powerful = yes
			}
			multiply = {
				value = 2
				desc = "from_archetype_party"
			}
		}
		if = {
			limit = {
				scope:number = 1
				is_powerful = no
				is_marginal = no
			}
			multiply = {
				value = 2
				desc = "from_influential_supporting_member"
			}
		}
		else_if = {
			limit = {
				scope:number = 2
			}
			multiply = {
				value = 0.5
				desc = "from_two_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number = 3
			}
			multiply = {
				value = 0.25
				desc = "from_three_prior_members"
			}
		}
		else_if = {
			limit = {
				scope:number > 3
			}
			multiply = {
				value = 0.1
				desc = "from_more_than_three_prior_members"
			}
		}
		if = { # againt free trade
			limit = {
				owner = {
					has_law = law_type:law_free_trade
				}
				OR = {
					has_ideology = ideology:ideology_socialist
					has_ideology = ideology:ideology_isolationist
				}
			}
			add = {
				value = 3
				desc = "from_free_trade"
			}
		}
		if = { # against l-f
			limit = {
				owner = {
					has_law = law_type:law_laissez_faire
				}
				OR = {
					has_ideology = ideology:ideology_agrarian
					has_ideology = ideology:ideology_socialist
					leader = {
						OR = {
							has_ideology = ideology:ideology_vanguardist
							has_ideology = ideology:ideology_protectionist
							has_ideology = ideology:ideology_luddite
						}
					}
				}
			}
			add = {
				value = 3
				desc = "from_anti_laissez_faire"
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	NOT = {
			        owner.var:only_valid_party = {
			        	is_party_type = social_democrat_party
			        }
			    }
			}
			multiply = {
				value = 0
			}
		}
		if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
				owner.var:only_valid_party = {
					is_party_type = social_democrat_party
				}
	         	owner.ruler = {
					this.interest_group = prev
				}
			}
			add = {
				value = 1000
				desc = "from_only_legal_party"
			}
		}
		else_if = {
			limit = {
				owner = {
	         		has_variable = only_valid_party
	         	}
	         	 owner.var:only_valid_party = {
		        	is_party_type = social_democrat_party
		        }
			}
			add = {
				value = 3
				desc = "from_only_legal_party"
			}
		}
	}
}


﻿﻿academics = {
	texture = "gfx/interface/icons/pops_icons/academics.dds"
	color = hsv{ 0.94 0.51 0.37 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 4
	paid_private_wage = yes
	literacy_target = 0.80
	education_access = 0.5
	dependent_wage = 0.5	# per year
	unemployment = yes

	
	# 70% - 100% politically engaged
	political_engagement_base = 0.7
	political_engagement_literacy_factor = 0.3
	
	political_engagement_mult = {
		value = 1

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}
		
	}
	
	qualifications_growth_desc = "ACADEMICS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no
				literacy_rate > 0.2
			}
			# baseline: ( literacy - 0.2 ) * 10 + ( wealth / 10 ), norm 5
			add = {
				value = literacy_rate
				subtract = 0.2
				multiply = 20
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			add = {
				value = wealth
				divide = 10
				desc = "QUALIFICATIONS_WEALTH_FACTOR"
			}
			if = {
				limit = {
					is_pop_type = clerks
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = aristocrats
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					culture_accepted = no
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_CULTURAL_DISCRIMINATION"
				}
			}
		}
		else_if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
		else = {
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_LITERACY_DECAY"
				value = -1
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}			
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿aristocrats = {
	texture = "gfx/interface/icons/pops_icons/aristocrats.dds"
	color = hsv{ 0.60 0.58 0.46 }
	strata = rich
	start_quality_of_life = 20
	working_adult_ratio = 0.2
	wage_weight = 6
	paid_private_wage = no
	literacy_target = 0.60
	dependent_wage = 0.0	# per year
	unemployment = yes
	
	# 70% - 100% politically engaged
	political_engagement_base = 0.7
	political_engagement_literacy_factor = 0.3
	
	political_engagement_mult = {
		value = 1		
		
		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}
		
	}	
	
	qualifications_growth_desc = "ARISTOCRATS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no
				wealth >= 15
			}
			# baseline: ( wealth - 10 ) / 10 + literacy, norm 1.5 for Wealth 20 and Literacy 50%
			add = {
				value = wealth
				subtract = 14
				divide = 20
				add = {
					value = wealth
					subtract = 20
					divide = 5
					min = 0
				}
				desc = "QUALIFICATIONS_WEALTH_FACTOR"
			}
			multiply = {
				value = 0.5
				add = {
					value = literacy_rate
					divide = 2
				}
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}

			if = {
				limit = {
					is_pop_type = bureaucrats
				}
				multiply = {
					value = 2
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			else_if = {
				limit = {
					is_pop_type = officers
				}
				multiply = {
					value = 3
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			else_if = {
				limit = {
					OR = {
						is_pop_type = farmers
						is_pop_type = clergymen
						}
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}

			if = {
				limit = {
					culture_accepted = no
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_CULTURAL_DISCRIMINATION"
				}
			}
		}
		else_if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
		else = {		
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_WEALTH_DECAY"
				value = -2
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}			
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}

﻿bureaucrats = {
	texture = "gfx/interface/icons/pops_icons/bureaucrats.dds"
	color = hsv{ 0.25 0.4 0.5 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 4
	paid_private_wage = yes
	literacy_target = 0.40
	education_access = 0.50
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 50% - 100% politically engaged
	political_engagement_base = 0.5
	political_engagement_literacy_factor = 0.5
	
	political_engagement_mult = {
		value = 1	

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}
	}
	
	qualifications_growth_desc = "BUREAUCRATS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no 
				literacy_rate > 0.2
			}
			# baseline: ( literacy - 0.2 ) * 10 * ( 2 if accepted culture and religion), norm 6 for Literacy 50% and Accepted C/R
			add = {
				value = literacy_rate
				subtract = 0.2
				multiply = 20
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			if = {
				limit = {
					culture_accepted = yes
					religion_accepted = yes
				}
				multiply = {
					value = 2
					desc = "POTENTIALS_CULTURAL_RELIGIOUS_ACCEPTANCE"
				}
			}
			if = {
				limit = {
					is_pop_type = clerks
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = clergymen
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					culture_accepted = no
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_CULTURAL_DISCRIMINATION"
				}
			}
		}
		else_if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
		else = {		
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_LITERACY_DECAY"
				value = -1
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}

﻿capitalists = {
	texture = "gfx/interface/icons/pops_icons/capitalists.dds"
	color = hsv{ 0.52 0.32 0.49 }
	strata = rich
	start_quality_of_life = 20
	wage_weight = 6
	paid_private_wage = no
	literacy_target = 0.70
	dependent_wage = 0.0	# per year
	unemployment = yes
	
	# 70% - 100% politically engaged
	political_engagement_base = 0.7
	political_engagement_literacy_factor = 0.3
	
	political_engagement_mult = {
		value = 1	

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}	
	}	
	
	qualifications_growth_desc = "CAPITALISTS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no 
				wealth > 10
			}
			# baseline: ( wealth - 10 ) / 10 + ( literacy * 2 ), norm 2 for Wealth 20 and Literacy 50%
			add = {
				value = wealth
				subtract = 10
				divide = 5
				desc = "QUALIFICATIONS_WEALTH_FACTOR"
			}
			add = {
				value = literacy_rate
				multiply = 2
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			if = {
				limit = {
					is_pop_type = shopkeepers
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = engineers
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					culture_accepted = no
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_CULTURAL_DISCRIMINATION"
				}
			}
		}
		else_if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
		else = {		
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_WEALTH_DECAY"
				value = -2
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿clergymen = {
	texture = "gfx/interface/icons/pops_icons/clergymen.dds"
	color = hsv{ 0.13 0.52 0.91 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 3
	paid_private_wage = yes
	literacy_target = 0.80
	education_access = 0.5
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 50% - 100% politically engaged
	political_engagement_base = 0.5
	political_engagement_literacy_factor = 0.5
	
	political_engagement_mult = {
		value = 1	

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}	
	}
	
	qualifications_growth_desc = "CLERGYMEN_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				literacy_rate > 0.2
			}
			# baseline: ( literacy - 0.2 ) * 20, norm 6 for Literacy 50% and Accepted Religion
			add = {
				value = literacy_rate
				subtract = 0.2
				multiply = 20
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			if = {
				limit = {
					is_pop_type = academics
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = aristocrats
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					religion_accepted = no
				}
				multiply = {
					value = 0.05
					desc = "POTENTIALS_RELIGIOUS_DISCRIMINATION"
				}
			}
			if = {
				limit = {
					is_peasant_under_serfdom = yes
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				}
			}
			if = {
				limit = {
					religion = rel:atheist
				}
				multiply = {
					value = 0.1
					desc = "ATHEIST_CLERGYMEN"
				}
			}
		}
		else = {		
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_LITERACY_DECAY"
				value = -1
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿clerks = {
	texture = "gfx/interface/icons/pops_icons/clerks.dds"
	strata = poor
	start_quality_of_life = 7
	color = hsv{ 0.28 0.40 0.75 }
	wage_weight = 1.5
	paid_private_wage = yes
	literacy_target = 0.20
	education_access = 0.25
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 20% - 80% politically engaged	
	political_engagement_base = 0.20
	political_engagement_literacy_factor = 0.6
	
	political_engagement_mult = {
		value = 1		
		
		multiply = {
			desc = "HAS_POLITICAL_AGITATION"	
			value = 1.0
			
			if = {
				limit = { 
					owner = {
						has_technology_researched = political_agitation
					}
				}
				value = 1.5
			}		
		}		
	}
	
	qualifications_growth_desc = "CLERKS_QUALIFICATIONS_DESC"
	qualifications = {
		# baseline: literacy * 20, norm 10 for Laborers with Literacy 25%
		add = {
			value = literacy_rate
			multiply = 20
			desc = "QUALIFICATIONS_LITERACY_FACTOR"
		}
		if = {
			limit = {
				is_pop_type = laborers
			}
			multiply = {
				value = 2
				desc = "QUALIFICATIONS_FAVORED_TYPE"
			}
		}
		if = {
			limit = {
				is_peasant_under_serfdom = yes
			}
			multiply = {
				value = 0.1
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿engineers = {
	texture = "gfx/interface/icons/pops_icons/engineers.dds"
	color = hsv{ 0.07 0.57 0.77 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 3
	paid_private_wage = yes
	literacy_target = 0.80
	education_access = 0.25
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 50% - 100% politically engaged
	political_engagement_base = 0.5
	political_engagement_literacy_factor = 1.0
	
	political_engagement_mult = {
		value = 1
		
		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}		

		multiply = {
			desc = "HAS_POLITICAL_AGITATION"	
			value = 1.0	
		}		
	}
	
	qualifications_growth_desc = "ENGINEERS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no 
				literacy_rate > 0.2
			}
			# baseline: ( literacy - 0.2 ) * 5 + ( wealth / 20 ), norm 2.5 for Wealth 20 and Literacy 50%
			add = {
				value = literacy_rate
				subtract = 0.2
				multiply = 10
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			add = {
				value = wealth
				divide = 20
				desc = "QUALIFICATIONS_WEALTH_FACTOR"
			}
			if = {
				limit = {
					is_pop_type = machinists
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = clerks
				}
				multiply = {
					value = 4
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
		}
		else_if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
		else = {		
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_LITERACY_DECAY"
				value = -2
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}

﻿farmers = {
	texture = "gfx/interface/icons/pops_icons/farmers.dds"
	color = hsv{ 0.54 0.58 0.82 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 2
	paid_private_wage = yes
	dependent_wage = 0.5	# per year
	unemployment = yes

	# 40% - 80% politically engaged	
	political_engagement_base = 0.40
	political_engagement_literacy_factor = 0.40
	
	political_engagement_mult = {
		value = 1
		
		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}

		multiply = {
			desc = "HAS_POLITICAL_AGITATION"	
			value = 1.0
			
			if = {
				limit = { 
					owner = {
						has_technology_researched = political_agitation
					}
				}
				value = 1.5
			}		
		}	
		
		multiply = {
			desc = "HOMESTEADING_LAW"	
			value = 1.0
			
			if = {
				limit = { 
					owner = {
						has_law = law_type:law_homesteading
					}
				}
				value = 1.25
			}		
		}	
	}

	qualifications_growth_desc = "FARMERS_QUALIFICATIONS_DESC"	
	qualifications = {
		# baseline: wealth (max 30) / 2, norm 10 for Peasants with Wealth 10
		add = {
			value = wealth
			max = 30
			divide = 2
			desc = "QUALIFICATIONS_WEALTH_FACTOR"
		}
		if = {
			limit = {
				OR = {
					is_pop_type = peasants
					is_pop_type = laborers
				}
			}
			multiply = {
				value = 2
				desc = "QUALIFICATIONS_FAVORED_TYPE"
			}
		}
		if = {
			limit = {
				is_peasant_under_serfdom = yes
			}
			multiply = {
				value = 0.2
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿laborers = {
	texture = "gfx/interface/icons/pops_icons/laborers.dds"
	color = hsv{ 0.02 0.38 0.37 }
	strata = poor
	unemployment = yes
	unemployment_wealth = 5
	
	can_always_hire = yes
	start_quality_of_life = 5
	wage_weight = 1
	paid_private_wage = yes
	dependent_wage = 0.5	# per year
	
	# 0% - 70% politically engaged	
	political_engagement_base = 0.0
	political_engagement_literacy_factor = 0.7
	
	political_engagement_mult = {
		value = 1.0

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}

		multiply = {
			desc = "NO_LABOR_MOVEMENT"	
			value = 1.0
			
			if = {
				limit = { 
					owner = {
						NOT = { has_technology_researched = labor_movement }
					}
				}
				value = 0.5
			}		
		}
		
		multiply = {
			desc = "HAS_POLITICAL_AGITATION"	
			value = 1.0
			
			if = {
				limit = { 
					owner = {
						has_technology_researched = political_agitation
					}
				}
				value = 1.5
			}		
		}		
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }		
	portrait_is_female = { always = yes }
}
﻿machinists = {
	texture = "gfx/interface/icons/pops_icons/machinists.dds"
	color = hsv{ 0.92 0.40 0.78 }
	strata = poor
	start_quality_of_life = 7
	wage_weight = 1.5
	paid_private_wage = yes
	literacy_target = 0.10
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 20% - 80% politically engaged	
	political_engagement_base = 0.20
	political_engagement_literacy_factor = 0.6
	
	political_engagement_mult = {
		value = 1.0
		
		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}		

		multiply = {
			desc = "NO_LABOR_MOVEMENT"	
			value = 1.0
			
			if = {
				limit = { 
					owner = {
						NOT = { has_technology_researched = labor_movement }
					}
				}
				value = 0.5
			}		
		}

		multiply = {
			desc = "HAS_POLITICAL_AGITATION"	
			value = 1.0
			
			if = {
				limit = { 
					owner = {
						has_technology_researched = political_agitation
					}
				}
				value = 1.5
			}		
		}			
	}
	
	qualifications_growth_desc = "MACHINISTS_QUALIFICATIONS_DESC"
	qualifications = {
		# baseline: ( literacy - 0.1 ) * 20, norm 8 for Laborers with Literacy 30%
		add = {
			value = literacy_rate
			subtract = 0.1
			min = 0
			multiply = 20
			desc = "QUALIFICATIONS_LITERACY_FACTOR"
		}
		if = {
			limit = {
				is_pop_type = laborers
			}
			multiply = {
				value = 2
				desc = "QUALIFICATIONS_FAVORED_TYPE"
			}
		}
		if = {
			limit = {
				is_peasant_under_serfdom = yes
			}
			multiply = {
				value = 0.05
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿officers = {
	texture = "gfx/interface/icons/pops_icons/officers.dds"
	color = hsv{ 0.12 0.51 0.36 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 5
	paid_private_wage = yes
	literacy_target = 0.50
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 70% - 100% politically engaged
	political_engagement_base = 0.7
	political_engagement_literacy_factor = 0.3
	
	political_engagement_mult = {
		value = 1	

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}	
	}
	
	qualifications_growth_desc = "OFFICERS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no
				OR = {
					culture_accepted = yes
					is_pop_type = soldiers
				}
			}
			# baseline: ( literacy - 0.2 ) * 10, norm 2 for Soldiers with Literacy 30%
			add = {
				value = literacy_rate
				subtract = 0.2
				min = 0
				multiply = 10
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			if = {
				limit = {
					is_pop_type = aristocrats
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = soldiers
					owner = {
						is_at_war = yes
					}
					is_employed = yes
					workplace = {
						has_deployed_units = yes
					}
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_DEPLOYED_SERVICEMEN"
				}
			}
			if = {
				limit = {
					owner = {
						has_law = law_type:law_peasant_levies
					}
					NOT = { is_pop_type = aristocrats }
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_OFFICERS_PEASANT_LEVIES"
				}
			}
		}
		else_if = {
			limit = {
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}

﻿peasants = {
	texture = "gfx/interface/icons/pops_icons/peasants.dds"
	color = hsv{ 0.58 0.338 0.812 }
	strata = poor
	subsistence_income = yes
	can_always_hire = yes
	ignores_employment_proportionality = yes
	start_quality_of_life = 5
	wage_weight = 0.2
	paid_private_wage = yes
	consumption_mult = 0.05 	# The portion of Peasant buy packages that are added as state region consumption
	dependent_wage = 0.25	# per year
	unemployment = no

	# 0% - 50% politically engaged	
	political_engagement_base = 0.0
	political_engagement_literacy_factor = 0.5
	
	political_engagement_mult = {
		value = 1	
		
		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}

		multiply = {
			desc = "HAS_POLITICAL_AGITATION"	
			value = 1.0
			
			if = {
				limit = { 
					owner = {
						NOT = { has_technology_researched = political_agitation	}
					}
				}
				value = 1.5
			}		
		}			
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿﻿academics = {
	texture = "gfx/interface/icons/pops_icons/academics.dds"
	color = hsv{ 0.94 0.51 0.37 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 4
	paid_private_wage = yes
	literacy_target = 0.80
	education_access = 0.5
	dependent_wage = 0.5	# per year
	unemployment = yes

	
	# 70% - 100% politically engaged
	political_engagement_base = 0.7
	political_engagement_literacy_factor = 0.3
	
	political_engagement_mult = {
		value = 1

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}
		
	}
	
	qualifications_growth_desc = "ACADEMICS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no
				literacy_rate > 0.2
			}
			# baseline: ( literacy - 0.2 ) * 10 + ( wealth / 10 ), norm 5
			add = {
				value = literacy_rate
				subtract = 0.2
				multiply = 20
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			add = {
				value = wealth
				divide = 10
				desc = "QUALIFICATIONS_WEALTH_FACTOR"
			}
			if = {
				limit = {
					is_pop_type = clerks
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = aristocrats
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					culture_accepted = no
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_CULTURAL_DISCRIMINATION"
				}
			}
		}
		else_if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
		else = {
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_LITERACY_DECAY"
				value = -1
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}			
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿aristocrats = {
	texture = "gfx/interface/icons/pops_icons/aristocrats.dds"
	color = hsv{ 0.60 0.58 0.46 }
	strata = rich
	start_quality_of_life = 20
	working_adult_ratio = 0.2
	wage_weight = 6
	paid_private_wage = no
	literacy_target = 0.60
	dependent_wage = 0.0	# per year
	unemployment = yes
	
	# 70% - 100% politically engaged
	political_engagement_base = 0.7
	political_engagement_literacy_factor = 0.3
	
	political_engagement_mult = {
		value = 1		
		
		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}
		
	}	
	
	qualifications_growth_desc = "ARISTOCRATS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no
				wealth >= 15
			}
			# baseline: ( wealth - 10 ) / 10 + literacy, norm 1.5 for Wealth 20 and Literacy 50%
			add = {
				value = wealth
				subtract = 14
				divide = 20
				add = {
					value = wealth
					subtract = 20
					divide = 5
					min = 0
				}
				desc = "QUALIFICATIONS_WEALTH_FACTOR"
			}
			multiply = {
				value = 0.5
				add = {
					value = literacy_rate
					divide = 2
				}
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}

			if = {
				limit = {
					is_pop_type = bureaucrats
				}
				multiply = {
					value = 2
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			else_if = {
				limit = {
					is_pop_type = officers
				}
				multiply = {
					value = 3
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			else_if = {
				limit = {
					OR = {
						is_pop_type = farmers
						is_pop_type = clergymen
						}
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}

			if = {
				limit = {
					culture_accepted = no
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_CULTURAL_DISCRIMINATION"
				}
			}
		}
		else_if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
		else = {		
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_WEALTH_DECAY"
				value = -2
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}			
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}

﻿bureaucrats = {
	texture = "gfx/interface/icons/pops_icons/bureaucrats.dds"
	color = hsv{ 0.25 0.4 0.5 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 4
	paid_private_wage = yes
	literacy_target = 0.40
	education_access = 0.50
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 50% - 100% politically engaged
	political_engagement_base = 0.5
	political_engagement_literacy_factor = 0.5
	
	political_engagement_mult = {
		value = 1	

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}
	}
	
	qualifications_growth_desc = "BUREAUCRATS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no 
				literacy_rate > 0.2
			}
			# baseline: ( literacy - 0.2 ) * 10 * ( 2 if accepted culture and religion), norm 6 for Literacy 50% and Accepted C/R
			add = {
				value = literacy_rate
				subtract = 0.2
				multiply = 20
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			if = {
				limit = {
					culture_accepted = yes
					religion_accepted = yes
				}
				multiply = {
					value = 2
					desc = "POTENTIALS_CULTURAL_RELIGIOUS_ACCEPTANCE"
				}
			}
			if = {
				limit = {
					is_pop_type = clerks
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = clergymen
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					culture_accepted = no
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_CULTURAL_DISCRIMINATION"
				}
			}
		}
		else_if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
		else = {		
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_LITERACY_DECAY"
				value = -1
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}

﻿capitalists = {
	texture = "gfx/interface/icons/pops_icons/capitalists.dds"
	color = hsv{ 0.52 0.32 0.49 }
	strata = rich
	start_quality_of_life = 20
	wage_weight = 6
	paid_private_wage = no
	literacy_target = 0.70
	dependent_wage = 0.0	# per year
	unemployment = yes
	
	# 70% - 100% politically engaged
	political_engagement_base = 0.7
	political_engagement_literacy_factor = 0.3
	
	political_engagement_mult = {
		value = 1	

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}	
	}	
	
	qualifications_growth_desc = "CAPITALISTS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no 
				wealth > 10
			}
			# baseline: ( wealth - 10 ) / 10 + ( literacy * 2 ), norm 2 for Wealth 20 and Literacy 50%
			add = {
				value = wealth
				subtract = 10
				divide = 5
				desc = "QUALIFICATIONS_WEALTH_FACTOR"
			}
			add = {
				value = literacy_rate
				multiply = 2
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			if = {
				limit = {
					is_pop_type = shopkeepers
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = engineers
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					culture_accepted = no
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_CULTURAL_DISCRIMINATION"
				}
			}
		}
		else_if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
		else = {		
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_WEALTH_DECAY"
				value = -2
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿clergymen = {
	texture = "gfx/interface/icons/pops_icons/clergymen.dds"
	color = hsv{ 0.13 0.52 0.91 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 3
	paid_private_wage = yes
	literacy_target = 0.80
	education_access = 0.5
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 50% - 100% politically engaged
	political_engagement_base = 0.5
	political_engagement_literacy_factor = 0.5
	
	political_engagement_mult = {
		value = 1	

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}	
	}
	
	qualifications_growth_desc = "CLERGYMEN_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				literacy_rate > 0.2
			}
			# baseline: ( literacy - 0.2 ) * 20, norm 6 for Literacy 50% and Accepted Religion
			add = {
				value = literacy_rate
				subtract = 0.2
				multiply = 20
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			if = {
				limit = {
					is_pop_type = academics
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = aristocrats
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					religion_accepted = no
				}
				multiply = {
					value = 0.05
					desc = "POTENTIALS_RELIGIOUS_DISCRIMINATION"
				}
			}
			if = {
				limit = {
					is_peasant_under_serfdom = yes
				}
				multiply = {
					value = 0.1
					desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				}
			}
			if = {
				limit = {
					religion = rel:atheist
				}
				multiply = {
					value = 0.1
					desc = "ATHEIST_CLERGYMEN"
				}
			}
		}
		else = {		
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_LITERACY_DECAY"
				value = -1
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿clerks = {
	texture = "gfx/interface/icons/pops_icons/clerks.dds"
	strata = poor
	start_quality_of_life = 7
	color = hsv{ 0.28 0.40 0.75 }
	wage_weight = 1.5
	paid_private_wage = yes
	literacy_target = 0.20
	education_access = 0.25
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 20% - 80% politically engaged	
	political_engagement_base = 0.20
	political_engagement_literacy_factor = 0.6
	
	political_engagement_mult = {
		value = 1		
		
		multiply = {
			desc = "HAS_POLITICAL_AGITATION"	
			value = 1.0
			
			if = {
				limit = { 
					owner = {
						has_technology_researched = political_agitation
					}
				}
				value = 1.5
			}		
		}		
	}
	
	qualifications_growth_desc = "CLERKS_QUALIFICATIONS_DESC"
	qualifications = {
		# baseline: literacy * 20, norm 10 for Laborers with Literacy 25%
		add = {
			value = literacy_rate
			multiply = 20
			desc = "QUALIFICATIONS_LITERACY_FACTOR"
		}
		if = {
			limit = {
				is_pop_type = laborers
			}
			multiply = {
				value = 2
				desc = "QUALIFICATIONS_FAVORED_TYPE"
			}
		}
		if = {
			limit = {
				is_peasant_under_serfdom = yes
			}
			multiply = {
				value = 0.1
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿engineers = {
	texture = "gfx/interface/icons/pops_icons/engineers.dds"
	color = hsv{ 0.07 0.57 0.77 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 3
	paid_private_wage = yes
	literacy_target = 0.80
	education_access = 0.25
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 50% - 100% politically engaged
	political_engagement_base = 0.5
	political_engagement_literacy_factor = 1.0
	
	political_engagement_mult = {
		value = 1
		
		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}		

		multiply = {
			desc = "HAS_POLITICAL_AGITATION"	
			value = 1.0	
		}		
	}
	
	qualifications_growth_desc = "ENGINEERS_QUALIFICATIONS_DESC"
	qualifications = {
		if = {
			limit = {
				is_peasant_under_serfdom = no 
				literacy_rate > 0.2
			}
			# baseline: ( literacy - 0.2 ) * 5 + ( wealth / 20 ), norm 2.5 for Wealth 20 and Literacy 50%
			add = {
				value = literacy_rate
				subtract = 0.2
				multiply = 10
				desc = "QUALIFICATIONS_LITERACY_FACTOR"
			}
			add = {
				value = wealth
				divide = 20
				desc = "QUALIFICATIONS_WEALTH_FACTOR"
			}
			if = {
				limit = {
					is_pop_type = machinists
				}
				multiply = {
					value = 5
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
			if = {
				limit = {
					is_pop_type = clerks
				}
				multiply = {
					value = 4
					desc = "QUALIFICATIONS_FAVORED_TYPE"
				}
			}
		}
		else_if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			value = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
		else = {		
			value = {
				desc = "QUALIFICATIONS_INSUFFICIENT_LITERACY_DECAY"
				value = -2
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}


﻿shopkeepers = {
	texture = "gfx/interface/icons/pops_icons/shopkeepers.dds"
	color = hsv{ 0.41 0.45 0.88 }
	strata = middle
	start_quality_of_life = 10
	wage_weight = 2
	paid_private_wage = yes
	literacy_target = 0.20
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 30% - 90% politically engaged
	political_engagement_base = 0.3
	political_engagement_literacy_factor = 0.6
	
	political_engagement_mult = {
		value = 1	

		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}
	}	
	
	qualifications_growth_desc = "SHOPKEEPERS_QUALIFICATIONS_DESC"
	qualifications = {
		# baseline: ( wealth - 5 ) / 2, norm 10 for Clerks with Wealth 15
		add = {
			value = wealth
			subtract = 5
			min = 0
			desc = "QUALIFICATIONS_WEALTH_FACTOR"
		}
		if = {
			limit = {
				is_pop_type = clerks
			}
			multiply = {
				value = 5
				desc = "QUALIFICATIONS_FAVORED_TYPE"
			}
		}
		if = {
			limit = {
				is_pop_type = farmers
			}
			multiply = {
				value = 4
				desc = "QUALIFICATIONS_FAVORED_TYPE"
			}
		}
		if = {
			limit = { 
				is_peasant_under_serfdom = yes 
			}
			multiply = {
				desc = "QUALIFICATIONS_PEASANTS_UNDER_SERFDOM"
				value = 0
			}
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}

﻿slaves = {
	texture = "gfx/interface/icons/pops_icons/slaves.dds"
	color = hsv{ 0.11 0.21 0.68 }
	strata = poor
	is_slave = yes
	unemployment = yes
	can_always_hire = yes
	start_quality_of_life = 1
	working_adult_ratio = 0.5
	wage_weight = 0
	dependent_wage = 0.0	# per year
	
	# 0% - 80% politically engaged
	# Slaves cannot join IGs but can support movements to end slavery etc
	political_engagement_base = 0.0
	political_engagement_literacy_factor = 0.8	
	
	political_engagement_mult = {
		value = 1		
		
		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = define:NPortrait|GRACEFUL_AGING_END
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}
﻿soldiers = {
	texture = "gfx/interface/icons/pops_icons/soldiers.dds"
	color = hsv{ 0.8 0.20 0.56 }
	strata = poor
	start_quality_of_life = 7
	can_always_hire = yes
	wage_weight = 1.5
	paid_private_wage = yes
	dependent_wage = 0.5	# per year
	unemployment = yes
	
	# 20% - 80% politically engaged	
	political_engagement_base = 0.20
	political_engagement_literacy_factor = 0.6
	
	political_engagement_mult = {
		value = 1
		
		add = {
			desc = "POP_STARVATION"	
			
			if = {
				limit = { 
					standard_of_living < 5
				}
				value = 1
			}		
		}		

		multiply = {
			desc = "HAS_POLITICAL_AGITATION"	
			value = 1.0
			
			if = {
				limit = { 
					owner = {
						has_technology_researched = political_agitation
					}
				}
				value = 1.5
			}		
		}		
	}
	
	portrait_age = {
		integer_range = {
			min = define:NPortrait|GRACEFUL_AGING_START
			max = 40
		}
	}
	portrait_pose = { value = 0 }			
	portrait_is_female = { always = yes }
}

﻿﻿# Entries used in the Power Bloc CoA customization preview.
# The order defines the order in which they are listed.
#
# Format:
# filename = {
#     # How many colors options to show for this piece. Optional, will assume 0 if missing, where 0 means
#     # this is a textured asset that doesn't require custom colors.
#     colors = 3
#
#     # Which piece is this? Available: shield_pattern, shield_frame, center, top, side.
#     piece = center
# }

pb_center_00.dds = {
    colors = 1
    piece = center
}

pb_center_01.dds = {
    colors = 1
    piece = center
}

pb_center_02.dds = {
    colors = 1
    piece = center
}

pb_center_03.dds = {
    colors = 1
    piece = center
}

pb_center_04.dds = {
    colors = 1
    piece = center
}

pb_center_05.dds = {
    colors = 1
    piece = center
}

pb_center_06.dds = {
    colors = 1
    piece = center
}

pb_center_07.dds = {
    colors = 1
    piece = center
}

pb_center_08.dds = {
    colors = 1
    piece = center
}

pb_center_09.dds = {
    colors = 1
    piece = center
}

pb_center_10.dds = {
    colors = 1
    piece = center
}

pb_crescent_star_turkey.dds = {
    colors = 1
    piece = center
}

pb_eagle_doubleheaded.dds = {
    colors = 1
    piece = center
}

pb_bear.dds = {
    colors = 1
    piece = center
}

pb_iron_cross.dds = {
    colors = 1
    piece = center
}

pb_lion_passant_guardant.dds = {
    colors = 1
    piece = center
}

pb_center_11.dds = {
    colors = 1
    piece = center
}

pb_shield_pattern_00.dds = {
    colors = 2
    piece = shield_pattern
}

pb_shield_pattern_01.dds = {
    colors = 1
    piece = shield_pattern
}

pb_shield_pattern_02.dds = {
    colors = 2
    piece = shield_pattern
}

pb_shield_pattern_03.dds = {
    colors = 2
    piece = shield_pattern
}

pb_frame_00.dds = {
    piece = shield_frame
}

pb_frame_01.dds = {
    piece = shield_frame
}

pb_frame_02.dds = {
    piece = shield_frame
}

pb_frame_03.dds = {
    piece = shield_frame
}

pb_frame_04.dds = {
    piece = shield_frame
}

pb_side_00.dds = {
    piece = side
}

pb_side_01.dds = {
    piece = side
}

pb_side_02.dds = {
    piece = side
}

pb_side_03.dds = {
    piece = side
}

pb_side_04.dds = {
    piece = side
}

pb_side_05.dds = {
    piece = side
}

pb_side_06.dds = {
    piece = side
}

pb_top_00.dds = {
    piece = top
}

pb_top_01.dds = {
    piece = top
}

pb_top_02.dds = {
    piece = top
}

pb_top_03.dds = {
    piece = top
}

pb_top_04.dds = {
    piece = top
}

pb_top_05.dds = {
    piece = top
}

pb_top_06.dds = {
    piece = top
}

﻿identity_trade_league = {
	power_bloc_modifier = {
		power_bloc_customs_union_bool = yes
		power_bloc_mandate_progress_per_great_power_member_add = 10
		power_bloc_mandate_progress_per_major_power_member_add = 5
		power_bloc_mandate_progress_per_minor_power_member_add = 2
		power_bloc_mandate_progress_per_unrecognized_major_power_member_add = 2
		power_bloc_mandate_progress_per_unrecognized_regional_power_member_add = 1
		power_bloc_cohesion_per_member_add = -1
		power_bloc_invite_acceptance_great_power_add = -15
	}

	leader_modifier = {
		country_trade_route_quantity_mult = 0.1
	}
	
	non_leader_modifier = {
		country_convoy_contribution_to_market_owner_add = 0.2
	}

	can_leave = {
		OR = {
			is_power_bloc_leader = yes
			power_bloc = {
				leverage_advantage = {
					target = root
					value <= 30
				}
			}
		}
	}
	
	possible = {
		# NOT = { has_law = law_type:law_isolationism } # No longer needed since Isolationism is a blocker for forming any Power Bloc, but in case that changes, uncomment this
	}

	icon = "gfx/interface/icons/central_identity_pillars_icons/trade_league.dds"
	background = "gfx/interface/power_blocs/backgrounds/pb_background_generic.dds"

	mandate_progress = power_bloc_mandate_progress_by_rank
	
	on_created = { relations_hit_with_power_bloc_leaders = yes }
	
	cohesion = {
		add = {
			add = 0.15
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_BASE
		}

		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_leader.market.market_number_goods_shortages_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_leader.market.market_number_goods_shortages_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_leader.market.market_number_goods_shortages
			}
			multiply = -5
			desc = POWER_BLOC_COHESION_GOODS_SHORTAGES
		}

		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_total_leading_goods_producers_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_total_leading_goods_producers_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_total_leading_goods_producers
			}
			multiply = 3
			desc = POWER_BLOC_COHESION_LEADING_GOODS_PRODUCER
		}

		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "power_bloc_share_gdp_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "power_bloc_share_gdp_without(scope:without_country)"
			}
			else = {
				add = power_bloc_share_gdp
			}
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			multiply = 0.5
			desc = POWER_BLOC_COHESION_SHARE_GDP
		}
		
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_worst_leader_relations_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_worst_leader_relations_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_worst_leader_relations
			}
			divide = define:NDiplomacy|MIN_RELATIONS
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			multiply = -1
			max = 0
			desc = POWER_BLOC_COHESION_WORST_LEADER_RELATIONS
		}
		
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_worst_economic_dependence_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_worst_economic_dependence_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_worst_economic_dependence
			}
			add = -3.5
			divide = define:NDiplomacy|ECONOMIC_DEPENDENCE_MAX
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			multiply = 0.5
			desc = POWER_BLOC_COHESION_WORST_ECONOMIC_DEPENDENCE
		}
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				ig:ig_industrialists ?= { is_in_government = yes }
			}
			add = 100
		}		
		
		if = {
			limit = { has_law = law_type:law_free_trade }
			add = 100
		}
		
		if = {
			limit = {
				has_strategy = ai_strategy_economic_imperialism
			}
			multiply = 2.0
		}			
	}
}

identity_sovereign_empire = {
	power_bloc_modifier = {
		power_bloc_leader_can_make_subjects_bool = yes
		power_bloc_mandate_progress_per_great_power_member_add = 10
		power_bloc_mandate_progress_per_major_power_member_add = 5
		power_bloc_mandate_progress_per_minor_power_member_add = 2
		power_bloc_mandate_progress_per_unrecognized_major_power_member_add = 2
		power_bloc_mandate_progress_per_unrecognized_regional_power_member_add = 1
		power_bloc_invite_acceptance_great_power_add = -20
		power_bloc_invite_acceptance_major_power_add = -10
		power_bloc_invite_acceptance_unrecognized_major_power_add = -10
		power_bloc_invite_acceptance_add = -30
		power_bloc_cohesion_per_member_add = -3
	}

	leader_modifier = {
		country_liberty_desire_of_subjects_add = -0.05
	}

	non_leader_modifier = {
	}

	member_modifier = {	
	}
	
	possible = {
		has_law = law_type:law_monarchy
	}

	can_leave = {
		OR = {
			is_power_bloc_leader = yes
			power_bloc = {
				leverage_advantage = {
					target = root
					value <= 30
				}
			}
		}
	}

	icon = "gfx/interface/icons/central_identity_pillars_icons/sovereign_empire.dds"
	background = "gfx/interface/power_blocs/backgrounds/pb_background_generic.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	mandate_progress = power_bloc_mandate_progress_by_rank
	
	on_created = { relations_hit_with_power_bloc_leaders = yes }
	
	cohesion = {
		add = {
			add = 0.3
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_BASE
		}
	
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "power_bloc_share_prestige_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "power_bloc_share_prestige_without(scope:without_country)"
			}
			else = {
				add = power_bloc_share_prestige
			}
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_SHARE_PRESTIGE
		}
		
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_worst_leader_relations_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_worst_leader_relations_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_worst_leader_relations
			}
			divide = define:NDiplomacy|MIN_RELATIONS
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			multiply = -1
			max = 0
			desc = POWER_BLOC_COHESION_WORST_LEADER_RELATIONS
		}
		
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_worst_liberty_desire_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_worst_liberty_desire_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_worst_liberty_desire
			}
			divide = 200 # liberty desire max value * 2
			multiply = -1
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_WORST_LIBERTY_DESIRE
		}
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				ig:ig_landowners ?= { is_in_government = yes }
			}
			add = 100
		}		
		
		add = {
			value = num_subjects
			multiply = 25
			max = 250
		}
		
		if = {
			limit = {
				has_strategy = ai_strategy_colonial_expansion
			}
			
			multiply = 2.0
		}		
	}
}

identity_ideological_union = {
	power_bloc_modifier = {
		power_bloc_leader_can_regime_change_bool = yes
		power_bloc_mandate_progress_per_great_power_member_add = 10
		power_bloc_mandate_progress_per_major_power_member_add = 5
		power_bloc_mandate_progress_per_minor_power_member_add = 2
		power_bloc_mandate_progress_per_unrecognized_major_power_member_add = 2
		power_bloc_mandate_progress_per_unrecognized_regional_power_member_add = 1
		power_bloc_cohesion_per_member_add = -2
	}

	leader_modifier = {
		country_law_enactment_time_mult = -0.1
		country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool = yes
		country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool = yes
	}

	non_leader_modifier = {
		country_leader_has_law_enactment_success_mult = 0.3
	}

	member_modifier = {
		
	}

	can_leave = {
		OR = {
			is_power_bloc_leader = yes
			power_bloc = {
				leverage_advantage = {
					target = root
					value <= 30
				}
			}
		}
	}

	icon = "gfx/interface/icons/central_identity_pillars_icons/ideological_union.dds"
	background = "gfx/interface/power_blocs/backgrounds/pb_background_generic.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	mandate_progress = power_bloc_mandate_progress_by_rank
	
	on_created = { relations_hit_with_power_bloc_leaders = yes }

	cohesion = {
		add = {
			add = 0.3
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_BASE
		}
	
		add = {
			add = legitimacy
			divide = 100 # legitimacy max value
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			multiply = 0.7
			desc = POWER_BLOC_COHESION_LEGITIMACY
		}
		
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_worst_leader_relations_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_worst_leader_relations_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_worst_leader_relations
			}
			divide = define:NDiplomacy|MIN_RELATIONS
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			multiply = -1
			max = 0
			desc = POWER_BLOC_COHESION_WORST_LEADER_RELATIONS
		}
		
		if = {
		 	limit = { 
		 		exists = scope:with_country
		 		"scope:power_bloc.power_bloc_worst_progressiveness_difference_government_type_with(scope:with_country)" != 0
		 	}
		 	add = {
		 		add = "scope:power_bloc.power_bloc_worst_progressiveness_difference_government_type_with(scope:with_country)"
		 		divide = 200 # bad progressiveness difference is usually around 100
		 		multiply = -1
		 		multiply = define:NPowerBlocs|COHESION_TARGET_MAX
		 		desc = POWER_BLOC_COHESION_WORST_PROGRESSIVENESS_DIFFERENCE
		 	}	
		}
		else_if = {
		 	limit = {
		 		exists = scope:without_country
		 		"scope:power_bloc.power_bloc_worst_progressiveness_difference_government_type_without(scope:without_country)" != 0
		 	}
		 	add = {
		 		add = "scope:power_bloc.power_bloc_worst_progressiveness_difference_government_type_without(scope:without_country)"
		 		divide = 200 # bad progressiveness difference is usually around 100
		 		multiply = -1
		 		multiply = define:NPowerBlocs|COHESION_TARGET_MAX
		 		desc = POWER_BLOC_COHESION_WORST_PROGRESSIVENESS_DIFFERENCE
		 	}
		}
		else_if = {
		 	limit = { "scope:power_bloc.power_bloc_worst_progressiveness_difference_government_type" != 0 }
		 	add = {
				add = scope:power_bloc.power_bloc_worst_progressiveness_difference_government_type
				divide = 200 # bad progressiveness difference is usually around 100
				multiply = -1
				multiply = define:NPowerBlocs|COHESION_TARGET_MAX
				desc = POWER_BLOC_COHESION_WORST_PROGRESSIVENESS_DIFFERENCE
			}
		}
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				ig:ig_intelligentsia ?= { is_in_government = yes }
			}
			add = 100
		}		

		if = { # The forces of reaction
			limit = { 
				has_law = law_type:law_monarchy 
				OR = {
					has_law = law_type:law_autocracy
					has_law = law_type:law_oligarchy
				}
			}
			add = 100
		}		
		
		if = { # The forces of revolution
			limit = { 
				has_radical_leftist_government = yes
			}
			add = 200
		}

		if = {
			limit = {
				OR = {
					has_strategy = ai_strategy_maintain_power_balance
					has_strategy = ai_strategy_world_revolution
					has_strategy = ai_strategy_anti_imperialism
				}			
			}	
			multiply = 2.0
		}		
	}
}

identity_military_treaty_organization = {
	power_bloc_modifier = {
		power_bloc_leader_can_add_wargoal_bool = yes
		power_bloc_mandate_progress_per_great_power_member_add = 10
		power_bloc_mandate_progress_per_major_power_member_add = 5
		power_bloc_mandate_progress_per_minor_power_member_add = 2
		power_bloc_mandate_progress_per_unrecognized_major_power_member_add = 2
		power_bloc_mandate_progress_per_unrecognized_regional_power_member_add = 1
		power_bloc_invite_acceptance_great_power_add = -15
		power_bloc_cohesion_per_member_add = -2
	}

	leader_modifier = {
		country_prestige_from_army_power_projection_mult = 0.1
		country_prestige_from_navy_power_projection_mult = 0.1
	}

	non_leader_modifier = {
	}

	member_modifier = {
		building_training_rate_mult = 0.2
	}
	
	possible = {
		NOT = { has_law = law_type:law_national_militia }
	}	

	can_leave = {
		OR = {
			is_power_bloc_leader = yes
			power_bloc = {
				leverage_advantage = {
					target = root
					value <= 30
				}
			}
		}
	}

	icon = "gfx/interface/icons/central_identity_pillars_icons/military_treaty_organization.dds"
	background = "gfx/interface/power_blocs/backgrounds/pb_background_generic.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	mandate_progress = power_bloc_mandate_progress_by_rank
	
	on_created = { relations_hit_with_power_bloc_leaders = yes }
	
	cohesion = {
		add = {
			add = 0.3
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_BASE
		}
	
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "power_bloc_share_power_projection_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "power_bloc_share_power_projection_without(scope:without_country)"
			}
			else = {
				add = power_bloc_share_power_projection
			}
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_SHARE_POWER_PROJECTION
		}
		
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_worst_infamy_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_worst_infamy_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_worst_infamy
			}
			divide = define:NDiplomacy|INFAMY_THRESHOLD_PARIAH
			multiply = -1
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_WORST_INFAMY
		}
		
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_worst_leader_relations_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_worst_leader_relations_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_worst_leader_relations
			}
			divide = define:NDiplomacy|MIN_RELATIONS
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			multiply = -1
			max = 0
			desc = POWER_BLOC_COHESION_WORST_LEADER_RELATIONS
		}
		
		add = {
			scope:power_bloc = {
				every_power_bloc_member = {
					if = {
						limit = { has_law = law_type:law_national_militia }
						add = -0.05
					}
				}
			}
			if = {
				limit = { 
					exists = scope:with_country 
					scope:with_country ?= { has_law = law_type:law_national_militia }
				}
				add = -0.05
			}
			else_if = {
				limit = { 
					exists = scope:without_country 
					scope:without_country ?= { has_law = law_type:law_national_militia }
				}
				add = 0.05
			}
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_ARMY_MODEL_INCOMPATIBILITY
		}
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				has_law = law_type:law_professional_army
			}
			add = 100
		}

		if = {
			limit = {
				ig:ig_armed_forces ?= { is_in_government = yes }
			}
			add = 100
		}		
		
		if = {
			limit = {
				OR = {
					has_strategy = ai_strategy_territorial_expansion
					has_strategy = ai_strategy_armed_isolationism
				}			
			}	
			multiply = 2.0
		}			
	}
}

identity_religious = {
	power_bloc_modifier = {
		power_bloc_leader_can_force_state_religion_bool = yes
		power_bloc_mandate_progress_per_great_power_member_add = 10
		power_bloc_mandate_progress_per_major_power_member_add = 5
		power_bloc_mandate_progress_per_minor_power_member_add = 2
		power_bloc_mandate_progress_per_unrecognized_major_power_member_add = 2
		power_bloc_mandate_progress_per_unrecognized_regional_power_member_add = 1
		power_bloc_cohesion_per_member_add = -2
	}

	leader_modifier = {
		state_clergymen_investment_pool_efficiency_mult = 0.25
	}

	non_leader_modifier = {
	}
	
	possible = {
		OR = {
			has_law = law_type:law_state_religion
			has_law = law_type:law_freedom_of_conscience
		}
	}

	member_modifier = {
		state_conversion_mult = 0.33
		interest_group_ig_devout_pol_str_mult = 0.25
	}

	can_leave = {
		OR = {
			is_power_bloc_leader = yes
			power_bloc = {
				leverage_advantage = {
					target = root
					value <= 30
				}
			}
		}
	}

	icon = "gfx/interface/icons/central_identity_pillars_icons/religious.dds"
	background = "gfx/interface/power_blocs/backgrounds/pb_background_generic.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	mandate_progress = power_bloc_mandate_progress_by_rank
	
	on_created = { relations_hit_with_power_bloc_leaders = yes }
	
	cohesion = {
		add = {
			add = 0.3
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_BASE
		}
	
		add = {
			value = define:NPowerBlocs|COHESION_TARGET_MAX
			multiply = ig:ig_devout.ig_clout
			add = -10
			multiply = 4
			desc = POWER_BLOC_COHESION_DEVOUT_IG_CLOUT
		}

		if = {
			limit = {
				ig:ig_devout = {
					is_in_government = no
				}
			}
			add = {
				add = -15
				desc = POWER_BLOC_COHESION_DEVOUT_IG_NOT_IN_GOVERNMENT
			}	
		}
		
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_worst_leader_relations_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_worst_leader_relations_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_worst_leader_relations
			}
			divide = define:NDiplomacy|MIN_RELATIONS
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			multiply = -1
			max = 0
			desc = POWER_BLOC_COHESION_WORST_LEADER_RELATIONS
		}
		
		add = {
			if = {
				limit = { exists = scope:with_country }
				add = "scope:power_bloc.power_bloc_worst_leader_religion_population_fraction_with(scope:with_country)"
			}
			else_if = {
				limit = { exists = scope:without_country }
				add = "scope:power_bloc.power_bloc_worst_leader_religion_population_fraction_without(scope:without_country)"
			}
			else = {
				add = scope:power_bloc.power_bloc_worst_leader_religion_population_fraction
			}
			add = -0.5
			multiply = 0.5
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_LEADER_RELIGION_WORST_POPULATION_SHARE
		}
		
		add = {
			scope:power_bloc = {
				every_power_bloc_member = {
					if = {
						limit = { 
							OR = {
								has_law = law_type:law_total_separation
								has_law = law_type:law_state_atheism
							}
						}
						add = -0.1
					}
				}
			}
			if = {
				limit = { 
					exists = scope:with_country 
					scope:with_country ?= {
						OR = {
							has_law = law_type:law_total_separation
							has_law = law_type:law_state_atheism
						}
					}
				}
				add = -0.1
			}
			else_if = {
				limit = { 
					exists = scope:without_country 
					scope:without_country ?= {
						OR = {
							has_law = law_type:law_total_separation
							has_law = law_type:law_state_atheism
						}
					}
				}
				add = 0.1
			}
			multiply = define:NPowerBlocs|COHESION_TARGET_MAX
			desc = POWER_BLOC_COHESION_CHURCH_AND_STATE_INCOMPATIBILITY
		}
	}
	
	ai_weight = {
		value = 100

		if = {
			limit = {
				ig:ig_devout ?= { is_in_government = yes }
			}
			add = 100
		}			
		
		if = {
			limit = {
				has_law = law_type:law_state_religion
			}
			multiply = 1.5
		}
		
		if = {
			limit = {
				religion = {
					NOR = { # Non-abrahamic religions probably wouldn't go for this type of bloc
						has_discrimination_trait = christian
						has_discrimination_trait = muslim
						has_discrimination_trait = jewish
					}					
				}			
			}
			multiply = 0.1		
		}		
	}
}

﻿pb_pattern_01 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_01.dds"
}

pb_pattern_02 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_02.dds"
}

pb_pattern_03 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_03.dds"
}

pb_pattern_04 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_04.dds"
}

pb_pattern_05 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_05.dds"
}

pb_pattern_06 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_06.dds"
}

pb_pattern_07 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_07.dds"
}

pb_pattern_08 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_08.dds"
}

pb_pattern_09 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_09.dds"
}

pb_pattern_10 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_10.dds"
}

pb_pattern_11 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_11.dds"
}

pb_pattern_12 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_12.dds"
}

pb_pattern_13 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_13.dds"
}

pb_pattern_14 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_14.dds"
}

pb_pattern_15 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_15.dds"
}

pb_pattern_16 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_16.dds"
}

pb_pattern_17 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_17.dds"
}

pb_pattern_18 = {
    texture = "gfx/map/map_painting/powerblocs_map_patterns/pb_pattern_18.dds"
}

﻿##### generic and near-generic power bloc names ####

great_alliance = {
	trigger = {
		always = yes
	}
}

grand_coalition = {
	trigger = {
		always = yes
	}
}

united_front = {
	trigger = {
		NOT = { scope:selected_identity = identity:identity_religious }
	}
}

joint_front = {
	trigger = {
		NOT = { scope:selected_identity = identity:identity_religious }
	}
}

imperial_circle = {
	trigger = {
		coa_monarchy_trigger = yes
	}
}

##### Power Bloc identities #####

### sovereign empire ###

imperial_conference = {
	trigger = {
		scope:selected_identity = identity:identity_sovereign_empire
	}
}

mitteleuropa = {
	trigger = {
		scope:selected_identity = identity:identity_sovereign_empire
		any_primary_culture = {
			has_discrimination_trait = german_speaking
		}
	}
}

italian_empire = {
	trigger = {
		scope:selected_identity = identity:identity_sovereign_empire
		any_primary_culture = {
			has_discrimination_trait = italophone
		}
	}
}

russian_empire = {
	trigger = {
		scope:selected_identity = identity:identity_sovereign_empire
		c:RUS ?= this
	}
}

stormakt = {
	trigger = {
		scope:selected_identity = identity:identity_sovereign_empire
		c:SWE ?= this
	}
}

iran-e_bozorg = {
	trigger = {
		scope:selected_identity = identity:identity_sovereign_empire
		c:PER ?= this
	}
}

golden_circle = {
	trigger = {
		scope:selected_identity = identity:identity_sovereign_empire
		OR = {
			c:CSA ?= this
			AND = {
				c:USA ?= this
				NOT = { 
					has_law = law_type:law_slavery_banned 
				}
				NOR = {
					has_journal_entry = je_acw_countdown
					has_journal_entry = je_acw_war
				}
			}
		}
	}
}

da_zhongguo = { # greater china
	trigger = {
		scope:selected_identity = identity:identity_sovereign_empire
		OR = {
			c:CHI ?= this
			any_primary_culture = {
				has_discrimination_trait = han_chinese
			}
		}
	}
}

international_association = {
	trigger = {
		scope:selected_identity = identity:identity_sovereign_empire
		OR = {
			c:BEL ?= this
			any_scope_state = {
				OR = {
					state_region = s:STATE_CONGO_ORIENTALE
					state_region = s:STATE_KATANGA
					state_region = s:STATE_BAS_CONGO
					state_region = s:STATE_EQUATEUR
					state_region = s:STATE_KASAI
				}
			}
		}
	}
}

### religious ###

virtuous_league = {
	trigger = {
	    scope:selected_identity = identity:identity_religious
	}
}

coalition_of_innocents = {
	trigger = {
	    scope:selected_identity = identity:identity_religious
	}
}

holy_league = {
	trigger = {
        scope:selected_identity = identity:identity_religious
        country_has_state_religion = rel:catholic
	}
}

evangelical_league = {
	trigger = {
        scope:selected_identity = identity:identity_religious
        country_has_state_religion = rel:protestant
		any_primary_culture = {
			has_discrimination_trait = german_speaking
		}
	}
}

holy_alliance = {
	trigger = {
		OR = {
	        scope:selected_identity = identity:identity_religious
	        AND = {
		        coa_undemocratic_monarchy_trigger = yes
		        scope:selected_identity = identity:identity_ideological_union
		    }
	    }
        religion = {
        	has_discrimination_trait = christian
        }
	}
}

great_crusade = {
	trigger = {
	    scope:selected_identity = identity:identity_religious
        religion = {
        	has_discrimination_trait = christian
        }
    }
}

dar_al_islam = {
	trigger = {
	    scope:selected_identity = identity:identity_religious
        religion = {
        	has_discrimination_trait = muslim
        }
	}
}

league_of_reason = {
	trigger = {
        scope:selected_identity = identity:identity_religious
        country_has_state_religion = rel:atheist
	}
}

league_of_the_faithful = {
	trigger = {
	    scope:selected_identity = identity:identity_religious
	    NOT = { country_has_state_religion = rel:atheist }
	}
}

league_of_harmony = { 
	trigger = {
		scope:selected_identity = identity:identity_religious
		OR = {
			c:CHI ?= this
			any_primary_culture = {
				has_discrimination_trait = han_chinese
			}
			religion = { has_discrimination_trait = eastern }
			religion = { has_discrimination_trait = buddhist }
		}
	}
}

solemn_league = { # Solemn League and Covenant
	trigger = {
		scope:selected_identity = identity:identity_religious
		OR = {
			c:GBR ?= this
			c:SCO ?= this
			c:ENG ?= this
		}
	}
}

sons_of_saint_louis = {
	trigger = {
		OR = {
			scope:selected_identity = identity:identity_religious
			AND = {
				scope:selected_identity = identity:identity_ideological_union
				coa_undemocratic_monarchy_trigger = yes
			}
		}
		c:FRA ?= this
	}
}

### political union ###

mutual_treaty_organization = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	}
}

league_of_allied_states = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	}
}

congress_of_states = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	}
}

democratic_ring = {
	trigger = {
		coa_republic_trigger = yes
		coa_autocracy_trigger = no
		scope:selected_identity = identity:identity_ideological_union
	}
}

league_of_versailles = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    OR = {
	    	any_scope_state = { state_region = s:STATE_ILE_DE_FRANCE }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_ILE_DE_FRANCE }
	    	}
	    }
	}
}

london_conference = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    OR = {
	    	any_scope_state = { state_region = s:STATE_HOME_COUNTIES }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_HOME_COUNTIES }
	    	}
	    }
	}
}

congress_of_berlin = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    OR = {
	    	any_scope_state = { state_region = s:STATE_BRANDENBURG }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_BRANDENBURG }
	    	}
	    }
	}
}

congress_of_vienna = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    OR = {
	    	any_scope_state = { state_region = s:STATE_AUSTRIA }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_AUSTRIA }
	    	}
	    }
	}
}

pact_of_rome = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    OR = {
	    	any_scope_state = { state_region = s:STATE_LAZIO }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_LAZIO }
	    	}
	    }
	}
}

convention_of_naples = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    OR = {
	    	any_scope_state = { state_region = s:STATE_CAMPANIA }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_CAMPANIA }
	    	}
	    }
	}
}

washington_convention = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    OR = {
	    	any_scope_state = { state_region = s:STATE_DISTRICT_OF_COLUMBIA }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_DISTRICT_OF_COLUMBIA }
	    	}
	    }
	}
}

beijing_convention = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    OR = {
	    	any_scope_state = { state_region = s:STATE_BEIJING }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_BEIJING }
	    	}
	    }
	}
}

pact_of_veracruz = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    OR = {
	    	any_scope_state = { state_region = s:STATE_VERACRUZ }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_VERACRUZ }
	    	}
	    }
	}
}

pact_of_calcutta = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    OR = {
	    	any_scope_state = { state_region = s:STATE_SOUTH_BENGAL }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_SOUTH_BENGAL }
	    	}
	    }
	}
}

seneca_falls_coalition = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union

	    has_law = law_type:law_womens_suffrage

	    OR = {
	    	any_scope_state = { state_region = s:STATE_NEW_YORK }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_NEW_YORK }
	    	}
	    }
	}
}

self_rule_league = {
	trigger = {
	    scope:selected_identity = identity:identity_ideological_union
	    NOT = {
	    	any_subject_or_below = {
	    		always = yes
	    	}
	    }
	}
}

### military treaty organization ###

central_powers = {
	trigger = {
	    scope:selected_identity = identity:identity_military_treaty_organization
	    OR = {
	    	c:GER ?= this
	    	c:AUS ?= this
	    	c:TUR ?= this
	    	c:ITA ?= this
	    }
	    any_scope_ally = {
	    	count >= 2
	    	OR = {
	    		c:TUR ?= this
	    		c:AUS ?= this
	    		c:GER ?= this
	    		c:ITA ?= this
	    	}
	    }
	}
}

entente = {
	trigger = {
	    scope:selected_identity = identity:identity_military_treaty_organization
	    c:FRA ?= this
	    any_scope_ally = {
	    	count >= 2
	    	OR = {
		    	c:GBR ?= this
		    	c:RUS ?= this
		    	c:ITA ?= this
		    	c:USA ?= this
		    	c:JAP ?= this
	    	}
	    }
	}
}

unholy_alliance = {
	trigger = {
	    scope:selected_identity = identity:identity_military_treaty_organization

	    OR = {
	    	AND = {
	    		c:FRA ?= this
	    		any_scope_ally = { 
	    			c:GER ?= this 
	    			is_subject = no
	    		}
	    	}
	    	AND = {
	    		c:GER ?= this
	    		any_scope_ally = { 
	    			c:FRA ?= this 
	    			is_subject = no
	    		}
	    	}
	    }
	}
}

pact_of_pearl_harbor = {
	trigger = {
		scope:selected_identity = identity:identity_military_treaty_organization
	    OR = {
	    	any_scope_state = { state_region = s:STATE_HAWAIIAN_ISLANDS }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_HAWAIIAN_ISLANDS }
	    	}
	    }
	}
}

waterloo_pact = {
	trigger = {
		scope:selected_identity = identity:identity_military_treaty_organization
	    OR = {
	    	c:BEL ?= this
	    	any_scope_ally = {
	    		c:BEL ?= this
	    	}
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_WALLONIA }
	    	}
	    }
		any_rival_country = {
			c:FRA ?= this
		}
	}
}

### trade league ###

association_of_syndicates = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
	}
}

free_commerce_committee = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
	}
}

league_of_preferential_states = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
	}
}

steuerverein = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		OR = {
			c:HAN ?=this
			was_formed_from = HAN
		}
	}
}

handelsverein = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		OR = {
			c:SAX ?= this
			was_formed_from = SAX
		}
	}
}

ouchy_convention = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		OR = {
			c:NET ?= this
			c:BEL ?= this
			c:LUX ?= this
			c:WAL ?= this
			c:FLA ?= this
		}
	}
}

imperial_preference = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		has_law = law_type:law_monarchy
		c:GBR ?=this
	}
}

bolivarian_group = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		any_primary_culture = {
			OR = {
				this = cu:north_andean
				this = cu:south_andean
				this = cu:peruvian
				this = cu:ecuadorian
				this = cu:bolivian
				this = cu:venezuelan
				this = cu:colombian
			}
		}
	}
}

hanseatic_league = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		OR = {
			c:HAM ?= this
			was_formed_from = HAM
			c:LUB ?= this
			was_formed_from = LUB
			c:BRE ?= this
			was_formed_from = BRE
			c:DZG ?= this
			was_formed_from = DZG
		}
	}
}

stato_da_mar = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		any_primary_culture = {
			has_discrimination_trait = italophone
		}
	}
}

league_of_trieste = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
	    OR = {
	    	any_scope_state = { state_region = s:STATE_ISTRIA }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_ISTRIA }
	    	}
	    }
	}
}

wall_street_pact = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
	    OR = {
	    	any_scope_state = { state_region = s:STATE_NEW_YORK }
	    	c:USA ?= this
	    }
	}
}

new_orleans_league = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		c:USA != this
	    OR = {
	    	any_scope_state = { state_region = s:STATE_LOUISIANA }
	    	c:LOU ?= this
	    }
	}
}

galveston_league = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		c:TEX ?= this
	}
}

threadneedle_league = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		any_scope_state = { state_region = s:STATE_HOME_COUNTIES }
	}
}

bloc_brogniart = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
		c:FRA ?= this
	}
}

singapore_pact = {
	trigger = {
		scope:selected_identity = identity:identity_trade_league
	    OR = {
	    	any_scope_state = { state_region = s:STATE_MALAYA }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_MALAYA }
	    	}
	    }
	}
}

##### IT IS TIME FOR [sniff] IDEOLOGY #####

### Fascist bloc names ###
pact_of_friendship = {
	trigger = {
		OR = {
			scope:selected_identity = identity:identity_military_treaty_organization
			scope:selected_identity = identity:identity_ideological_union
		}
		coa_fascist_trigger = yes
	}
}

anti_communist_agreement = {
	trigger = {
		OR = {
			scope:selected_identity = identity:identity_military_treaty_organization
			scope:selected_identity = identity:identity_ideological_union
		}
		coa_fascist_trigger = yes
		any_rival_country = {
			coa_communist_trigger = yes
		}
	}
}

### republican bloc names ###

moral_international = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		coa_republic_trigger = yes
		NOT = { country_has_state_religion = rel:atheist }
	}
}

anti_monarchist_congress = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		coa_republic_trigger = yes
		NOT = {
			any_scope_ally = {
				coa_monarchy_trigger = yes
			}
		}
	}
}

league_of_liberty = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		coa_republic_trigger = yes
		country_has_voting_franchise = yes
	}
}

democratic_pact = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		coa_republic_trigger = yes
		country_has_voting_franchise = yes
	}
}

### Communist/Council Republic bloc names ###
communist_international = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		coa_communist_trigger = yes
	}
}

socialist_conference = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		coa_communist_trigger = yes
	}
}

socialist_international = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		coa_communist_trigger = yes
		NOT = { has_law = law_type:law_autocracy }
	}
}

### Either Communist or Anarchist ###

workingmens_association = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		OR = {
			coa_anarchy_trigger = yes
			coa_communist_trigger = yes
		}
	}
}

workingmens_international = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		OR = {
			coa_anarchy_trigger = yes
			coa_communist_trigger = yes
		}
	}
}

international_committee = {
	trigger = {
		OR = {
			scope:selected_identity = identity:identity_military_treaty_organization
			scope:selected_identity = identity:identity_ideological_union
		}
		OR = {
			coa_anarchy_trigger = yes
			coa_communist_trigger = yes
		}
	}
}

international_secretariat = {
	trigger = {
		OR = {
			scope:selected_identity = identity:identity_military_treaty_organization
			scope:selected_identity = identity:identity_ideological_union
		}
		OR = {
			coa_anarchy_trigger = yes
			coa_communist_trigger = yes
		}
	}
}

### Anarchist bloc names. don't think too hard about this one ###
anarchist_international = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		coa_anarchy_trigger = yes
	}
}

anarchist_congress = {
	trigger = {
		OR = {
			scope:selected_identity = identity:identity_military_treaty_organization
			scope:selected_identity = identity:identity_ideological_union
		}
		coa_anarchy_trigger = yes
	}
}

anarchist_conference = {
	trigger = {
		OR = {
			scope:selected_identity = identity:identity_military_treaty_organization
			scope:selected_identity = identity:identity_ideological_union
		}
		coa_anarchy_trigger = yes
	}
}

meeting_of_anarchists = {
	trigger = {
		scope:selected_identity = identity:identity_ideological_union
		coa_anarchy_trigger = yes
	}
}

##### country-specific and misc bloc names #####

co_prosperity_sphere = {
	trigger = {
		OR = {
			scope:selected_identity = identity:identity_sovereign_empire
			scope:selected_identity = identity:identity_military_treaty_organization
			scope:selected_identity = identity:identity_ideological_union
		}
		coa_fascist_trigger = yes
		c:JAP ?= this
	}
}

contintental_system = {
	trigger = {
		OR = {
			scope:selected_identity = identity:identity_sovereign_empire
			scope:selected_identity = identity:identity_military_treaty_organization
			scope:selected_identity = identity:identity_trade_league
		}
		c:FRA ?= this
		ruler = {
			has_ideology = ideology:ideology_bonapartist
		}
		any_rival_country = {
			c:GBR ?= this
		}
	}
}

lone_star_league = {
	trigger = {
		c:TEX ?= this
	}
}

pan_african_union = {
	trigger = {
		any_scope_state = {
			is_capital = yes
			state_in_africa = yes
		}
	}
}

paris_convention = {
	trigger = {
	    OR = {
	    	any_scope_state = { state_region = s:STATE_ILE_DE_FRANCE }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_ILE_DE_FRANCE }
	    	}
	    }
	}
}

pact_of_the_straits = {
	trigger = {
	    OR = {
	    	any_scope_state = { state_region = s:STATE_EASTERN_THRACE }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_EASTERN_THRACE }
	    	}
	    }
	}
}

amazon_pact = {
	trigger = {
	    OR = {
	    	any_scope_state = { state_region = s:STATE_PARA }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_PARA }
	    	}
	    	any_scope_state = { state_region = s:STATE_AMAZONAS }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_AMAZONAS }
	    	}
	    	any_scope_state = { state_region = s:STATE_GUAYANA }
	    	any_scope_ally = {
	    		any_scope_state = { state_region = s:STATE_GUAYANA }
	    	}
	    }
	}
}

latin_bloc = {
	trigger = {
		OR = {
			c:FRA ?= this
			c:ITA ?= this
			c:SPA ?= this
			c:POR ?= this
			c:ROM ?= this
		}
		any_scope_ally = {
			OR = {
				c:FRA ?= this
				c:ITA ?= this
				c:SPA ?= this
				c:POR ?= this
				c:ROM ?= this
			}
		}
	}
}

maritime_union = {
	trigger = {
		OR = {
			c:NEN ?= this
			c:NBS ?= this
			c:NVS ?= this
			c:NEW ?= this
		}
	}
}

league_of_bolivar = {
	trigger = {
		NOT = { scope:selected_identity = identity:identity_religious }
		any_primary_culture = {
			OR = {
				this = cu:north_andean
				this = cu:south_andean
				this = cu:peruvian
				this = cu:ecuadorian
				this = cu:bolivian
				this = cu:venezuelan
				this = cu:colombian
			}
		}
	}
}

non_aligned_conference = {
	trigger = {
		NOR = { 
			scope:selected_identity = identity:identity_religious 
			scope:selected_identity = identity:identity_sovereign_empire
		}
		country_rank < rank_value:great_power
		NOT = {
			any_scope_ally = {
				country_rank = rank_value:great_power
			}
		}
	}
}

sons_of_saint_stephen = {
	trigger = {
		c:HUN ?= this
		NAND = {
			scope:selected_identity = identity:identity_religious
			country_has_state_religion = rel:atheist
		}
	}
}

sol_de_mayo_league = {
	trigger = {
		OR = {
			c:ARG ?= this
			was_formed_from = ARG
			c:URU ?= this
			was_formed_from = URU
		}
	}
}

sublime_alliance = {
	trigger = {
		has_law = law_type:law_monarchy
		c:TUR ?= this
	}
}

#### hmm ####

organization_of_free_nations = {
	trigger = {
		OR = {
			scope:selected_identity = identity:identity_ideological_union
			scope:selected_identity = identity:identity_military_treaty_organization
		}
		country_has_voting_franchise = yes
		any_rival_country = {
			coa_fascist_trigger = yes
		}
	}
}

﻿### See power_bloc_principle_groups for grouping, primary groups for identities etc.

### CONSTRUCTION

principle_construction_1 = {
	icon = "gfx/interface/icons/principles_icons/construction.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# Members get a +10% Construction Efficiency modifier
		state_construction_mult = 0.1
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				ig:ig_industrialists ?= { is_in_government = yes }
			}
			add = 100
		}			
		
		if = {
			limit = { has_strategy = ai_strategy_industrial_expansion }
			multiply = 1.5
		}	
		else_if = {
			limit = { has_strategy = ai_strategy_resource_expansion }
			multiply = 1.25
		}	
	}
}

principle_construction_2 = {
	icon = "gfx/interface/icons/principles_icons/construction.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		
		state_construction_mult = 0.1
		
		# Members Construction Sectors cost less infrastructure
		building_group_bg_construction_infrastructure_usage_mult = -0.75
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}	
}

principle_construction_3 = {
	icon  = "gfx/interface/icons/principles_icons/construction.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		
		state_construction_mult = 0.1
		building_group_bg_construction_infrastructure_usage_mult = -0.75
		
		# Members can form Construction type Companies unlock triggers in the company
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}	
}

### INTERNAL TRADE

principle_internal_trade_1 = {
	icon = "gfx/interface/icons/principles_icons/internal_trade.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"
	
	member_modifier = {
		# Members get a bonus to Company throughput
		country_company_throughput_bonus_add = 0.1
		# More convoy going to the market owner, effect scaling upwards with principle levels
		country_convoy_contribution_to_market_owner_add = 0.2
	}
	
	ai_weight = {
		value = 200 # Good for trade leagues to have
			
		if = {
			limit = { 
				OR = {
					has_law = law_type:law_mercantilism 
					has_law = law_type:law_command_economy
				}
			}
			add = 100
		}	

		if = {
			limit = { 
				power_bloc ?= { has_principle_group = principle_group:principle_group_external_trade }
			}
			multiply = 0.5
		}
	}	
}

principle_internal_trade_2 = {
	icon = "gfx/interface/icons/principles_icons/internal_trade.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		country_company_throughput_bonus_add = 0.1
		country_convoy_contribution_to_market_owner_add = 0.3
	
		# Members get increased tariffs from countries outside the Power Bloc and infrastructure
		tariff_import_outside_power_bloc_mult = 0.2
		tariff_export_outside_power_bloc_mult = 0.2
		state_infrastructure_mult = 0.1
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}	
}

principle_internal_trade_3 = {
	icon = "gfx/interface/icons/principles_icons/internal_trade.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		country_company_throughput_bonus_add = 0.1
		country_convoy_contribution_to_market_owner_add = 0.4
		tariff_import_outside_power_bloc_mult = 0.2
		tariff_export_outside_power_bloc_mult = 0.2
		state_infrastructure_mult = 0.1
		
		# Cheaper port connections
		country_port_connection_cost_mult = -0.25
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### MARKET UNIFICATION

principle_market_unification_1 = {
	icon = "gfx/interface/icons/principles_icons/market_unification.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"
	
	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# Members get a bonus to company throughput
		country_company_throughput_bonus_add = 0.1
	}

	power_bloc_modifier = {
		# Members cannot enable Embargos with each other
		power_bloc_disallow_embargo_bool = yes
	}
	
	ai_weight = {
		value = 200 # Generally a good group for a PB to have
		
		if = {
			limit = { has_strategy = ai_strategy_economic_imperialism }
			multiply = 2.0
		}
	}
}

principle_market_unification_2 = {
	icon = "gfx/interface/icons/principles_icons/market_unification.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		country_company_throughput_bonus_add = 0.1
		
		# Members get increased tariffs from countries outside the Power Bloc and infrastructure
		tariff_import_outside_power_bloc_mult = 0.2
		tariff_export_outside_power_bloc_mult = 0.2
		state_infrastructure_mult = 0.1
	}

	power_bloc_modifier = {
		# Members cannot enable Embargos with each other
		power_bloc_disallow_embargo_bool = yes
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_market_unification_3 = {
	icon = "gfx/interface/icons/principles_icons/market_unification.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		country_company_throughput_bonus_add = 0.1
		tariff_import_outside_power_bloc_mult = 0.2
		tariff_export_outside_power_bloc_mult = 0.2
		state_infrastructure_mult = 0.1
		country_convoy_contribution_to_market_owner_add = 0.4
	}

	power_bloc_modifier = {
		# Members are permanently part of the same Customs Union
		power_bloc_customs_union_bool = yes
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}


### SOVEREIGN EMPIRE
### Vassal Subjects

principle_vassalization_1 = {
	icon = "gfx/interface/icons/principles_icons/vassals_subjects.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"
	
	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# Each subject increases authority
		country_authority_per_subject_add = 25
	}
	
	ai_weight = {
		value = 100
		
		add = {
			value = num_subjects
			multiply = 50
			max = 500
		}

		if = {
			limit = {
				power_bloc ?= { NOT = { has_identity = identity:identity_sovereign_empire } } 				
			}
			multiply = 0.5
		}		
	}
}

principle_vassalization_2 = {
	icon = "gfx/interface/icons/principles_icons/vassals_subjects.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"
	
	member_modifier = {
		# Modifiers from previous level(s)
		country_authority_per_subject_add = 25
		
		# Subjects pay more to overlord
		country_subject_income_transfer_mult = 0.25
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_vassalization_3 = {
	icon = "gfx/interface/icons/principles_icons/vassals_subjects.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		country_authority_per_subject_add = 25
		country_subject_income_transfer_mult = 0.25
		
		# Can use decrees on subjects
		country_allow_enacting_decrees_in_subject_bool = yes
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### RESEARCH CONGLOMERATE

principle_advanced_research_1 = {
	icon = "gfx/interface/icons/principles_icons/advanced_research.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		country_institution_size_change_speed_institution_schools_mult = 0.25
		country_institution_cost_institution_schools_mult = -0.1
		country_disallow_law_no_schools_bool = yes
	}

	leader_modifier = {
		country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = yes
	}

	institution = institution_schools
	institution_modifier = {
		# School institution gives more tech spread
		country_tech_spread_mult = 0.05 
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				ig:ig_intelligentsia ?= { is_in_government = yes }
			}
			add = 100
		}			

		if = {
			limit = { has_strategy = ai_strategy_progressive_agenda }
			multiply = 1.5
		}
	}
}

principle_advanced_research_2 = {
	icon = "gfx/interface/icons/principles_icons/advanced_research.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"
	
	member_modifier = {
		country_institution_size_change_speed_institution_schools_mult = 0.4
		country_institution_cost_institution_schools_mult = -0.25
		country_disallow_law_no_schools_bool = yes
	}

	leader_modifier = {
		country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = yes
	}

	institution = institution_schools
	institution_modifier = {
		# School institution gives more tech spread
		country_tech_spread_mult = 0.05

		# School isntitution reduces ahead of time research penalty
		country_ahead_of_time_research_penalty_mult = -0.05
	}

	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_advanced_research_3 = {
	icon = "gfx/interface/icons/principles_icons/advanced_research.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"

	member_modifier = {
		country_institution_size_change_speed_institution_schools_mult = 0.5
		country_institution_cost_institution_schools_mult = -0.5
		country_disallow_law_no_schools_bool = yes
	}

	leader_modifier = {
		country_can_impose_same_lawgroup_education_system_in_power_bloc_bool = yes
	}

	institution = institution_schools
	institution_modifier = {
		# School institution gives more tech spread
		country_tech_spread_mult = 0.05

		# School isntitution reduces ahead of time research penalty
		country_ahead_of_time_research_penalty_mult = -0.05

		# Increase Country max innovation
		country_weekly_innovation_max_add = 10
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}	
}

### DEFENSIVE COOPERATION

principle_defensive_cooperation_1 = {
	icon = "gfx/interface/icons/principles_icons/defensive_coorperation.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	power_bloc_modifier = {
		# Members cannot start wars amongst each other
		power_bloc_disallow_war_bool = yes
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				OR = {
					has_strategy = ai_strategy_socialism_in_one_country
					has_strategy = ai_strategy_armed_isolationism
				}	
			}
			multiply = 1.5
		}
		
		if = {
			limit = { 
				power_bloc ?= { has_principle_group = principle_group:principle_group_aggressive_coordination }			
			}
			multiply = 0.5
		}

		if = {
			limit = {
				power_bloc ?= { NOT = { has_identity = identity:identity_military_treaty_organization } } 				
			}
			multiply = 0.5
		}		
	}
}

principle_defensive_cooperation_2 = {
	icon = "gfx/interface/icons/principles_icons/defensive_coorperation.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	power_bloc_modifier = {
		# Modifiers from previous level(s)
		power_bloc_disallow_war_bool = yes
		
		# Swaying members to join your side costs 50% less maneuvers if the inviting country is on the target's side
		power_bloc_target_sway_cost_mult = -0.5
	}
	
	leader_modifier = {
		# Allows leader to impose their own law onto member countries in the army_model law group
		country_can_impose_same_lawgroup_army_model_in_power_bloc_bool = yes
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_defensive_cooperation_3 = {
	icon = "gfx/interface/icons/principles_icons/defensive_coorperation.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"

	member_modifier = {
		# Countries forced to join defensive plays against members
		country_join_power_bloc_member_in_defensive_plays_bool = yes
	}

	power_bloc_modifier = {
		# Modifiers from previous level(s)
		power_bloc_disallow_war_bool = yes
		power_bloc_target_sway_cost_mult = -0.5
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### AGGRESSIVE COORDINATION

principle_aggressive_coordination_1 = {
	icon = "gfx/interface/icons/principles_icons/aggressive_coordination.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"
	
	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# Reduces maneuver cost for picking wargoals during Diplomatic Play
		country_initiator_war_goal_maneuver_cost_mult = -0.3
	}
	
	ai_weight = {
		value = 100	
		
		if = {
			limit = {
				ig:ig_armed_forces ?= { is_in_government = yes }
			}
			add = 100
		}
		
		if = {
			limit = {
				OR = {
					has_strategy = ai_strategy_territorial_expansion
					has_strategy = ai_strategy_world_revolution
				}	
			}
			multiply = 1.5
		}		
		
		if = {
			limit = { 
				power_bloc ?= { has_principle_group = principle_group:principle_group_defensive_cooperation }				
			}
			multiply = 0.5
		}		
	}	
}

principle_aggressive_coordination_2 = {
	icon = "gfx/interface/icons/principles_icons/aggressive_coordination.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		country_initiator_war_goal_maneuver_cost_mult = -0.3
		
		# Reduces war exhaustion from casualties, propaganda!
		country_war_exhaustion_casualties_mult = -0.15
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}	
}

principle_aggressive_coordination_3 = {
	icon = "gfx/interface/icons/principles_icons/aggressive_coordination.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"

	power_bloc_modifier = {	
		# Reduces cohesion
		power_bloc_cohesion_add = -10
	}
	
	member_modifier = {
		# Modifiers from previous level(s)
		country_initiator_war_goal_maneuver_cost_mult = -0.3
		country_war_exhaustion_casualties_mult = -0.15
	
		# Countries forced to join diplomatic plays of members, other countries are not happy about this threat
		country_join_power_bloc_member_in_plays_bool = yes
		country_infamy_generation_mult = 0.15
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### EXTERNAL TRADE

principle_external_trade_1 = {
	icon = "gfx/interface/icons/principles_icons/external_trade.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	power_bloc_modifier = {
		# Trade routes cost much less BUR inside the bloc
		power_bloc_trade_route_cost_mult = -0.75
	}

	member_modifier = {
		# Trade routes cost less BUR outside the bloc
		country_trade_route_cost_mult = -0.25
		
		# Increased trade route competetiveness
		country_trade_route_competitiveness_mult = 0.25
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = { has_law = law_type:law_free_trade }
			add = 100
		}	
			
		add = {
			value = num_trade_routes
			multiply = 5
			max = 100
		}

		if = {
			limit = {
				power_bloc ?= { NOT = { has_identity = identity:identity_trade_league } } 				
			}
			multiply = 0.5
		}
		
		if = {
			limit = { 
				power_bloc ?= { has_principle_group = principle_group:principle_group_internal_trade }			
			}
			multiply = 0.5
		}		
	}
}

principle_external_trade_2 = {
	icon = "gfx/interface/icons/principles_icons/external_trade.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"
	
	power_bloc_modifier = {
		# Modifiers from previous level(s)
		power_bloc_trade_route_cost_mult = -0.75
		
		# Also unlocks a PM that grants Trade Centers Influence, checked with trigger on PM
	}

	member_modifier = {
		# Modifiers from previous level(s)
		country_trade_route_cost_mult = -0.25
		country_trade_route_competitiveness_mult = 0.25
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}	
}

principle_external_trade_3 = {
	icon = "gfx/interface/icons/principles_icons/external_trade.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"
	
	power_bloc_modifier = {
		# Modifiers from previous level(s)
		power_bloc_trade_route_cost_mult = -0.75
	
		# Also unlocks a PM that grants Trade Centers Influence, checked with trigger on PM (from level 2)
	}
	
	member_modifier = {
		# Modifiers from previous level(s)
		country_trade_route_cost_mult = -0.25
		country_trade_route_competitiveness_mult = 0.25
		
		# Allows members to set up trade routes without diplomatic interests there
		country_allow_trade_routes_without_interest_bool = yes
	}

	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### Food Standardization

principle_food_standardization_1 = {
	icon = "gfx/interface/icons/principles_icons/food_standardization.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"
	
	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		building_group_bg_agriculture_throughput_add = 0.1
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				OR = {
					ig:ig_rural_folk ?= { is_in_government = yes }
					ig:ig_trade_unions ?= { is_in_government = yes }
				}			
			}
			add = 100
		}

		if = {
			limit = {
				has_strategy = ai_strategy_agricultural_expansion
			}
			multiply = 1.5
		}
	}		
}

principle_food_standardization_2 = {
	icon = "gfx/interface/icons/principles_icons/food_standardization.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		building_group_bg_agriculture_throughput_add = 0.1
		
		# Lower mortality
		state_mortality_mult = -0.1
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_food_standardization_3 = {
	icon = "gfx/interface/icons/principles_icons/food_standardization.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		building_group_bg_agriculture_throughput_add = 0.1
		state_mortality_mult = -0.1
		
		# Higher SoL
		state_standard_of_living_add = 1
		
		#Unlocks a PM for Food Industries
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### Police Coordination

principle_police_coordination_1 = {
	icon = "gfx/interface/icons/principles_icons/dedicated_police.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"
	
	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# Cheaper and faster police institution
		country_institution_size_change_speed_institution_police_mult = 0.25
		country_institution_cost_institution_police_mult = -0.1
		country_disallow_law_no_police_bool = yes
	}

	leader_modifier = {
		country_can_impose_same_lawgroup_policing_in_power_bloc_bool = yes
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				OR = {
					ig:ig_landowners ?= { is_in_government = yes }
					ig:ig_petty_bourgeoisie ?= { is_in_government = yes }
				}			
			}
			add = 100
		}

		if = {
			limit = {
				OR = {
					has_strategy = ai_strategy_conservative_agenda
					has_strategy = ai_strategy_reactionary_agenda
				}
			}
			multiply = 1.5
		}	
	}	
}

principle_police_coordination_2 = {
	icon = "gfx/interface/icons/principles_icons/dedicated_police.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Cheaper and faster police institution
		country_institution_size_change_speed_institution_police_mult = 0.4
		country_institution_cost_institution_police_mult = -0.25
		country_disallow_law_no_police_bool = yes
	}

	leader_modifier = {
		country_can_impose_same_lawgroup_policing_in_power_bloc_bool = yes
	}

	institution = institution_police
	institution_modifier = {
		# Police institution reduces radicalism of political movements
		political_movement_radicalism_mult = -0.05
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_police_coordination_3 = {
	icon = "gfx/interface/icons/principles_icons/dedicated_police.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"

	member_modifier = {
		# Cheaper and faster police institution
		country_institution_size_change_speed_institution_police_mult = 0.5
		country_institution_cost_institution_police_mult = -0.5
		country_disallow_law_no_police_bool = yes
	}

	leader_modifier = {
		country_can_impose_same_lawgroup_policing_in_power_bloc_bool = yes
	}

	institution = institution_police
	institution_modifier = {
		# Police institution adds authority
		country_authority_add = 50
		
		# Police institution reduces radicalism of political movements
		political_movement_radicalism_mult = -0.05
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}


### TRANSPORT INFRASTRUCTURE

principle_transport_1 = {
	icon = "gfx/interface/icons/principles_icons/transport.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# Members get increased Infrastructure from pops
		state_infrastructure_from_population_mult = 0.33
		state_infrastructure_from_population_max_mult = 0.33 		
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				ig:ig_industrialists ?= { is_in_government = yes }
			}
			add = 100
		}	
		
		if = {
			limit = { has_strategy = ai_strategy_industrial_expansion }
			multiply = 1.5
		}	
		else_if = {
			limit = { has_strategy = ai_strategy_resource_expansion }
			multiply = 1.25
		}
	}
}

principle_transport_2 = {
	icon = "gfx/interface/icons/principles_icons/transport.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Modifiers from previous level(s)	
		state_infrastructure_from_population_mult = 0.33
		state_infrastructure_from_population_max_mult = 0.33 
		
		# Members have increased convoy capacity
		country_convoys_capacity_mult = 0.2
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_transport_3 = {
	icon = "gfx/interface/icons/principles_icons/transport.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"

	member_modifier = {
		# Modifiers from previous level(s)
		country_convoys_capacity_mult = 0.2
		state_infrastructure_from_population_mult = 0.33
		state_infrastructure_from_population_max_mult = 0.33 
		
		# Increased land trade capacity
		market_land_trade_capacity_add = 50
		
		# Unlocks a set of PMs for Railways
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### Military Industry

principle_military_industry_1 = {
	icon = "gfx/interface/icons/principles_icons/military_industry.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"
	
	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# Members get increased military industry throughput
		building_war_machine_industry_throughput_add = 0.1
		building_arms_industry_throughput_add = 0.1
		building_artillery_foundries_throughput_add = 0.1
		building_military_shipyards_throughput_add = 0.1
	}
	
	ai_weight = {
		value = 100	
		
		if = {
			limit = {
				ig:ig_armed_forces ?= { is_in_government = yes }
			}
			add = 100
		}

		if = {
			limit = {
				"goods_production_rank(g:small_arms)" <= 3
			}
			add = 50
		}
		
		if = {
			limit = {
				"goods_production_rank(g:artillery)" <= 3
			}
			add = 50
		}

		if = {
			limit = {
				"goods_production_rank(g:ammunition)" <= 3
			}
			add = 50
		}			
	}
}

principle_military_industry_2 = {
	icon = "gfx/interface/icons/principles_icons/military_industry.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"
	
	member_modifier = {
		# Modifiers from previous level(s)
		building_war_machine_industry_throughput_add = 0.1
		building_arms_industry_throughput_add = 0.1
		building_artillery_foundries_throughput_add = 0.1
		building_military_shipyards_throughput_add = 0.1
		
		# Members get reduced military goods cost
		country_military_goods_cost_mult = -0.15
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_military_industry_3 = {
	icon = "gfx/interface/icons/principles_icons/military_industry.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"
	
	member_modifier = {
		# Modifiers from previous level(s)	
		building_war_machine_industry_throughput_add = 0.1
		building_arms_industry_throughput_add = 0.1
		building_artillery_foundries_throughput_add = 0.1
		building_military_shipyards_throughput_add = 0.1
		country_military_goods_cost_mult = -0.15
		
		# Supply routes use less convoys
		character_supply_route_cost_mult = -0.33
		
		# Members get an unique mobilization option mechanic
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### Colonial Offices

principle_colonial_offices_1 = {
	icon = "gfx/interface/icons/principles_icons/colonial_offices.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"
	
	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# Cheaper and faster colonial institution
		country_institution_size_change_speed_institution_colonial_affairs_mult = 0.25
		country_institution_cost_institution_colonial_affairs_mult = -0.1
		country_disallow_law_no_colonial_affairs_bool = yes
	}

	leader_modifier = {
		country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = yes
	}
	
	ai_weight = {
		value = 200 # High base weight if the leader has colonies
		
		if = {
			limit = { has_strategy = ai_strategy_colonial_expansion }
			multiply = 2.0
		}

		if = {
			limit = {
				NOT = { any_scope_state = { is_under_colonization = yes } }
			}
			multiply = 0.0
		}			
	}
}

principle_colonial_offices_2 = {
	icon = "gfx/interface/icons/principles_icons/colonial_offices.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Cheaper and faster colonial institution
		country_institution_size_change_speed_institution_colonial_affairs_mult = 0.4
		country_institution_cost_institution_colonial_affairs_mult = -0.25
		country_disallow_law_no_colonial_affairs_bool = yes
	}

	leader_modifier = {
		country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = yes
	}
	
	institution = institution_colonial_affairs
	institution_modifier = {
		# Members get higher colony growth for each level of institution
		state_colony_growth_creation_mult = 0.05
	}	
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_colonial_offices_3 = {
	icon = "gfx/interface/icons/principles_icons/colonial_offices.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"
	
	member_modifier = {
		# Cheaper and faster colonial institution
		country_institution_size_change_speed_institution_colonial_affairs_mult = 0.5
		country_institution_cost_institution_colonial_affairs_mult = -0.5
		country_disallow_law_no_colonial_affairs_bool = yes
	}

	leader_modifier = {
		country_can_impose_same_lawgroup_colonization_in_power_bloc_bool = yes
	}
	
	institution = institution_colonial_affairs
	institution_modifier = {
		# Modifiers from previous level(s)	
		state_colony_growth_creation_mult = 0.05
		country_infamy_generation_against_unrecognized_mult = -0.05
	}		

	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### Foreign Investment

principle_foreign_investment_1 = {
	icon = "gfx/interface/icons/principles_icons/foreign_investment.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# This modifier is just here to generate a tooltip. It doesn't actually do anything on its own
		country_higher_leverage_from_economic_dependence_bool = yes
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				OR = {
					ig:ig_industrialists ?= { is_in_government = yes }
					ig:ig_landowners ?= { is_in_government = yes }
				}
			}	
			add = 100
		}		
		
		if = {
			limit = { has_strategy = ai_strategy_economic_imperialism }
			multiply = 2.0
		}		
	}
}

principle_foreign_investment_2 = {
	icon = "gfx/interface/icons/principles_icons/foreign_investment.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Members get reduced nationalization cost for assets of non-members
		country_nationalization_cost_non_members_mult = -0.5

		# This modifier is just here to generate a tooltip. It doesn't actually do anything on its own
		country_higher_leverage_from_economic_dependence_bool = yes
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_foreign_investment_3 = {
	icon = "gfx/interface/icons/principles_icons/foreign_investment.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"
	
	# Members can always invest in power bloc coutries of lower rank
	# Does not generate a tooltip, so a dummy modifier is required to show this effect
	allows_foreign_investment_in_lower_rank = yes
	
	member_modifier = {
		# Modifiers from previous level(s)	
		country_nationalization_cost_non_members_mult = -0.5

		# This modifier is just here to generate a tooltip. It doesn't actually do anything on its own
		country_higher_leverage_from_economic_dependence_bool = yes
	}
	
	power_bloc_modifier = {
		# This modifier has no effects and is only here to generate a tooltip
		power_bloc_allow_foreign_investment_lower_rank_bool = yes 
	}

	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### Creative Legislature

principle_creative_legislature_1 = {
	icon = "gfx/interface/icons/principles_icons/creative_legislature.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# Laws are less likely to stall during enactment
		country_law_enactment_stall_mult = -0.33
	}
	
	ai_weight = {
		value = 200 # High base value for ideological union, but also generally useful for others
		
		if = {
			limit = {
				power_bloc ?= { NOT = { has_identity = identity:identity_ideological_union } } 			
			}
			multiply = 0.5
		}		
	}
}

principle_creative_legislature_2 = {
	icon = "gfx/interface/icons/principles_icons/creative_legislature.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Modifiers from previous level(s)	
		country_law_enactment_stall_mult = -0.33
		
		# Members political movements to preserve and restore have lower support
		political_movement_preserve_support_mult = -0.33
		political_movement_restore_support_mult = -0.33
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_creative_legislature_3 = {
	icon = "gfx/interface/icons/principles_icons/creative_legislature.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"
	
	member_modifier = {
		# Modifiers from previous level(s)	
		country_law_enactment_stall_mult = -0.33
		political_movement_preserve_support_mult = -0.33
		political_movement_restore_support_mult = -0.33
		
		# Can have one additional setback before failing a law enactment
		country_law_enactment_max_setbacks_add = 1
	}

	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### Freedom of Movement

principle_freedom_of_movement_1 = {
	icon = "gfx/interface/icons/principles_icons/freedom_of_movement.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}
	
	possible = {
		NOT = { has_law = law_type:law_closed_borders }
	}

	member_modifier = {
		# Increased migration
		state_migration_quota_mult = 0.25
	}
	
	ai_weight = {
		value = 100
		
		if = {
			limit = {
				ig:ig_intelligentsia ?= { is_in_government = yes }
			}	
			add = 100
		}	

		if = {
			limit = {
				OR = {
					country_is_in_north_america = yes
					country_is_in_central_america = yes
					country_is_in_south_america = yes
				}
			}	
			add = 100
		}
		
		if = {
			limit = {
				has_law = law_type:law_migration_controls
			}	
			multiply = 0.5
		}

		if = {
			limit = { has_strategy = ai_strategy_progressive_agenda }
			multiply = 1.5
		}

		if = {
			limit = { 
				OR = {
					has_strategy = ai_strategy_conservative_agenda
					has_strategy = ai_strategy_reactionary_agenda
				}			
			}
			multiply = 0.25
		}		
	}
}

principle_freedom_of_movement_2 = {
	icon = "gfx/interface/icons/principles_icons/freedom_of_movement.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Modifiers from previous level(s)	
		state_migration_quota_mult = 0.25
		
		# Increases chance to be picked for mass migrations
		country_mass_migration_attraction_mult = 0.5	
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_freedom_of_movement_3 = {
	icon = "gfx/interface/icons/principles_icons/freedom_of_movement.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"
	
	member_modifier = {
		# Modifiers from previous level(s)	
		state_migration_quota_mult = 0.25
		country_mass_migration_attraction_mult = 0.5	
	}

	power_bloc_modifier = {
		# Unlocks a new PM for Universities and Art Academies that increases migration attraction, unlocked per trigger in the PM
	
		# Unlocks power-bloc wide migration
		power_bloc_allow_wider_migration_area_bool = yes
	}

	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### Divine Economics

principle_divine_economics_1 = {
	icon = "gfx/interface/icons/principles_icons/divine_economy.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	power_bloc_modifier = {
		# Increased trade route competitiveness for PB trade routes
		power_bloc_religion_trade_route_competitiveness_mult = 0.5
	}
	
	member_modifier = {
		# Higher subject payments from other religions
		country_subject_income_transfer_heathen_mult = 0.5		
	}
	
	ai_weight = {
		value = 200 # Religious PBs should tend towards picking the religious principles
		
		if = {
			limit = {
				ig:ig_devout ?= { is_in_government = yes }
			}	
			add = 100
		}
	}
}

principle_divine_economics_2 = {
	icon = "gfx/interface/icons/principles_icons/divine_economy.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	power_bloc_modifier = {
		# Modifiers from previous level(s)		
		power_bloc_religion_trade_route_competitiveness_mult = 0.5
	}
	
	member_modifier = {
		# Modifiers from previous level(s)		
		country_subject_income_transfer_heathen_mult = 0.5

		# New PM for Financial Districts/Manor Houses unlocked via trigger
	}	
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_divine_economics_3 = {
	icon = "gfx/interface/icons/principles_icons/divine_economy.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"
	
	power_bloc_modifier = {
		# Modifiers from previous level(s)		
		power_bloc_religion_trade_route_competitiveness_mult = 0.5
	}
	
	member_modifier = {
		# Modifiers from previous level(s)		
		country_subject_income_transfer_heathen_mult = 0.5		
	
		# SoL changes less radical/more loyalist for accepted religion pops
		state_radicals_from_sol_change_accepted_religion_mult = -0.25
		state_loyalists_from_sol_change_accepted_religion_mult = 0.25
		
		# New PM for Financial Districts/Manor Houses unlocked via trigger
	}

	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### Exploit Members

principle_exploit_members_1 = {
	icon = "gfx/interface/icons/principles_icons/exploitation_of_members.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	leader_modifier = {
		# Increase leader country authority
		country_authority_mult = 0.2
	}

	non_leader_modifier = {
		# Reduce non-leader authority
		country_authority_mult = -0.2
	}

	power_bloc_modifier = {
		# Reduce Cohesion
		power_bloc_cohesion_add = -5
	}
	
	ai_weight = {
		value = 0
		
		if = {
			limit = {
				exists = power_bloc
			}
			
			add = {
				value = power_bloc.current_cohesion_number
				subtract = 50
				multiply = 4
			}			
		}
		
		if = {
			limit = {
				NOR = {
					has_strategy = ai_strategy_territorial_expansion
					has_strategy = ai_strategy_economic_imperialism
				}
			}
			multiply = 0.5
		}	
	}
}

principle_exploit_members_2 = {
	icon = "gfx/interface/icons/principles_icons/exploitation_of_members.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	leader_modifier = {
		# Modifiers from previous level(s)		
		country_authority_mult = 0.2
		# Increase leader influence
		country_influence_mult = 0.2
	}
	
	non_leader_modifier = {
		# Modifiers from previous level(s)		
		country_authority_mult = -0.2
		# Reduce non-leader influence
		country_influence_mult = -0.2
	}

	power_bloc_modifier = {
		# Reduce Cohesion
		power_bloc_cohesion_add = -10
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
		
		if = {
			limit = {
				current_cohesion_number < 50
			}
			multiply = 0.0
		}
	}
}

principle_exploit_members_3 = {
	icon = "gfx/interface/icons/principles_icons/exploitation_of_members.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"
	
	leader_modifier = {
		# Modifiers from previous level(s)		
		country_authority_mult = 0.2
		# Increase leader influence
		country_influence_mult = 0.2
	}
	
	non_leader_modifier = {
		# Modifiers from previous level(s)		
		country_authority_mult = -0.2
		# Reduce non-leader influence
		country_influence_mult = -0.2
	}

	power_bloc_modifier = {
		power_bloc_cohesion_add = -20
		# Income transfer from members to leader
		power_bloc_income_transfer_to_leader_factor = 0.05
	}

	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
		
		if = {
			limit = {
				current_cohesion_number < 50
			}
			multiply = 0.0
		}
	}
}

### Sacred Civics

principle_sacred_civics_1 = {
	icon = "gfx/interface/icons/principles_icons/sacred_civics.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}

	member_modifier = {
		# Higher diplomatic acceptance from countries with same state religion
		# This modifier actually has no effect and is just here to generate a tooltip, the effects are scripted in diplomactic_actions
		country_higher_diplomatic_acceptance_same_religion_bool = yes
	}
	
	ai_weight = {
		value = 200 # Religious PBs should tend towards picking the religious principles
		
		if = {
			limit = {
				ig:ig_devout ?= { is_in_government = yes }
			}	
			add = 100
		}
		
		if = {
			limit = { 
				power_bloc ?= { NOT = { has_identity = identity:identity_religious } } 
				# State Atheist Ideology bloc wants the power to enforce atheism
				NAND = {
					has_law = law_type:law_state_atheism
					power_bloc ?= { has_identity = identity:identity_ideological_union }				
				}
			}
			multiply = 0.25
		}				
	}
}

principle_sacred_civics_2 = {
	icon = "gfx/interface/icons/principles_icons/sacred_civics.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Modifiers from previous level(s)		
		country_higher_diplomatic_acceptance_same_religion_bool = yes
		
		# Lower liberty desire for subjects with the same religion
		# This modifier actually has no effect and is just here to generate a tooltip, the effects are scripted in scripted_values
		country_reduced_liberty_desire_same_religion_bool = yes
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_sacred_civics_3 = {
	icon = "gfx/interface/icons/principles_icons/sacred_civics.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"
	
	member_modifier = {
		# Modifiers from previous level(s)		
		country_higher_diplomatic_acceptance_same_religion_bool = yes
		country_reduced_liberty_desire_same_religion_bool = yes
	}

	leader_modifier = {
		# Allows leader to impose their own law onto member countries in the church_and_state law group
		country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool = yes
	}

	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

### Ideological Truth

principle_ideological_truth_1 = {
	icon = "gfx/interface/icons/principles_icons/ideological_truth.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_1.dds"

	visible = {
		has_dlc_feature = power_bloc_features
	}
	
	member_modifier = {
		# Agitators of non-government IGs have lower popularity
		interest_group_in_opposition_agitator_popularity_add = -33
		
		# Reduces IG bolster and suppression costs
		country_bolster_cost_mult = -0.25
		country_suppression_cost_mult = -0.25		
	}
	
	ai_weight = {
		value = 200 # High base weight for ideological union
		
		if = { 
			limit = { 
				has_radical_leftist_government = yes
			}
			add = 100
		}
		
		if = {
			limit = {
				OR = {
					has_strategy = ai_strategy_world_revolution
					has_strategy = ai_strategy_maintain_power_balance
				}
			}
			multiply = 2.0
		}
	}
}

principle_ideological_truth_2 = {
	icon = "gfx/interface/icons/principles_icons/ideological_truth.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_2.dds"

	member_modifier = {
		# Modifiers from previous level(s)		
		interest_group_in_opposition_agitator_popularity_add = -33
		country_bolster_cost_mult = -0.25
		country_suppression_cost_mult = -0.25			
		
		# Reduces ideological coherence penalty for IGs in same party
		country_party_whip_impact_mult = 0.2
	}
	
	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

principle_ideological_truth_3 = {
	icon = "gfx/interface/icons/principles_icons/ideological_truth.dds"
	background = "gfx/interface/icons/principles_icons/principle_tier_3.dds"
	
	member_modifier = {
		# Modifiers from previous level(s)		
		interest_group_in_opposition_agitator_popularity_add = -33
		country_bolster_cost_mult = -0.25
		country_suppression_cost_mult = -0.25		
		country_party_whip_impact_mult = 0.2
		
		# Members Legitimacy can't fall under 25
		country_legitimacy_min_add = 25		
	}

	ai_weight = {
		value = 1000 # AI prefers upgrading groups it has already picked to unlocking new ones
	}
}

﻿### See power_bloc_principles for the individual effects

principle_group_construction = {
	levels = {
		principle_construction_1
		principle_construction_2
		principle_construction_3
	}
}

principle_group_internal_trade = {
	primary_for_identity = identity_trade_league
	unlocking_identity = identity_trade_league
	
	levels = {
		principle_internal_trade_1
		principle_internal_trade_2
		principle_internal_trade_3
	}
}

principle_group_market_unification = {
	blocking_identity = identity_trade_league
	
	levels = {
		principle_market_unification_1
		principle_market_unification_2
		principle_market_unification_3
	}
}

principle_group_vassalization = {
	primary_for_identity = identity_sovereign_empire

	levels = {
		principle_vassalization_1
		principle_vassalization_2
		principle_vassalization_3
	}
}

principle_group_advanced_research = {
	levels = {
		principle_advanced_research_1
		principle_advanced_research_2
		principle_advanced_research_3
	}
}

principle_group_defensive_cooperation = {
	primary_for_identity = identity_military_treaty_organization
	
	levels = {
		principle_defensive_cooperation_1
		principle_defensive_cooperation_2
		principle_defensive_cooperation_3
	}
}

principle_group_aggressive_coordination = {
	unlocking_identity = identity_military_treaty_organization
	primary_for_identity = identity_military_treaty_organization

	levels = {
		principle_aggressive_coordination_1
		principle_aggressive_coordination_2
		principle_aggressive_coordination_3
	}
}

principle_group_external_trade = {
	primary_for_identity = identity_trade_league
	
	levels = {
		principle_external_trade_1
		principle_external_trade_2
		principle_external_trade_3
	}
}

principle_group_food_standardization = {
	levels = {
		principle_food_standardization_1
		principle_food_standardization_2
		principle_food_standardization_3
	}
}

principle_group_police_coordination = {
	levels = {
		principle_police_coordination_1
		principle_police_coordination_2
		principle_police_coordination_3
	}
}

principle_group_transport = {
	levels = {
		principle_transport_1
		principle_transport_2
		principle_transport_3
	}
}

principle_group_military_industry = {
	levels = {
		principle_military_industry_1
		principle_military_industry_2
		principle_military_industry_3
	}
}

principle_group_colonial_offices = {
	levels = {
		principle_colonial_offices_1
		principle_colonial_offices_2
		principle_colonial_offices_3
	}
}

principle_group_foreign_investment = {
	levels = {
		principle_foreign_investment_1
		principle_foreign_investment_2
		principle_foreign_investment_3
	}
}

principle_group_creative_legislature = {
	primary_for_identity = identity_ideological_union
	
	levels = {
		principle_creative_legislature_1
		principle_creative_legislature_2
		principle_creative_legislature_3
	}
}

principle_group_freedom_of_movement = {
	levels = {
		principle_freedom_of_movement_1
		principle_freedom_of_movement_2
		principle_freedom_of_movement_3
	}
}

principle_group_divine_economics = {
	unlocking_identity = identity_religious
	primary_for_identity = identity_religious

	levels = {
		principle_divine_economics_1
		principle_divine_economics_2
		principle_divine_economics_3
	}
}

principle_group_exploit_members = {
	primary_for_identity = identity_sovereign_empire
	unlocking_identity = identity_sovereign_empire

	levels = {
		principle_exploit_members_1
		principle_exploit_members_2
		principle_exploit_members_3
	}
}

principle_group_sacred_civics = {
	primary_for_identity = identity_religious

	levels = {
		principle_sacred_civics_1
		principle_sacred_civics_2
		principle_sacred_civics_3
	}
}

principle_group_ideological_truth = {
	primary_for_identity = identity_ideological_union
	unlocking_identity = identity_ideological_union

	levels = {
		principle_ideological_truth_1
		principle_ideological_truth_2
		principle_ideological_truth_3
	}
}


