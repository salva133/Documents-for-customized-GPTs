﻿leverage_threshold_to_invite = 200 	# Minimum leverage advantage from power bloc on country to be able to invite the country

# root = pact
# root.first_country: first country in the pact
# root.second_country: second country in the pact
# root = { liberty_desire < 50 }: compare trigger for current Liberty Desire value root.
# Must return a value which will be added to the current Liberty Desire in this pact.
liberty_desire_weekly_change = {
	add = {
		value = 0.1
		desc = "base_value"
	}
	
	if = {
		limit = { root.second_country = { has_government_type = gov_chartered_company } }
		add = {
			value = -0.2
			desc = "gov_chartered_company"
		}	
	}

	# Special - DEI collapses if independent
	if = {
		limit = { 
			root.first_country = { c:NET ?= this } 
			root.second_country = { c:DEI ?= this } 
		}
		add = {
			value = -0.2
			desc = "DEI"
		}	
	}		
	
	# Special - Pacify the Steppes
	if = {
		limit = { 
			root.first_country = { has_journal_entry = je_pacify_the_steppes } 
			root.second_country = { has_government_type = gov_zhuz } 
		}
		add = {
			value = -0.2
			desc = "pacify_the_steppe_modifier"
		}	
	}		

	add = {
		if = {
			limit = { "root.second_country.relations(root.first_country)" < relations_threshold:hostile }
			add = {
				add = 0.5
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_HOSTILE"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" < relations_threshold:cold }
			add = {
				add = 0.25
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_COLD"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" < relations_threshold:poor }
			add = {
				add = 0.10
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_POOR"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" < relations_threshold:cordial }
			add = {
				add = 0
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_NEUTRAL"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" >= relations_threshold:friendly }
			add = {
				add = -0.1
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_FRIENDLY"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" >= relations_threshold:amicable }
			add = {
				add = -0.05
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_AMICABLE"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" >= relations_threshold:cordial }
			add = {
				add = -0.025
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_CORDIAL"				
			}
		}
	}
	
	add = {
		if = {
			limit = { root.first_country.infamy >= infamy_threshold:pariah }
			add = 2.0
		}
		else_if = {
			limit = { root.first_country.infamy >= infamy_threshold:notorious }
			add = 0.25
		}		
		else_if = {
			limit = { root.first_country.infamy >= infamy_threshold:infamous }
			add = 0.1
		}		
		
		desc = "concept_infamy"
	}
	
	if = {
		limit = { root.first_country = { has_diplomatic_pact = { who = root.second_country type = da_knowledge_sharing } } }
		add = {
			add = -0.05
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_KNOWLEDGE_SHARING"
		}
	}
	
	if = {
		limit = { root.first_country = { has_diplomatic_pact = { who = root.second_country type = exempt_from_service } } }
		add = {
			add = -0.05
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_EXEMPT_FROM_SERVICE"
		}
	}
		
	if = {
		limit = { root.first_country.prestige < 1 }
		add = {
			add = 1
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_NO_PRESTIGE_POSITIVE"
		}
	}
	else_if = {
		limit = { root.second_country.prestige < 1 }
		add = {
			add = -0.10
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_NO_PRESTIGE_NEGATIVE"
		}
	}	
	else_if = {
		limit = {
			OR = {
				is_diplomatic_action_type = protectorate
				is_diplomatic_action_type = tributary
			}
		}				
		if = {
			limit = { 	
				root.first_country.prestige > {
					add = root.second_country.prestige
					# determines the multiple of prestige the overlord must have achieved in order for prestige advantage to have a negative impact on Liberty Desire rather than positive
					multiply = 1.5
				}
			}
			add = {
				add = root.first_country.prestige
				divide = root.second_country.prestige
				divide = 150
				min = 0.01
				max = 0.05
				multiply = -1
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_1_5_NEGATIVE"
			}
		}
		else_if = {
			add = {
				add = root.second_country.prestige
				multiply = 1.5
				divide = root.first_country.prestige
				divide = 3
				max = 2.5
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_1_5_POSITIVE"
			}
		}	
	}
	else_if = {
		limit = {
			OR = {
				is_diplomatic_action_type = personal_union
				is_diplomatic_action_type = dominion
			}
		}				
		if = {
			limit = { 	
				root.first_country.prestige > {
					add = root.second_country.prestige
					# determines the multiple of prestige the overlord must have achieved in order for prestige advantage to have a negative impact on Liberty Desire rather than positive
					multiply = 2.0
				}
			}
			add = {
				add = root.first_country.prestige
				divide = root.second_country.prestige
				divide = 200
				min = 0.01
				max = 0.05
				multiply = -1
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_2_0_NEGATIVE"
			}
		}
		else_if = {
			add = {
				add = root.second_country.prestige
				multiply = 2.0
				divide = root.first_country.prestige
				divide = 3
				max = 2.5
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_2_0_POSITIVE"
			}
		}	
	}	
	else_if = {
		limit = {
			OR = {
				is_diplomatic_action_type = puppet
				is_diplomatic_action_type = vassal
			}
		}				
		if = {
			limit = { 	
				root.first_country.prestige > {
					add = root.second_country.prestige
					# determines the multiple of prestige the overlord must have achieved in order for prestige advantage to have a negative impact on Liberty Desire rather than positive
					multiply = 3
				}
			}
			add = {
				add = root.first_country.prestige
				divide = root.second_country.prestige
				divide = 300
				min = 0.01
				max = 0.05
				multiply = -1
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_3_0_NEGATIVE"
			}
		}
		else_if = {
			add = {
				add = root.second_country.prestige
				multiply = 3
				divide = root.first_country.prestige
				divide = 3
				max = 2.5
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_3_0_POSITIVE"
			}
		}	
	}		
	
	second_country = {
		add = {
			ordered_interest_group = {
				limit = {
					is_member_of_lobby = lobby_type:lobby_pro_overlord
					is_in_government = yes
				}
				order_by = ig_clout
				subtract = ig_clout
				divide = 2
			}
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRO_LOBBY_INTEREST_GROUP_IN_GOVERNMENT"
		}
		add = {
			ordered_interest_group = {
				limit = {
					is_member_of_lobby = lobby_type:lobby_pro_overlord
					is_in_government = no
				}
				order_by = ig_clout
				subtract = ig_clout
				divide = 4
			}
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRO_LOBBY_INTEREST_GROUP_IN_OPPOSITION"
		}
		add = {
			ordered_interest_group = {
				limit = {
					is_member_of_lobby = lobby_type:lobby_anti_overlord
					is_in_government = yes
				}
				order_by = ig_clout
				add = ig_clout
				divide = 2
			}
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_ANTI_LOBBY_INTEREST_GROUP_IN_GOVERNMENT"
		}
		add = {
			ordered_interest_group = {
				limit = {
					is_member_of_lobby = lobby_type:lobby_anti_overlord
					is_in_government = no
				}
				order_by = ig_clout
				add = ig_clout
				divide = 4
			}
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_ANTI_LOBBY_INTEREST_GROUP_IN_OPPOSITION"
		}
	}
	
	if = {
		limit = { "root.second_country.economic_dependence(root.first_country)" > 0 }
		add = {
			value = 1
			subtract = "root.second_country.economic_dependence(root.first_country)"
			divide = 10
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_ECONOMIC_DEPENDENCE"
		}		
	}
	else = {
		add = {
			value = 1
			subtract = "root.second_country.economic_dependence(root.first_country)"
			divide = 3
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_ECONOMIC_DEPENDENCE"
		}	
	}
	
	if = {
		limit = {
			root.second_country.market = root.first_country.market
			root.second_country.capital = { is_isolated_from_market = yes }
		}
		add = {
			value = 1 
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_ISOLATED_FROM_MARKET"
		}
	}
	else_if = {
		limit = {
			root.second_country.market = root.first_country.market
			root.first_country.supply_network_strength < 1
			root.second_country = { has_port = yes }
			NOT = { root.second_country = { is_adjacent_to_country = root.first_country }}
		}
		add = {
			value = 1
			subtract = root.first_country.supply_network_strength
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_LOW_SUPPLY_NETWORK_STRENGTH"
		}
	}	
	
	if = {
		limit = {
			root.first_country = { 
				is_in_power_bloc = yes
				power_bloc = {
					has_principle = principle:principle_sacred_civics_2
				}
				religion = root.second_country.religion
			}
		}
		desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_SACRED_CIVICS"
		add = -0.1
	}	
	
	add = {
		value = root.second_country.modifier:country_liberty_desire_add
		desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_DESC_ADDITIONAL_ADDS"
	}
	
	add = {
		value = root.first_country.modifier:country_liberty_desire_of_subjects_add
		desc = "LIBERTY_SUBJECT_DESIRE_WEEKLY_CHANGE_DESC_ADDITIONAL_ADDS"
	}
	
	save_temporary_value_as = pre_scaling_value
	
	if = {
		limit = { 
			scope:pre_scaling_value < 0
			second_country = {
				liberty_desire < 50
			}
		}
		multiply = {
			add = second_country.liberty_desire
			divide = 50
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_SCALING_LOW"
		}
		max = -0.01
	}
	else_if = {
		limit = { 
			scope:pre_scaling_value > 0
			second_country = {
				liberty_desire > 50
			}
		}
		multiply = {
			add = 100
			subtract = second_country.liberty_desire
			divide = 50
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_SCALING_HIGH"
		}
		min = 0.01
	}	
	
	save_temporary_value_as = pre_mult_modifiers_value
	
	multiply = {
		value = 1
		if = {
			limit = { scope:pre_mult_modifiers_value > 0 }
			add = root.second_country.modifier:country_liberty_desire_increase_mult
		}
		else_if = {
			limit = { scope:pre_mult_modifiers_value < 0 }
			add = root.second_country.modifier:country_liberty_desire_decrease_mult
		}
		min = 0
		desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_DESC_ADDITIONAL_MULTS"
	}
	
	if = {
		limit = {
			root.second_country = {
				has_truce_with = root.first_country
				scope:pre_mult_modifiers_value > 0
			}
		}
		multiply = {
			value = 0.5
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_TRUCE"
		}
	}
}

﻿#################################################################
#####					INFANTRY COUNT						#####
#################################################################

gfx_infantry_deploy_count = {
	value = 0
	scope:military_formation = { add = num_units }
	divide = 50
	add = 1
	max = 10
}

gfx_artillery_deploy_count = {
	value = 0
	scope:military_formation = { add = num_units }
	divide = 50
	add = 1
	max = 10
}

gfx_lightship_deploy_count = {
	value = 0
	scope:military_formation = { add = num_units }
	divide = 50
	add = 1
	max = 10
}

gfx_capitalship_deploy_count = {
	value = 0
	scope:military_formation = { add = num_units }
	divide = 50
	add = 1
	max = 10
}

gfx_supportship_deploy_count = {
	value = 0
	scope:military_formation = { add = num_units }
	divide = 50
	add = 1
	max = 10
}

gfx_infantry_mobilization_count = {
	value = 0
	market = {
		mg:small_arms = {
			add = market_goods_sell_orders
		}
	}
	divide = 1000
	add = 1
	max = 3
}

gfx_artillery_mobilization_count = {
	value = 0
	market = {
		mg:artillery = {
			add = market_goods_sell_orders
		}
	}
	divide = 1000
	add = 1
	max = 3
}
﻿# ROOT is the leader of the power bloc.
# scope:target is the target country.
# scope:has_interest is whether the power bloc has interest on the target country.
# scope:has_capital_interest is whether the power bloc has interest on the capital of the target country.
# No randomness is allowed in this script value
power_bloc_leverage_gain = {

##### Add factors: #####
	add = {
		value = 100
		desc = POWER_BLOC_LEVERAGE_GAIN_FROM_INTEREST
	}

	if = { 
		limit = {
			power_bloc ?= {
				any_power_bloc_member = {
					scope:target ?= this
				}
			}
		}
		add = {
			value = 300
			desc = POWER_BLOC_LEVERAGE_GAIN_FROM_MEMBERSHIP
		}
	}
	
	add = {
		value = 200
		multiply = "scope:target.economic_dependence(ROOT)"
			
		if = {
			limit = {
				root.power_bloc = {
					has_principle_group = principle_group:principle_group_foreign_investment
				}
			}
			multiply = 1.5
		}

		desc = POWER_BLOC_LEVERAGE_GAIN_FROM_ECONOMIC_DEPENDENCE
	}

	if = {
		limit = {
			is_in_war_together = scope:target
		}
		add = {
			value = 200
			desc = POWER_BLOC_LEVERAGE_GAIN_IN_COMMON_WAR
		}
	}

	if = {
		limit = {
			scope:target.religion = root.religion
			root.power_bloc = {
				has_identity = identity:identity_religious
			}
		}
		add = {
			value = 100
			desc = POWER_BLOC_LEVERAGE_GAIN_FROM_SHARED_RELIGION
		}
	}
	
	if = {
		limit = {
			has_treaty_port_in_country = scope:target
		}
		add = {
			value = 200
			desc = POWER_BLOC_LEVERAGE_HAS_TREATY_PORT
		}
	}

	if = {
		limit = {
			is_adjacent_to_country = scope:target
		}
		add = {
			value = 150
			desc = POWER_BLOC_LEVERAGE_ADJACENT_TO_LEADER
		}
	}

	else_if = {
		limit = {
			has_strategic_adjacency = scope:target
		}
		add = {
			value = 100
			desc = POWER_BLOC_LEVERAGE_STRATEGIC_ADJACENCY
		}
	}

	if = {
		limit = {
			scope:target = {
				any_primary_culture = {
					shares_trait_with_any_primary_culture = root
				}
			}
		}
		add = {
			value = 100
			if = {
				limit = {
					scope:target = {
						any_primary_culture = {
							shares_heritage_trait_with_any_primary_culture = root
						}
					}
				}
				add = 50
			}
			if = {
				limit = {
					scope:target = {
						any_primary_culture = {
							shares_heritage_and_other_trait_with_any_primary_culture = root
						}
					}
				}
				add = 50
			}
			desc = POWER_BLOC_LEVERAGE_GAIN_FROM_CULTURAL_PROXIMITY
		}
	}

##### Mult factors: #####

	if = {
		limit = {
			scope:target = {
				has_diplomats_expelled = ROOT
			}
		}
		multiply = {
			value = 0.9
			if = {
				limit = {
					scope:target.country_rank = rank_value:great_power
				}
				add = -0.6
			}
			if = {
				limit = {
					scope:target.country_rank = rank_value:major_power
				}
				add = -0.4
			}
			if = {
				limit = {
					scope:target.country_rank = rank_value:minor_power
				}
				add = -0.2
			}
			desc = POWER_BLOC_LEVERAGE_PENALTY_FROM_EXPELLED_DIPLOMATS
		}
	}
	
	if = {
		limit = {
			scope:target = {
				any_primary_culture = {
					culture_is_discriminated_in = root
				}
			}
		}
		multiply = {
			value = 0.8
			desc = POWER_BLOC_LEVERAGE_PENALTY_FROM_DISCRIMINATED_PRIMARY_CULTURE
		}
	}
	
	if = {
		limit = {
			discriminates_religion = scope:target.religion
			NOT = {
				scope:target = {
					OR = {
						has_law = law_type:law_total_separation
						has_law = law_type:law_freedom_of_conscience
					}
				}
			}
		}
		multiply = {
			value = 0.7
			if = {
				limit = {
					root.power_bloc = {
						has_identity = identity:identity_religious
					}
				}
				add = -0.2
			}
			desc = POWER_BLOC_LEVERAGE_PENALTY_FROM_DISCRIMINATED_RELIGION
		}
	}
	
	if = {
		limit = {
			scope:has_capital_interest = no
		}
		multiply = {
			value = 0.7
			desc = POWER_BLOC_LEVERAGE_GAIN_NO_CAPITAL_INTEREST
		}
	}

	if = {
		limit = {
			has_war_with = scope:target
		}
		multiply = {
			value = 0.2
			desc = POWER_BLOC_LEVERAGE_HAS_WAR_WITH
		}
	}

	if = {
		limit = {
			infamy >= infamy_threshold:infamous
		}

		multiply = {
			value = 0.9

			if = {
				limit = {
					infamy >= infamy_threshold:notorious
				}
				add = -0.2
			}

			if = {
				limit = {
					infamy >= infamy_threshold:pariah
				}
				add = {
					value = -0.003
					multiply = infamy
				}
			}
			min = 0
			desc = POWER_BLOC_LEVERAGE_PENALTY_INFAMY
		}
	}
	
	if = {
		limit = {
			is_country_type = unrecognized
			scope:target = {
				NOT = { 
					is_country_type = unrecognized
				}
			}
		}
		multiply = {
			value = 0.1
			desc = POWER_BLOC_LEVERAGE_UNRECOGNIZED_LEADER_RECOGNIZED_TARGET
		}
	}
}

power_bloc_great_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:great_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_great_power_member = {
	value = modifier:power_bloc_mandate_progress_per_great_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_great_power_member_mult
		min = 0
	}
}

power_bloc_major_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:major_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_major_power_member = {
	value = modifier:power_bloc_mandate_progress_per_major_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_major_power_member_mult
		min = 0
	}
}

power_bloc_minor_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:minor_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_minor_power_member = {
	value = modifier:power_bloc_mandate_progress_per_minor_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_minor_power_member_mult
		min = 0
	}
}

power_bloc_unrecognized_major_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:unrecognized_major_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_unrecognized_major_power_member = {
	value = modifier:power_bloc_mandate_progress_per_unrecognized_major_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_unrecognized_major_power_member_mult
		min = 0
	}
}

power_bloc_unrecognized_regional_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:unrecognized_regional_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_unrecognized_regional_power_member = {
	value = modifier:power_bloc_mandate_progress_per_unrecognized_regional_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_unrecognized_regional_power_member_mult
		min = 0
	}
}

power_bloc_unrecognized_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:unrecognized_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_unrecognized_power_member = {
	value = modifier:power_bloc_mandate_progress_per_unrecognized_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_unrecognized_power_member_mult
		min = 0
	}
}

power_bloc_insignificant_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:insignificant_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_insignificant_power_member = {
	value = modifier:power_bloc_mandate_progress_per_insignificant_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_insignificant_power_member_mult
		min = 0
	}
}

power_bloc_mandate_progress_by_rank = {
	value = {
		value = 6
		subtract = power_bloc_rank
		min = 1
		desc = "POWER_BLOC_MANDATE_PROGRESS_BASE"
	}

	if = {
		limit = {
			power_bloc_great_power_non_leader_members > 0
			power_bloc_mandate_progress_per_great_power_member != 0
		}
		add = {
			value = power_bloc_great_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_great_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_GREAT_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_major_power_non_leader_members > 0
			power_bloc_mandate_progress_per_major_power_member != 0
		}
		add = {
			value = power_bloc_major_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_major_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_MAJOR_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_minor_power_non_leader_members > 0
			power_bloc_mandate_progress_per_minor_power_member != 0
		}
		add = {
			value = power_bloc_minor_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_minor_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_MINOR_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_unrecognized_major_power_non_leader_members > 0
			power_bloc_mandate_progress_per_unrecognized_major_power_member != 0
		}
		add = {
			value = power_bloc_unrecognized_major_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_unrecognized_major_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_UNRECOGNIZED_MAJOR_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_unrecognized_regional_power_non_leader_members > 0
			power_bloc_mandate_progress_per_unrecognized_regional_power_member != 0
		}
		add = {
			value = power_bloc_unrecognized_regional_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_unrecognized_regional_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_UNRECOGNIZED_REGIONAL_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_unrecognized_power_non_leader_members > 0
			power_bloc_mandate_progress_per_unrecognized_power_member != 0
		}
		add = {
			value = power_bloc_unrecognized_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_unrecognized_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_UNRECOGNIZED_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_insignificant_power_non_leader_members > 0
			power_bloc_mandate_progress_per_insignificant_power_member != 0
		}
		add = {
			value = power_bloc_insignificant_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_insignificant_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_INSIGNIFICANT_POWER_MEMBERS"
		}
	}
}

ai_power_bloc_identity_score = {
	### Trade League
	if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_identity = identity:identity_trade_league
			}
		}
		### Isolationism
		if = {
			limit = {
				modifier:market_disallow_trade_routes_bool = yes
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_DISALLOWED_TRADE_ROUTES"
				value = -200
			}
		}
		### Trade routes: increase for each trade route between the two countries
		if = {
			limit = {
				"num_mutual_trade_route_levels_with_country(scope:actor)" > 0
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MUTUAL_TRADE_ROUTES"
				value = "num_mutual_trade_route_levels_with_country(scope:actor)"
				multiply = 1
				max = 25
			}
		}
		### Economic Dependence: increase if high, decrease if low
		if = {
			limit = {
				"economic_dependence(scope:actor)" > 1
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_HIGH_ECONOMIC_DEPENDENCE"
				value = "economic_dependence(scope:actor)"
				subtract = 1
				multiply = 25
				max = 50
			}
		}
		else_if = {
			limit = {
				"economic_dependence(scope:actor)" < 1
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_LOW_ECONOMIC_DEPENDENCE"
				value = "economic_dependence(scope:actor)"
				subtract = 1
				multiply = 50
				min = -50
			}
		}
	}
	### Sovereign Empire
	else_if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_identity = identity:identity_sovereign_empire
			}
		}

		### Anti-Imperialism
		if = {
			limit = {
				has_strategy = ai_strategy_anti_imperialism
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_ANTI_IMPERIALISM"
				value = -200
			}
		}
		### Doesn't need the protection
		if = {
			limit = {
				has_powerful_protectors = yes
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_POWERFUL_PROTECTORS_THEM"
				value = -50
			}	
		}		
	}
	### Ideological Union
	else_if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_identity = identity:identity_ideological_union
			}
		}
		### Strong weight for ideological opinion
		if = {
			limit = {
				"ai_ideological_opinion(scope:actor)" > 0
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION"
				value = "ai_ideological_opinion(scope:actor)"
				multiply = 0.5
				max = 50
			}
		}
		else_if = {
			limit = {
				"ai_ideological_opinion(scope:actor)" < 0
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION_NEGATIVE"
				value = "ai_ideological_opinion(scope:actor)"
				multiply = 0.5
				min = -50
			}
		}
		### Bonus for ai strategy 'maintain balance of power'
		if = {
			limit = {
				has_strategy = ai_strategy_maintain_power_balance
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MAINTAIN_POWER_BALANCE"
				value = 50
			}
		}
		### Bonus for ai strategy 'world revolution'
		if = {
			limit = {
				has_strategy = ai_strategy_world_revolution
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_WORLD_REVOLUTION"
				value = 50
			}
		}
	}
	### Military Treaty
	else_if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_identity = identity:identity_military_treaty_organization
			}
		}
		### Big penalty for national militia law
		if = {
			limit = {
				has_law = law_type:law_national_militia
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_NATIONAL_MILITIA"
				value = -100
			}
		}
		### Bonus for territorial expansion strategy
		if = {
			limit = {
				has_strategy = ai_strategy_territorial_expansion
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_TERRITORIAL_EXPANSION"
				value = 50
			}
		}
		### Military spending
		if = {
			limit = {
				OR = {
					military_expenses_share < 0.25
					military_expenses < 2000
				}
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MILITARY_SPENDING"
				value = military_expenses_share
				subtract = 0.25
				multiply = 200
				min = -50
			}
		}
		else_if = {
			limit = {
				military_expenses_share > 0.3
				military_expenses > 5000
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MILITARY_SPENDING"
				value = military_expenses_share
				subtract = 0.3
				multiply = 100
				max = 50
			}
		}
	}
	### Religious homogeneity
	else_if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_identity = identity:identity_religious
			}
		}
		### Same religion
		if = {
			limit = {
				religion = scope:actor.religion
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_SAME_RELIGION"
				value = 50
			}
		}
		else = {
			### If you share a religious discrimination trait
			if = {
				limit = {
					religion = {
						shares_heritage_trait_with_state_religion = scope:actor
					}
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_DIFFERENT_RELIGION_BUT_SAME_TRAIT"
					value = -25
				}
			}
			### Different religion
			else = {
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_DIFFERENT_RELIGION"
					value = -50
				}
			}
		}
	}
}

ai_power_bloc_principle_score = {
	### Sovereign Empire: additional penalty if subject exploitation principle is selected
	if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_principle_group = principle_group:principle_group_exploit_members
			}
		}
		add = {
			desc = "[GetPowerBlocPrincipleGroup('principle_group_exploit_members').GetName]"
			value = -50
		}
	}
}

ai_accept_join_request_score = {
	### Trade League
	if = {
		limit = {
			power_bloc ?= {
				has_identity = identity:identity_trade_league
			}
		}
		### Joining country has Isolationism - ignore
		if = {
			limit = {
				scope:actor = {
					modifier:market_disallow_trade_routes_bool = yes
				}
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_DISALLOWED_TRADE_ROUTES_FIRST"
				value = -1000
			}
		}
		else = {
			### Trade routes: increase for each trade route between the two countries
			if = {
				limit = {
					"scope:actor.num_mutual_trade_route_levels_with_country(root)" > 0
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_MUTUAL_TRADE_ROUTES"
					value = "scope:actor.num_mutual_trade_route_levels_with_country(root)"
					multiply = 1
					max = 25
				}
			}
			### Economic Dependence: increase if high, decrease if low
			if = {
				limit = {
					"scope:actor.economic_dependence(root)" > 1
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_HIGH_ECONOMIC_DEPENDENCE_FIRST"
					value = "scope:actor.economic_dependence(root)"
					subtract = 1
					multiply = 25
					max = 50
				}
			}
			else_if = {
				limit = {
					"scope:actor.economic_dependence(root)" < 1
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_LOW_ECONOMIC_DEPENDENCE_FIRST"
					value = "scope:actor.economic_dependence(root)"
					subtract = 1
					multiply = 50
					min = -50
				}
			}
		}
	}
	### Sovereign Empire
	else_if = {
		limit = {
			power_bloc ?= {
				has_identity = identity:identity_sovereign_empire
			}
		}
		### Base bonus: sovereign empires should be happy to have more subjects
		add = {
			desc = "[GetPowerBlocIdentity('identity_sovereign_empire').GetName]"
			value = 50
		}
	}
	### Ideological Union
	else_if = {
		limit = {
			power_bloc ?= {
				has_identity = identity:identity_ideological_union
			}
		}
		### Strong weight for ideological opinion
		add = {
			desc = "DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION"
			value = "scope:actor.ai_ideological_opinion(root)"
			multiply = 0.5
			max = 50
			min = -50
		}
	}
	### Military Treaty
	else_if = {
		limit = {
			power_bloc ?= {
				has_identity = identity:identity_military_treaty_organization
			}
		}
		### Military spending - check the military spending of the joining country
		if = {
			limit = {
				scope:actor = {
					OR = {
						military_expenses_share < 0.25
						military_expenses < 2000
					}
				}
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MILITARY_SPENDING_FIRST"
				value = military_expenses_share
				subtract = 0.25
				multiply = 200
				min = -50
			}
		}
		else_if = {
			limit = {
				scope:actor = {
					military_expenses_share > 0.3
					military_expenses > 5000
				}
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MILITARY_SPENDING_FIRST"
				value = military_expenses_share
				subtract = 0.3
				multiply = 100
				max = 50
			}
		}
	}
	### Religious homogeneity
	else_if = {
		limit = {
			power_bloc ?= {
				has_identity = identity:identity_religious
			}
		}
		### Same religion
		if = {
			limit = {
				scope:actor = {
					religion = scope:actor.religion
				}
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_SAME_RELIGION"
				value = 50
			}
		}
		else = {
			### If you share a religious discrimination trait
			if = {
				limit = {
					scope:actor = {
						religion = {
							shares_heritage_trait_with_state_religion = root
						}
					}
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_DIFFERENT_RELIGION_BUT_SAME_TRAIT"
					value = -25
				}
			}
			### Different religion
			else = {
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_DIFFERENT_RELIGION"
					value = -50
				}
			}
		}
	}
}

scaled_cohesion_cost = {
	value = -0.05
	
	add = {
		value = scope:target_country.country_rank
		multiply = -0.025
	}
	
	if = {
		limit = { scope:target_country = { country_rank >= rank_value:great_power } }
		add = -0.075
	}
}

scaled_cohesion_cost_subjugation = {
	value = -0.2
	
	add = {
		value = scope:target_country.country_rank
		multiply = -0.1
	}
	
	if = {
		limit = {
			scope:target_country = { is_country_type = unrecognized }
		}
		divide = 3
	}
}
﻿base_impose_law_weight= {
	value = 0.01
	
	# Impose law is a fairly hostile act, AIs should use it mostly when angry at a subject
	if = {
		limit = {	
			has_attitude = {
				who = scope:target_country
				attitude = domineering
			}						
		}
		multiply = 0.5
	}
	
	# Non ideological unions make less use of this
	if = {
		limit = {
			NOT = { power_bloc ?= { has_identity = identity:identity_ideological_union } }
		}
		multiply = 0.5
	}
	
	# Less likely to do this to subjects unless LD is low
	if = {
		limit = {
			scope:target_country = {
				is_subject = yes
				liberty_desire > 25
			}
		}
		multiply = 0.5
	}	

	# Shouldn't care much about meddling in really tiny countries
	if = {
		limit = {
			scope:target_country = {
				gdp < 100000
			}
		}
		multiply = 0.25
	}
	else_if = {
		limit = {
			scope:target_country = {
				gdp < 250000
			}
		}
		multiply = 0.5
	}
	else_if = {
		limit = {
			scope:target_country = {
				gdp < 500000
			}
		}
		multiply = 0.75
	}	
	
	# Impact of AI strategies
	if = {
		limit = {
			has_strategy = ai_strategy_world_revolution
		}
		multiply = 5
	}
	else_if = {
		limit = {
			OR = {
				has_strategy = ai_strategy_anti_imperialism
				has_strategy = ai_strategy_maintain_power_balance
			}
		}
		multiply = 2
	}
	else_if = {
		limit = {
			OR = {
				has_strategy = ai_strategy_armed_isolationism
				has_strategy = ai_strategy_socialism_in_one_country
			}
		}
		multiply = 0.5
	}		

	# Prevent AI from effectively abolishing the free state of krakow
	# We should really do this in a systemic way in the future, maybe some kind of special subject interaction that guarantees them against legal meddling?
	if = {
		limit = {
			exists = c:KRA
			scope:target_country = { this = c:KRA }
		}
		multiply = 0.0 
	}	
}
﻿construction_cost_canal = 5000
construction_cost_monument = 2500
construction_cost_very_high = 800
construction_cost_high = 600
construction_cost_medium = 400
construction_cost_low = 200
construction_cost_very_low = 100

﻿# the weight of being picked when a new battle occurs on a Front
# root = commander
# is_advancing_side = whether this side is the one advancing or not (defending = no)
front_commander_pick_weight = {
	if = {
		value = root.command_limit_num_units
	}

	if = {
		limit = { scope:is_advancing_side = no }
		if = {
			limit = { has_commander_order = defend }
			add = 25
		}
		if = {
			limit = { has_trait = stalwart_defender }
			add = 5
		}
		if = {
			limit = { has_trait = trench_rat }
			add = 10
		}
		if = {
			limit = { has_trait = defense_in_depth_specialist }
			add = 15
		}
		if = {
			limit = { has_trait = basic_defensive_strategist }
			add = 5
		}
		if = {
			limit = { has_trait = experienced_defensive_strategist }
			add = 10
		}
		if = {
			limit = { has_trait = expert_defensive_strategist }
			add = 15
		}
		if = {
			limit = { has_commander_order = defend }
			add = 25
		}
	}
	else = {
		if = {
			limit = { has_trait = basic_offensive_planner }
			add = 5
		}
		if = {
			limit = { has_trait = experienced_offensive_planner }
			add = 10
		}
		if = {
			limit = { has_trait = expert_offensive_planner }
			add = 15
		}
	}

	# Commanders shouldn't be picked for multiple battles
	if = {
		limit = {
			is_in_battle = yes
		}
		multiply = 0
	}
}


# root = state
# front = the front we're evaluating basecamp states for
# own_commander = the commander leading this side in battle
# is_strategic_objective = indicates whether the root state is the Front's Strategic Objective
# is_adjacent_to_strategic_objective = indicates whether the root state is adjacent to the Front's Strategic Objective
# distance_to_strategic_objective = *squared* distance to this front active Strategic Objective, if any (use `exists` to check). Always > 0.0 when it exists.
# distance_to_closest_war_goal = *squared* distance to this front closest War Goal, if any (use `exists` to check). Always > 0.0 when it exists.
# if the console variable `debug_front_battle_weight` is enabled, data will be logged to std::cout.
# No randomness allowed

front_battle_state_weight = {
    value = 100000
    if = {
        limit = {
            scope:is_strategic_objective = yes
        }
        add = 1000
    }
	else_if = {
		limit = {
			scope:is_adjacent_to_strategic_objective = yes
		}
        add = 100
	}
	else_if = {
		limit = {
			exists = scope:distance_to_strategic_objective
		}
		divide = scope:distance_to_strategic_objective
	}
	else_if = {
		limit = {
			exists = scope:distance_to_closest_war_goal
		}
		divide = scope:distance_to_closest_war_goal
	}
	
    else = {
        subtract = 100
    }
}

# root = province
# front = the front this battle will happen on
# own_commander = the commander leading this side in battle
# enemy_commander = the commander defending in this battle (if any)
# is_strategic_objective = indicates whether the root province lies in the Front Strategic Objective
# is_adjacent_to_strategic_objective = indicates whether the root province is adjacent to the Front's Strategic Objective
# distance_to_strategic_objective = *squared* distance to this front active Strategic Objective, if any (use `exists` to check). Always > 0.0 when it exists.
# distance_to_closest_war_goal = *squared* distance to this front closest War Goal, if any (use `exists` to check). Always > 0.0 when it exists.
# if the console variable `debug_front_battle_weight` is enabled, data will be logged to std::cout.
# No randomness allowed

front_battle_province_weight = {
    value = 100000

	if = {
		limit = {
			exists = scope:distance_to_strategic_objective
		}
		divide = scope:distance_to_strategic_objective
	}
	
	else_if = {
		limit = {
			exists = scope:distance_to_closest_war_goal
		}
		divide = scope:distance_to_closest_war_goal
	}
}

province_terrain_infrastructure_force_limit = {
	value = 5
	add = {
		value = scope:province.state.infrastructure
		divide = 2
	}
	multiply = scope:province.combat_width
}

# the battalion size for each side in a land battle
# root = a country on the side being evaluated (this general's country, or this theater side owner if none)
# enemy_country = a country on the opposing side (the other general's country, or that theater side owner if none)
# front = the front to calculate troop weight for (if any; not during Naval Invasions)
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
# is_advancing_side = whether this side is the one advancing or not (defending = no)
# is_naval_invasion = if the battle is a naval landing battle
# province = the province where the battle is happening
land_battle_size = {
    # Start with a baseline number of battalions equal to the amount of allied troops on the front
    if = { # For all regular land battles
        limit = {
			scope:is_naval_invasion = no
        }

        value = {
			value = "scope:front.num_total_battalions(root)"
			desc = "BATTLE_SIZE_BASE_TOTAL_BATTALIONS_ON_FRONT"
		}
    }
	else_if = {
        limit = {
			scope:is_naval_invasion = yes
        }
		if = {
			limit = {
				scope:is_advancing_side = yes
			}
			value = {
				value = "scope:own_commander.num_mobilized_battalions"
				desc = "BATTLE_SIZE_BASE_NAVAL_INVASION_GENERALS_BATTALIONS"
			}
		}
		else_if = {
			limit = {
				scope:is_advancing_side = no
			}
			value = {
				value = "scope:province.land_controller_hq.num_garrison_units"
				desc = "BATTLE_SIZE_BASE_NAVAL_INVASION_GARRISONED_BATTALIONS"
			}
		}
	}
	
	# For regular land battles, subtract a random number of battalions depending on how many battalions are on the front compared to how long it is
	if = {
        limit = {
			exists = scope:front
        }

        subtract = {
			fixed_range = {
				min = 0
				max = {
					add = "scope:front.num_total_battalions(root)"
					subtract = {
						add = "scope:front.num_total_battalions(root)"
						divide = "scope:front.front_length"
					}
					divide = 2
				}
			}
			floor = yes
			desc = "BATTLE_SIZE_CONCENTRATION_ACROSS_LENGTH_OF_FRONT"
		}
    }
	
	save_temporary_value_as = pre_combat_width_cap
	
	# Cap to infrastructure-based combat width
	if = {
		limit = {
			scope:pre_combat_width_cap > province_terrain_infrastructure_force_limit
		}
		max = {
			value = province_terrain_infrastructure_force_limit
			ceiling = yes
			desc = "BATTLE_SIZE_TERRAIN_INFRASTRUCTRE"
		}
	}
	
	save_temporary_value_as = pre_numeric_advantage
	
    # In a regular land battle, if we have a general and outnumber the enemy we may be able to bring additional troops
	if = {
        limit = {
			scope:is_naval_invasion = no
            exists = scope:own_commander
            exists = scope:front
			"scope:front.num_total_battalions(root)" > "scope:front.num_total_battalions(scope:enemy_country)"
			"scope:front.num_total_battalions(scope:enemy_country)" > 0
		}
		value = {
			add = scope:pre_numeric_advantage
			multiply = {
				fixed_range = {
					min = 1
					max = {
						add = "scope:front.num_total_battalions(root)"
						divide = "scope:front.num_total_battalions(scope:enemy_country)"
						subtract = 1
						multiply = 1.5
						add = 1
						max = 3
					}
				}
			}
			ceiling = yes
			desc = "BATTLE_SIZE_NUMERIC_ADVANTAGE"
		}
    }
	
	save_temporary_value_as = pre_max_amount_cap
	
    # Cap to *actually available* troops
    if = {
		limit = {
			scope:is_naval_invasion = no
		}
		if = {
			limit = {
				scope:is_military_formation = no		# ignore this rule for miitary formation battles for now
				scope:is_advancing_side = yes
				scope:pre_max_amount_cap > {
					add = "scope:front.num_total_battalions(root)"
					subtract = "scope:front.num_defending_battalions(root)"
				}
			}
			max = {
				add = "scope:front.num_total_battalions(root)"
				subtract = "scope:front.num_defending_battalions(root)"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
		else_if = {
			limit = {
				scope:is_advancing_side = no
				scope:pre_max_amount_cap > "scope:front.num_total_battalions(root)"
			}
			max = {
				add = "scope:front.num_total_battalions(root)"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
	}
	else_if = {
		limit = {
			scope:is_naval_invasion = yes
		}
		if = {
			limit = {
				scope:is_advancing_side = yes
				scope:pre_max_amount_cap > "scope:own_commander.num_mobilized_battalions"
			}
			max = {
				add = "scope:own_commander.num_mobilized_battalions"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
		else_if = {
			limit = {
				scope:is_advancing_side = no
				scope:pre_max_amount_cap > "scope:province.land_controller_hq.num_garrison_units"
			}
			max = {
				add = "scope:province.land_controller_hq.num_garrison_units"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
	}
	
	save_temporary_value_as = pre_min_amount_cap
	
	# If we're advancing, ensure at least 1 Battalion is doing so
    if = {
        limit = {
            scope:is_advancing_side = yes
			scope:pre_min_amount_cap < 1
        }
        min = 1
		desc = "BATTLE_SIZE_MIN_AMOUNT_REACHED"
    }
}

# Defines weights for selecting Combat Units when a land battle is created.
# Units with weight <= 0 are never selected.
# root = combat unit
# own_commander = the commander leading this side in battle (if any; could be garrison)
# province = land province this battle takes place in
# is_advancing_side = boolean indicating whether this is the advancing side of the battle
land_battle_unit_selection_weight = {
	if = {
        limit = {
            OR = {
                manpower < define:NMilitary|MIN_USABLE_MANPOWER
                morale < 0.20
            }
        }
        value = -1
	}
	else = {
        value = manpower
        multiply = morale

        # Generals have a stronger tendency to bring their own Battalions than borrowed ones
        if = {
            limit = {
                exists = scope:own_commander
                exists = commander
                commander = scope:own_commander
            }
            multiply = 2
        }

        if = {
            limit = {
                exists = scope:own_commander
            }
            multiply = mobilization
        }

        if = {
            limit = {
                scope:is_advancing_side = yes
            }
            multiply = offense
        }

        else_if = {
            limit = {
                scope:is_advancing_side = no
            }
            multiply = defense
        }
	}
}

# the flotilla size for each side in a naval battle
# root = country
# enemy_country = the other country
# own_commander = the commander leading this side in battle (if any; could be garrison)
# military_formation = the military formation in this side of the battle
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
naval_battle_size = {
	if = {
		limit = {
			exists = scope:own_commander
		}
		value = {
		    value = scope:own_commander.num_units_share
		    desc = "NAVAL_BATTLE_SIZE_ADMIRAL_SHARE"
		}
	}
	else = {
        if = {
            limit = {
                exists = scope:military_formation
            }
            value = {
                value = scope:military_formation.num_commanderless_units
                desc = "NAVAL_BATTLE_SIZE_NUM_COMMANDERLESS_UNITS"
            }
	    }
    }
}

# Defines weights for selecting Combat Units when a naval battle is created.
# Units with weight <= 0 are never selected.
# root = combat unit
# own_commander = the commander leading this side in battle
# province = naval province this battle takes place in
# is_advancing_side = boolean indicating whether this is the attacker side of the battle.
naval_battle_unit_selection_weight = {
	if = {
        limit = {
            OR = {
                manpower < define:NMilitary|MIN_USABLE_MANPOWER
                morale < 0.20
            }
        }
        value = -1
    }
    else = {
	    value = 1
    }
}

# the weight for how likely a unit is to take casualties over others
# root = combat unit
battle_unit_casualty_weight = {
	value = 1
	divide = {
		value = morale
		min = 0.01
	}
}

﻿# root = state
# scope:culture = the culture we're evaluating the probability to spawn a new cultural community for.

# Each (state, culture) combination is evaluated once per month.
# Note: only cultures present in the same market as <state> are evaluated.

cultural_community_creation_weight = {

	# Conditions that block

	if = {
		limit = {
			OR = {
				devastation >= 50
				turmoil >= 60
				is_isolated_from_market = yes
			}
		}
		add = 0
	}
	else = {
		add = 0.001
	
		# Conditions that add
		if = {
			limit = {
				has_port = yes
			}
			add = 0.001
		}
		
		if = {
			limit = {
				has_decree = decree_greener_grass_campaign
			}
			add = 0.005
		}
	
		if = {
			limit = {
				on_river = yes
			}
			add = 0.001
		}
	
		if = {
			limit = {
				is_coastal = yes
			}
			add = 0.001
		}
	
		if = {
			limit = {
				is_under_colonization = yes
			}
			add = 0.005
		}
	
		if = {
			limit = {
				free_arable_land > 20
			}
			add = 0.001
		}

		if = {

			limit = {
				root = {
					has_building = building_trade_center
				}
			}
			add = 0.001
		}

		# Positive Conditions that Multiply
	
		if = {
			limit = {
				is_capital = yes
			}
			multiply = 1.1
		}
	
		if = {
			limit = {
				owner = {
					country_has_primary_culture = scope:culture
				}
			}
			multiply = 2.5
		}
	
		if = {
			limit = {
				OR = {
					has_state_trait = state_trait_natural_harbors
					has_state_trait = state_trait_good_soils
					has_state_trait = state_trait_london_docklands
					has_state_trait = state_trait_new_york_harbor
					has_state_trait = state_trait_halifax_harbor
					has_state_trait = state_trait_newark_harbor
				}
	
			}
			multiply = 1.2
		}
	
		# Negative Conditions that multiply 
	
		if = {
			limit = {
				has_decree = decree_violent_suppression
			}
			multiply = 0.5
		}
		
		if = {
			limit = {
				devastation >= 20
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				turmoil >= 30
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				state_unemployment_rate >= 0.1
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				owner = {
					is_at_war = yes
				}
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				state_has_goods_shortage = yes
			}
			multiply = 0.8
		}
	
		multiply = market_access
	
		if = {
			limit = {
				is_in_revolt = yes
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				is_slave_state = yes
				scope:culture = {
					NOT = { shares_heritage_trait_with_any_primary_culture = root.owner }
				}
			}
			multiply = 0.1
		}
	
		if = {
			limit = {
				has_state_trait = state_trait_malaria
				root.owner = {
					NOT = {
						has_technology_researched = quinine
					}
				}
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				has_state_trait = state_trait_severe_malaria
				root.owner = {
					NOT = {
						has_technology_researched = malaria_prevention
					}
				}
			}
			multiply = 0.3
		}

		if = {
			limit = {
				scope:culture = {
					culture_is_discriminated_in = root.owner
				}
			}
			multiply = 0.3
		}

		if = {
			limit = {
				num_cultural_communities >=5
			}
			multiply = 0.5
		}

		if = {
			limit = {
				num_cultural_communities >=10
			}
			multiply = 0.2
		}

		if = {
			limit = {
				num_cultural_communities >=15
			}
			multiply = 0.1
		}
	}

	# Bounds:
	max = define:NPops|CULTURAL_COMMUNITY_MAX_PER_MONTH_CHANCE
	min = 0
}

﻿grand_exhibition_points = {
	value = 0
	
	if = {
		limit = {
			infamy >= infamy_threshold:infamous
		}
		add = -5
	}
	
	if = {
		limit = {
			infamy >= infamy_threshold:notorious
		}
		add = -7
	}
	
	if = {
		limit = {
			infamy >= infamy_threshold:pariah
		}
		add = -15
	}
	
	if = {
		limit = {
			is_at_war = yes
		}
		add = -5
	}
	
	if = { #Depending on your rank add some points
		limit = {
			country_rank = rank_value:great_power
		}
		add = 10
	} 

	if = { 	
		limit = {
			country_rank = rank_value:major_power
		}
		add = 7
	} 

	if = {
		limit = {
			country_rank = rank_value:minor_power
		}
		add = 3
	} 
	
	if = {
		limit = {
			has_variable = first_to_reach_south_pole
		}
		add = 10
	}
	
	if = {
		limit = {
			has_variable = took_strange_rock_var #found a cool rock in antarctica
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = expedition_found_falls #reached the stanley falls
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = expedition_trading_gifts_accepted_var #traded gifts in the Congo expedition
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = recorded_expedition_film_var
		}
		add = 10
	}
	
	if = {
		limit = {
			has_variable = previous_expedition_grave #you have the grave of previous explorers
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = expedition_photography_var
		}
		add = 10
	}
	
	if = {
		limit = {
			has_variable = expedition_plants_var
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = expedition_barter_var #bartered with the NA natives
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = rhino_success_var
		}
		add = 5
	}
	
	if = {
		limit = { #you got some cool maps
			has_variable = expedition_geographic_var
		}
		add = 7
	}

	if = {
		limit = {
			techs_researched > 1
		}
		add = root.techs_researched
	}
}
﻿small_radicals = 0.02
medium_radicals = 0.05
large_radicals = 0.1
very_large_radicals = 0.2

# Election Momentum values
momentum_small = 0.1
momentum_medium = 0.2
momentum_large = 0.3
momentum_very_large = 0.5

momentum_small_decrease = -0.1
momentum_medium_decrease = -0.2
momentum_large_decrease = -0.3
momentum_very_large_decrease = -0.5

election_event_cooldown_months = 3

#Expedition values

day_until_next_expedition_event = 30 #How long between each expedition event

expedition_peril_amount_small = 1.2
expedition_peril_amount_medium = 2.2
expedition_peril_amount_large = 5

expedition_peril_decrease_small = -1
expedition_peril_decrease_medium = -2

expedition_progress_amount_small = 1
expedition_progress_amount_medium = 2
expedition_progress_amount_large = 5

short_modifier_time = 31 #2.5 years
normal_modifier_time = 61 #5 years
long_modifier_time = 121 #10 years
very_long_modifier_time = 241 # 20 years
stupidly_long_modifier_time = 600 # 50 years

# 0.015% of GDP, rounded to nearest 10
money_amount_multiplier_very_small = {
	value = root.gdp
	divide = 10000
	multiply = 0.075
	round = yes
	multiply = 10
}

# 0.025% of GDP, rounded to nearest 100
money_amount_multiplier_small = {
	value = root.gdp
	divide = 100000
	multiply = 0.15
	round = yes
	multiply = 100
}

# 0.05% of GDP, rounded to nearest 100
money_amount_multiplier_medium = {
	value = root.gdp
	divide = 100000
	multiply = 0.25
	round = yes
	multiply = 100
}

# 0.1% of GDP, rounded to nearest 1000
money_amount_multiplier_large = {
	value = root.gdp
	divide = 1000000
	multiply = 0.5
	round = yes
	multiply = 1000
}

# 0.2% of GDP, rounded to nearest 1000
money_amount_multiplier_more_large = {
	value = root.gdp
	divide = 1000000
	multiply = 1
	round = yes
	multiply = 1000
}

# 0.5% of GDP, rounded to nearest 1000
money_amount_multiplier_very_large = {
	value = root.gdp
	divide = 1000000
	multiply = 2.5
	round = yes
	multiply = 1000
}

money_amount_multiplier_large_state = {
	multiply = 0.001
}

#Revolution Progress Variables
revolution_retreat_small = -0.05
revolution_retreat_medium = -0.10
revolution_retreat_large = -0.15
revolution_retreat_very_large = -0.25

revolution_advance_small = 0.05
revolution_advance_medium = 0.10
revolution_advance_large = 0.15
revolution_advance_very_large = 0.25

#Law Enactment Variables
law_enactment_success_small = 0.05
law_enactment_success_medium = 0.10
law_enactment_success_large = 0.15
law_enactment_success_very_large = 0.20

law_enactment_success_retreat_small = -0.05
law_enactment_success_retreat_medium = -0.10
law_enactment_success_retreat_large = -0.15
law_enactment_success_retreat_very_large = -0.20

﻿### These script values tie to values from the code (aka act like enums)

# Pop Stratas
poor = 0
middle = 1
rich = 2

# Occupation Stages
none = 0
minimal = 1
partial = 2
full = 3


﻿pro_country_lobby_starting_appeasement = {
	value = 0
	
	scope:lobby_country = {	
		if = {
			limit = { 
				"relations(scope:target_country)" >= relations_threshold:friendly		
			}
			add = 2
		}
		else_if = {
			limit = { 
				"relations(scope:target_country)" >= relations_threshold:cordial			
			}
			add = 1
		}
		else_if = {
			limit = { 
				"relations(scope:target_country)" <= relations_threshold:hostile	
			}
			add = -2
		}	
		else_if = {
			limit = { 
				"relations(scope:target_country)" <= relations_threshold:poor			
			}
			add = -1
		}

		if = {
			limit = { 
				has_diplomatic_pact = {
					who = scope:target_country
					type = rivalry
				}					
			}
			add = -2
		}	

		if = {
			limit = { 
				has_diplomatic_pact = {
					who = scope:target_country
					type = embargo
				}					
			}
			add = -1
		}			
	
		if = {
			limit = { 
				has_diplomatic_pact = {
					who = scope:target_country
					type = alliance
				}					
			}
			add = 3
		}
		else_if = {
			limit = { 
				has_diplomatic_pact = {
					who = scope:target_country
					type = defensive_pact
				}					
			}
			add = 2
		}	

		if = {
			limit = { 
				has_diplomatic_pact = {
					who = scope:target_country
					type = trade_agreement
				}					
			}
			add = 1
		}		
	}
	
	max = 5
	min = -5
}

anti_country_lobby_starting_appeasement = {
	value = 0
	
	scope:lobby_country = {	
		if = {
			limit = { 
				"relations(scope:target_country)" >= relations_threshold:friendly		
			}
			add = -2
		}
		else_if = {
			limit = { 
				"relations(scope:target_country)" >= relations_threshold:cordial			
			}
			add = -1
		}
		else_if = {
			limit = { 
				"relations(scope:target_country)" <= relations_threshold:hostile	
			}
			add = 2
		}	
		else_if = {
			limit = { 
				"relations(scope:target_country)" <= relations_threshold:poor			
			}
			add = 1
		}

		if = {
			limit = { 
				has_diplomatic_pact = {
					who = scope:target_country
					type = rivalry
				}					
			}
			add = 2
		}	

		if = {
			limit = { 
				has_diplomatic_pact = {
					who = scope:target_country
					type = embargo
				}					
			}
			add = 1
		}			
	
		if = {
			limit = { 
				has_diplomatic_pact = {
					who = scope:target_country
					type = alliance
				}					
			}
			add = -3
		}
		else_if = {
			limit = { 
				has_diplomatic_pact = {
					who = scope:target_country
					type = defensive_pact
				}					
			}
			add = -2
		}	

		if = {
			limit = { 
				has_diplomatic_pact = {
					who = scope:target_country
					type = trade_agreement
				}					
			}
			add = -1
		}		
	}	
	
	max = 5
	min = -5
}

pro_overlord_lobby_starting_appeasement = {
	value = 0
	
	scope:lobby_country = {	
		if = {
			limit = { 
				"relations(scope:target_country)" >= relations_threshold:friendly		
			}
			add = 4
		}
		else_if = {
			limit = { 
				"relations(scope:target_country)" >= relations_threshold:cordial			
			}
			add = 2
		}
		else_if = {
			limit = { 
				"relations(scope:target_country)" <= relations_threshold:hostile	
			}
			add = -4
		}	
		else_if = {
			limit = { 
				"relations(scope:target_country)" <= relations_threshold:poor			
			}
			add = -2
		}

		if = {
			limit = { 
				OR = {
					is_subject_type = subject_type_puppet
					is_subject_type = subject_type_vassal
				}
			}
			add = 2
		}
		else_if = {
			limit = { 
				OR = {
					is_subject_type = subject_type_protectorate
					is_subject_type = subject_type_tributary
				}
			}
			add = -2
		}	
	}
	
	max = 5
	min = -5
}

anti_overlord_lobby_starting_appeasement = {
	value = 0
	
	scope:lobby_country = {	
		if = {
			limit = { 
				"relations(scope:target_country)" >= relations_threshold:friendly		
			}
			add = -4
		}
		else_if = {
			limit = { 
				"relations(scope:target_country)" >= relations_threshold:cordial			
			}
			add = -2
		}
		else_if = {
			limit = { 
				"relations(scope:target_country)" <= relations_threshold:hostile	
			}
			add = 4
		}	
		else_if = {
			limit = { 
				"relations(scope:target_country)" <= relations_threshold:poor			
			}
			add = 2
		}

		if = {
			limit = { 
				OR = {
					is_subject_type = subject_type_puppet
					is_subject_type = subject_type_vassal
				}
			}
			add = -2
		}
		else_if = {
			limit = { 
				OR = {
					is_subject_type = subject_type_protectorate
					is_subject_type = subject_type_tributary
				}
			}
			add = 2
		}	
	}
	
	max = 5
	min = -5
}
﻿lowest_state_population = {
	value = 0
	if = {
		limit = {
			state_population >= 0
		}
		value = state_population
		multiply = -1
	}
}
﻿#objectives values

state_infrastructure_balance = {
	value = 0
	if = {
		limit = {
			infrastructure > 0
		}
		value = infrastructure
		subtract = infrastructure_usage
	}
}
﻿### Constants
@max_battles_to_win_state = 4
@min_battles_to_win_state = 2
@min_victory_score = 100
@hazardous_terrain_factor = 0.03
@forested_terrain_factor = 0.02
@elevated_terrain_factor = 0.01

concentration_of_defensive_mobilized_battalions = {
	add = num_mobilized_units_in_theater
	divide = num_provinces_in_theater
}

provinces_with_hazardous_terrain = {
	every_province = {
		if = { 
			limit = { has_label = label_hazardous }
			add = 1
		}
	}
}

provinces_with_forested_terrain = {
	every_province = {
		if = { 
			limit = { has_label = label_forested }
			add = 1
		}
	}
}

provinces_with_elevated_terrain = {
	every_province = {
		if = { 
			limit = { has_label = label_elevated }
			add = 1
		}
	}
}

# root = state
# is_advancing_side = true if the state is being occupied
occupation_cost = {
	# population of the state sets the base cost
	add = {
		add = state_population
		divide = 1000
		max = 1000
		min = 10
		desc = "OCCUPATION_COST_FROM_POPULATION"
	}
	
	save_temporary_value_as = base_cost
	# cost increases for every province with difficult terrain, up to a limit set by infrastructure used in the state
	if = {
		limit = { provinces_with_hazardous_terrain > 0 }
		add = {
			add = scope:base_cost
			multiply = {
				add = {
					add = provinces_with_hazardous_terrain
					multiply = @[hazardous_terrain_factor]
				}
			}
			desc = "OCCUPATION_COST_FROM_NUM_HAZARDOUS_PROVINCES"
		}
	}
	
	if = {
		limit = { provinces_with_forested_terrain > 0 }
		add = {
			add = scope:base_cost
			multiply = {
				add = provinces_with_forested_terrain
				multiply = @[forested_terrain_factor]
			}
			desc = "OCCUPATION_COST_FROM_NUM_FORESTED_PROVINCES"
		}
	}
	if = {
		limit = { provinces_with_elevated_terrain > 0 }
		add = {
			add = scope:base_cost
			multiply = {
				add = provinces_with_elevated_terrain
				multiply = @[hazardous_terrain_factor]
			}
			desc = "OCCUPATION_COST_FROM_NUM_ELEVATED_PROVINCES"
		}
	}
	# for every 20 points of infrastructure usage in the state, 1x multiple of difficult terrain bonus is negated
	if = {
		limit = { infrastructure_usage > 1 }
		divide = {
			add = 1
			add = {
				add = {
					add = provinces_with_hazardous_terrain
					multiply = @[hazardous_terrain_factor]
				}
				add = {
					add = provinces_with_forested_terrain
					multiply = @[forested_terrain_factor]
				}
				add = {
					add = provinces_with_elevated_terrain
					multiply = @[elevated_terrain_factor]
				}
				save_temporary_value_as = total_difficult_terrain_malus
				
				max = {
					add = infrastructure_usage
					divide = 20
					max = scope:total_difficult_terrain_malus
				}
			}
			desc = "OCCUPATION_COST_FROM_INFRASTRUCTURE_USAGE"
		}
	}
	
	# cost increases for the occupier if there are more mobilized enemy battalions in the theater than there are provinces
	theater = {
		if = {
			limit = { 
				scope:is_advancing_side = yes
				concentration_of_defensive_mobilized_battalions > 1
			}
			multiply = {
				add = concentration_of_defensive_mobilized_battalions
				max = 10
			}
			desc = "OCCUPATION_COST_FROM_CONCENTRATION_OF_BATTALIONS"
		}
	}
	
	save_temporary_value_as = pre_clamped_cost
	if = {
		limit = { scope:pre_clamped_cost > @[min_victory_score*max_battles_to_win_state] }
		max = @[min_victory_score*max_battles_to_win_state]
		desc = "OCCUPATION_COST_MAX_VALUE_REACHED"
	}
	if = {
		limit = { scope:pre_clamped_cost < @[min_victory_score*min_battles_to_win_state] }
		min = @[min_victory_score*min_battles_to_win_state]
		desc = "OCCUPATION_COST_MIN_VALUE_REACHED"
	}	
}

# root = battleside
battle_victory_score = {
	add = {
		add = 100
		desc = "BATTLE_VICTORY_BASE"
	}

	multiply = {
			add = 1
			add = modifier:unit_occupation_mult
			min = 0
			desc = "BATTLE_VICTORY_UNIT_OCCUPATION_MULT"
		}
	
	save_temporary_value_as = pre_min_amount_cap
	if = {
		limit = { scope:pre_min_amount_cap < @[min_victory_score] }
		min = @[min_victory_score]
		desc = "BATTLE_VICTORY_MIN_VALUE_REACHED"
	}
	
	# Starting / Final Battalions on winning / losing side
	# Starting / Final Morale on winning / losing side
	# General scope of winning / losing side (for modifier access)
}
﻿max_setbacks_minus_one = {
	value = max_law_enactment_setbacks
	subtract = 1
}
﻿﻿leverage_threshold_to_invite = 200 	# Minimum leverage advantage from power bloc on country to be able to invite the country

# root = pact
# root.first_country: first country in the pact
# root.second_country: second country in the pact
# root = { liberty_desire < 50 }: compare trigger for current Liberty Desire value root.
# Must return a value which will be added to the current Liberty Desire in this pact.
liberty_desire_weekly_change = {
	add = {
		value = 0.1
		desc = "base_value"
	}
	
	if = {
		limit = { root.second_country = { has_government_type = gov_chartered_company } }
		add = {
			value = -0.2
			desc = "gov_chartered_company"
		}	
	}

	# Special - DEI collapses if independent
	if = {
		limit = { 
			root.first_country = { c:NET ?= this } 
			root.second_country = { c:DEI ?= this } 
		}
		add = {
			value = -0.2
			desc = "DEI"
		}	
	}		
	
	# Special - Pacify the Steppes
	if = {
		limit = { 
			root.first_country = { has_journal_entry = je_pacify_the_steppes } 
			root.second_country = { has_government_type = gov_zhuz } 
		}
		add = {
			value = -0.2
			desc = "pacify_the_steppe_modifier"
		}	
	}		

	add = {
		if = {
			limit = { "root.second_country.relations(root.first_country)" < relations_threshold:hostile }
			add = {
				add = 0.5
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_HOSTILE"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" < relations_threshold:cold }
			add = {
				add = 0.25
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_COLD"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" < relations_threshold:poor }
			add = {
				add = 0.10
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_POOR"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" < relations_threshold:cordial }
			add = {
				add = 0
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_NEUTRAL"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" >= relations_threshold:friendly }
			add = {
				add = -0.1
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_FRIENDLY"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" >= relations_threshold:amicable }
			add = {
				add = -0.05
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_AMICABLE"
			}
		}
		else_if = {
			limit = { "root.second_country.relations(root.first_country)" >= relations_threshold:cordial }
			add = {
				add = -0.025
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_RELATIONS_CORDIAL"				
			}
		}
	}
	
	add = {
		if = {
			limit = { root.first_country.infamy >= infamy_threshold:pariah }
			add = 2.0
		}
		else_if = {
			limit = { root.first_country.infamy >= infamy_threshold:notorious }
			add = 0.25
		}		
		else_if = {
			limit = { root.first_country.infamy >= infamy_threshold:infamous }
			add = 0.1
		}		
		
		desc = "concept_infamy"
	}
	
	if = {
		limit = { root.first_country = { has_diplomatic_pact = { who = root.second_country type = da_knowledge_sharing } } }
		add = {
			add = -0.05
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_KNOWLEDGE_SHARING"
		}
	}
	
	if = {
		limit = { root.first_country = { has_diplomatic_pact = { who = root.second_country type = exempt_from_service } } }
		add = {
			add = -0.05
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_EXEMPT_FROM_SERVICE"
		}
	}
		
	if = {
		limit = { root.first_country.prestige < 1 }
		add = {
			add = 1
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_NO_PRESTIGE_POSITIVE"
		}
	}
	else_if = {
		limit = { root.second_country.prestige < 1 }
		add = {
			add = -0.10
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_NO_PRESTIGE_NEGATIVE"
		}
	}	
	else_if = {
		limit = {
			OR = {
				is_diplomatic_action_type = protectorate
				is_diplomatic_action_type = tributary
			}
		}				
		if = {
			limit = { 	
				root.first_country.prestige > {
					add = root.second_country.prestige
					# determines the multiple of prestige the overlord must have achieved in order for prestige advantage to have a negative impact on Liberty Desire rather than positive
					multiply = 1.5
				}
			}
			add = {
				add = root.first_country.prestige
				divide = root.second_country.prestige
				divide = 150
				min = 0.01
				max = 0.05
				multiply = -1
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_1_5_NEGATIVE"
			}
		}
		else_if = {
			add = {
				add = root.second_country.prestige
				multiply = 1.5
				divide = root.first_country.prestige
				divide = 3
				max = 2.5
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_1_5_POSITIVE"
			}
		}	
	}
	else_if = {
		limit = {
			OR = {
				is_diplomatic_action_type = personal_union
				is_diplomatic_action_type = dominion
			}
		}				
		if = {
			limit = { 	
				root.first_country.prestige > {
					add = root.second_country.prestige
					# determines the multiple of prestige the overlord must have achieved in order for prestige advantage to have a negative impact on Liberty Desire rather than positive
					multiply = 2.0
				}
			}
			add = {
				add = root.first_country.prestige
				divide = root.second_country.prestige
				divide = 200
				min = 0.01
				max = 0.05
				multiply = -1
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_2_0_NEGATIVE"
			}
		}
		else_if = {
			add = {
				add = root.second_country.prestige
				multiply = 2.0
				divide = root.first_country.prestige
				divide = 3
				max = 2.5
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_2_0_POSITIVE"
			}
		}	
	}	
	else_if = {
		limit = {
			OR = {
				is_diplomatic_action_type = puppet
				is_diplomatic_action_type = vassal
			}
		}				
		if = {
			limit = { 	
				root.first_country.prestige > {
					add = root.second_country.prestige
					# determines the multiple of prestige the overlord must have achieved in order for prestige advantage to have a negative impact on Liberty Desire rather than positive
					multiply = 3
				}
			}
			add = {
				add = root.first_country.prestige
				divide = root.second_country.prestige
				divide = 300
				min = 0.01
				max = 0.05
				multiply = -1
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_3_0_NEGATIVE"
			}
		}
		else_if = {
			add = {
				add = root.second_country.prestige
				multiply = 3
				divide = root.first_country.prestige
				divide = 3
				max = 2.5
				desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRESTIGE_DIFFERENCE_3_0_POSITIVE"
			}
		}	
	}		
	
	second_country = {
		add = {
			ordered_interest_group = {
				limit = {
					is_member_of_lobby = lobby_type:lobby_pro_overlord
					is_in_government = yes
				}
				order_by = ig_clout
				subtract = ig_clout
				divide = 2
			}
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRO_LOBBY_INTEREST_GROUP_IN_GOVERNMENT"
		}
		add = {
			ordered_interest_group = {
				limit = {
					is_member_of_lobby = lobby_type:lobby_pro_overlord
					is_in_government = no
				}
				order_by = ig_clout
				subtract = ig_clout
				divide = 4
			}
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_PRO_LOBBY_INTEREST_GROUP_IN_OPPOSITION"
		}
		add = {
			ordered_interest_group = {
				limit = {
					is_member_of_lobby = lobby_type:lobby_anti_overlord
					is_in_government = yes
				}
				order_by = ig_clout
				add = ig_clout
				divide = 2
			}
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_ANTI_LOBBY_INTEREST_GROUP_IN_GOVERNMENT"
		}
		add = {
			ordered_interest_group = {
				limit = {
					is_member_of_lobby = lobby_type:lobby_anti_overlord
					is_in_government = no
				}
				order_by = ig_clout
				add = ig_clout
				divide = 4
			}
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_ANTI_LOBBY_INTEREST_GROUP_IN_OPPOSITION"
		}
	}
	
	if = {
		limit = { "root.second_country.economic_dependence(root.first_country)" > 0 }
		add = {
			value = 1
			subtract = "root.second_country.economic_dependence(root.first_country)"
			divide = 10
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_ECONOMIC_DEPENDENCE"
		}		
	}
	else = {
		add = {
			value = 1
			subtract = "root.second_country.economic_dependence(root.first_country)"
			divide = 3
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_ECONOMIC_DEPENDENCE"
		}	
	}
	
	if = {
		limit = {
			root.second_country.market = root.first_country.market
			root.second_country.capital = { is_isolated_from_market = yes }
		}
		add = {
			value = 1 
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_ISOLATED_FROM_MARKET"
		}
	}
	else_if = {
		limit = {
			root.second_country.market = root.first_country.market
			root.first_country.supply_network_strength < 1
			root.second_country = { has_port = yes }
			NOT = { root.second_country = { is_adjacent_to_country = root.first_country }}
		}
		add = {
			value = 1
			subtract = root.first_country.supply_network_strength
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_LOW_SUPPLY_NETWORK_STRENGTH"
		}
	}	
	
	if = {
		limit = {
			root.first_country = { 
				is_in_power_bloc = yes
				power_bloc = {
					has_principle = principle:principle_sacred_civics_2
				}
				religion = root.second_country.religion
			}
		}
		desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_SACRED_CIVICS"
		add = -0.1
	}	
	
	add = {
		value = root.second_country.modifier:country_liberty_desire_add
		desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_DESC_ADDITIONAL_ADDS"
	}
	
	add = {
		value = root.first_country.modifier:country_liberty_desire_of_subjects_add
		desc = "LIBERTY_SUBJECT_DESIRE_WEEKLY_CHANGE_DESC_ADDITIONAL_ADDS"
	}
	
	save_temporary_value_as = pre_scaling_value
	
	if = {
		limit = { 
			scope:pre_scaling_value < 0
			second_country = {
				liberty_desire < 50
			}
		}
		multiply = {
			add = second_country.liberty_desire
			divide = 50
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_SCALING_LOW"
		}
		max = -0.01
	}
	else_if = {
		limit = { 
			scope:pre_scaling_value > 0
			second_country = {
				liberty_desire > 50
			}
		}
		multiply = {
			add = 100
			subtract = second_country.liberty_desire
			divide = 50
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_SCALING_HIGH"
		}
		min = 0.01
	}	
	
	save_temporary_value_as = pre_mult_modifiers_value
	
	multiply = {
		value = 1
		if = {
			limit = { scope:pre_mult_modifiers_value > 0 }
			add = root.second_country.modifier:country_liberty_desire_increase_mult
		}
		else_if = {
			limit = { scope:pre_mult_modifiers_value < 0 }
			add = root.second_country.modifier:country_liberty_desire_decrease_mult
		}
		min = 0
		desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_DESC_ADDITIONAL_MULTS"
	}
	
	if = {
		limit = {
			root.second_country = {
				has_truce_with = root.first_country
				scope:pre_mult_modifiers_value > 0
			}
		}
		multiply = {
			value = 0.5
			desc = "LIBERTY_DESIRE_WEEKLY_CHANGE_TRUCE"
		}
	}
}

﻿#################################################################
#####					INFANTRY COUNT						#####
#################################################################

gfx_infantry_deploy_count = {
	value = 0
	scope:military_formation = { add = num_units }
	divide = 50
	add = 1
	max = 10
}

gfx_artillery_deploy_count = {
	value = 0
	scope:military_formation = { add = num_units }
	divide = 50
	add = 1
	max = 10
}

gfx_lightship_deploy_count = {
	value = 0
	scope:military_formation = { add = num_units }
	divide = 50
	add = 1
	max = 10
}

gfx_capitalship_deploy_count = {
	value = 0
	scope:military_formation = { add = num_units }
	divide = 50
	add = 1
	max = 10
}

gfx_supportship_deploy_count = {
	value = 0
	scope:military_formation = { add = num_units }
	divide = 50
	add = 1
	max = 10
}

gfx_infantry_mobilization_count = {
	value = 0
	market = {
		mg:small_arms = {
			add = market_goods_sell_orders
		}
	}
	divide = 1000
	add = 1
	max = 3
}

gfx_artillery_mobilization_count = {
	value = 0
	market = {
		mg:artillery = {
			add = market_goods_sell_orders
		}
	}
	divide = 1000
	add = 1
	max = 3
}
﻿# ROOT is the leader of the power bloc.
# scope:target is the target country.
# scope:has_interest is whether the power bloc has interest on the target country.
# scope:has_capital_interest is whether the power bloc has interest on the capital of the target country.
# No randomness is allowed in this script value
power_bloc_leverage_gain = {

##### Add factors: #####
	add = {
		value = 100
		desc = POWER_BLOC_LEVERAGE_GAIN_FROM_INTEREST
	}

	if = { 
		limit = {
			power_bloc ?= {
				any_power_bloc_member = {
					scope:target ?= this
				}
			}
		}
		add = {
			value = 300
			desc = POWER_BLOC_LEVERAGE_GAIN_FROM_MEMBERSHIP
		}
	}
	
	add = {
		value = 200
		multiply = "scope:target.economic_dependence(ROOT)"
			
		if = {
			limit = {
				root.power_bloc = {
					has_principle_group = principle_group:principle_group_foreign_investment
				}
			}
			multiply = 1.5
		}

		desc = POWER_BLOC_LEVERAGE_GAIN_FROM_ECONOMIC_DEPENDENCE
	}

	if = {
		limit = {
			is_in_war_together = scope:target
		}
		add = {
			value = 200
			desc = POWER_BLOC_LEVERAGE_GAIN_IN_COMMON_WAR
		}
	}

	if = {
		limit = {
			scope:target.religion = root.religion
			root.power_bloc = {
				has_identity = identity:identity_religious
			}
		}
		add = {
			value = 100
			desc = POWER_BLOC_LEVERAGE_GAIN_FROM_SHARED_RELIGION
		}
	}
	
	if = {
		limit = {
			has_treaty_port_in_country = scope:target
		}
		add = {
			value = 200
			desc = POWER_BLOC_LEVERAGE_HAS_TREATY_PORT
		}
	}

	if = {
		limit = {
			is_adjacent_to_country = scope:target
		}
		add = {
			value = 150
			desc = POWER_BLOC_LEVERAGE_ADJACENT_TO_LEADER
		}
	}

	else_if = {
		limit = {
			has_strategic_adjacency = scope:target
		}
		add = {
			value = 100
			desc = POWER_BLOC_LEVERAGE_STRATEGIC_ADJACENCY
		}
	}

	if = {
		limit = {
			scope:target = {
				any_primary_culture = {
					shares_trait_with_any_primary_culture = root
				}
			}
		}
		add = {
			value = 100
			if = {
				limit = {
					scope:target = {
						any_primary_culture = {
							shares_heritage_trait_with_any_primary_culture = root
						}
					}
				}
				add = 50
			}
			if = {
				limit = {
					scope:target = {
						any_primary_culture = {
							shares_heritage_and_other_trait_with_any_primary_culture = root
						}
					}
				}
				add = 50
			}
			desc = POWER_BLOC_LEVERAGE_GAIN_FROM_CULTURAL_PROXIMITY
		}
	}

##### Mult factors: #####

	if = {
		limit = {
			scope:target = {
				has_diplomats_expelled = ROOT
			}
		}
		multiply = {
			value = 0.9
			if = {
				limit = {
					scope:target.country_rank = rank_value:great_power
				}
				add = -0.6
			}
			if = {
				limit = {
					scope:target.country_rank = rank_value:major_power
				}
				add = -0.4
			}
			if = {
				limit = {
					scope:target.country_rank = rank_value:minor_power
				}
				add = -0.2
			}
			desc = POWER_BLOC_LEVERAGE_PENALTY_FROM_EXPELLED_DIPLOMATS
		}
	}
	
	if = {
		limit = {
			scope:target = {
				any_primary_culture = {
					culture_is_discriminated_in = root
				}
			}
		}
		multiply = {
			value = 0.8
			desc = POWER_BLOC_LEVERAGE_PENALTY_FROM_DISCRIMINATED_PRIMARY_CULTURE
		}
	}
	
	if = {
		limit = {
			discriminates_religion = scope:target.religion
			NOT = {
				scope:target = {
					OR = {
						has_law = law_type:law_total_separation
						has_law = law_type:law_freedom_of_conscience
					}
				}
			}
		}
		multiply = {
			value = 0.7
			if = {
				limit = {
					root.power_bloc = {
						has_identity = identity:identity_religious
					}
				}
				add = -0.2
			}
			desc = POWER_BLOC_LEVERAGE_PENALTY_FROM_DISCRIMINATED_RELIGION
		}
	}
	
	if = {
		limit = {
			scope:has_capital_interest = no
		}
		multiply = {
			value = 0.7
			desc = POWER_BLOC_LEVERAGE_GAIN_NO_CAPITAL_INTEREST
		}
	}

	if = {
		limit = {
			has_war_with = scope:target
		}
		multiply = {
			value = 0.2
			desc = POWER_BLOC_LEVERAGE_HAS_WAR_WITH
		}
	}

	if = {
		limit = {
			infamy >= infamy_threshold:infamous
		}

		multiply = {
			value = 0.9

			if = {
				limit = {
					infamy >= infamy_threshold:notorious
				}
				add = -0.2
			}

			if = {
				limit = {
					infamy >= infamy_threshold:pariah
				}
				add = {
					value = -0.003
					multiply = infamy
				}
			}
			min = 0
			desc = POWER_BLOC_LEVERAGE_PENALTY_INFAMY
		}
	}
	
	if = {
		limit = {
			is_country_type = unrecognized
			scope:target = {
				NOT = { 
					is_country_type = unrecognized
				}
			}
		}
		multiply = {
			value = 0.1
			desc = POWER_BLOC_LEVERAGE_UNRECOGNIZED_LEADER_RECOGNIZED_TARGET
		}
	}
}

power_bloc_great_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:great_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_great_power_member = {
	value = modifier:power_bloc_mandate_progress_per_great_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_great_power_member_mult
		min = 0
	}
}

power_bloc_major_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:major_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_major_power_member = {
	value = modifier:power_bloc_mandate_progress_per_major_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_major_power_member_mult
		min = 0
	}
}

power_bloc_minor_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:minor_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_minor_power_member = {
	value = modifier:power_bloc_mandate_progress_per_minor_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_minor_power_member_mult
		min = 0
	}
}

power_bloc_unrecognized_major_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:unrecognized_major_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_unrecognized_major_power_member = {
	value = modifier:power_bloc_mandate_progress_per_unrecognized_major_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_unrecognized_major_power_member_mult
		min = 0
	}
}

power_bloc_unrecognized_regional_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:unrecognized_regional_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_unrecognized_regional_power_member = {
	value = modifier:power_bloc_mandate_progress_per_unrecognized_regional_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_unrecognized_regional_power_member_mult
		min = 0
	}
}

power_bloc_unrecognized_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:unrecognized_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_unrecognized_power_member = {
	value = modifier:power_bloc_mandate_progress_per_unrecognized_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_unrecognized_power_member_mult
		min = 0
	}
}

power_bloc_insignificant_power_non_leader_members = {
	every_power_bloc_member = {
		if = {
			limit = {
				is_power_bloc_leader = no
				country_rank = rank_value:insignificant_power
			}
			add = 1
		}
	}
}

power_bloc_mandate_progress_per_insignificant_power_member = {
	value = modifier:power_bloc_mandate_progress_per_insignificant_power_member_add
	multiply = {
		value = 1
		add = modifier:power_bloc_mandate_progress_per_insignificant_power_member_mult
		min = 0
	}
}

power_bloc_mandate_progress_by_rank = {
	value = {
		value = 6
		subtract = power_bloc_rank
		min = 1
		desc = "POWER_BLOC_MANDATE_PROGRESS_BASE"
	}

	if = {
		limit = {
			power_bloc_great_power_non_leader_members > 0
			power_bloc_mandate_progress_per_great_power_member != 0
		}
		add = {
			value = power_bloc_great_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_great_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_GREAT_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_major_power_non_leader_members > 0
			power_bloc_mandate_progress_per_major_power_member != 0
		}
		add = {
			value = power_bloc_major_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_major_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_MAJOR_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_minor_power_non_leader_members > 0
			power_bloc_mandate_progress_per_minor_power_member != 0
		}
		add = {
			value = power_bloc_minor_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_minor_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_MINOR_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_unrecognized_major_power_non_leader_members > 0
			power_bloc_mandate_progress_per_unrecognized_major_power_member != 0
		}
		add = {
			value = power_bloc_unrecognized_major_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_unrecognized_major_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_UNRECOGNIZED_MAJOR_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_unrecognized_regional_power_non_leader_members > 0
			power_bloc_mandate_progress_per_unrecognized_regional_power_member != 0
		}
		add = {
			value = power_bloc_unrecognized_regional_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_unrecognized_regional_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_UNRECOGNIZED_REGIONAL_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_unrecognized_power_non_leader_members > 0
			power_bloc_mandate_progress_per_unrecognized_power_member != 0
		}
		add = {
			value = power_bloc_unrecognized_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_unrecognized_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_UNRECOGNIZED_POWER_MEMBERS"
		}
	}

	if = {
		limit = {
			power_bloc_insignificant_power_non_leader_members > 0
			power_bloc_mandate_progress_per_insignificant_power_member != 0
		}
		add = {
			value = power_bloc_insignificant_power_non_leader_members
			multiply = power_bloc_mandate_progress_per_insignificant_power_member
			desc = "POWER_BLOC_MANDATE_PROGRESS_FROM_INSIGNIFICANT_POWER_MEMBERS"
		}
	}
}

ai_power_bloc_identity_score = {
	### Trade League
	if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_identity = identity:identity_trade_league
			}
		}
		### Isolationism
		if = {
			limit = {
				modifier:market_disallow_trade_routes_bool = yes
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_DISALLOWED_TRADE_ROUTES"
				value = -200
			}
		}
		### Trade routes: increase for each trade route between the two countries
		if = {
			limit = {
				"num_mutual_trade_route_levels_with_country(scope:actor)" > 0
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MUTUAL_TRADE_ROUTES"
				value = "num_mutual_trade_route_levels_with_country(scope:actor)"
				multiply = 1
				max = 25
			}
		}
		### Economic Dependence: increase if high, decrease if low
		if = {
			limit = {
				"economic_dependence(scope:actor)" > 1
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_HIGH_ECONOMIC_DEPENDENCE"
				value = "economic_dependence(scope:actor)"
				subtract = 1
				multiply = 25
				max = 50
			}
		}
		else_if = {
			limit = {
				"economic_dependence(scope:actor)" < 1
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_LOW_ECONOMIC_DEPENDENCE"
				value = "economic_dependence(scope:actor)"
				subtract = 1
				multiply = 50
				min = -50
			}
		}
	}
	### Sovereign Empire
	else_if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_identity = identity:identity_sovereign_empire
			}
		}

		### Anti-Imperialism
		if = {
			limit = {
				has_strategy = ai_strategy_anti_imperialism
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_ANTI_IMPERIALISM"
				value = -200
			}
		}
		### Doesn't need the protection
		if = {
			limit = {
				has_powerful_protectors = yes
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_POWERFUL_PROTECTORS_THEM"
				value = -50
			}	
		}		
	}
	### Ideological Union
	else_if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_identity = identity:identity_ideological_union
			}
		}
		### Strong weight for ideological opinion
		if = {
			limit = {
				"ai_ideological_opinion(scope:actor)" > 0
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION"
				value = "ai_ideological_opinion(scope:actor)"
				multiply = 0.5
				max = 50
			}
		}
		else_if = {
			limit = {
				"ai_ideological_opinion(scope:actor)" < 0
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION_NEGATIVE"
				value = "ai_ideological_opinion(scope:actor)"
				multiply = 0.5
				min = -50
			}
		}
		### Bonus for ai strategy 'maintain balance of power'
		if = {
			limit = {
				has_strategy = ai_strategy_maintain_power_balance
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MAINTAIN_POWER_BALANCE"
				value = 50
			}
		}
		### Bonus for ai strategy 'world revolution'
		if = {
			limit = {
				has_strategy = ai_strategy_world_revolution
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_WORLD_REVOLUTION"
				value = 50
			}
		}
	}
	### Military Treaty
	else_if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_identity = identity:identity_military_treaty_organization
			}
		}
		### Big penalty for national militia law
		if = {
			limit = {
				has_law = law_type:law_national_militia
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_NATIONAL_MILITIA"
				value = -100
			}
		}
		### Bonus for territorial expansion strategy
		if = {
			limit = {
				has_strategy = ai_strategy_territorial_expansion
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_TERRITORIAL_EXPANSION"
				value = 50
			}
		}
		### Military spending
		if = {
			limit = {
				OR = {
					military_expenses_share < 0.25
					military_expenses < 2000
				}
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MILITARY_SPENDING"
				value = military_expenses_share
				subtract = 0.25
				multiply = 200
				min = -50
			}
		}
		else_if = {
			limit = {
				military_expenses_share > 0.3
				military_expenses > 5000
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MILITARY_SPENDING"
				value = military_expenses_share
				subtract = 0.3
				multiply = 100
				max = 50
			}
		}
	}
	### Religious homogeneity
	else_if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_identity = identity:identity_religious
			}
		}
		### Same religion
		if = {
			limit = {
				religion = scope:actor.religion
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_SAME_RELIGION"
				value = 50
			}
		}
		else = {
			### If you share a religious discrimination trait
			if = {
				limit = {
					religion = {
						shares_heritage_trait_with_state_religion = scope:actor
					}
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_DIFFERENT_RELIGION_BUT_SAME_TRAIT"
					value = -25
				}
			}
			### Different religion
			else = {
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_DIFFERENT_RELIGION"
					value = -50
				}
			}
		}
	}
}

ai_power_bloc_principle_score = {
	### Sovereign Empire: additional penalty if subject exploitation principle is selected
	if = {
		limit = {
			scope:actor.power_bloc ?= {
				has_principle_group = principle_group:principle_group_exploit_members
			}
		}
		add = {
			desc = "[GetPowerBlocPrincipleGroup('principle_group_exploit_members').GetName]"
			value = -50
		}
	}
}

ai_accept_join_request_score = {
	### Trade League
	if = {
		limit = {
			power_bloc ?= {
				has_identity = identity:identity_trade_league
			}
		}
		### Joining country has Isolationism - ignore
		if = {
			limit = {
				scope:actor = {
					modifier:market_disallow_trade_routes_bool = yes
				}
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_DISALLOWED_TRADE_ROUTES_FIRST"
				value = -1000
			}
		}
		else = {
			### Trade routes: increase for each trade route between the two countries
			if = {
				limit = {
					"scope:actor.num_mutual_trade_route_levels_with_country(root)" > 0
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_MUTUAL_TRADE_ROUTES"
					value = "scope:actor.num_mutual_trade_route_levels_with_country(root)"
					multiply = 1
					max = 25
				}
			}
			### Economic Dependence: increase if high, decrease if low
			if = {
				limit = {
					"scope:actor.economic_dependence(root)" > 1
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_HIGH_ECONOMIC_DEPENDENCE_FIRST"
					value = "scope:actor.economic_dependence(root)"
					subtract = 1
					multiply = 25
					max = 50
				}
			}
			else_if = {
				limit = {
					"scope:actor.economic_dependence(root)" < 1
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_LOW_ECONOMIC_DEPENDENCE_FIRST"
					value = "scope:actor.economic_dependence(root)"
					subtract = 1
					multiply = 50
					min = -50
				}
			}
		}
	}
	### Sovereign Empire
	else_if = {
		limit = {
			power_bloc ?= {
				has_identity = identity:identity_sovereign_empire
			}
		}
		### Base bonus: sovereign empires should be happy to have more subjects
		add = {
			desc = "[GetPowerBlocIdentity('identity_sovereign_empire').GetName]"
			value = 50
		}
	}
	### Ideological Union
	else_if = {
		limit = {
			power_bloc ?= {
				has_identity = identity:identity_ideological_union
			}
		}
		### Strong weight for ideological opinion
		add = {
			desc = "DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION"
			value = "scope:actor.ai_ideological_opinion(root)"
			multiply = 0.5
			max = 50
			min = -50
		}
	}
	### Military Treaty
	else_if = {
		limit = {
			power_bloc ?= {
				has_identity = identity:identity_military_treaty_organization
			}
		}
		### Military spending - check the military spending of the joining country
		if = {
			limit = {
				scope:actor = {
					OR = {
						military_expenses_share < 0.25
						military_expenses < 2000
					}
				}
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MILITARY_SPENDING_FIRST"
				value = military_expenses_share
				subtract = 0.25
				multiply = 200
				min = -50
			}
		}
		else_if = {
			limit = {
				scope:actor = {
					military_expenses_share > 0.3
					military_expenses > 5000
				}
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_MILITARY_SPENDING_FIRST"
				value = military_expenses_share
				subtract = 0.3
				multiply = 100
				max = 50
			}
		}
	}
	### Religious homogeneity
	else_if = {
		limit = {
			power_bloc ?= {
				has_identity = identity:identity_religious
			}
		}
		### Same religion
		if = {
			limit = {
				scope:actor = {
					religion = scope:actor.religion
				}
			}
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_SAME_RELIGION"
				value = 50
			}
		}
		else = {
			### If you share a religious discrimination trait
			if = {
				limit = {
					scope:actor = {
						religion = {
							shares_heritage_trait_with_state_religion = root
						}
					}
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_DIFFERENT_RELIGION_BUT_SAME_TRAIT"
					value = -25
				}
			}
			### Different religion
			else = {
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_DIFFERENT_RELIGION"
					value = -50
				}
			}
		}
	}
}

scaled_cohesion_cost = {
	value = -0.05
	
	add = {
		value = scope:target_country.country_rank
		multiply = -0.025
	}
	
	if = {
		limit = { scope:target_country = { country_rank >= rank_value:great_power } }
		add = -0.075
	}
}

scaled_cohesion_cost_subjugation = {
	value = -0.2
	
	add = {
		value = scope:target_country.country_rank
		multiply = -0.1
	}
	
	if = {
		limit = {
			scope:target_country = { is_country_type = unrecognized }
		}
		divide = 3
	}
}
﻿base_impose_law_weight= {
	value = 0.01
	
	# Impose law is a fairly hostile act, AIs should use it mostly when angry at a subject
	if = {
		limit = {	
			has_attitude = {
				who = scope:target_country
				attitude = domineering
			}						
		}
		multiply = 0.5
	}
	
	# Non ideological unions make less use of this
	if = {
		limit = {
			NOT = { power_bloc ?= { has_identity = identity:identity_ideological_union } }
		}
		multiply = 0.5
	}
	
	# Less likely to do this to subjects unless LD is low
	if = {
		limit = {
			scope:target_country = {
				is_subject = yes
				liberty_desire > 25
			}
		}
		multiply = 0.5
	}	

	# Shouldn't care much about meddling in really tiny countries
	if = {
		limit = {
			scope:target_country = {
				gdp < 100000
			}
		}
		multiply = 0.25
	}
	else_if = {
		limit = {
			scope:target_country = {
				gdp < 250000
			}
		}
		multiply = 0.5
	}
	else_if = {
		limit = {
			scope:target_country = {
				gdp < 500000
			}
		}
		multiply = 0.75
	}	
	
	# Impact of AI strategies
	if = {
		limit = {
			has_strategy = ai_strategy_world_revolution
		}
		multiply = 5
	}
	else_if = {
		limit = {
			OR = {
				has_strategy = ai_strategy_anti_imperialism
				has_strategy = ai_strategy_maintain_power_balance
			}
		}
		multiply = 2
	}
	else_if = {
		limit = {
			OR = {
				has_strategy = ai_strategy_armed_isolationism
				has_strategy = ai_strategy_socialism_in_one_country
			}
		}
		multiply = 0.5
	}		

	# Prevent AI from effectively abolishing the free state of krakow
	# We should really do this in a systemic way in the future, maybe some kind of special subject interaction that guarantees them against legal meddling?
	if = {
		limit = {
			exists = c:KRA
			scope:target_country = { this = c:KRA }
		}
		multiply = 0.0 
	}	
}
﻿construction_cost_canal = 5000
construction_cost_monument = 2500
construction_cost_very_high = 800
construction_cost_high = 600
construction_cost_medium = 400
construction_cost_low = 200
construction_cost_very_low = 100

﻿# the weight of being picked when a new battle occurs on a Front
# root = commander
# is_advancing_side = whether this side is the one advancing or not (defending = no)
front_commander_pick_weight = {
	if = {
		value = root.command_limit_num_units
	}

	if = {
		limit = { scope:is_advancing_side = no }
		if = {
			limit = { has_commander_order = defend }
			add = 25
		}
		if = {
			limit = { has_trait = stalwart_defender }
			add = 5
		}
		if = {
			limit = { has_trait = trench_rat }
			add = 10
		}
		if = {
			limit = { has_trait = defense_in_depth_specialist }
			add = 15
		}
		if = {
			limit = { has_trait = basic_defensive_strategist }
			add = 5
		}
		if = {
			limit = { has_trait = experienced_defensive_strategist }
			add = 10
		}
		if = {
			limit = { has_trait = expert_defensive_strategist }
			add = 15
		}
		if = {
			limit = { has_commander_order = defend }
			add = 25
		}
	}
	else = {
		if = {
			limit = { has_trait = basic_offensive_planner }
			add = 5
		}
		if = {
			limit = { has_trait = experienced_offensive_planner }
			add = 10
		}
		if = {
			limit = { has_trait = expert_offensive_planner }
			add = 15
		}
	}

	# Commanders shouldn't be picked for multiple battles
	if = {
		limit = {
			is_in_battle = yes
		}
		multiply = 0
	}
}


# root = state
# front = the front we're evaluating basecamp states for
# own_commander = the commander leading this side in battle
# is_strategic_objective = indicates whether the root state is the Front's Strategic Objective
# is_adjacent_to_strategic_objective = indicates whether the root state is adjacent to the Front's Strategic Objective
# distance_to_strategic_objective = *squared* distance to this front active Strategic Objective, if any (use `exists` to check). Always > 0.0 when it exists.
# distance_to_closest_war_goal = *squared* distance to this front closest War Goal, if any (use `exists` to check). Always > 0.0 when it exists.
# if the console variable `debug_front_battle_weight` is enabled, data will be logged to std::cout.
# No randomness allowed

front_battle_state_weight = {
    value = 100000
    if = {
        limit = {
            scope:is_strategic_objective = yes
        }
        add = 1000
    }
	else_if = {
		limit = {
			scope:is_adjacent_to_strategic_objective = yes
		}
        add = 100
	}
	else_if = {
		limit = {
			exists = scope:distance_to_strategic_objective
		}
		divide = scope:distance_to_strategic_objective
	}
	else_if = {
		limit = {
			exists = scope:distance_to_closest_war_goal
		}
		divide = scope:distance_to_closest_war_goal
	}
	
    else = {
        subtract = 100
    }
}

# root = province
# front = the front this battle will happen on
# own_commander = the commander leading this side in battle
# enemy_commander = the commander defending in this battle (if any)
# is_strategic_objective = indicates whether the root province lies in the Front Strategic Objective
# is_adjacent_to_strategic_objective = indicates whether the root province is adjacent to the Front's Strategic Objective
# distance_to_strategic_objective = *squared* distance to this front active Strategic Objective, if any (use `exists` to check). Always > 0.0 when it exists.
# distance_to_closest_war_goal = *squared* distance to this front closest War Goal, if any (use `exists` to check). Always > 0.0 when it exists.
# if the console variable `debug_front_battle_weight` is enabled, data will be logged to std::cout.
# No randomness allowed

front_battle_province_weight = {
    value = 100000

	if = {
		limit = {
			exists = scope:distance_to_strategic_objective
		}
		divide = scope:distance_to_strategic_objective
	}
	
	else_if = {
		limit = {
			exists = scope:distance_to_closest_war_goal
		}
		divide = scope:distance_to_closest_war_goal
	}
}

province_terrain_infrastructure_force_limit = {
	value = 5
	add = {
		value = scope:province.state.infrastructure
		divide = 2
	}
	multiply = scope:province.combat_width
}

# the battalion size for each side in a land battle
# root = a country on the side being evaluated (this general's country, or this theater side owner if none)
# enemy_country = a country on the opposing side (the other general's country, or that theater side owner if none)
# front = the front to calculate troop weight for (if any; not during Naval Invasions)
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
# is_advancing_side = whether this side is the one advancing or not (defending = no)
# is_naval_invasion = if the battle is a naval landing battle
# province = the province where the battle is happening
land_battle_size = {
    # Start with a baseline number of battalions equal to the amount of allied troops on the front
    if = { # For all regular land battles
        limit = {
			scope:is_naval_invasion = no
        }

        value = {
			value = "scope:front.num_total_battalions(root)"
			desc = "BATTLE_SIZE_BASE_TOTAL_BATTALIONS_ON_FRONT"
		}
    }
	else_if = {
        limit = {
			scope:is_naval_invasion = yes
        }
		if = {
			limit = {
				scope:is_advancing_side = yes
			}
			value = {
				value = "scope:own_commander.num_mobilized_battalions"
				desc = "BATTLE_SIZE_BASE_NAVAL_INVASION_GENERALS_BATTALIONS"
			}
		}
		else_if = {
			limit = {
				scope:is_advancing_side = no
			}
			value = {
				value = "scope:province.land_controller_hq.num_garrison_units"
				desc = "BATTLE_SIZE_BASE_NAVAL_INVASION_GARRISONED_BATTALIONS"
			}
		}
	}
	
	# For regular land battles, subtract a random number of battalions depending on how many battalions are on the front compared to how long it is
	if = {
        limit = {
			exists = scope:front
        }

        subtract = {
			fixed_range = {
				min = 0
				max = {
					add = "scope:front.num_total_battalions(root)"
					subtract = {
						add = "scope:front.num_total_battalions(root)"
						divide = "scope:front.front_length"
					}
					divide = 2
				}
			}
			floor = yes
			desc = "BATTLE_SIZE_CONCENTRATION_ACROSS_LENGTH_OF_FRONT"
		}
    }
	
	save_temporary_value_as = pre_combat_width_cap
	
	# Cap to infrastructure-based combat width
	if = {
		limit = {
			scope:pre_combat_width_cap > province_terrain_infrastructure_force_limit
		}
		max = {
			value = province_terrain_infrastructure_force_limit
			ceiling = yes
			desc = "BATTLE_SIZE_TERRAIN_INFRASTRUCTRE"
		}
	}
	
	save_temporary_value_as = pre_numeric_advantage
	
    # In a regular land battle, if we have a general and outnumber the enemy we may be able to bring additional troops
	if = {
        limit = {
			scope:is_naval_invasion = no
            exists = scope:own_commander
            exists = scope:front
			"scope:front.num_total_battalions(root)" > "scope:front.num_total_battalions(scope:enemy_country)"
			"scope:front.num_total_battalions(scope:enemy_country)" > 0
		}
		value = {
			add = scope:pre_numeric_advantage
			multiply = {
				fixed_range = {
					min = 1
					max = {
						add = "scope:front.num_total_battalions(root)"
						divide = "scope:front.num_total_battalions(scope:enemy_country)"
						subtract = 1
						multiply = 1.5
						add = 1
						max = 3
					}
				}
			}
			ceiling = yes
			desc = "BATTLE_SIZE_NUMERIC_ADVANTAGE"
		}
    }
	
	save_temporary_value_as = pre_max_amount_cap
	
    # Cap to *actually available* troops
    if = {
		limit = {
			scope:is_naval_invasion = no
		}
		if = {
			limit = {
				scope:is_military_formation = no		# ignore this rule for miitary formation battles for now
				scope:is_advancing_side = yes
				scope:pre_max_amount_cap > {
					add = "scope:front.num_total_battalions(root)"
					subtract = "scope:front.num_defending_battalions(root)"
				}
			}
			max = {
				add = "scope:front.num_total_battalions(root)"
				subtract = "scope:front.num_defending_battalions(root)"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
		else_if = {
			limit = {
				scope:is_advancing_side = no
				scope:pre_max_amount_cap > "scope:front.num_total_battalions(root)"
			}
			max = {
				add = "scope:front.num_total_battalions(root)"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
	}
	else_if = {
		limit = {
			scope:is_naval_invasion = yes
		}
		if = {
			limit = {
				scope:is_advancing_side = yes
				scope:pre_max_amount_cap > "scope:own_commander.num_mobilized_battalions"
			}
			max = {
				add = "scope:own_commander.num_mobilized_battalions"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
		else_if = {
			limit = {
				scope:is_advancing_side = no
				scope:pre_max_amount_cap > "scope:province.land_controller_hq.num_garrison_units"
			}
			max = {
				add = "scope:province.land_controller_hq.num_garrison_units"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
	}
	
	save_temporary_value_as = pre_min_amount_cap
	
	# If we're advancing, ensure at least 1 Battalion is doing so
    if = {
        limit = {
            scope:is_advancing_side = yes
			scope:pre_min_amount_cap < 1
        }
        min = 1
		desc = "BATTLE_SIZE_MIN_AMOUNT_REACHED"
    }
}

# Defines weights for selecting Combat Units when a land battle is created.
# Units with weight <= 0 are never selected.
# root = combat unit
# own_commander = the commander leading this side in battle (if any; could be garrison)
# province = land province this battle takes place in
# is_advancing_side = boolean indicating whether this is the advancing side of the battle
land_battle_unit_selection_weight = {
	if = {
        limit = {
            OR = {
                manpower < define:NMilitary|MIN_USABLE_MANPOWER
                morale < 0.20
            }
        }
        value = -1
	}
	else = {
        value = manpower
        multiply = morale

        # Generals have a stronger tendency to bring their own Battalions than borrowed ones
        if = {
            limit = {
                exists = scope:own_commander
                exists = commander
                commander = scope:own_commander
            }
            multiply = 2
        }

        if = {
            limit = {
                exists = scope:own_commander
            }
            multiply = mobilization
        }

        if = {
            limit = {
                scope:is_advancing_side = yes
            }
            multiply = offense
        }

        else_if = {
            limit = {
                scope:is_advancing_side = no
            }
            multiply = defense
        }
	}
}

# the flotilla size for each side in a naval battle
# root = country
# enemy_country = the other country
# own_commander = the commander leading this side in battle (if any; could be garrison)
# military_formation = the military formation in this side of the battle
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
naval_battle_size = {
	if = {
		limit = {
			exists = scope:own_commander
		}
		value = {
		    value = scope:own_commander.num_units_share
		    desc = "NAVAL_BATTLE_SIZE_ADMIRAL_SHARE"
		}
	}
	else = {
        if = {
            limit = {
                exists = scope:military_formation
            }
            value = {
                value = scope:military_formation.num_commanderless_units
                desc = "NAVAL_BATTLE_SIZE_NUM_COMMANDERLESS_UNITS"
            }
	    }
    }
}

# Defines weights for selecting Combat Units when a naval battle is created.
# Units with weight <= 0 are never selected.
# root = combat unit
# own_commander = the commander leading this side in battle
# province = naval province this battle takes place in
# is_advancing_side = boolean indicating whether this is the attacker side of the battle.
naval_battle_unit_selection_weight = {
	if = {
        limit = {
            OR = {
                manpower < define:NMilitary|MIN_USABLE_MANPOWER
                morale < 0.20
            }
        }
        value = -1
    }
    else = {
	    value = 1
    }
}

# the weight for how likely a unit is to take casualties over others
# root = combat unit
battle_unit_casualty_weight = {
	value = 1
	divide = {
		value = morale
		min = 0.01
	}
}

﻿# root = state
# scope:culture = the culture we're evaluating the probability to spawn a new cultural community for.

# Each (state, culture) combination is evaluated once per month.
# Note: only cultures present in the same market as <state> are evaluated.

cultural_community_creation_weight = {

	# Conditions that block

	if = {
		limit = {
			OR = {
				devastation >= 50
				turmoil >= 60
				is_isolated_from_market = yes
			}
		}
		add = 0
	}
	else = {
		add = 0.001
	
		# Conditions that add
		if = {
			limit = {
				has_port = yes
			}
			add = 0.001
		}
		
		if = {
			limit = {
				has_decree = decree_greener_grass_campaign
			}
			add = 0.005
		}
	
		if = {
			limit = {
				on_river = yes
			}
			add = 0.001
		}
	
		if = {
			limit = {
				is_coastal = yes
			}
			add = 0.001
		}
	
		if = {
			limit = {
				is_under_colonization = yes
			}
			add = 0.005
		}
	
		if = {
			limit = {
				free_arable_land > 20
			}
			add = 0.001
		}

		if = {

			limit = {
				root = {
					has_building = building_trade_center
				}
			}
			add = 0.001
		}

		# Positive Conditions that Multiply
	
		if = {
			limit = {
				is_capital = yes
			}
			multiply = 1.1
		}
	
		if = {
			limit = {
				owner = {
					country_has_primary_culture = scope:culture
				}
			}
			multiply = 2.5
		}
	
		if = {
			limit = {
				OR = {
					has_state_trait = state_trait_natural_harbors
					has_state_trait = state_trait_good_soils
					has_state_trait = state_trait_london_docklands
					has_state_trait = state_trait_new_york_harbor
					has_state_trait = state_trait_halifax_harbor
					has_state_trait = state_trait_newark_harbor
				}
	
			}
			multiply = 1.2
		}
	
		# Negative Conditions that multiply 
	
		if = {
			limit = {
				has_decree = decree_violent_suppression
			}
			multiply = 0.5
		}
		
		if = {
			limit = {
				devastation >= 20
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				turmoil >= 30
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				state_unemployment_rate >= 0.1
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				owner = {
					is_at_war = yes
				}
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				state_has_goods_shortage = yes
			}
			multiply = 0.8
		}
	
		multiply = market_access
	
		if = {
			limit = {
				is_in_revolt = yes
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				is_slave_state = yes
				scope:culture = {
					NOT = { shares_heritage_trait_with_any_primary_culture = root.owner }
				}
			}
			multiply = 0.1
		}
	
		if = {
			limit = {
				has_state_trait = state_trait_malaria
				root.owner = {
					NOT = {
						has_technology_researched = quinine
					}
				}
			}
			multiply = 0.5
		}
	
		if = {
			limit = {
				has_state_trait = state_trait_severe_malaria
				root.owner = {
					NOT = {
						has_technology_researched = malaria_prevention
					}
				}
			}
			multiply = 0.3
		}

		if = {
			limit = {
				scope:culture = {
					culture_is_discriminated_in = root.owner
				}
			}
			multiply = 0.3
		}

		if = {
			limit = {
				num_cultural_communities >=5
			}
			multiply = 0.5
		}

		if = {
			limit = {
				num_cultural_communities >=10
			}
			multiply = 0.2
		}

		if = {
			limit = {
				num_cultural_communities >=15
			}
			multiply = 0.1
		}
	}

	# Bounds:
	max = define:NPops|CULTURAL_COMMUNITY_MAX_PER_MONTH_CHANCE
	min = 0
}

﻿grand_exhibition_points = {
	value = 0
	
	if = {
		limit = {
			infamy >= infamy_threshold:infamous
		}
		add = -5
	}
	
	if = {
		limit = {
			infamy >= infamy_threshold:notorious
		}
		add = -7
	}
	
	if = {
		limit = {
			infamy >= infamy_threshold:pariah
		}
		add = -15
	}
	
	if = {
		limit = {
			is_at_war = yes
		}
		add = -5
	}
	
	if = { #Depending on your rank add some points
		limit = {
			country_rank = rank_value:great_power
		}
		add = 10
	} 

	if = { 	
		limit = {
			country_rank = rank_value:major_power
		}
		add = 7
	} 

	if = {
		limit = {
			country_rank = rank_value:minor_power
		}
		add = 3
	} 
	
	if = {
		limit = {
			has_variable = first_to_reach_south_pole
		}
		add = 10
	}
	
	if = {
		limit = {
			has_variable = took_strange_rock_var #found a cool rock in antarctica
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = expedition_found_falls #reached the stanley falls
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = expedition_trading_gifts_accepted_var #traded gifts in the Congo expedition
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = recorded_expedition_film_var
		}
		add = 10
	}
	
	if = {
		limit = {
			has_variable = previous_expedition_grave #you have the grave of previous explorers
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = expedition_photography_var
		}
		add = 10
	}
	
	if = {
		limit = {
			has_variable = expedition_plants_var
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = expedition_barter_var #bartered with the NA natives
		}
		add = 5
	}
	
	if = {
		limit = {
			has_variable = rhino_success_var
		}
		add = 5
	}
	
	if = {
		limit = { #you got some cool maps
			has_variable = expedition_geographic_var
		}
		add = 7
	}

	if = {
		limit = {
			techs_researched > 1
		}
		add = root.techs_researched
	}
}

﻿# root = country
# scope:war = the war we're evaluating war exhaustion for
# No randomness is allowed in this script value

war_exhaustion_from_enemy_contested_wargoals = {
	add = define:NWar|WAR_EXHAUSTION_CONTESTED_ENEMY_WARGOALS
	multiply = "enemy_contested_wargoals(scope:war)"
}

military_size = {
	add = army_size_including_conscripts
	add = navy_size
}

war_exhaustion_from_casualties = {
	add = "scope:war.num_country_casualties(root)"
	if = {
		limit = { military_size > 0 }
		divide = military_size
	}
	divide = 1000
	multiply = define:NWar|WAR_EXHAUSTION_KIA_FACTOR
	multiply = {
		add = define:NWar|WAR_EXHAUSTION_KIA_BASE_MULTIPLIER
		add = {
			add = "size_weighted_lost_battles_fraction(scope:war)"
			multiply = define:NWar|WAR_EXHAUSTION_KIA_BATTLES_LOST_MULTIPLIER
		}
	}
}

war_exhaustion_from_lobby_clout = {
	add = "lobby_war_opposition(scope:war)"
	multiply = define:NWar|WAR_EXHAUSTION_ANTI_WAR_LOBBY_CLOUT_FACTOR
}

war_support_from_lobby_clout = {
	add = "lobby_war_support(scope:war)"
	multiply = define:NWar|WAR_EXHAUSTION_PRO_WAR_LOBBY_CLOUT_FACTOR
}

war_exhaustion_from_country_turmoil = {
	add = country_turmoil
	multiply = define:NWar|WAR_EXHAUSTION_TURMOIL_FACTOR
}

war_exhaustion = {
	add = {
		add = define:NWar|WAR_EXHAUSTION_BASE
		desc = "WAR_EXHAUSTION_BASE"
	}
	
	add = {
		if = {
			limit = {
				enemy_occupation <= 0.0
			}
			add = {
				add = 0.0
				desc = "WAR_EXHAUSTION_FROM_ENEMY_OCCUPATION_NONE"
			}
		}
		else_if = {
			limit = {
				enemy_occupation < 0.1
			}
			add = {
				add = 0.1
				desc = "WAR_EXHAUSTION_FROM_ENEMY_OCCUPATION_LOW"
			}
		}
		else_if = {
			limit = {
				enemy_occupation < 0.25
			}
			add = {
				add = 0.5
				desc = "WAR_EXHAUSTION_FROM_ENEMY_OCCUPATION_MODERATE"
			}
		}
		else_if = {
			limit = {
				enemy_occupation < 0.5
			}
			add = {
				add = 1.0
				desc = "WAR_EXHAUSTION_FROM_ENEMY_OCCUPATION_SUBSTANTIAL"
			}
		}
		else_if = {
			limit = {
				enemy_occupation < 0.75
			}
			add = {
				add = 2.0
				desc = "WAR_EXHAUSTION_FROM_ENEMY_OCCUPATION_HIGH"
			}
		}
		else_if = {
			limit = {
				enemy_occupation < 0.9
			}
			add = {
				add = 3.0
				desc = "WAR_EXHAUSTION_FROM_ENEMY_OCCUPATION_EXTREME"
			}
		}
		else_if = {
			limit = {
				enemy_occupation <= 1.0
			}
			add = {
				add = 10.0
				desc = "WAR_EXHAUSTION_FROM_ENEMY_OCCUPATION_TOTAL"
			}
		}
	}

	if = {
		limit = { war_exhaustion_from_enemy_contested_wargoals >= 0.01 }
		add = {
			add = war_exhaustion_from_enemy_contested_wargoals
			desc = "WAR_EXHAUSTION_FROM_ENEMY_CONTESTED_WARGOALS"
		}
	}
	
	if = {
		limit = { war_exhaustion_from_casualties >= 0.01 }
		add = {
			add = war_exhaustion_from_casualties
			desc = "WAR_EXHAUSTION_FROM_CASUALTIES"
			multiply = {
				add = 1
				add = modifier:country_war_exhaustion_casualties_mult
				min = 0
				desc = "WAR_EXHAUSTION_FROM_country_war_exhaustion_casualties_mult"
			}
		}
	}
	
	if = {
		limit = { war_exhaustion_from_country_turmoil >= 0.01 }
		add = {
			add = war_exhaustion_from_country_turmoil
			desc = "WAR_EXHAUSTION_FROM_TURMOIL"
		}
	}	
	
	if = {
		limit = { war_exhaustion_from_lobby_clout >= 0.01 }
		add = {
			add = war_exhaustion_from_lobby_clout
			desc = "WAR_OPPOSITION_FROM_LOBBIES"
		}
	}	
	
	if = {
		limit = { war_support_from_lobby_clout <= -0.01 }
		add = {
			add = war_support_from_lobby_clout
			desc = "WAR_SUPPORT_FROM_LOBBIES"
		}
	}		
	
	add = {
		add = "additional_war_exhaustion(scope:war.diplomatic_play)"
		desc = "WAR_EXHAUSTION_FROM_EVENTS"
	}
}
