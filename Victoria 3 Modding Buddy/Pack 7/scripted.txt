﻿christ_of_nations_button = {
	name = "christ_of_nations_button"
	desc = "christ_of_nations_button_desc"

	visible = { always = yes }

	possible = {
        OR = {
            is_subject = no
            has_law = law_type:law_protected_speech
            has_law = law_type:law_right_of_assembly
        }
		custom_tooltip = {
			text = christ_of_nations_button_tt_2
			NOT = {
				has_variable = christ_of_nations_cooldown
			}
		}
	}

	effect = {
		trigger_event = { id = poland_events.1 days = 0 popup = yes }
		custom_tooltip = christ_of_nations_button_tt_1
		set_variable = {
			name = christ_of_nations_cooldown
			months = normal_modifier_time
		}
		show_as_tooltip = {
			add_modifier = {
				name = funding_polish_radicals
				months = normal_modifier_time
			}
		}
	}
}
﻿je_colonial_administration_button_senegal = {
	name = "je_colonial_administration_button_senegal"
	desc = "je_colonial_administration_button_senegal_desc"

	visible = {
		country_is_in_africa = no
		any_scope_state = {
			region = sr:region_senegal
		}
		NOT = {
			any_subject_or_below = {
				has_variable = senegal_subject_var
			}
		}
	}

	possible = {
		any_scope_state = {
			region = sr:region_senegal
			is_largest_state_in_region = yes
			count >= 2
		}

		#prevents splitting off during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no

		custom_tooltip = {
			text = colonial_administration_cooldown
			NOT = {
				any_subject_or_below = {
					has_variable = newly_formed_colonial_nation_var
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_senegal
					has_decree = decree_greener_grass_campaign
				}
			}
			random_scope_state = {
				limit = {
					region = sr:region_senegal
					has_decree = decree_greener_grass_campaign
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		else = {
			random_scope_state = {
				limit = {
					region = sr:region_senegal
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		every_scope_state = {
			limit = {
				region = sr:region_senegal
			}
			set_variable = state_to_cede
		}
		create_dynamic_country = {
			origin = root
			country_type = colonial
			tier = principality
			capital = scope:newly_formed_colonial_nation_capital_scope
			cede_state_trigger = {
				has_variable = state_to_cede
			}
			on_created = { 
				set_variable = senegal_subject_var
				set_variable = {
					name = newly_formed_colonial_nation_var
					months = 3
				}
				every_scope_state = {
					remove_variable = state_to_cede
				}
				activate_law = law_type:law_frontier_colonization
				activate_law = law_type:law_presidential_republic
			}
		}
		hidden_effect = {
			create_diplomatic_pact = {
				country = scope:newly_formed_colonial_nation_capital_scope.owner
				type = puppet
			}
		}
		trigger_event = { id = colonial_administration_events.1 days = 1 popup = yes }
		custom_tooltip = je_colonial_administration_button_tt_1
		custom_tooltip = je_colonial_administration_button_tt_2
	}
}

je_colonial_administration_button_niger = {
	name = "je_colonial_administration_button_niger"
	desc = "je_colonial_administration_button_niger_desc"

	visible = {
		country_is_in_africa = no
		any_scope_state = {
			region = sr:region_niger
		}
		NOT = {
			any_subject_or_below = {
				has_variable = niger_subject_var
			}
		}
	}

	possible = {
		any_scope_state = {
			region = sr:region_niger
			is_largest_state_in_region = yes
			count >= 2
		}

		#prevents splitting off during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no

		custom_tooltip = {
			text = colonial_administration_cooldown
			NOT = {
				any_subject_or_below = {
					has_variable = newly_formed_colonial_nation_var
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_niger
					has_decree = decree_greener_grass_campaign
				}
			}
			random_scope_state = {
				limit = {
					region = sr:region_niger
					has_decree = decree_greener_grass_campaign
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		else = {
			random_scope_state = {
				limit = {
					region = sr:region_niger
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		every_scope_state = {
			limit = {
				region = sr:region_niger
			}
			set_variable = state_to_cede
		}
		create_dynamic_country = {
			origin = root
			country_type = colonial
			tier = principality
			capital = scope:newly_formed_colonial_nation_capital_scope
			cede_state_trigger = {
				has_variable = state_to_cede
			}
			on_created = { 
				set_variable = niger_subject_var
				set_variable = {
					name = newly_formed_colonial_nation_var
					months = 3
				}
				every_scope_state = {
					remove_variable = state_to_cede
				}
				activate_law = law_type:law_frontier_colonization
				activate_law = law_type:law_presidential_republic
			}
		}
		hidden_effect = {
			create_diplomatic_pact = {
				country = scope:newly_formed_colonial_nation_capital_scope.owner
				type = puppet
			}
		}
		trigger_event = { id = colonial_administration_events.1 days = 1 popup = yes }
		custom_tooltip = je_colonial_administration_button_tt_1
		custom_tooltip = je_colonial_administration_button_tt_2
	}
}

je_colonial_administration_button_ethiopia = {
	name = "je_colonial_administration_button_ethiopia"
	desc = "je_colonial_administration_button_ethiopia_desc"

	visible = {
		country_is_in_africa = no
		any_scope_state = {
			region = sr:region_ethiopia
		}
		NOT = {
			any_subject_or_below = {
				has_variable = ethiopia_subject_var
			}
		}
	}

	possible = {
		any_scope_state = {
			region = sr:region_ethiopia
			is_largest_state_in_region = yes
			count >= 2
		}

		#prevents splitting off during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no
		
		custom_tooltip = {
			text = colonial_administration_cooldown
			NOT = {
				any_subject_or_below = {
					has_variable = newly_formed_colonial_nation_var
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_ethiopia
					has_decree = decree_greener_grass_campaign
				}
			}
			random_scope_state = {
				limit = {
					region = sr:region_ethiopia
					has_decree = decree_greener_grass_campaign
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		else = {
			random_scope_state = {
				limit = {
					region = sr:region_ethiopia
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		every_scope_state = {
			limit = {
				region = sr:region_ethiopia
			}
			set_variable = state_to_cede
		}
		create_dynamic_country = {
			origin = root
			country_type = colonial
			tier = principality
			capital = scope:newly_formed_colonial_nation_capital_scope
			cede_state_trigger = {
				has_variable = state_to_cede
			}
			on_created = { 
				set_variable = ethiopia_subject_var
				set_variable = {
					name = newly_formed_colonial_nation_var
					months = 3
				}
				every_scope_state = {
					remove_variable = state_to_cede
				}
				activate_law = law_type:law_frontier_colonization
				activate_law = law_type:law_presidential_republic
			}
		}
		hidden_effect = {
			create_diplomatic_pact = {
				country = scope:newly_formed_colonial_nation_capital_scope.owner
				type = puppet
			}
		}
		trigger_event = { id = colonial_administration_events.1 days = 1 popup = yes }
		custom_tooltip = je_colonial_administration_button_tt_1
		custom_tooltip = je_colonial_administration_button_tt_2
	}
}

je_colonial_administration_button_zanj = {
	name = "je_colonial_administration_button_zanj"
	desc = "je_colonial_administration_button_zanj_desc"

	visible = {
		country_is_in_africa = no
		any_scope_state = {
			region = sr:region_zanj
		}
		NOT = {
			any_subject_or_below = {
				has_variable = zanj_subject_var
			}
		}
	}

	possible = {
		any_scope_state = {
			region = sr:region_zanj
			is_largest_state_in_region = yes
			count >= 2
		}

		#prevents splitting off during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no
		
		custom_tooltip = {
			text = colonial_administration_cooldown
			NOT = {
				any_subject_or_below = {
					has_variable = newly_formed_colonial_nation_var
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_zanj
					has_decree = decree_greener_grass_campaign
				}
			}
			random_scope_state = {
				limit = {
					region = sr:region_zanj
					has_decree = decree_greener_grass_campaign
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		else = {
			random_scope_state = {
				limit = {
					region = sr:region_zanj
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		every_scope_state = {
			limit = {
				region = sr:region_zanj
			}
			set_variable = state_to_cede
		}
		create_dynamic_country = {
			origin = root
			country_type = colonial
			tier = principality
			capital = scope:newly_formed_colonial_nation_capital_scope
			cede_state_trigger = {
				has_variable = state_to_cede
			}
			on_created = { 
				set_variable = zanj_subject_var
				set_variable = {
					name = newly_formed_colonial_nation_var
					months = 3
				}
				every_scope_state = {
					remove_variable = state_to_cede
				}
				activate_law = law_type:law_frontier_colonization
				activate_law = law_type:law_presidential_republic
			}
		}
		hidden_effect = {
			create_diplomatic_pact = {
				country = scope:newly_formed_colonial_nation_capital_scope.owner
				type = puppet
			}
		}
		trigger_event = { id = colonial_administration_events.1 days = 1 popup = yes }
		custom_tooltip = je_colonial_administration_button_tt_1
		custom_tooltip = je_colonial_administration_button_tt_2
	}
}

je_colonial_administration_button_southern_africa = {
	name = "je_colonial_administration_button_southern_africa"
	desc = "je_colonial_administration_button_southern_africa_desc"

	visible = {
		country_is_in_africa = no
		any_scope_state = {
			region = sr:region_southern_africa
		}
		NOT = {
			any_subject_or_below = {
				has_variable = southern_africa_subject_var
			}
		}
	}

	possible = {
		any_scope_state = {
			region = sr:region_southern_africa
			is_largest_state_in_region = yes
			count >= 2
		}

		#prevents splitting off during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no
		
		custom_tooltip = {
			text = colonial_administration_cooldown
			NOT = {
				any_subject_or_below = {
					has_variable = newly_formed_colonial_nation_var
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_southern_africa
					has_decree = decree_greener_grass_campaign
				}
			}
			random_scope_state = {
				limit = {
					region = sr:region_southern_africa
					has_decree = decree_greener_grass_campaign
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		else = {
			random_scope_state = {
				limit = {
					region = sr:region_southern_africa
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		every_scope_state = {
			limit = {
				region = sr:region_southern_africa
			}
			set_variable = state_to_cede
		}
		create_dynamic_country = {
			origin = root
			country_type = colonial
			tier = principality
			capital = scope:newly_formed_colonial_nation_capital_scope
			cede_state_trigger = {
				has_variable = state_to_cede
			}
			on_created = { 
				set_variable = southern_africa_subject_var
				set_variable = {
					name = newly_formed_colonial_nation_var
					months = 3
				}
				every_scope_state = {
					remove_variable = state_to_cede
				}
				activate_law = law_type:law_frontier_colonization
				activate_law = law_type:law_presidential_republic
			}
		}
		hidden_effect = {
			create_diplomatic_pact = {
				country = scope:newly_formed_colonial_nation_capital_scope.owner
				type = puppet
			}
		}
		trigger_event = { id = colonial_administration_events.1 days = 1 popup = yes }
		custom_tooltip = je_colonial_administration_button_tt_1
		custom_tooltip = je_colonial_administration_button_tt_2
	}
}

je_colonial_administration_button_congo = {
	name = "je_colonial_administration_button_congo"
	desc = "je_colonial_administration_button_congo_desc"

	visible = {
		country_is_in_africa = no
		any_scope_state = {
			region = sr:region_congo
		}
		NOT = {
			any_subject_or_below = {
				has_variable = congo_subject_var
			}
		}
	}

	possible = {
		any_scope_state = {
			region = sr:region_congo
			is_largest_state_in_region = yes
			count >= 2
		}

		#prevents splitting off during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no
		
		custom_tooltip = {
			text = colonial_administration_cooldown
			NOT = {
				any_subject_or_below = {
					has_variable = newly_formed_colonial_nation_var
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_congo
					has_decree = decree_greener_grass_campaign
				}
			}
			random_scope_state = {
				limit = {
					region = sr:region_congo
					has_decree = decree_greener_grass_campaign
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		else = {
			random_scope_state = {
				limit = {
					region = sr:region_congo
				}
				save_scope_as = newly_formed_colonial_nation_capital_scope
			}
		}
		every_scope_state = {
			limit = {
				region = sr:region_congo
			}
			set_variable = state_to_cede
		}
		create_dynamic_country = {
			origin = root
			country_type = colonial
			tier = principality
			capital = scope:newly_formed_colonial_nation_capital_scope
			cede_state_trigger = {
				has_variable = state_to_cede
			}
			on_created = { 
				set_variable = congo_subject_var
				set_variable = {
					name = newly_formed_colonial_nation_var
					months = 3
				}
				every_scope_state = {
					remove_variable = state_to_cede
				}
				activate_law = law_type:law_frontier_colonization
				activate_law = law_type:law_presidential_republic
			}
		}
		hidden_effect = {
			create_diplomatic_pact = {
				country = scope:newly_formed_colonial_nation_capital_scope.owner
				type = puppet
			}
		}
		trigger_event = { id = colonial_administration_events.1 days = 1 popup = yes }
		custom_tooltip = je_colonial_administration_button_tt_1
		custom_tooltip = je_colonial_administration_button_tt_2
	}
}


# Expand Colonial Administration

je_colonial_administration_button_expand_senegal = {
	name = "je_colonial_administration_button_expand_senegal"
	desc = "je_colonial_administration_button_expand_senegal_desc"

	visible = {
		country_is_in_africa = no
		any_subject_or_below = {
			has_variable = senegal_subject_var
		}
	}

	possible = {
		#prevents expanding during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no
		
		OR = {
			any_scope_state = {
				region = sr:region_senegal
				is_under_colonization = no
			}

			custom_tooltip = {
				text = colonial_transfer_two_subjects_tt
				any_subject_or_below = {
					has_variable = senegal_subject_var
					count >= 2
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		custom_tooltip = {
			text = transfer_stuff_to_subject_tt
		}
		random_subject_or_below = {
			limit = {
				has_variable = senegal_subject_var
			}
			save_scope_as = colonial_transfer_subject_scope
		}
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_senegal
					is_under_colonization = no
				}
			}
			every_scope_state = {
				limit = {
					region = sr:region_senegal
					is_under_colonization = no
				}
				set_state_owner = scope:colonial_transfer_subject_scope
			}
		}
		if = {
			limit = {
				any_subject_or_below = {
					has_variable = senegal_subject_var
					count >= 2
				}
			}
			random_subject_or_below = {
				limit = {
					has_variable = senegal_subject_var
				}
				save_scope_as = senegal_subject_scope
			}
			random_subject_or_below = {
				limit = {
					has_variable = senegal_subject_var
					NOT = {
						this = scope:senegal_subject_scope
					}
				}
				save_scope_as = senegal_subject_scope_2
			}
			scope:senegal_subject_scope = {
				annex = scope:senegal_subject_scope_2
			}
		}
	}
}

je_colonial_administration_button_expand_niger = {
	name = "je_colonial_administration_button_expand_niger"
	desc = "je_colonial_administration_button_expand_niger_desc"

	visible = {
		country_is_in_africa = no
		any_subject_or_below = {
			has_variable = niger_subject_var
		}
	}

	possible = {
		#prevents expanding during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no
		
		OR = {
			any_scope_state = {
				region = sr:region_niger
				is_under_colonization = no
			}
			custom_tooltip = {
				text = colonial_transfer_two_subjects_tt
				any_subject_or_below = {
					has_variable = niger_subject_var
					count >= 2
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		custom_tooltip = {
			text = transfer_stuff_to_subject_tt
		}
		random_subject_or_below = {
			limit = {
				has_variable = niger_subject_var
			}
			save_scope_as = colonial_transfer_subject_scope
		}
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_niger
					is_under_colonization = no
				}
			}
			every_scope_state = {
				limit = {
					region = sr:region_niger
					is_under_colonization = no
				}
				set_state_owner = scope:colonial_transfer_subject_scope
			}
		}
		if = {
			limit = {
				any_subject_or_below = {
					has_variable = niger_subject_var
					count >= 2
				}
			}
			random_subject_or_below = {
				limit = {
					has_variable = niger_subject_var
				}
				save_scope_as = niger_subject_scope
			}
			random_subject_or_below = {
				limit = {
					has_variable = niger_subject_var
					NOT = {
						this = scope:niger_subject_scope
					}
				}
				save_scope_as = niger_subject_scope_2
			}
			scope:niger_subject_scope = {
				annex = scope:niger_subject_scope_2
			}
		}
	}
}

je_colonial_administration_button_expand_ethiopia = {
	name = "je_colonial_administration_button_expand_ethiopia"
	desc = "je_colonial_administration_button_expand_ethiopia_desc"

	visible = {
		country_is_in_africa = no
		any_subject_or_below = {
			has_variable = ethiopia_subject_var
		}
	}

	possible = {
		#prevents expanding during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no
		
		OR = {
			any_scope_state = {
				region = sr:region_ethiopia
				is_under_colonization = no
			}
			custom_tooltip = {
				text = colonial_transfer_two_subjects_tt
				any_subject_or_below = {
					has_variable = ethiopia_subject_var
					count >= 2
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		custom_tooltip = {
			text = transfer_stuff_to_subject_tt
		}
		random_subject_or_below = {
			limit = {
				has_variable = ethiopia_subject_var
			}
			save_scope_as = colonial_transfer_subject_scope
		}
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_ethiopia
					is_under_colonization = no
				}
			}
			every_scope_state = {
				limit = {
					region = sr:region_ethiopia
					is_under_colonization = no
				}
				set_state_owner = scope:colonial_transfer_subject_scope
			}
		}
		if = {
			limit = {
				any_subject_or_below = {
					has_variable = ethiopia_subject_var
					count >= 2
				}
			}
			random_subject_or_below = {
				limit = {
					has_variable = ethiopia_subject_var
				}
				save_scope_as = ethiopia_subject_scope
			}
			random_subject_or_below = {
				limit = {
					has_variable = ethiopia_subject_var
					NOT = {
						this = scope:ethiopia_subject_scope
					}
				}
				save_scope_as = ethiopia_subject_scope_2
			}
			scope:ethiopia_subject_scope = {
				annex = scope:ethiopia_subject_scope_2
			}
		}
	}
}

je_colonial_administration_button_expand_zanj = {
	name = "je_colonial_administration_button_expand_zanj"
	desc = "je_colonial_administration_button_expand_zanj_desc"

	visible = {
		country_is_in_africa = no
		any_subject_or_below = {
			has_variable = zanj_subject_var
		}
	}

	possible = {
		#prevents expanding during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no
		
		OR = {
			any_scope_state = {
				region = sr:region_zanj
				is_under_colonization = no
			}
			custom_tooltip = {
				text = colonial_transfer_two_subjects_tt
				any_subject_or_below = {
					has_variable = zanj_subject_var
					count >= 2
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		custom_tooltip = {
			text = transfer_stuff_to_subject_tt
		}
		random_subject_or_below = {
			limit = {
				has_variable = zanj_subject_var
			}
			save_scope_as = colonial_transfer_subject_scope
		}
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_zanj
					is_under_colonization = no
				}
			}
			every_scope_state = {
				limit = {
					region = sr:region_zanj
					is_under_colonization = no
				}
				set_state_owner = scope:colonial_transfer_subject_scope
			}
		}
		if = {
			limit = {
				any_subject_or_below = {
					has_variable = zanj_subject_var
					count >= 2
				}
			}
			random_subject_or_below = {
				limit = {
					has_variable = zanj_subject_var
				}
				save_scope_as = zanj_subject_scope
			}
			random_subject_or_below = {
				limit = {
					has_variable = zanj_subject_var
					NOT = {
						this = scope:zanj_subject_scope
					}
				}
				save_scope_as = zanj_subject_scope_2
			}
			scope:zanj_subject_scope = {
				annex = scope:zanj_subject_scope_2
			}
		}
	}
}

je_colonial_administration_button_expand_southern_africa = {
	name = "je_colonial_administration_button_expand_southern_africa"
	desc = "je_colonial_administration_button_expand_southern_africa_desc"

	visible = {
		country_is_in_africa = no
		any_subject_or_below = {
			has_variable = southern_africa_subject_var
		}
	}

	possible = {
		#prevents expanding during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no
		
		OR = {
			any_scope_state = {
				region = sr:region_southern_africa
				is_under_colonization = no
			}
			custom_tooltip = {
				text = colonial_transfer_two_subjects_tt
				any_subject_or_below = {
					has_variable = southern_africa_subject_var
					count >= 2
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		custom_tooltip = {
			text = transfer_stuff_to_subject_tt
		}
		random_subject_or_below = {
			limit = {
				has_variable = southern_africa_subject_var
			}
			save_scope_as = colonial_transfer_subject_scope
		}
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_southern_africa
					is_under_colonization = no
				}
			}
			every_scope_state = {
				limit = {
					region = sr:region_southern_africa
					is_under_colonization = no
				}
				set_state_owner = scope:colonial_transfer_subject_scope
			}
		}
		if = {
			limit = {
				any_subject_or_below = {
					has_variable = southern_africa_subject_var
					count >= 2
				}
			}
			random_subject_or_below = {
				limit = {
					has_variable = southern_africa_subject_var
				}
				save_scope_as = southern_africa_subject_scope
			}
			random_subject_or_below = {
				limit = {
					has_variable = southern_africa_subject_var
					NOT = {
						this = scope:southern_africa_subject_scope
					}
				}
				save_scope_as = southern_africa_subject_scope_2
			}
			scope:southern_africa_subject_scope = {
				annex = scope:southern_africa_subject_scope_2
			}
		}
	}
}

je_colonial_administration_button_expand_congo = {
	name = "je_colonial_administration_button_expand_congo"
	desc = "je_colonial_administration_button_expand_congo_desc"

	visible = {
		country_is_in_africa = no
		any_subject_or_below = {
			has_variable = congo_subject_var
		}
	}

	possible = {
		#prevents expanding during diplo play or war as it invalidates wargoals. is_at_war is there for clarity for players even though it's technically included in the former
		is_diplomatic_play_committed_participant = no
		is_at_war = no
		
		OR = {
			any_scope_state = {
				region = sr:region_congo
				is_under_colonization = no
			}
			custom_tooltip = {
				text = colonial_transfer_two_subjects_tt
				any_subject_or_below = {
					has_variable = congo_subject_var
					count >= 2
				}
			}
		}
	}

	ai_chance = {
		base = 100
	}

	effect = {
		custom_tooltip = {
			text = transfer_stuff_to_subject_tt
		}
		random_subject_or_below = {
			limit = {
				has_variable = congo_subject_var
			}
			save_scope_as = colonial_transfer_subject_scope
		}
		if = {
			limit = {
				any_scope_state = {
					region = sr:region_congo
					is_under_colonization = no
				}
			}
			every_scope_state = {
				limit = {
					region = sr:region_congo
					is_under_colonization = no
				}
				set_state_owner = scope:colonial_transfer_subject_scope
			}
		}
		if = {
			limit = {
				any_subject_or_below = {
					has_variable = congo_subject_var
					count >= 2
				}
			}
			random_subject_or_below = {
				limit = {
					has_variable = congo_subject_var
				}
				save_scope_as = congo_subject_scope
			}
			random_subject_or_below = {
				limit = {
					has_variable = congo_subject_var
					NOT = {
						this = scope:congo_subject_scope
					}
				}
				save_scope_as = congo_subject_scope_2
			}
			scope:congo_subject_scope = {
				annex = scope:congo_subject_scope_2
			}
		}
	}
}
﻿je_haitian_debt_negotiation_button = {
	name = "je_haitian_debt_negotiation_button"
	desc = "je_haitian_debt_negotiation_button_desc"

	visible = { NOT = { has_variable = haiti_debt_renegotiated_var } }

	ai_chance = {
		base = 10
	}

	possible = {
		NOT = { 
			has_war_with = c:FRA
			owes_obligation_to = c:FRA 
		}
		OR = {
			c:FRA = {
				relations:root >= relations_threshold:friendly
			}
			is_subject_of = c:FRA
			has_diplomatic_pact = {
				type = alliance
				who = c:FRA
			}
		}
		OR = {
			has_modifier = modifier_french_independence_payments_1
			has_modifier = modifier_french_independence_payments_2
			has_modifier = modifier_french_independence_payments_3
			has_modifier = modifier_french_independence_payments_4
		}
	}

	effect = {
		c:FRA = { trigger_event = { id = hispaniola_events.3 popup = yes } }
	}
}

je_haitian_debt_payment_button = {
	name = "je_haitian_debt_payment_button"
	desc = "je_haitian_debt_payment_button_desc"

	visible = { always = yes }

	possible = {
		NOT = { has_war_with = c:FRA }
		gold_reserves >= 500000
		OR = {
			has_modifier = modifier_french_independence_payments_1
			has_modifier = modifier_french_independence_payments_2
			has_modifier = modifier_french_independence_payments_3
			has_modifier = modifier_french_independence_payments_4
		}
	}

	ai_chance = {
		base = 50
	}

	effect = {
		add_treasury = -500000
		if = {
			limit = {
				has_modifier = modifier_french_independence_payments_4
			}
			remove_modifier = modifier_french_independence_payments_4
			add_modifier = { 
				name = modifier_french_independence_payments_3
				months = -1
			}
		}
		else_if = {
			limit = {
				has_modifier = modifier_french_independence_payments_3
			}
			remove_modifier = modifier_french_independence_payments_3
			add_modifier = { 
				name = modifier_french_independence_payments_2
				months = -1
			}
		}
		else_if = {
			limit = {
				has_modifier = modifier_french_independence_payments_2
			}
			remove_modifier = modifier_french_independence_payments_2
			add_modifier = { 
				name = modifier_french_independence_payments_1
				months = -1
			}
		}
		else_if = {
			limit = {
				has_modifier = modifier_french_independence_payments_1
			}
			remove_modifier = modifier_french_independence_payments_1
		}
		c:FRA = {
			post_notification = haiti_pays_off_debt
			if = {
				limit = {
					has_modifier = modifier_haitian_independence_payments_4
				}
				remove_modifier = modifier_haitian_independence_payments_4
				add_modifier = {
					name = modifier_haitian_independence_payments_3
					months = -1
				}
			}
			else_if = {
				limit = {
					has_modifier = modifier_haitian_independence_payments_3
				}
				remove_modifier = modifier_haitian_independence_payments_3
				add_modifier = {
					name = modifier_haitian_independence_payments_2
					months = -1
				}
			}
			else_if = {
				limit = {
					has_modifier = modifier_haitian_independence_payments_2
				}
				remove_modifier = modifier_haitian_independence_payments_2
				add_modifier = {
					name = modifier_haitian_independence_payments_1
					months = -1
				}
			}
		}
	}
}

je_haitian_cancel_debt_button = {
	name = "je_haitian_cancel_debt_button"
	desc = "je_haitian_cancel_debt_button_desc"

	visible = { always = yes }

	possible = {
		OR = {
			has_modifier = modifier_french_independence_payments_1
			has_modifier = modifier_french_independence_payments_2
			has_modifier = modifier_french_independence_payments_3
			has_modifier = modifier_french_independence_payments_4
		}
	}

	effect = {
		custom_tooltip = je_haitian_cancel_debt_button_tt
		add_modifier = {
			name = modifier_cancelled_haiti_debt
			months = very_long_modifier_time
		}
		if = {
			limit = {
				has_modifier = modifier_french_independence_payments_1
			}
			remove_modifier = modifier_french_independence_payments_1
		}
		if = {
			limit = {
				has_modifier = modifier_french_independence_payments_2
			}
			remove_modifier = modifier_french_independence_payments_2
		}
		if = {
			limit = {
				has_modifier = modifier_french_independence_payments_3
			}
			remove_modifier = modifier_french_independence_payments_3
		}
		if = {
			limit = {
				has_modifier = modifier_french_independence_payments_4
			}
			remove_modifier = modifier_french_independence_payments_4
		}
		c:FRA = {
			post_notification = haiti_stops_paying_france
			if = {
				limit = {
					has_modifier = modifier_haitian_independence_payments_1
				}
				remove_modifier = modifier_haitian_independence_payments_1
			}
			if = {
				limit = {
					has_modifier = modifier_haitian_independence_payments_2
				}
				remove_modifier = modifier_haitian_independence_payments_2
			}
			if = {
				limit = {
					has_modifier = modifier_haitian_independence_payments_3
				}
				remove_modifier = modifier_haitian_independence_payments_3
			}
			if = {
				limit = {
					has_modifier = modifier_haitian_independence_payments_4
				}
				remove_modifier = modifier_haitian_independence_payments_4
			}
			change_relations = { 
				country = c:HAI 
				value = -70 
			}
			hidden_effect = {
				set_secret_goal = {
					country = c:HAI
					secret_goal = conquer
				}
				set_variable = haiti_stops_paying_france_aggressor
				c:HAI = { set_variable = haiti_stops_paying_france_target }
			}
		}
		change_infamy = 10
		s:STATE_HAITI = {
			add_claim = c:FRA
		}
		if = {
			limit = {
				c:HAI = {
					any_scope_state = {
						state_region = s:STATE_SANTO_DOMINGO
					}
				}
			}
			s:STATE_SANTO_DOMINGO = {
				add_claim = c:FRA
			}
		}
	}

	ai_chance = {
		base = 0
		modifier = {
			trigger = {
				c:FRA = {
					OR = {
						in_default = yes
						has_revolution = yes
					}
				}
			}
			add = 10
		}
		modifier = {
			trigger = {
				OR = {
					AND = {
						army_size > c:FRA.army_size
						navy_size > c:FRA.navy_size
					}
					any_scope_ally = {
						army_size > c:FRA.army_size
						navy_size > c:FRA.navy_size
					}
				}
			}
			add = 10
		}
		
		modifier = {
			trigger = {
				country_rank >= rank_value:major_power
			}
			add = 2
		}
		
		modifier = {
			OR = {
				is_diplomatic_play_committed_participant = yes
				is_at_war = yes
			}
			add = -1000
		}	
	}
}
﻿je_the_paris_commune_france_button_a = {
	name = "je_the_paris_commune_repress_communard_sympathizers"
	desc = "je_the_paris_commune_repress_communard_sympathizers_desc"

	visible = { has_variable = paris_commune_fra_perspective }

	possible = {
		scope:journal_entry = {
				not = {
				custom_tooltip = {
					text = paris_commune_on_cooldown_tt
					has_variable = je_the_paris_commune_decision_cooldown
				}
			}
		}
	}

	effect = {
        custom_tooltip = cooldown_three_months_tt
		scope:journal_entry = {
			set_variable = { name = je_the_paris_commune_decision_cooldown months = 3 }
		}	
        add_radicals = {
            value = small_radicals
            strata = poor
        }
        custom_tooltip = commune_progress_subtract_10
        change_global_variable = {
            name = paris_commune_progress_var
            add = -10
        }
	}
}

je_the_paris_commune_france_button_b = {
	name = "je_the_paris_commune_concessions_to_communards"
	desc = "je_the_paris_commune_concessions_to_communards_desc"

	visible = { has_variable = paris_commune_prc_perspective }

	possible = {
		scope:journal_entry = {
			not = {
				custom_tooltip = {
					text = paris_commune_on_cooldown_tt
					has_variable = je_the_paris_commune_decision_cooldown
				}
			}
		}	
	}

	effect = {
		scope:journal_entry = {
			custom_tooltip = cooldown_three_months_tt
			set_variable = { name = je_the_paris_commune_decision_cooldown months = 3 }
		}	
		add_loyalists = {
			value = small_radicals
			strata = poor
        }
        custom_tooltip = commune_progress_add_10
        change_global_variable = {
            name = paris_commune_progress_var
            add = 10
        }
	}
}

french_monarchy_bonapartist_button = {
	name = "bonapartist_button"
	desc = "bonapartist_button_desc"

	visible = {
		owner = { 
			has_variable = chose_initial_french_dynasty 
			NOT = { has_variable = fra_divided_monarchists_freeze } 
		}
	}

	possible = {
		trigger_if = {
			limit = {
				has_variable = has_selected_bonapartist_once_var
			}
			custom_tooltip = {
				text = cannot_choose_bonapartist_twice_tt
				always = no
			}
		}
		any_interest_group = {
			is_in_government = yes
			leader = {
				has_ideology = ideology:ideology_bonapartist
			}
		}
		custom_tooltip = {
			text = not_already_supporting_bonapartism
			NOT = { has_variable = supporting_bonapartist_var }
		}
	}
	
	selected = {
		has_variable = supporting_bonapartist_var
	}

	effect = {
		set_variable = supporting_bonapartist_var
		set_variable = has_selected_bonapartist_once_var
		remove_variable = supporting_orleanist_var
		remove_variable = supporting_legitimist_var
		custom_tooltip = {
			text = supporting_bonapartist_tt
		}
		custom_tooltip = {
			text = bonapartist_progress_increase_10_tt
			je:je_divided_monarchists = {
				add_progress = { value = 10 name = divided_monarchists_bonapartist_progress_bar }
			}
		}
	}
}

french_monarchy_orleanist_button = {
	name = "orleanist_button"
	desc = "orleanist_button_desc"

	visible = {
		owner = { 
			has_variable = chose_initial_french_dynasty 
			NOT = { has_variable = fra_divided_monarchists_freeze } 
		}
	}

	possible = {
		trigger_if = {
			limit = {
				has_variable = has_selected_orleanist_once_var
			}
			custom_tooltip = {
				text = cannot_choose_orleanist_twice_tt
				always = no
			}
		}
		any_interest_group = {
			is_in_government = yes
			leader = {
				has_ideology = ideology:ideology_orleanist
			}
		}
		custom_tooltip = {
			text = not_already_supporting_orleanism
			NOT = { has_variable = supporting_orleanist_var }
		}
	}
	
	selected = {
		has_variable = supporting_orleanist_var
	}

	effect = {
		# Only one of these variables can be active at a time
		set_variable = supporting_orleanist_var
		set_variable = has_selected_orleanist_once_var
		remove_variable = supporting_bonapartist_var
		remove_variable = supporting_legitimist_var
		custom_tooltip = {
			text = supporting_orleanism_tt
		}
		custom_tooltip = {
			text = orleanist_progress_increase_10_tt
			je:je_divided_monarchists = {
				add_progress = { value = 10 name = divided_monarchists_orleanist_progress_bar }
			}
		}
	}
}

french_monarchy_legitimist_button = {
	name = "legitimist_button"
	desc = "legitimist_button_desc"

	visible = {
		owner = { 
			has_variable = chose_initial_french_dynasty 
			NOT = { has_variable = fra_divided_monarchists_freeze } 
		}
	}

	possible = {
		trigger_if = {
			limit = {
				has_variable = has_selected_legitimist_once_var
			}
			custom_tooltip = {
				text = cannot_choose_legitimist_twice_tt
				always = no
			}
		}
		any_interest_group = {
			is_in_government = yes
			leader = {
				has_ideology = ideology:ideology_legitimist
			}
		}
		custom_tooltip = {
			text = not_already_supporting_legitimist
			NOT = { has_variable = supporting_legitimist_var }
		}
	}
	
	selected = {
		has_variable = supporting_legitimist_var
	}

	effect = {
		set_variable = supporting_legitimist_var
		set_variable = has_selected_legitimist_once_var
		remove_variable = supporting_bonapartist_var
		remove_variable = supporting_orleanist_var
		custom_tooltip = {
			text = supporting_legitimists_tt
		}
		custom_tooltip = {
			text = legitimist_progress_increase_10_tt
			je:je_divided_monarchists = {
				add_progress = { value = 10 name = divided_monarchists_legitimist_progress_bar }
			}
		}
	}
}

je_the_krakow_uprising_annex_button = {
	name = "je_the_krakow_uprising_annex_button"
	desc = "je_the_krakow_uprising_annex_button_desc"

	visible = { always = yes }
	
	ai_chance = {
		base = 100
	}

	possible = {
		c:KRA ?= {
			is_subject_of = c:AUS
			has_revolution = no
		}
		is_at_war = no
	}

	effect = {
		if = {
			limit = {
				exists = c:KRA
			}
			annex = c:KRA
		}
	}
}

je_positivist_movement_embrace_positivism_button = {
	name = "je_positivist_movement_embrace_positivism_button"
	desc = "je_positivist_movement_embrace_positivism_button_desc"

	visible = { always = yes }

	possible = {
		scope:journal_entry = {
			not = {
				custom_tooltip = {
					text = positivist_cooldown_tt
					has_variable = positivist_cooldown_var
				}
			}
		}
	}

	effect = {
		custom_tooltip = {
			text = positivists_advance_10
			change_variable = { name = positivism_progress_var add = 10 }
		}
		add_radicals = {
			value = small_radicals
			strata = poor
		}
		scope:journal_entry = {
			custom_tooltip = cooldown_year_tt
			set_variable = { name = positivist_cooldown_var years = 1 }
		}
	}
}

je_positivist_movement_suppress_positivism_button = {
	name = "je_positivist_movement_suppress_positivism_button"
	desc = "je_positivist_movement_suppress_positivism_button_desc"

	visible = { always = yes }

	possible = {
		scope:journal_entry = {
			not = {
				custom_tooltip = {
					text = positivist_cooldown_tt
					has_variable = positivist_cooldown_var
				}
			}
		}
	}

	effect = {
		custom_tooltip = {
			text = positivists_retreat_10
			change_variable = { name = positivism_progress_var subtract = 10 }
		}
		add_radicals = {
			value = small_radicals
			strata = middle
		}
		scope:journal_entry = {
			custom_tooltip = cooldown_year_tt
			set_variable = { name = positivist_cooldown_var years = 1 }
		}
	}
}

je_sell_alaska_button = {
	name = "je_sell_alaska_button"
	desc = "je_sell_alaska_button_desc"

	visible = { always = yes }

	ai_chance = {
		base = 0
		modifier = {
			trigger = { 
				scaled_debt > 0
			}
			add = 25
		}
		modifier = {
			trigger = { 
				has_modifier = declared_bankruptcy
			}
			add = 50
		}
		modifier = {
			trigger = { 
				any_country = {
					NOT = { this = root }
					country_rank >= root.country_rank
					has_interest_marker_in_region = sr:region_pacific_coast
					relations:root <= relations_threshold:poor
				}
			}
			add = 25
		}
		modifier = {
			trigger = { 
				any_country = {
					NOT = { this = root }
					country_rank >= root.country_rank
					has_interest_marker_in_region = sr:region_pacific_coast
					relations:root <= relations_threshold:cold
				}
			}
			add = 50
		}
	}

	possible = {
		custom_tooltip = {
			text = has_alaska_sale_cooldown_tt
			NOT = { has_variable = alaska_sale_cooldown }
		}
		has_state_in_state_region = STATE_ALASKA
		custom_tooltip = {
			text = friendly_nation_with_interest_in_alaska_tt
			any_country = {
				NOT = { is_subject = yes }
				NOT = { this = root }
				country_is_in_north_america = yes
				relations:root >= 0
				country_rank >= rank_value:great_power
				any_scope_state = {
					region = sr:region_pacific_coast
					is_incorporated = yes
				}
			}
		}
	}

	effect = {
		set_variable = {
			name = alaska_sale_cooldown
			months = 12
		}
		save_scope_as = alaska_seller
		random_country = {
			limit = {
				NOT = { is_subject = yes }
				NOT = { this = root }
				country_is_in_north_america = yes
				relations:root >= 0
				country_rank >= rank_value:great_power
				any_scope_state = {
					region = sr:region_pacific_coast
					is_incorporated = yes
				}
			}
			trigger_event = { id = alaska.4 popup = yes }
		}
	}
}

je_buy_alaska_button = {
	name = "je_buy_alaska_button"
	desc = "je_buy_alaska_button_desc"

	visible = { always = yes }

	ai_chance = {
		base = 100
	}

	possible = {
		custom_tooltip = {
			text = has_alaska_sale_cooldown_tt
			NOT = { has_variable = alaska_sale_cooldown }
		}
		is_subject = no
		s:STATE_ALASKA = {
			any_scope_state = {
				owner = {
					NOT = {
						root = this
						is_country_type = decentralized
					}
					relations:root >= 0
					OR = {
						custom_tooltip = {
							text = unfriendly_nation_with_interest_in_alaska_tt
							any_country = {
								country_rank >= prev.country_rank
								NOT = { this = prev }
								has_interest_marker_in_region = sr:region_pacific_coast
								relations:prev < relations_threshold:cordial
							}
						}
						scaled_debt > 0
					}
				}
			}
		}
	}

	effect = {
		set_variable = {
			name = alaska_sale_cooldown
			months = 12
		}
		trigger_event = {
			id = alaska.4
			popup = yes
		}
	}
}

je_risorgimento_austrian_radicals_button = {
	name = "je_risorgimento_austrian_radicals_button"
	desc = "je_risorgimento_austrian_radicals_button_desc"

	visible = { 
		NOT = {
			is_subject = yes
		}
	}

	possible = {
		country_rank >= rank_value:minor_power
		scope:journal_entry = {
			not = {
				custom_tooltip = {
					text = austrian_radicals_cooldown_tt
					has_variable = ausrad_cooldown_var
				}
			}
		}
		sr:region_italy = {
			any_scope_country = {
				NOR = {
					country_has_primary_culture = cu:south_italian
					country_has_primary_culture = cu:north_italian
				}
				custom_tooltip = {
					text = owns_italian_homelands_tt
					any_scope_state = {
						state_region = {
							OR = {
								is_homeland = cu:south_italian
								is_homeland = cu:north_italian
							}
						}
					}
				}
				relations:root <= 20
			}
		}
		custom_tooltip = {
			text = risorgimento_unifying_stance_tt
			has_variable = risorgimento_unifying_stance
		}
	}

	ai_chance = {
		base = 50
		modifier = {
			trigger = {
				has_law = law_type:law_theocracy
			}
			add = -70
		}
		modifier = {
			trigger = {
				any_country = {
					NOR = {
						country_has_primary_culture = cu:south_italian
						country_has_primary_culture = cu:north_italian
					}
					any_scope_state = {
						state_region = {
							OR = {
								is_homeland = cu:south_italian
								is_homeland = cu:north_italian
							}
						}
					}
					relations:root <= 20
				}
			}
			add = 25
		}
	}

	effect = {
		ROOT = {
			save_scope_as = saboteur_country
		}
		random_country = {
			limit = {
				NOR = {
					country_has_primary_culture = cu:south_italian
					country_has_primary_culture = cu:north_italian
				}
				any_scope_state = {
					state_region = {
						OR = {
							is_homeland = cu:south_italian
							is_homeland = cu:north_italian
						}
					}
				}
			}
			every_scope_state = {
				limit = {
					state_region = { 
						is_homeland = cu:north_italian
					}
				}
				if = {
					limit = {
						ROOT = {
							country_rank >= rank_value:major_power
						}
					}
					add_radicals_in_state = {
						value = 0.15
						culture = cu:north_italian
					}
				}
				else = {
					add_radicals_in_state = {
						value = 0.10
						culture = cu:north_italian
					}
				}
			}
			every_scope_state = {
				limit = {
					state_region = {
						is_homeland = cu:south_italian
					}
				}
				if = {
					limit = {
						ROOT = {
							country_rank >= rank_value:major_power
						}
					}
					add_radicals_in_state = {
						value = 0.15
						culture = cu:south_italian
					}
				}
				else = {
					add_radicals_in_state = {
						value = 0.10
						culture = cu:south_italian
					}
				}
			}
			post_notification = nationalism_decision_agitation_occurred
		}
		scope:journal_entry = {
			custom_tooltip = ausrad_cooldown_year_tt
			set_variable = { name = ausrad_cooldown_var years = 3 }
		}
	}
}

je_risorgimento_italian_radicals_button = {
	name = "je_risorgimento_italian_radicals_button"
	desc = "je_risorgimento_italian_radicals_button_desc"

	visible = { 
		NOT = {
			is_subject = yes
		}
	}

	possible = {
		country_rank >= rank_value:minor_power
		scope:journal_entry = {
			not = {
				custom_tooltip = {
					text = italian_radicals_cooldown_tt
					has_variable = itarad_cooldown_var
				}
			}
		}
		any_country = {
			OR = {
				country_has_primary_culture = cu:south_italian
				country_has_primary_culture = cu:north_italian
			}
			custom_tooltip = {
				text = risorgimento_opposing_stance_tt
				NOT = {
					has_variable = risorgimento_unifying_stance
				}
			}
			relations:root <= 20
		}
		custom_tooltip = {
			text = risorgimento_unifying_stance_tt
			has_variable = risorgimento_unifying_stance
		}
	}

	ai_chance = {
		base = 50
		modifier = {
			trigger = {
				has_law = law_type:law_theocracy
			}
			add = -50
		}
		modifier = {
			trigger = {
				any_country = {
					OR = {
						country_has_primary_culture = cu:south_italian
						country_has_primary_culture = cu:north_italian
					}
					NOT = {
						has_variable = risorgimento_unifying_stance
					}
					relations:root >= 20
				}
			}
			add = -25
		}
		modifier = {
			trigger = {
				any_country = {
					OR = {
						country_has_primary_culture = cu:south_italian
						country_has_primary_culture = cu:north_italian
					}
					NOT = {
						has_variable = risorgimento_unifying_stance
					}
					relations:root <= 20
				}
			}
			add = 25
		}
	}

	effect = {
		ROOT = {
			save_scope_as = saboteur_country
		}
		THIS = {
			save_scope_as = victim_country
		}
		random_country = {
			limit = {
				OR = {
					country_has_primary_culture = cu:south_italian
					country_has_primary_culture = cu:north_italian
				}
				custom_tooltip = {
					text = risorgimento_opposing_stance_tt
					NOT = {
						has_variable = risorgimento_unifying_stance
					}
				}
			}
			every_scope_state = {
				limit = {
					state_region = { 
						is_homeland = cu:north_italian
					}
				}
				add_radicals_in_state = {
					value = 0.05
					culture = cu:north_italian
				}
			}
			every_scope_state = {
				limit = {
					state_region = {
						is_homeland = cu:south_italian
					}
				}
				add_radicals_in_state = {
					value = 0.05
					culture = cu:south_italian
				}
			}
			post_notification = sabotage_decision_agitation_occurred
		}
		scope:journal_entry = {
			custom_tooltip = itarad_cooldown_year_tt
			set_variable = { name = itarad_cooldown_var years = 3 }
		}
	}
}

je_confederation_of_the_rhine_confederate_button = {
	name = "je_confederation_of_the_rhine_confederate_button"
	desc = "je_confederation_of_the_rhine_confederate_button_desc"

	visible = { 
		NOT = {
			exists = c:RHN
		}
	}

	possible = {
		NOT = {
			exists = c:RHN
		}
		any_state = {
			OR = {
				region = sr:region_rhine
				region = sr:region_north_germany
				region = sr:region_south_germany
			}
			state_region = {
				OR = {
					is_homeland = cu:south_german
					is_homeland = cu:north_german
				}
			}
			OR = {
				owner = {
					is_subject_of = ROOT
					NOT = {
						has_diplomatic_pact = {
							who = ROOT
							type = personal_union
							is_initiator = no
						}
					}
					capital = {
						OR = {
							region = sr:region_rhine
							region = sr:region_north_germany
							region = sr:region_south_germany
						}
					}
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
				owner = root
			}
			count >= 4
		}
	}

	ai_chance = {
		base = 50
	}

	effect = {
		trigger_event = { id = rhine_confederation.1 }
	}
}

je_confederation_of_the_rhine_expand_button = {
	name = "je_confederation_of_the_rhine_expand_button"
	desc = "je_confederation_of_the_rhine_expand_button_desc"

	visible = { 
		exists = c:RHN
	}

	possible = {
		c:RHN ?= {
			is_subject_of = ROOT
		}
		scope:journal_entry = {
			not = {
				custom_tooltip = {
					text = rhine_expansion_cooldown_tt
					has_variable = rhine_expansion_cooldown
				}
			}
		}
		OR = {
			custom_tooltip = {
				text = root_has_german_subjects_tt
				any_country = {
					is_subject_of = ROOT
					NOT = {
						c:RHN ?= this
					}
					capital = {
						OR = {
							region = sr:region_rhine
							region = sr:region_north_germany
							region = sr:region_south_germany
						}
					}
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			custom_tooltip = {
				text = root_has_german_states_tt
				any_scope_state = {
					state_region = {
						OR = {
							is_homeland = cu:south_german
							is_homeland = cu:north_german
						}
					}
					OR = {
						region = sr:region_rhine
						region = sr:region_north_germany
						region = sr:region_south_germany
					}
					is_incorporated = no
					trigger_if = {
						limit = {
							ROOT = {
								country_has_primary_culture = cu:french
							}
						}
						NOR = {
							state_region = s:STATE_RHINELAND
							state_region = s:STATE_NORTH_RHINE
							state_region = s:STATE_WALLONIA
							state_region = s:STATE_FLANDERS
						}
					}
				}
			}
		}
	}

	ai_chance = {
		base = 50
	}

	effect = {
		if = {
			limit = {
				any_country = {
					NOT = {
						c:RHN ?= this
					}
					is_subject_of = ROOT
					capital = {
						OR = {
							region = sr:region_rhine
							region = sr:region_north_germany
							region = sr:region_south_germany
						}
					}
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
					is_player = no
				}
			}
			custom_tooltip = {
				text = rhine_annexes_subjects_tt
				every_country = {
					limit = {
						NOT = {
							c:RHN ?= this
						}
						is_subject_of = ROOT
						capital = {
							OR = {
								region = sr:region_rhine
								region = sr:region_north_germany
								region = sr:region_south_germany
							}
						}
						OR = {
							country_has_primary_culture = cu:north_german
							country_has_primary_culture = cu:south_german
						}
						is_player = no
					}
					c:RHN ?= {
						annex = PREV
					}
				}
			}
		}
		if = {
			limit = {
				any_scope_state = {
					state_region = {
						OR = {
							is_homeland = cu:south_german
							is_homeland = cu:north_german
						}
					}
					OR = {
						region = sr:region_rhine
						region = sr:region_north_germany
						region = sr:region_south_germany
					}
					is_incorporated = no
					trigger_if = {
						limit = {
							ROOT = {
								country_has_primary_culture = cu:french
							}
						}
						NOR = {
							state_region = s:STATE_RHINELAND
							state_region = s:STATE_NORTH_RHINE
							state_region = s:STATE_WALLONIA
							state_region = s:STATE_FLANDERS
						}
					}
				}
			}
			custom_tooltip = {
				text = rhine_annexes_states_tt
				every_scope_state = {
					limit = {
						state_region = {
							OR = {
								is_homeland = cu:south_german
								is_homeland = cu:north_german
							}
						}
						OR = {
							region = sr:region_rhine
							region = sr:region_north_germany
							region = sr:region_south_germany
						}
						is_incorporated = no
						trigger_if = {
							limit = {
								ROOT = {
									country_has_primary_culture = cu:french
								}
							}
							NOR = {
								state_region = s:STATE_RHINELAND
								state_region = s:STATE_NORTH_RHINE
								state_region = s:STATE_WALLONIA
								state_region = s:STATE_FLANDERS
							}
						}
					}
					set_state_owner = c:RHN
				}
			}
		}
		scope:journal_entry = {
			custom_tooltip = confederation_of_rhine_cooldown_year_tt
			set_variable = { name = rhine_expansion_cooldown years = 3 }
		}
	}
}

je_unite_the_principalities_button = {
	name = "je_unite_the_principalities_button"
	desc = "je_unite_the_principalities_button_desc"

	visible = { always = yes }
	
	ai_chance = {
		base = 100
	}

	possible = {
        custom_tooltip = {
            text = je_unite_the_principalities_friend_with_all_great_powers_tt
			NOT = {
		        any_country = {
		            country_rank >= rank_value:great_power
		            NOT = { has_war_with = ROOT }
		            has_interest_marker_in_region = ROOT.capital.region
		            relations:root < 0
		        }
	        }
        }
        custom_tooltip = {
            text = je_unite_the_principalities_amicable_or_better_relations_tt
            NOR = { 
            	has_variable = romania_unification_in_motion 
            	has_variable = ROM_united_principality
            }
            OR = {
				is_subject_type = subject_type_protectorate
				is_subject_type = subject_type_dominion
				is_subject_type = subject_type_tributary
				is_subject = no
			}
	        any_country = {
	        	NOT = { this = ROOT }
	        	country_has_primary_culture = cu:romanian
	            relations:root >= 25
	            OR = {
	            	AND = {
	            		exists = top_overlord
						OR = {
							is_subject_type = subject_type_protectorate
							is_subject_type = subject_type_dominion
							is_subject_type = subject_type_tributary
						}
						top_overlord = {
							THIS = root.top_overlord
						}
					}
					is_subject = no
	            }
	        }
        }
	}

	effect = {
		if = {
			limit = {
				is_subject = yes
				exists = top_overlord
			}
			set_variable = romania_subject
        	top_overlord = {
        		trigger_event = { 
	        		id = romania.1 
	        	}
	        }
	    }
	    trigger_event = { id = romania.2 }
	}
}

je_south_bessarabian_retrocession = {
	name = "je_south_bessarabian_retrocession_button"
	desc = "je_south_bessarabian_retrocession_button_desc"

	visible = { 
		NOT = { has_variable = south_bessarabia_cession_in_progress }
		NOR = {
			any_scope_state = {
				state_region = s:STATE_BESSARABIA
			}
			any_subject_or_below = {
				any_scope_state = {
					state_region = s:STATE_BESSARABIA
				}
			}
		}
	}
	
	ai_chance = {
		base = 100
	}

	possible = {
		custom_tooltip = {
			text = je_south_bessarabian_retrocession_button_tt1

	        any_country = {
	            country_rank >= rank_value:great_power
	            NOT = { 
	            	has_war_with = ROOT 
	            	any_scope_state = {
	            		state_region = s:STATE_BESSARABIA
	            	}
	            }
	            has_interest_marker_in_region = ROOT.capital.region
	            relations:root > 25
	        }
	    }
        custom_tooltip = {
        	text = je_south_bessarabian_retrocession_button_tt2

			OR = {
				any_neighbouring_state = {
					state_region = s:STATE_BESSARABIA
					owner = {
						NOT = { ROOT = this }
						relations:root > 0
						NOT = { has_war_with = ROOT }
					}
					is_split_state = no
					is_capital = no
				}
				any_subject_or_below = {
					any_neighbouring_state = {
						state_region = s:STATE_BESSARABIA
						owner = {
							NOT = { ROOT = this }
							relations:root > 0
							NOT = { has_war_with = ROOT }
						}
						is_split_state = no
						is_capital = no
					}
				}
			}
		}
	}

	effect = {
		set_variable = {
			name = south_bessarabia_cession_in_progress
		}
		random_country = {
			limit = {
				NOT = { ROOT = this }
				relations:root >= 25
				NOT = { has_war_with = ROOT }
				any_scope_state = {
					state_region = s:STATE_BESSARABIA
				}
			}
	   		trigger_event = { id = romania.4 }
		}
	}
}

je_marea_unire = {
	name = "je_marea_unire_button"
	desc = "je_marea_unire_button_desc"

	visible = { 
		exists = c:TRS
		NOR = { 
			c:TRS ?= ROOT 
			c:TRS ?= {
				is_subject_of = ROOT
			}
		}
		c:TRS ?= {
			is_player = no
		}
	}

	ai_chance = {
		base = 100
	}

	possible = {
		is_at_war = no

		c:TRS ?= {
			is_subject = no
			relations:root >= 25
			is_at_war = no
		}
	}

	effect = {
		if = {
			limit = {
				has_law = law_type:law_monarchy
				c:TRS ?= {
					has_law = law_type:law_monarchy
				}
			}
			create_diplomatic_pact = {
				country = c:TRS
				type = personal_union
			}
		}
		else = {
			create_diplomatic_pact = {
				country = c:TRS
				type = puppet
			}
		}
	}
}

﻿# Etablish Amazonic Modifier
upgrade_amazon_button_1 = {
	name = "upgrade_amazon_button_1"
	desc = "upgrade_amazon_button_1_desc"

	visible = { always = yes }

	possible = {
		scope:journal_entry = {
			NOT = {
				custom_tooltip = {
					text = amazon_1_cooldown_tt
					has_variable = amazon_1_cooldown_var
				}
			}
		}
		any_scope_state = {
			has_state_trait = state_trait_amazon_rainforest
			any_scope_building = {
				is_building_type = building_urban_center
				level >= 2
			}
			any_scope_building = {
				is_building_type = building_rubber_plantation
				level >= 10
			}
		}
	}

	ai_chance = {
		base = 20
		modifier = {
			trigger = {
				OR = {
					is_at_war = yes
					in_default = yes
				}
			}
			add = -100
		}
	}

	effect = {
		scope:journal_entry = {
			set_variable = { name = amazon_1_cooldown_var years = 1 }
		}
		random_scope_state = {
			limit = {
				has_state_trait = state_trait_amazon_rainforest
				any_scope_building = {
					is_building_type = building_urban_center
					level >= 2
				}
				any_scope_building = {
					is_building_type = building_rubber_plantation
					level >= 10
				}
			}
			show_as_tooltip = {
				state_region = {
					add_state_trait = state_trait_amazon_rainforest_level_1
				}
				add_modifier = {
					name = amazon_development_cooldown_modifier
					months = short_modifier_time
				}
			}
			if = {
				limit = {
					this.state_region = s:STATE_AMAZONAS
					root = {
						OR = {
							c:BRZ ?= this
							c:PRA ?= this
						}
					}
				}
				root = { trigger_event = { id = amazonas.4 popup = yes } } # Manaus, the Heart of the Amazon
			}
			else = {
				root = { trigger_event = { id = amazonas.6 popup = yes } } # An Outpost of Progress
			}
		}
		if = { 
			# The conditions to press the button are the opposite of the conditions of this effect, so these effects should never actually happen. 
			# This section is here solely to show what modifiers will be applied if the button _can_ be pressed.
			limit = {
				NOT = {
					any_scope_state = {
						has_state_trait = state_trait_amazon_rainforest
						any_scope_building = {
							is_building_type = building_urban_center
							level >= 2
						}
						any_scope_building = {
							is_building_type = building_rubber_plantation
							level >= 10
						}
					}
				}
			}
			random_scope_state = {
				limit = {
					has_state_trait = state_trait_amazon_rainforest
					NOR = { 
						has_state_trait = state_trait_amazon_rainforest_level_1 
						has_state_trait = state_trait_amazon_rainforest_level_2
					}
				}
				show_as_tooltip = {
					state_region = {
						add_state_trait = state_trait_amazon_rainforest_level_1
					}
					add_modifier = {
						name = amazon_development_cooldown_modifier
						months = short_modifier_time
					}
				}
			}
		}
	}
}

# Upgrade Amazonic Modifier
upgrade_amazon_button_2 = {
	name = "upgrade_amazon_button_2"
	desc = "upgrade_amazon_button_2_desc"

	visible = { always = yes }

	possible = {
		scope:journal_entry = {
			NOT = {
				custom_tooltip = {
					text = amazon_2_cooldown_tt
					has_variable = amazon_2_cooldown_var
				}
			}
		}
		any_scope_state = {
			has_state_trait = state_trait_amazon_rainforest_level_1
			NOT = { has_modifier = amazon_development_cooldown_modifier }
			any_scope_building = {
				is_building_type = building_urban_center
				level >= 4
			}
			any_scope_building = {
				is_building_type = building_rubber_plantation
				level >= 15
			}
			any_scope_building = {
				is_building_type = building_railway
			}
		}
	}

	ai_chance = {
		base = 20
		modifier = {
			trigger = {
				OR = {
					is_at_war = yes
					in_default = yes
				}
			}
			add = -100
		}
	}

	effect = {
		scope:journal_entry = {
			set_variable = { name = amazon_2_cooldown_var years = 1 }
		}
		random_scope_state = {
			limit = {
				has_state_trait = state_trait_amazon_rainforest_level_1
				NOT = { has_modifier = amazon_development_cooldown_modifier }
				any_scope_building = {
					is_building_type = building_urban_center
					level >= 4
				}
				any_scope_building = {
					is_building_type = building_rubber_plantation
					level >= 15
				}
				any_scope_building = {
					is_building_type = building_railway
				}
			}
			show_as_tooltip = {
				state_region = {
					add_state_trait = state_trait_amazon_rainforest_level_2
				}
				add_modifier = {
					name = amazon_development_cooldown_modifier
					months = short_modifier_time
				}
			}
			if = {
				limit = {
					this.state_region = s:STATE_AMAZONAS
					root = {
						OR = {
							c:BRZ ?= this
							c:PRA ?= this
						}
					}
				}
				root = { trigger_event = { id = amazonas.5 popup = yes } } # Manaus, the Paris of the Tropics
			}
			else = {
				root = { trigger_event = { id = amazonas.7 popup = yes } } # Jewels in the Rough
			}
		}
		if = {
			# The conditions to press the button are the opposite of the conditions of this effect, so these effects should never actually happen. 
			# This section is here solely to show what modifiers will be applied if the button _can_ be pressed.
			limit = {
				NOT = {
					any_scope_state = {
						has_state_trait = state_trait_amazon_rainforest_level_1
						NOT = { has_modifier = amazon_development_cooldown_modifier }
						any_scope_building = {
							is_building_type = building_urban_center
							level >= 4
						}
						any_scope_building = {
							is_building_type = building_rubber_plantation
							level >= 15
						}
						any_scope_building = {
							is_building_type = building_railway
						}
					}
				}
			}
			random_scope_state = {
				limit = {
					has_state_trait = state_trait_amazon_rainforest
					NOT = { has_state_trait = state_trait_amazon_rainforest_level_2 }
				}
				show_as_tooltip = {
					state_region = {
						add_state_trait = state_trait_amazon_rainforest_level_2
					}
					add_modifier = {
						name = amazon_development_cooldown_modifier
						months = short_modifier_time
					}
				}
			}
		}
	}
}

# Bolivian*-Brazilian Border Treaty
amazon_border_treaty_button_1 = {
	name = "amazon_border_treaty_button_1"
	desc = "amazon_border_treaty_button_1_desc"

	visible = {
		c:BRZ ?= this
		NOR = { 
			has_variable = treaty_of_ayacucho_var
			any_neighbouring_state = {
				state_region = s:STATE_AMAZONAS
				owner = {
					NOT = { has_war_with = root }
					hidden_trigger = { is_player = no }
					capital = { region = sr:region_andes }
					OR = {
						relations:root >= relations_threshold:amicable
						army_size < { # your army is four times as large
		    				value = root.army_size
		    				multiply = 0.25
						}
						is_subject_of = root
					}	
				}
			}
		}
	}

	possible = {
		has_technology_researched = civilizing_mission
		any_neighbouring_state = {
			state_region = s:STATE_AMAZONAS
			owner = {
				NOT = { has_war_with = root }
				hidden_trigger = { is_player = no }
				capital = { region = sr:region_andes }
				OR = {
					relations:root >= relations_threshold:amicable
					army_size < { # your army is four times as large
	    				value = root.army_size
	    				multiply = 0.25
					}
					is_subject_of = root
				}	
			}
		}
	}

	ai_chance = {
		base = 20
		modifier = {
			trigger = {
				OR = {
					is_at_war = yes
					in_default = yes
				}
			}
			add = -100
		}
	}

	effect = {
		set_variable = treaty_of_ayacucho_var
		trigger_event = { id = amazonas.2 popup = yes}
	}
}

# Colombian*-Brazilian Border Treaty
amazon_border_treaty_button_2 = {
	name = "amazon_border_treaty_button_2"
	desc = "amazon_border_treaty_button_2_desc"

	visible = {
		c:BRZ ?= this
		NOR = { 
			has_variable = treaty_of_bogota_var 
			any_neighbouring_state = {
				state_region = s:STATE_AMAZONAS
				owner = {
					NOT = { has_war_with = root }
					hidden_trigger = { is_player = no }
					capital = { region = sr:region_gran_colombia }
					OR = {
						relations:root >= relations_threshold:amicable
						army_size < { # your army is four times as large
		    				value = root.army_size
		    				multiply = 0.25
						}
						is_subject_of = root
					}
				}
			}
		}
	}

	possible = {
		has_technology_researched = civilizing_mission
		any_neighbouring_state = {
			state_region = s:STATE_AMAZONAS
			owner = {
				NOT = { has_war_with = root }
				hidden_trigger = { is_player = no }
				capital = { region = sr:region_gran_colombia }
				OR = {
					relations:root >= relations_threshold:amicable
					army_size < { # your army is four times as large
	    				value = root.army_size
	    				multiply = 0.25
					}
					is_subject_of = root
				}
			}
		}
	}

	ai_chance = {
		base = 20
		modifier = {
			trigger = {
				OR = {
					is_at_war = yes
					in_default = yes
				}
			}
			add = -100
		}
	}

	effect = {
		set_variable = treaty_of_bogota_var
		trigger_event = { id = amazonas.3 popup = yes}
	}
}
﻿# Issue the Golden Law
golden_law_button = {
	name = "golden_law_button"
	desc = "golden_law_button_desc"

	visible = { always = yes }

	possible = {
		has_law = law_type:law_legacy_slavery
		c:BRZ ?= {
			OR = {
				AND = {
					any_scope_character = {
						OR = {
							is_heir = yes
							is_ruler = yes
						}
						OR = {
							has_ideology = ideology:ideology_abolitionist
							has_ideology = ideology:ideology_humanitarian
							has_ideology = ideology:ideology_humanitarian_royalist
						}
						age >= 20
					}
				}
				ig:ig_landowners = {
					is_in_government = no
					is_being_suppressed = yes
					ig_clout < 0.25
				}
			}
			is_enacting_law = law_type:law_slavery_banned
			custom_tooltip = {
				text = golden_law_button_tt_2
				trigger_if = {
					limit = {
						is_enacting_law = law_type:law_slavery_banned
					}
					enactment_phase >= 1
				}
				trigger_else = {
					always = no
				}
			}
		}
	}

	ai_chance = {
		base = 0
		modifier = {
			trigger = { 
				ig:ig_landowners = {
					is_in_government = no
				}
			}
			add = 2
		}
		modifier = {
			trigger = { 
				ig:ig_landowners = {
					is_in_government = no
					is_being_suppressed = yes
				}
			}
			add = 4
		}
		modifier = {
			trigger = { 
				any_interest_group = {
					is_in_government = yes
					OR = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_abolitionist
								has_ideology = ideology:ideology_humanitarian
								has_ideology = ideology:ideology_humanitarian_royalist
							}
						}
						OR = {
							law_stance = {
								law = law_type:law_slave_trade
								value = strongly_disapprove
							}
							law_stance = {
								law = law_type:law_legacy_slavery
								value = strongly_disapprove
							}
						}
					}
				}
			}
			add = 7
		}
		modifier = {
			trigger = { 
				OR = {
					is_at_war = yes
					any_revolution_ongoing = yes
				}
			}
			add = -1000
		}
	}

	effect = {
		custom_tooltip = golden_law_button_tt
        if = {
            limit = {
                has_journal_entry = je_pedro_brazil
            }
            remove_pedropoint_effect = yes
        }
		activate_law = law_type:law_slavery_banned
		ig:ig_landowners = {
			add_modifier = {
				name = outraged_over_golden_law_modifier
				months = normal_modifier_time
			}
		}
	}
}

# Authorize the Aberdeen Act
je_aberdeen_act_button = {
	name = "je_aberdeen_act_button"
	desc = "je_aberdeen_act_button_desc"

	visible = {
		always = yes
	}

	possible = {
		country_rank >= rank_value:great_power
		c:BRZ ?= {
			relations:root < relations_threshold:neutral
		}
		custom_tooltip = {
			text = aberdeen_act_cd_tt
			NOT = { 
				has_variable = gbr_disrupt_brazil
			}
		}
	}

	ai_chance = {
		base = 1
		modifier = {
			trigger = { 
				OR = {
					is_at_war = yes
					any_revolution_ongoing = yes
				}
			}
			add = -1000
		}
	}

	effect = {
		set_variable = {
			name = gbr_disrupt_brazil
			months = normal_modifier_time
		}
		trigger_event = { id = brazilian_slavery.11 popup = yes }
		show_as_tooltip = {
			change_relations = { 
				country = c:BRZ 
				value = -50 
			}
			# Makes up for part of the lost prestige and influence
			add_modifier = {
				name = aberdeen_act_enforced_gbr
				months = normal_modifier_time
			}
			# Large convoy and trade penalties
			c:BRZ = {
				add_modifier = {
					name = aberdeen_act_enforced_brz
					months = normal_modifier_time
				}
			}
		}
	}
}

# Suppress Slave Trade Button
je_slave_trade_suppression_button = {
	name = "je_slave_trade_suppression_button"
	desc = "je_slave_trade_suppression_button_desc"

	visible = {
		has_law = law_type:law_slave_trade 
		NOT = { has_variable = var_slave_trade_suppression_var }
	}

	possible = {
		ig:ig_landowners = {
			is_in_government = no
		}
		custom_tooltip = {
			text = slave_trade_button_cooldown_tt
			NOT = {
				has_variable = slave_trade_button_cooldown_var
			}
		}
	}

	effect = {
		custom_tooltip = je_slave_trade_suppression_button_tt
		set_variable = var_slave_trade_suppression_var
		set_variable = {
			name = slave_trade_button_cooldown_var
			months = short_modifier_time
		}
		every_interest_group = {
			limit = {
                law_stance = {
                    law = law_type:law_slave_trade
                    value > neutral
                }
			}
			add_modifier = {
				name = restricted_slave_trade_ig_modifier
			}
		}
		remove_modifier = unrestricted_slave_trade_modifier
		add_modifier = {
			name = restricted_slave_trade_modifier
		}
	}
}

# Stop Suppressing Slave Trade Button
je_slave_trade_end_suppression_button = {
	name = "je_slave_trade_end_suppression_button"
	desc = "je_slave_trade_end_suppression_button_desc"

	visible = {
		has_law = law_type:law_slave_trade 
		has_variable = var_slave_trade_suppression_var
	}

	possible = {
		custom_tooltip = {
			text = slave_trade_button_cooldown_tt
			NOT = {
				has_variable = slave_trade_button_cooldown_var
			}
		}
	}

	effect = {
		custom_tooltip = je_slave_trade_end_suppression_button_tt
		remove_variable = var_slave_trade_suppression_var
		remove_modifier = restricted_slave_trade_modifier
		set_variable = {
			name = slave_trade_button_cooldown_var
			months = short_modifier_time
		}
		every_interest_group = {
			limit = {
				has_modifier = restricted_slave_trade_ig_modifier
			}
			remove_modifier = restricted_slave_trade_ig_modifier
		}
		add_modifier = {
			name = unrestricted_slave_trade_modifier
		}
	}
}

﻿humanita_fortress_button = {
	name = "humanita_fortress_button"
	desc = "humanita_fortress_button_desc"

	visible = {
		owns_entire_state_region = STATE_BAJO_PARAGUAY
		NOT = { 
			has_global_variable = humanita_fortress_global_var
		}
	}

	possible = {
		any_scope_state = {
			state_region = s:STATE_BAJO_PARAGUAY
			any_scope_building = { 
				is_building_type = building_construction_sector
				level >= 2
			}
		}
	}

	effect = {
		trigger_event = { id = paraguay.4 popup = yes }
		add_modifier = {
			name = establishing_humanity_modifier
			multiplier = money_amount_multiplier_medium
			months = long_modifier_time
		}
		set_global_variable = humanita_fortress_global_var
		show_as_tooltip = {
			random_scope_state = {
				limit = {
					state_region = s:STATE_BAJO_PARAGUAY
				}
				add_modifier = {
					name = humanita_fortress_modifier
					months = very_long_modifier_time
				}
			}
		}
	}
}

ybycui_iron_works_button = {
	name = "ybycui_iron_works_button"
	desc = "ybycui_iron_works_button_desc"

	visible = {
		owns_entire_state_region = STATE_BAJO_PARAGUAY
		NOT = { 
			has_global_variable = ybycui_iron_works_global_var
		}
	}

	possible = {
		any_scope_state = {
			state_region = s:STATE_BAJO_PARAGUAY
            any_scope_building = {
                is_building_type = building_iron_mine
                level >= 3
                occupancy >= 0.5
            }
            any_scope_building = {
                is_building_type = building_logging_camp
                level >= 2
                occupancy >= 0.5
            }
            any_scope_building = {
            	is_building_type = building_arms_industry
                level >= 2
                occupancy >= 0.5
            }
        }
	}

	effect = {
		trigger_event = { id = paraguay.3 popup = yes }
		set_global_variable = ybycui_iron_works_global_var
		custom_tooltip = choose_one_of_tt
		show_as_tooltip = {
			random_scope_state = {
				limit = {
					state_region = s:STATE_BAJO_PARAGUAY
				}
				add_modifier = {
					name = ybycui_iron_works_modifier
					months = very_long_modifier_time
				}
			}
			random_scope_state = {
				limit = {
					state_region = s:STATE_BAJO_PARAGUAY
				}
				if = {
					limit = {
						NOT = {
							any_scope_building = {
								is_building_type = building_steel_mills
							}
						}
					}
					create_building = {
						building = building_steel_mills
						level = 2
					}
					add_modifier = {
						name = ybycui_steelworks
						months = very_long_modifier_time
					}
				}
				else = {
					add_modifier = {
						name = ybycui_steelworks
						months = very_long_modifier_time
						multiplier = 1.5
					}
				}
			}
			random_scope_state = {
				limit = {
					state_region = s:STATE_BAJO_PARAGUAY
				}
				add_modifier = {
					name = ybycui_prisoner_workforce_modifier
					months = very_long_modifier_time
				}
				add_radicals_in_state = {
					value = small_radicals
				}
			}
		}
	}
}

good_health_prg_button = {
	name = "good_health_prg_button"
	desc = "good_health_prg_button_desc"

	visible = {
		owns_entire_state_region = STATE_BAJO_PARAGUAY
		NOT = { 
			has_global_variable = improve_living_conditions_global_var
		}
	}

	possible = {
		any_scope_state = {
			state_region = s:STATE_BAJO_PARAGUAY
			any_scope_building = {
				is_building_type = building_urban_center
				level >= 2
			}
		}
		OR = {
			has_law = law_type:law_charitable_health_system
			has_law = law_type:law_private_health_insurance
			has_law = law_type:law_public_health_insurance
			any_country = {
				country_rank = rank_value:great_power
				relations:root >= relations_threshold:amicable
			}
		}
	}

	effect = {
		trigger_event = { id = paraguay.5 popup = yes }
		set_global_variable = improve_living_conditions_global_var
		if = {
			limit = {
				any_country = {
					OR = {
						country_is_in_europe = yes
						country_is_in_north_america = yes
					}
					has_technology_researched = medical_degrees
					relations:root >= relations_threshold:amicable				
				}
			}
			random_country = {
				limit = {
					OR = {
						country_is_in_europe = yes
						country_is_in_north_america = yes
					}
					has_technology_researched = medical_degrees
					relations:root >= relations_threshold:amicable
				}
				save_scope_as = paraguay_doctors_country_scope
			}
		}
		else = {
			save_scope_as = paraguay_doctors_country_scope
		}
		show_as_tooltip = {
			random_scope_state = {
				limit = {
					state_region = s:STATE_BAJO_PARAGUAY
				}
				add_modifier = {
					name = vaccinations_prg_modifier
					months = very_long_modifier_time
				}
			}
		}
	}
}

army_git_good_button = {
	name = "army_git_good_button"
	desc = "army_git_good_button_desc"

	visible = {
		owns_entire_state_region = STATE_BAJO_PARAGUAY
		NOT = { 
			has_global_variable = paraguay_army_reform_global_var
		}
	}

	possible = {
		OR = {
			has_law = law_type:law_professional_army
			has_law = law_type:law_mass_conscription
		}
		any_scope_state = {
			state_region = s:STATE_BAJO_PARAGUAY
            any_scope_building = {
                is_building_type = building_barracks
                level >= 20
                occupancy >= 0.5
            }
        }
	}

	effect = {
		trigger_event = { id = paraguay.6 popup = yes }
		set_global_variable = paraguay_army_reform_global_var
		custom_tooltip = choose_one_of_tt
		show_as_tooltip = {
			random_scope_state = {
				limit = {
					state_region = s:STATE_BAJO_PARAGUAY
				}
				random_scope_building = {
					limit = {
						is_building_type = building_barracks
					}
					add_modifier = {
						name = barracks_boost_paraguay_quantity_modifier
						months = very_long_modifier_time
					}
				}
			}
			add_modifier = {
				name = barracks_boost_paraguay_quality_modifier
				months = very_long_modifier_time
			}
		}
	}
}

﻿je_afghan_unification_appeal_to_russia_button = {
	name = "je_afghan_unification_appeal_to_russia_button"
	desc = "je_afghan_unification_appeal_to_russia_button_desc"

	selected = {
		has_variable = AFG_appealed_to_RUS
	}

	visible = {
		exists = c:RUS
		NOT = {
			exists = c:AFG
		}
	}

	possible = {
		has_technology_researched = mandatory_service
		NOR = {
			custom_tooltip = {
				text = opposes_rus_in_diplo_play_tt
				OR = {
					has_war_with = c:RUS
					is_diplomatic_play_enemy_of = c:RUS
				}
			}
			has_diplomatic_pact = {
				who = c:RUS
				type = rivalry
			}
		}
		NOT = {
			custom_tooltip = {
				text = AFG_RUS_support_request_rejected_tt
				has_variable = AFG_RUS_support_cooldown
			}
		}
		custom_tooltip = {
			text = AFG_appealed_to_GBR_tt
			NOT = {
				OR = {
					has_variable = AFG_appealed_to_GBR
					has_variable = pending_aid_request
				}
			}
		}
		c:RUS ?= {
			has_interest_marker_in_region = region_persia
		}
		custom_tooltip = {
			text = AFG_no_other_afghan_nation_appealing_rus_tt
			NOT = {
				any_diplomatically_relevant_country = {
					has_journal_entry = je_unify_afghanistan
					NOT = {
						THIS = ROOT
					}
					OR = {
						has_variable = AFG_appealed_to_RUS
						AND = {
							has_variable = pending_aid_request
							var:pending_aid_request = c:RUS
						}
					}
				}
			}
		}
		custom_tooltip = {
			text = not_receiving_aid_tt
			NOT = {
				has_variable = AFG_appealed_to_RUS
			}
		}
	}

	effect = {
		set_variable = { name = AFG_RUS_support_cooldown years = 10 }
		set_variable = { name = pending_aid_request value = c:RUS }
		save_scope_as = afghan_nation_scope
		c:RUS = {
			save_scope_as = relevant_country
			trigger_event = { id = gg_afghanistan.3 days = 7 popup = yes }
		}
		custom_tooltip = if_they_accept_tt
		custom_tooltip = AFG_appeal_accept_tt
		show_as_tooltip = {
			add_modifier = {
				name = modifier_european_military_assistance
				months = very_long_modifier_time
			}
			create_diplomatic_catalyst = {  
				type = catalyst_event_positive
				target = scope:relevant_country
			}
			create_diplomatic_catalyst = {  
				type = catalyst_event_negative
				target = c:GBR
			}
			scope:relevant_country.power_bloc = {
				add_leverage = { target = ROOT value = 25 }
			}
		}
	}
	
	ai_chance = {
		base = 0

		modifier = {
			trigger = {
				c:RUS ?= {
					relations:root >= relations_threshold:cordial
				}
			}
			add = 15
		}

		modifier = {
			trigger = {
				is_diplomatic_play_committed_participant = yes
			}
			add = 10
		}

		modifier = {
			trigger = {
				has_variable = player_RUS_denied_aid_request
			}
			add = -1000
		}
	}
}

je_afghan_unification_appeal_to_britain_button = {
	name = "je_afghan_unification_appeal_to_britain_button"
	desc = "je_afghan_unification_appeal_to_britain_button_desc"

	selected = {
		has_variable = AFG_appealed_to_GBR
	}

	visible = {
		exists = c:GBR
		NOT = {
			exists = c:AFG
		}
	}

	possible = {
		has_technology_researched = mandatory_service
		NOR = {
			custom_tooltip = {
				text = opposes_gbr_in_diplo_play_tt
				OR = {
					has_war_with = c:GBR
					is_diplomatic_play_enemy_of = c:GBR
				}
			}
			has_diplomatic_pact = {
				who = c:GBR
				type = rivalry
			}
		}
		NOT = {
			custom_tooltip = {
				text = AFG_GBR_support_request_rejected_tt
				has_variable = AFG_GBR_support_cooldown
			}
		}
		custom_tooltip = {
			text = AFG_appealed_to_RUS_tt
			NOT = {
				OR = {
					has_variable = AFG_appealed_to_RUS
					has_variable = pending_aid_request
				}
			}
		}
		c:GBR ?= {
			has_interest_marker_in_region = region_persia
		}
		custom_tooltip = {
			text = AFG_no_other_afghan_nation_appealing_gbr_tt
			NOT = {
				any_diplomatically_relevant_country = {
					has_journal_entry = je_unify_afghanistan
					NOT = {
						THIS = ROOT
					}
					OR = {
						has_variable = AFG_appealed_to_GBR
						AND = {
							has_variable = pending_aid_request
							var:pending_aid_request = c:GBR
						}
					}
				}
			}
		}
		custom_tooltip = {
			text = not_receiving_aid_tt
			NOT = {
				has_variable = AFG_appealed_to_GBR
			}
		}
	}

	effect = {
		set_variable = { name = AFG_GBR_support_cooldown years = 10 }
		set_variable = { name = pending_aid_request value = c:GBR }
		save_scope_as = afghan_nation_scope
		c:GBR = {
			save_scope_as = relevant_country
			trigger_event = { id = gg_afghanistan.3 days = 7 popup = yes }
		}
		custom_tooltip = if_they_accept_tt
		custom_tooltip = AFG_appeal_accept_tt
		show_as_tooltip = {
			add_modifier = {
				name = modifier_european_military_assistance
				months = very_long_modifier_time
			}
			create_diplomatic_catalyst = {  
				type = catalyst_event_positive
				target = scope:relevant_country
			}
			create_diplomatic_catalyst = {  
				type = catalyst_event_negative
				target = c:RUS
			}
			scope:relevant_country.power_bloc = {
				add_leverage = { target = ROOT value = 25 }
			}
		}
	}
	
	ai_chance = {
		base = 0

		modifier = {
			trigger = {
				c:GBR ?= {
					relations:root >= relations_threshold:cordial
				}
			}
			add = 15
		}

		modifier = {
			trigger = {
				is_diplomatic_play_committed_participant = yes
			}
			add = 10
		}

		modifier = {
			trigger = {
				has_variable = player_GBR_denied_aid_request
			}
			add = -1000
		}
	}
}

je_consolidate_afghanistan_durand_line = {
	name = "je_consolidate_afghanistan_durand_line"
	desc = "je_consolidate_afghanistan_durand_line_desc"
	
	selected = {
		has_variable = proposed_durand_line
	}

	visible = {
		exists = c:AFG
		OR = {
			any_scope_state = {
				OR = {
					region = sr:region_north_india
					region = sr:region_himalayas
					state_region = s:STATE_PASHTUNISTAN
					state_region = s:STATE_QUETTA
					state_region = s:STATE_BALUCHISTAN
				}
				any_neighbouring_state = {
					owner = c:AFG
				}
			}
			any_country = {
				is_subject_of = ROOT
				NOT = {
					c:AFG ?= this
				}
				any_scope_state = {
					OR = {
						region = sr:region_north_india
						region = sr:region_himalayas
					}
					any_neighbouring_state = {
						owner = c:AFG
					}
				}
			}
		}
		NOT = {
			country_or_subject_owns_entire_state_region = STATE_PASHTUNISTAN
			country_or_subject_owns_entire_state_region = STATE_QUETTA
			country_or_subject_owns_entire_state_region = STATE_BALUCHISTAN
		}
	}

	possible = {
		custom_tooltip = {
			text = already_approved_of_treaty_tt
			NOT = {
				has_variable = afghanistan_delimitation_treaty_approved
			}
		}
	}

	effect = {
		if = {
			limit = {
				has_variable = proposed_durand_line
			}
			remove_variable = proposed_durand_line
		}
		if = {
			limit = {
				has_variable = proposed_indus_line
			}
			remove_variable = proposed_indus_line
		}
		if = {
			limit = {
				has_variable = proposed_status_quo
			}
			remove_variable = proposed_status_quo
		}
		set_variable = proposed_durand_line
		custom_tooltip = if_treaty_process_succeeds_tt
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:afghan_partition_proxy
					NOT = {
						any_scope_state = {
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
								state_region = s:STATE_PASHTUNISTAN
								state_region = s:STATE_QUETTA
								state_region = s:STATE_BALUCHISTAN
							}
							any_neighbouring_state = {
								owner = c:AFG
							}
						}
					}
					any_country = {
						is_subject_of = ROOT
						NOT = {
							c:AFG ?= this
						}
						any_scope_state = {
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
							}
							any_neighbouring_state = {
								owner = c:AFG
							}
						}
					}
				}
				every_state = {
					limit = {
						owner = c:AFG
						OR = {
							region = sr:region_north_india
							region = sr:region_himalayas
							state_region = s:STATE_PASHTUNISTAN
							state_region = s:STATE_QUETTA
							state_region = s:STATE_BALUCHISTAN
						}
					}
					set_state_owner = scope:afghan_partition_proxy
				}
			}
			else = {
				every_state = {
					limit = {
						owner = c:AFG
						OR = {
							region = sr:region_north_india
							region = sr:region_himalayas
							state_region = s:STATE_PASHTUNISTAN
							state_region = s:STATE_QUETTA
							state_region = s:STATE_BALUCHISTAN
						}
					}
					set_state_owner = ROOT
				}
			}
		}
	}

	ai_chance = {
		base = 200
		modifier = {
			trigger = {
				OR = {
					scope:afghan_partition_proxy ?= {
						any_scope_state = {
							state_region = s:STATE_BALUCHISTAN
						}
					}
					any_scope_state = {
						state_region = s:STATE_BALUCHISTAN
					}
				}
			}
			add = 25
		}
		modifier = {
			trigger = {
				OR = {
					scope:afghan_partition_proxy ?= {
						any_scope_state = {
							state_region = s:STATE_QUETTA
						}
					}
					any_scope_state = {
						state_region = s:STATE_QUETTA
					}
				}
			}
			add = 25
		}
		modifier = {
			trigger = {
				OR = {
					scope:afghan_partition_proxy ?= {
						any_scope_state = {
							state_region = s:STATE_PASHTUNISTAN
						}
					}
					any_scope_state = {
						state_region = s:STATE_PASHTUNISTAN
					}
				}
			}
			add = 25
		}
		modifier = {
			trigger = {
				c:AFG = {
					relations:root >= relations_threshold:cordial
				}
			}
			add = -100
		}
		modifier = {
			trigger = {
				c:AFG = {
					relations:root <= relations_threshold:poor
				}
			}
			add = 200
		}
		modifier = {
			trigger = {
				has_variable = southwest_border_rejected
			}
			add = -200
		}
	}
}

je_consolidate_afghanistan_indus_line = {
	name = "je_consolidate_afghanistan_indus_line"
	desc = "je_consolidate_afghanistan_indus_line_desc"

	selected = {
		has_variable = proposed_indus_line
	}
	
	visible = {
		exists = c:AFG
		OR = {
			any_scope_state = {
				OR = {
					region = sr:region_north_india
					region = sr:region_himalayas
					state_region = s:STATE_PASHTUNISTAN
					state_region = s:STATE_QUETTA
					state_region = s:STATE_BALUCHISTAN
				}
				any_neighbouring_state = {
					owner = c:AFG
				}
			}
			any_country = {
				is_subject_of = ROOT
				NOT = {
					c:AFG ?= this
				}
				any_scope_state = {
					OR = {
						region = sr:region_north_india
						region = sr:region_himalayas
					}
					any_neighbouring_state = {
						owner = c:AFG
					}
				}
			}
		}
		NOT = {
			c:AFG = {
				country_or_subject_owns_entire_state_region = STATE_PASHTUNISTAN
				country_or_subject_owns_entire_state_region = STATE_QUETTA
				country_or_subject_owns_entire_state_region = STATE_BALUCHISTAN
			}
		}
	}

	possible = {
		custom_tooltip = {
			text = already_approved_of_treaty_tt
			NOT = {
				has_variable = afghanistan_delimitation_treaty_approved
			}
		}
	}

	effect = {
		if = {
			limit = {
				has_variable = proposed_durand_line
			}
			remove_variable = proposed_durand_line
		}
		if = {
			limit = {
				has_variable = proposed_indus_line
			}
			remove_variable = proposed_indus_line
		}
		if = {
			limit = {
				has_variable = proposed_status_quo
			}
			remove_variable = proposed_status_quo
		}
		set_variable = proposed_indus_line
		custom_tooltip = if_treaty_process_succeeds_tt
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:afghan_partition_proxy
					NOT = {
						any_scope_state = {
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
								state_region = s:STATE_PASHTUNISTAN
								state_region = s:STATE_QUETTA
								state_region = s:STATE_BALUCHISTAN
							}
							any_neighbouring_state = {
								owner = c:AFG
							}
						}
					}
					any_country = {
						is_subject_of = ROOT
						NOT = {
							c:AFG ?= this
						}
						any_scope_state = {
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
							}
							any_neighbouring_state = {
								owner = c:AFG
							}
						}
					}
				}
				every_state = {
					limit = {
						owner = c:AFG
						OR = {
							region = sr:region_north_india
							region = sr:region_himalayas
						}
						NOT = {
							state_region = {
								is_homeland = cu:pashtun
							}
						}
					}
					set_state_owner = scope:afghan_partition_proxy
				}
				every_state = {
					limit = {
						OR = {
							owner = ROOT
							owner = {
								is_subject_of = ROOT
								NOT = {
									c:AFG ?= this
								}
							}
						}
						state_region = {
							is_homeland = cu:pashtun
						}
					}
					set_state_owner = c:AFG
				}
			}
			else = {
				every_state = {
					limit = {
						owner = c:AFG
						OR = {
							region = sr:region_north_india
							region = sr:region_himalayas
						}
						NOT = {
							state_region = {
								is_homeland = cu:pashtun
							}
						}
					}
					set_state_owner = ROOT
				}
				every_state = {
					limit = {
						OR = {
							owner = ROOT
							owner = {
								is_subject_of = ROOT
								NOT = {
									c:AFG ?= this
								}
							}
						}
						state_region = {
							is_homeland = cu:pashtun
						}
					}
					set_state_owner = c:AFG
				}
			}
		}
	}

	ai_chance = {
		base = 50
		modifier = {
			trigger = {
				c:AFG = {
					any_scope_state = {
						state_region = s:STATE_BALUCHISTAN
					}
				}
			}
			add = 25
		}
		modifier = {
			trigger = {
				c:AFG = {
					any_scope_state = {
						state_region = s:STATE_PASHTUNISTAN
					}
				}
			}
			add = 25
		}
		modifier = {
			trigger = {
				c:AFG = {
					any_scope_state = {
						state_region = s:STATE_QUETTA
					}
				}
			}
			add = 25
		}
		modifier = {
			trigger = {
				scope:afghan_partition_proxy ?= {
					NOT = {
						any_scope_state = {
							state_region = s:STATE_BALUCHISTAN
						}
					}
				}
			}
			add = 25
		}
		modifier = {
			trigger = {
				OR = {
					has_attitude = {
						who = c:AFG
						attitude = belligerent
					}
					has_attitude = {
						who = c:AFG
						attitude = domineering
					}	
					has_attitude = {
						who = c:AFG
						attitude = antagonistic
					}								
				}	
			}
			add = -50
		}
		modifier = {
			trigger = {
				OR = {
					has_attitude = {
						who = c:AFG
						attitude = cooperative
					}
					has_attitude = {
						who = c:AFG
						attitude = protective
					}	
					has_attitude = {
						who = c:AFG
						attitude = genial
					}								
				}	
			}
			add = 50
		}
		modifier = {
			trigger = {
				c:AFG = {
					relations:root >= relations_threshold:cordial
				}
			}
			add = 50
		}
		modifier = {
			trigger = {
				c:AFG = {
					relations:root <= relations_threshold:poor
				}
			}
			add = -45
		}
		modifier = {
			trigger = {
				has_variable = southwest_border_rejected
			}
			add = -100
		}
	}
}

je_consolidate_afghanistan_southeast_status_quo = {
	name = "je_consolidate_afghanistan_southeast_status_quo"
	desc = "je_consolidate_afghanistan_southeast_status_quo_desc"

	selected = {
		has_variable = proposed_status_quo
	}
	
	visible = {
		exists = c:AFG
		OR = {
			any_scope_state = {
				OR = {
					region = sr:region_north_india
					region = sr:region_himalayas
					state_region = s:STATE_PASHTUNISTAN
					state_region = s:STATE_QUETTA
					state_region = s:STATE_BALUCHISTAN
				}
				any_neighbouring_state = {
					owner = c:AFG
				}
			}
			any_country = {
				is_subject_of = ROOT
				NOT = {
					c:AFG ?= this
				}
				any_scope_state = {
					OR = {
						region = sr:region_north_india
						region = sr:region_himalayas
						state_region = s:STATE_PASHTUNISTAN
						state_region = s:STATE_QUETTA
						state_region = s:STATE_BALUCHISTAN
					}
					any_neighbouring_state = {
						owner = c:AFG
					}
				}
			}
		}
	}

	possible = {
		custom_tooltip = {
			text = already_approved_of_treaty_tt
			NOT = {
				has_variable = afghanistan_delimitation_treaty_approved
			}
		}
	}

	effect = {
		if = {
			limit = {
				has_variable = proposed_durand_line
			}
			remove_variable = proposed_durand_line
		}
		if = {
			limit = {
				has_variable = proposed_indus_line
			}
			remove_variable = proposed_indus_line
		}
		if = {
			limit = {
				has_variable = proposed_status_quo
			}
			remove_variable = proposed_status_quo
		}
		set_variable = proposed_status_quo
		custom_tooltip = if_treaty_process_succeeds_tt
		custom_tooltip = status_quo_southeast_tt
	}
	
	ai_chance = {
		base = 50
		modifier = {
			trigger = {
				c:AFG = {
					relations:root >= relations_threshold:cordial
				}
			}
			add = 25
		}
		modifier = {
			trigger = {
				OR = {
					has_attitude = {
						who = c:AFG
						attitude = cooperative
					}
					has_attitude = {
						who = c:AFG
						attitude = protective
					}	
					has_attitude = {
						who = c:AFG
						attitude = genial
					}								
				}	
			}
			add = 25
		}
		modifier = {
			trigger = {
				has_variable = southwest_border_rejected
			}
			add = -75
		}
	}
}

je_consolidate_afghanistan_torkestan_line = {
	name = "je_consolidate_afghanistan_torkestan_line"
	desc = "je_consolidate_afghanistan_torkestan_line_desc"
	
	selected = {
		has_variable = proposed_torkestan_line
	}

	visible = {
		exists = c:AFG
		OR = {
			any_scope_state = {
				OR = {
					region = sr:region_central_asia
					state_region = s:STATE_BALKH
				}
				any_neighbouring_state = {
					owner = c:AFG
				}
			}
			any_country = {
				is_subject_of = ROOT
				NOT = {
					c:AFG ?= this
				}
				any_scope_state = {
					OR = {
						region = sr:region_central_asia
						state_region = s:STATE_BALKH
					}
					any_neighbouring_state = {
						owner = c:AFG
					}
				}
			}
		}
		NOT = {
			country_or_subject_owns_entire_state_region = STATE_BALKH
		}
	}

	possible = {
		custom_tooltip = {
			text = already_approved_of_treaty_tt
			NOT = {
				has_variable = afghanistan_delimitation_treaty_approved
			}
		}
	}

	effect = {
		if = {
			limit = {
				has_variable = proposed_status_quo_north
			}
			remove_variable = proposed_status_quo_north
		}
		if = {
			limit = {
				has_variable = proposed_amu_darya_line
			}
			remove_variable = proposed_amu_darya_line
		}
		if = {
			limit = {
				has_variable = proposed_torkestan_line
			}
			remove_variable = proposed_torkestan_line
		}
		set_variable = proposed_torkestan_line
		custom_tooltip = if_treaty_process_succeeds_tt
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:afghan_partition_proxy
					NOT = {
						any_scope_state = {
							OR = {
								region = sr:region_central_asia
								state_region = s:STATE_BALKH
							}
							any_neighbouring_state = {
								owner = c:AFG
							}
						}
					}
					any_country = {
						is_subject_of = ROOT
						NOT = {
							c:AFG ?= this
						}
						any_scope_state = {
							OR = {
								region = sr:region_central_asia
								state_region = s:STATE_BALKH
							}
							any_neighbouring_state = {
								owner = c:AFG
							}
						}
					}
				}
				every_state = {
					limit = {
						owner = c:AFG
						OR = {
							region = sr:region_central_asia
							state_region = s:STATE_BALKH
						}
					}
					set_state_owner = scope:afghan_partition_proxy
				}
			}
			else = {
				every_state = {
					limit = {
						owner = c:AFG
						OR = {
							region = sr:region_central_asia
							state_region = s:STATE_BALKH
						}
					}
					set_state_owner = ROOT
				}
			}
		}
	}
	
	ai_chance = {
		base = 100
		modifier = {
			trigger = {
				scope:afghan_partition_proxy ?= {
					NOT = {
						any_scope_state = {
							state_region = s:STATE_BALKH
						}
					}
				}
			}
			add = 25
		}
		modifier = {
			trigger = {
				OR = {
					scope:afghan_partition_proxy ?= {
						any_scope_state = {
							state_region = s:STATE_BALKH
						}
					}
					any_scope_state = {
						state_region = s:STATE_BALKH
					}
				}
			}
			add = 25
		}
		modifier = {
			trigger = {
				c:AFG = {
					relations:root >= relations_threshold:cordial
				}
			}
			add = -50
		}
		modifier = {
			trigger = {
				c:AFG = {
					relations:root <= relations_threshold:poor
				}
			}
			add = 50
		}
		modifier = { # wants a buffer state
			trigger = {
				scope:rival_gp_scope ?= {
					relations:root <= relations_threshold:poor
				}
			}
			add = -150
		}
		modifier = {
			trigger = {
				has_variable = north_border_rejected
			}
			add = -75
		}
	}
}

je_consolidate_afghanistan_amu_darya_line = {
	name = "je_consolidate_afghanistan_amu_darya_line"
	desc = "je_consolidate_afghanistan_amu_darya_line_desc"
	
	selected = {
		has_variable = proposed_amu_darya_line
	}

	visible = {
		exists = c:AFG
		OR = {
			any_scope_state = {
				OR = {
					region = sr:region_central_asia
					state_region = s:STATE_BALKH
				}
				any_neighbouring_state = {
					owner = c:AFG
				}
			}
			any_country = {
				is_subject_of = ROOT
				NOT = {
					c:AFG ?= this
				}
				any_scope_state = {
					OR = {
						region = sr:region_central_asia
						state_region = s:STATE_BALKH
					}
					any_neighbouring_state = {
						owner = c:AFG
					}
				}
			}
		}
	}

	possible = {
		custom_tooltip = {
			text = already_approved_of_treaty_tt
			NOT = {
				has_variable = afghanistan_delimitation_treaty_approved
			}
		}
	}

	effect = {
		if = {
			limit = {
				has_variable = proposed_status_quo_north
			}
			remove_variable = proposed_status_quo_north
		}
		if = {
			limit = {
				has_variable = proposed_amu_darya_line
			}
			remove_variable = proposed_amu_darya_line
		}
		if = {
			limit = {
				has_variable = proposed_torkestan_line
			}
			remove_variable = proposed_torkestan_line
		}
		set_variable = proposed_amu_darya_line
		custom_tooltip = if_treaty_process_succeeds_tt
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:afghan_partition_proxy
					NOT = {
						any_scope_state = {
							region = sr:region_central_asia
							any_neighbouring_state = {
								owner = c:AFG
							}
						}
					}
					any_country = {
						is_subject_of = ROOT
						NOT = {
							c:AFG ?= this
						}
						any_scope_state = {
							region = sr:region_central_asia
							any_neighbouring_state = {
								owner = c:AFG
							}
						}
					}
				}
				every_state = {
					limit = {
						owner = c:AFG
						region = sr:region_central_asia
					}
					set_state_owner = scope:afghan_partition_proxy
				}
				every_state = {
					limit = {
						OR = {
							owner = ROOT
							owner = {
								is_subject_of = ROOT
								NOT = {
									c:AFG ?= this
								}
							}
						}
						state_region = {
							is_homeland = cu:pashtun
						}
					}
					set_state_owner = c:AFG
				}
			}
			else = {
				every_state = {
					limit = {
						owner = c:AFG
						region = sr:region_central_asia
					}
					set_state_owner = ROOT
				}
				every_state = {
					limit = {
						OR = {
							owner = ROOT
							owner = {
								is_subject_of = ROOT
								NOT = {
									c:AFG ?= this
								}
							}
						}
						state_region = {
							is_homeland = cu:pashtun
						}
					}
					set_state_owner = c:AFG
				}
			}
		}
	}
	
	ai_chance = {
		base = 200
		modifier = {
			trigger = {
				has_variable = north_border_rejected
			}
			add = -100
		}
	}
}

je_consolidate_afghanistan_north_status_quo = {
	name = "je_consolidate_afghanistan_north_status_quo"
	desc = "je_consolidate_afghanistan_north_status_quo_desc"

	selected = {
		has_variable = proposed_status_quo_north
	}
	
	visible = {
		exists = c:AFG
		OR = {
			any_scope_state = {
				OR = {
					region = sr:region_central_asia
					state_region = s:STATE_BALKH
				}
				any_neighbouring_state = {
					owner = c:AFG
				}
			}
			any_country = {
				is_subject_of = ROOT
				NOT = {
					c:AFG ?= this
				}
				any_scope_state = {
					OR = {
						region = sr:region_central_asia
						state_region = s:STATE_BALKH
					}
					any_neighbouring_state = {
						owner = c:AFG
					}
				}
			}
		}
	}

	possible = {
		custom_tooltip = {
			text = already_approved_of_treaty_tt
			NOT = {
				has_variable = afghanistan_delimitation_treaty_approved
			}
		}
	}

	effect = {
		if = {
			limit = {
				has_variable = proposed_status_quo_north
			}
			remove_variable = proposed_status_quo_north
		}
		if = {
			limit = {
				has_variable = proposed_amu_darya_line
			}
			remove_variable = proposed_amu_darya_line
		}
		if = {
			limit = {
				has_variable = proposed_torkestan_line
			}
			remove_variable = proposed_torkestan_line
		}
		set_variable = proposed_status_quo_north
		custom_tooltip = if_treaty_process_succeeds_tt
		custom_tooltip = status_quo_north_tt
	}
	
	ai_chance = {
		base = 50
		modifier = {
			trigger = {
				OR = {
					has_attitude = {
						who = c:AFG
						attitude = belligerent
					}
					has_attitude = {
						who = c:AFG
						attitude = domineering
					}	
					has_attitude = {
						who = c:AFG
						attitude = antagonistic
					}								
				}	
			}
			add = -45
		}
		modifier = {
			trigger = {
				OR = {
					has_attitude = {
						who = c:AFG
						attitude = cooperative
					}
					has_attitude = {
						who = c:AFG
						attitude = protective
					}	
					has_attitude = {
						who = c:AFG
						attitude = genial
					}								
				}	
			}
			add = 50
		}
		modifier = {
			trigger = {
				has_variable = north_border_rejected
			}
			add = -50
		}
	}
}

je_consolidate_afghanistan_approve_of_treaty = {
	name = "je_consolidate_afghanistan_approve_of_treaty"
	desc = "je_consolidate_afghanistan_approve_of_treaty_desc"
	
	visible = {
		exists = c:AFG
		NOT = {
			has_variable = afghanistan_delimitation_treaty_approved
		}
	}

	possible = {
		custom_tooltip = {
			text = proposed_partition_plan_tt
			AND = {
				OR = {
					has_variable = proposed_durand_line
					has_variable = proposed_indus_line
					has_variable = proposed_status_quo
					scope:rival_gp_scope ?= {
						OR = {
							has_variable = proposed_durand_line
							has_variable = proposed_indus_line
							has_variable = proposed_status_quo
						}
					}
				}
				OR = {
					has_variable = proposed_torkestan_line
					has_variable = proposed_amu_darya_line
					has_variable = proposed_status_quo_north
					scope:rival_gp_scope ?= {
						OR = {
							has_variable = proposed_torkestan_line
							has_variable = proposed_amu_darya_line
							has_variable = proposed_status_quo_north
						}
					}
				}
			}
		}
		custom_tooltip = {
			text = conflicting_treaty_proposal_north_tt
			NAND = {
				OR = {
					has_variable = proposed_torkestan_line
					AND = {
						has_variable = proposed_amu_darya_line
						c:AFG ?= {
							any_scope_state = {
								region = sr:region_central_asia
							}
						}
					}
					has_variable = proposed_status_quo_north
				}
				scope:rival_gp_scope ?= {
					OR = {
						has_variable = proposed_torkestan_line
						AND = {
							has_variable = proposed_amu_darya_line
							c:AFG ?= {
								any_scope_state = {
									region = sr:region_central_asia
								}
							}
						}
						has_variable = proposed_status_quo_north
					}
				}
				NAND = {
					has_variable = proposed_status_quo_north
					scope:rival_gp_scope ?= {
						has_variable = proposed_status_quo_north
					}
				}
			}
		}
		custom_tooltip = {
			text = conflicting_treaty_proposal_southwest_tt
			NAND = {
				OR = {
					has_variable = proposed_durand_line
					AND = {
						has_variable = proposed_indus_line
						c:AFG = {
							any_scope_state = {
								OR = {
									region = sr:region_north_india
									region = sr:region_himalayas
								}
								NOT = {
									state_region = {
										is_homeland = cu:pashtun
									}
								}
							}
						}
					}
					has_variable = proposed_status_quo
				}
				scope:rival_gp_scope ?= {
					OR = {
						has_variable = proposed_durand_line
						AND = {
							has_variable = proposed_indus_line
							c:AFG = {
								any_scope_state = {
									OR = {
										region = sr:region_north_india
										region = sr:region_himalayas
									}
									NOT = {
										state_region = {
											is_homeland = cu:pashtun
										}
									}
								}
							}
						}
						has_variable = proposed_status_quo
					}
				}
				NAND = {
					has_variable = proposed_status_quo
					scope:rival_gp_scope ?= {
						has_variable = proposed_status_quo
					}
				}
			}
		}
	}

	effect = {
		custom_tooltip = {
			text = approve_of_delimitation_treaty_tt
			set_variable = { name = afghanistan_delimitation_treaty_approved days = 365 }
		}
		if = {
			limit = {
				c:AFG = {
					has_variable = received_afghan_border_notification
				}
			}
			c:AFG = {
				remove_variable = received_afghan_border_notification
			}
		}
		custom_tooltip = afghanistan_abandon_claims_tt
		show_as_tooltip = {
			if = {
				limit = {
					scope:rival_gp_scope ?= {
						has_variable = proposed_durand_line
					}
				}
				if = {
					limit = {
						exists = scope:rival_afghan_partition_proxy
					}
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
								state_region = s:STATE_PASHTUNISTAN
								state_region = s:STATE_QUETTA
								state_region = s:STATE_BALUCHISTAN
							}
						}
						set_state_owner = scope:rival_afghan_partition_proxy
					}
					every_state = {
						limit = {
							OR = {
								scope:rival_gp_scope ?= owner
								scope:rival_afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
							NOR = {
								state_region = s:STATE_PASHTUNISTAN
								state_region = s:STATE_QUETTA
								state_region = s:STATE_BALUCHISTAN
							}
						}
						set_state_owner = c:AFG
					}
				}
				else = {
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
								state_region = s:STATE_PASHTUNISTAN
								state_region = s:STATE_QUETTA
								state_region = s:STATE_BALUCHISTAN
							}
						}
						set_state_owner = scope:rival_gp_scope
					}
					every_state = {
						limit = {
							OR = {
								scope:rival_gp_scope ?= owner
								scope:rival_afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
							NOR = {
								state_region = s:STATE_PASHTUNISTAN
								state_region = s:STATE_QUETTA
								state_region = s:STATE_BALUCHISTAN
							}
						}
						set_state_owner = c:AFG
					}
				}
			}
			else_if = {
				limit = {
					scope:rival_gp_scope ?= {
						has_variable = proposed_indus_line
					}
				}
				if = {
					limit = {
						exists = scope:rival_afghan_partition_proxy
					}
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
							}
							NOT = {
								state_region = {
									is_homeland = cu:pashtun
								}
							}
						}
						set_state_owner = scope:rival_afghan_partition_proxy
					}
					every_state = {
						limit = {
							OR = {
								scope:rival_gp_scope ?= owner
								scope:rival_afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
						}
						set_state_owner = c:AFG
					}
				}
				else = {
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
							}
							NOT = {
								state_region = {
									is_homeland = cu:pashtun
								}
							}
						}
						set_state_owner = scope:rival_gp_scope
					}
					every_state = {
						limit = {
							OR = {
								scope:rival_gp_scope ?= owner
								scope:rival_afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
						}
						set_state_owner = c:AFG
					}
				}
			}
			else_if = {
				limit = {
					scope:rival_gp_scope ?= {
						has_variable = proposed_status_quo
					}
				}
				custom_tooltip = status_quo_southeast_tt
			}

			if = {
				limit = {
					scope:rival_gp_scope ?= {
						has_variable = proposed_torkestan_line
					}
				}
				if = {
					limit = {
						exists = scope:rival_afghan_partition_proxy
					}
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_central_asia
								state_region = s:STATE_BALKH
							}
						}
						set_state_owner = scope:rival_afghan_partition_proxy
					}
					every_state = {
						limit = {
							OR = {
								scope:rival_gp_scope ?= owner
								scope:rival_afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
								NOT = {
									this = s:STATE_BALKH
								}
							}
						}
						set_state_owner = c:AFG
					}
				}
				else = {
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_central_asia
								state_region = s:STATE_BALKH
							}
						}
						set_state_owner = scope:rival_gp_scope
					}
					every_state = {
						limit = {
							OR = {
								scope:rival_gp_scope ?= owner
								scope:rival_afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
								NOT = {
									this = s:STATE_BALKH
								}
							}
						}
						set_state_owner = c:AFG
					}
				}
			}
			else_if = {
				limit = {
					scope:rival_gp_scope ?= {
						has_variable = proposed_amu_darya_line
					}
				}
				if = {
					limit = {
						exists = scope:rival_afghan_partition_proxy
					}
					every_state = {
						limit = {
							owner = c:AFG
							region = sr:region_central_asia
						}
						set_state_owner = scope:rival_afghan_partition_proxy
					}
					every_state = {
						limit = {
							OR = {
								scope:rival_gp_scope ?= owner
								scope:rival_afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
						}
						set_state_owner = c:AFG
					}
				}
				else = {
					every_state = {
						limit = {
							owner = c:AFG
							region = sr:region_central_asia
						}
						set_state_owner = scope:rival_gp_scope
					}
					every_state = {
						limit = {
							OR = {
								scope:rival_gp_scope ?= owner
								scope:rival_afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
						}
						set_state_owner = c:AFG
					}
				}
			}
			else_if = {
				limit = {
					scope:rival_gp_scope ?= {
						has_variable = proposed_status_quo_north
					}
				}
				custom_tooltip = status_quo_north_tt
			}
		}
		
		show_as_tooltip = {
			if = {
				limit = {
					ROOT = {
						has_variable = proposed_durand_line
					}
				}
				if = {
					limit = {
						exists = scope:afghan_partition_proxy
					}
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
								state_region = s:STATE_PASHTUNISTAN
								state_region = s:STATE_QUETTA
								state_region = s:STATE_BALUCHISTAN
							}
						}
						set_state_owner = scope:afghan_partition_proxy
					}
					every_state = {
						limit = {
							OR = {
								ROOT ?= owner
								scope:afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
							NOR = {
								state_region = s:STATE_PASHTUNISTAN
								state_region = s:STATE_QUETTA
								state_region = s:STATE_BALUCHISTAN
							}
						}
						set_state_owner = c:AFG
					}
				}
				else = {
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
								state_region = s:STATE_PASHTUNISTAN
								state_region = s:STATE_QUETTA
								state_region = s:STATE_BALUCHISTAN
							}
						}
						set_state_owner = ROOT
					}
					every_state = {
						limit = {
							OR = {
								ROOT ?= owner
								scope:afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
							NOR = {
								state_region = s:STATE_PASHTUNISTAN
								state_region = s:STATE_QUETTA
								state_region = s:STATE_BALUCHISTAN
							}
						}
						set_state_owner = c:AFG
					}
				}
			}
			else_if = {
				limit = {
					ROOT = {
						has_variable = proposed_indus_line
					}
				}
				if = {
					limit = {
						exists = scope:afghan_partition_proxy
					}
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
							}
						}
						set_state_owner = scope:afghan_partition_proxy
					}
					every_state = {
						limit = {
							OR = {
								ROOT ?= owner
								scope:afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
						}
						set_state_owner = c:AFG
					}
				}
				else = {
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
							}
						}
						set_state_owner = ROOT
					}
					every_state = {
						limit = {
							OR = {
								ROOT ?= owner
								scope:afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
						}
						set_state_owner = c:AFG
					}
				}
			}
			else_if = {
				limit = {
					ROOT = {
						has_variable = proposed_status_quo
					}
				}
				custom_tooltip = status_quo_southeast_tt
			}

			if = {
				limit = {
					has_variable = proposed_torkestan_line
				}
				if = {
					limit = {
						exists = scope:afghan_partition_proxy
					}
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_central_asia
								state_region = s:STATE_BALKH
							}
						}
						set_state_owner = scope:afghan_partition_proxy
					}
					every_state = {
						limit = {
							OR = {
								ROOT ?= owner
								scope:afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
								NOT = {
									this = s:STATE_BALKH
								}
							}
						}
						set_state_owner = c:AFG
					}
				}
				else = {
					every_state = {
						limit = {
							owner = c:AFG
							OR = {
								region = sr:region_central_asia
								state_region = s:STATE_BALKH
							}
						}
						set_state_owner = ROOT
					}
					every_state = {
						limit = {
							OR = {
								ROOT ?= owner
								scope:afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
								NOT = {
									this = s:STATE_BALKH
								}
							}
						}
						set_state_owner = c:AFG
					}
				}
			}
			else_if = {
				limit = {
					ROOT = {
						has_variable = proposed_amu_darya_line
					}
				}
				if = {
					limit = {
						exists = scope:afghan_partition_proxy
					}
					every_state = {
						limit = {
							owner = c:AFG
							region = sr:region_central_asia
						}
						set_state_owner = scope:afghan_partition_proxy
					}
					every_state = {
						limit = {
							OR = {
								ROOT ?= owner
								scope:afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
						}
						set_state_owner = c:AFG
					}
				}
				else = {
					every_state = {
						limit = {
							owner = c:AFG
							region = sr:region_central_asia
						}
						set_state_owner = ROOT
					}
					every_state = {
						limit = {
							OR = {
								ROOT ?= owner
								scope:afghan_partition_proxy ?= owner
							}
							state_region = {
								is_homeland = cu:pashtun
							}
						}
						set_state_owner = c:AFG
					}
				}
			}
			else_if = {
				limit = {
					ROOT = {
						has_variable = proposed_status_quo_north
					}
				}
				custom_tooltip = status_quo_north_tt
			}
		}
	}
	
	ai_chance = {
		base = 200
		modifier = {
			trigger = {
				scope:rival_gp_scope ?= {
					NOR = {
						has_variable = proposed_durand_line
						has_variable = proposed_indus_line
						has_variable = proposed_status_quo
						has_variable = proposed_torkestan_line
						has_variable = proposed_amu_darya_line
						has_variable = proposed_status_quo_north
						has_variable = afghanistan_delimitation_treaty_approved
					}
				}
			}
			add = -1000
		}
	}
}

je_consolidate_afghanistan_retract_treaty = {
	name = "je_consolidate_afghanistan_retract_treaty"
	desc = "je_consolidate_afghanistan_retract_treaty_desc"
	
	visible = {
		exists = c:AFG
		has_variable = afghanistan_delimitation_treaty_approved
	}

	possible = {
		custom_tooltip = {
			text = proposed_partition_plan_tt
			OR = {
				has_variable = proposed_durand_line
				has_variable = proposed_indus_line
				has_variable = proposed_status_quo
				has_variable = proposed_torkestan_line
				has_variable = proposed_amu_darya_line
				has_variable = proposed_status_quo_north
			}
		}
	}

	effect = {
		reset_afghan_treaty = yes
	}
	
	ai_chance = {
		base = 0
	}
}

je_consolidate_afghanistan_offer_compensation = {
	name = "je_consolidate_afghanistan_offer_compensation"
	desc = "je_consolidate_afghanistan_offer_compensation_desc"
	
	selected = {
		has_variable = proposed_compensation_for_afghanistan
	}

	visible = {
		exists = c:AFG
		has_variable = afghanistan_rejection
		c:AFG = {
			relations:root > relations_threshold:poor
		}
	}

	possible = {
		custom_tooltip = {
			text = already_approved_of_treaty_tt
			NOT = {
				has_variable = afghanistan_delimitation_treaty_approved
			}
		}
	}

	effect = {
		set_variable = proposed_compensation_for_afghanistan
		custom_tooltip = if_treaty_process_succeeds_tt
		show_as_tooltip = {
			create_diplomatic_pact = {
				country = c:AFG
				type = bankroll
			}
		}
	}
	
	ai_chance = {
		base = 200
	}
}

je_consolidate_afghanistan_threaten_reprisals = {
	name = "je_consolidate_afghanistan_threaten_reprisals"
	desc = "je_consolidate_afghanistan_threaten_reprisals_desc"
	
	selected = {
		has_variable = proposed_reprisals_for_afghanistan
	}

	visible = {
		exists = c:AFG
		has_variable = afghanistan_rejection
	}

	possible = {
		custom_tooltip = {
			text = already_approved_of_treaty_tt
			NOT = {
				has_variable = afghanistan_delimitation_treaty_approved
			}
		}
		c:AFG = {
			relations:root < relations_threshold:cordial
		}
	}

	effect = {
		set_variable = proposed_reprisals_for_afghanistan
		ROOT = {
			create_incident = {
				country = c:AFG
				value = 5
			}
		}
		custom_tooltip = if_treaty_process_fails_relations_hit_tt
	}
	
	ai_chance = {
		base = 200
	}
}

je_consolidate_afghanistan_resolve_northern_conflict = {
	name = "je_consolidate_afghanistan_resolve_northern_conflict"
	desc = "je_consolidate_afghanistan_resolve_northern_conflict_desc"
	

	visible = {
		exists = c:AFG
		AND = {
			OR = {
				has_variable = proposed_torkestan_line
				AND = {
					has_variable = proposed_amu_darya_line
					c:AFG ?= {
						any_scope_state = {
							region = sr:region_central_asia
						}
					}
				}
				has_variable = proposed_status_quo_north
			}
			scope:rival_gp_scope ?= {
				OR = {
					has_variable = proposed_torkestan_line
					AND = {
						has_variable = proposed_amu_darya_line
						c:AFG ?= {
							any_scope_state = {
								region = sr:region_central_asia
							}
						}
					}
					has_variable = proposed_status_quo_north
				}
			}
			NAND = {
				has_variable = proposed_status_quo_north
				scope:rival_gp_scope ?= {
					has_variable = proposed_status_quo_north
				}
			}
		}
	}

	possible = {
		custom_tooltip = {
			text = is_not_already_negotiating_tt
			NOT = {
				has_variable = resolving_north_conflict
			}
		}
	}

	effect = {
		set_variable = resolving_north_conflict
		save_scope_as = sender_scope
		scope:rival_gp_scope ?= {
			trigger_event = { id = gg_afghanistan.5 popup = yes }
		}
	}
	
	ai_chance = {
		base = 200
	}
}

je_consolidate_afghanistan_resolve_southwest_conflict = {
	name = "je_consolidate_afghanistan_resolve_southwest_conflict"
	desc = "je_consolidate_afghanistan_resolve_southwest_conflict_desc"

	visible = {
		exists = c:AFG
		AND = {
			OR = {
				has_variable = proposed_durand_line
				AND = {
					has_variable = proposed_indus_line
					c:AFG = {
						any_scope_state = {
							OR = {
								region = sr:region_north_india
								region = sr:region_himalayas
							}
							NOT = {
								state_region = {
									is_homeland = cu:pashtun
								}
							}
						}
					}
				}
				has_variable = proposed_status_quo
			}
			scope:rival_gp_scope ?= {
				OR = {
					has_variable = proposed_durand_line
					AND = {
						has_variable = proposed_indus_line
						c:AFG = {
							any_scope_state = {
								OR = {
									region = sr:region_north_india
									region = sr:region_himalayas
								}
								NOT = {
									state_region = {
										is_homeland = cu:pashtun
									}
								}
							}
						}
					}
					has_variable = proposed_status_quo
				}
			}
			NAND = {
				has_variable = proposed_status_quo
				scope:rival_gp_scope ?= {
					has_variable = proposed_status_quo
				}
			}
		}
	}

	possible = {
		custom_tooltip = {
			text = is_not_already_negotiating_tt
			NOT = {
				has_variable = resolving_southwest_conflict
			}
		}
	}

	effect = {
		set_variable = resolving_southwest_conflict
		save_scope_as = sender_scope
		scope:rival_gp_scope ?= {
			trigger_event = { id = gg_afghanistan.6 popup = yes }
		}
	}
	
	ai_chance = {
		base = 200
	}
}

je_pamir_expedition_dismiss_button = {
	name = "je_pamir_expedition_dismiss_button"
	desc = "je_pamir_expedition_dismiss_button_desc"

	visible = {
		always = yes
	}

	possible = {
		custom_tooltip = {
			text = has_not_cancelled_pamir_expedition_tt
			NOT = {
				has_variable = dismissed_pamir_expedition
			}
		}
	}

	effect = {
		custom_tooltip = {
			text = pamir_expedition_dismissed_tt
			set_variable = dismissed_pamir_expedition
		}
	}
	
	ai_chance = {
		base = 50
		
		modifier = {
			trigger = {
				c:RUS ?= {
					"potential_diplomatic_play_power_ratio(root)" <= 1.00
				}
			}
			add = -25
		}
		modifier = {
			trigger = {
				c:RUS ?= {
					"potential_diplomatic_play_power_ratio(root)" <= 0.75
				}
			}
			add = -50
		}
	}
}
﻿button_implement_law_imposition = {
	name = "button_implement_law_imposition"
	desc = "button_implement_law_imposition_desc"
	
	visible = {
		scope:journal_entry = {
			NOT = { has_variable = has_been_abandoned }
		}
	}
	
	possible = {
		custom_tooltip = {
			text = law_imposition_already_enacting_law
			NOT = { currently_enacting_law = imposed_law }
		}	
	}
	
	effect = {
		if = {
			limit = { 
				NOT = { currently_enacting_law = imposed_law }
				enacting_any_law = yes 
			}
			cancel_enactment = yes
		}
		start_enactment = imposed_law.type
		add_enactment_modifier = {
			name = agreeable_to_imposition
		}	
		hidden_effect = {
			scope:journal_entry = {
				if = {
					limit = {
						has_modifier = foreign_legislative_interference
					}
					remove_modifier = foreign_legislative_interference
					add_modifier = foreign_legislative_interference_enactment
				}
			}
		}
	}  

	ai_chance = {
		base = 0
		
		modifier = {
			trigger = { "enactment_chance_for_law(imposed_law.type)" > 0.1 }
			add = 10
		}
		
		modifier = {
			trigger = { "enactment_chance_for_law(imposed_law.type)" > 0.2 }
			add = 20
		}	
		
		modifier = {
			trigger = { "enactment_chance_for_law(imposed_law.type)" > 0.3 }
			add = 30
		}

		modifier = {
			trigger = { "enactment_chance_for_law(imposed_law.type)" > 0.4 }
			add = 40
		}		
		
		modifier = {
			trigger = { "enactment_chance_for_law(imposed_law.type)" > 0.5 }
			add = 50
		}					
		
		modifier = {
			trigger = { 
				is_subject = yes 
				liberty_desire > 50
			}
			add = -25
		}
		
		modifier = {
			trigger = { 
				is_subject = yes 
				liberty_desire > 75
			}
			add = -25
		}		
	}
}

button_refuse_law_imposition = {
	name = "button_refuse_law_imposition"
	desc = "button_refuse_law_imposition_desc"
	
	visible = {
		scope:journal_entry = {
			NOT = { has_variable = has_been_abandoned }
		}
	}
	
	effect = {
		if = { 
			limit = { currently_enacting_law = imposed_law }
			cancel_enactment = yes
		}
		imposed_law = {
			cancel_imposition = yes
		}
		change_relations = {
			country = scope:foreign_imposition_country
			value = -50
		}
		if = {
			limit = { is_subject_of = scope:foreign_imposition_country }
			add_liberty_desire = 10
		}
		else_if = {
			limit = { 
				power_bloc ?= scope:foreign_imposition_country.power_bloc 
			}
			power_bloc = {
				add_cohesion_percent = -0.10
			}
		}
		every_political_lobby = {
			limit = { pro_foreign_imposition_country = yes }
			change_appeasement = { amount = -2 factor = appeasement_imposed_law_rejected }
		}
		trigger_event = { id = law_imposition_events.2 popup = yes }
		scope:foreign_imposition_country = {
			trigger_event = { id = law_imposition_events.3 }
		}
		scope:journal_entry = {
			set_variable = has_been_abandoned
		}
		hidden_effect = {
			scope:journal_entry = {
				if = {
					limit = {
						has_modifier = foreign_legislative_interference_enactment
					}
					remove_modifier = foreign_legislative_interference_enactment
					add_modifier = foreign_legislative_interference
				}
			}
		}
	}  

	ai_chance = {
		base = -25
		modifier = {
			trigger = {
				NOT = { currently_enacting_law = imposed_law }
			}
			add = 15
		}
		modifier = {
			trigger = {
				scope:journal_entry = {
					journal_entry_age > 500 # days
				}
			}
			add = 10
		}		
		modifier = {
			trigger = {
				scope:journal_entry = {
					journal_entry_age > 1000 # days
				}
			}
			add = 10
		}
		modifier = {
			trigger = {
				scope:journal_entry = {
					journal_entry_age > 1500 # days
				}
			}
			add = 10
		}
		modifier = {
			trigger = {
				scope:journal_entry = {
					journal_entry_age > 2000 # days
				}
			}
			add = 10
		}
	}
}
﻿greater_khorasan_button = {
	name = "greater_khorasan_button"
	desc = "greater_khorasan_button_desc"

	visible = {
		NOT = {
			has_variable = greater_khorasan_var
		}
	}

	possible = {
		country_or_subject_owns_entire_state_region = STATE_HERAT
	}

	effect = {
		trigger_event = { id = persia_events.2 popup = yes }
		set_variable = greater_khorasan_var
		show_as_tooltip = {
			if = {
				limit = {
					s:STATE_KANDAHAR = {
						any_scope_state = {
							NOT = {
								has_claim_by = root
							}
						}
					}
					NOT = {
						country_or_subject_owns_entire_state_region = STATE_KANDAHAR
					}
				}
				s:STATE_KANDAHAR = {
					add_claim = root
				}
			}
			if = {
				limit = {
					s:STATE_KABUL = {
						any_scope_state = {
							NOT = {
								has_claim_by = root
							}
						}
					}
					NOT = {
						country_or_subject_owns_entire_state_region = STATE_KABUL
					}
				}
				s:STATE_KABUL = {
					add_claim = root
				}
			}
			if = {
				limit = {
					s:STATE_BALKH = {
						any_scope_state = {
							NOT = {
								has_claim_by = root
							}
						}
					}
					NOT = {
						country_or_subject_owns_entire_state_region = STATE_BALKH
					}
				}
				s:STATE_BALKH = {
					add_claim = root
				}
			}
			if = {
				limit = {
					s:STATE_CENTRAL_HIGHLANDS = {
						any_scope_state = {
							NOT = {
								has_claim_by = root
							}
						}
					}
					NOT = {
						country_or_subject_owns_entire_state_region = STATE_CENTRAL_HIGHLANDS
					}
				}
				s:STATE_CENTRAL_HIGHLANDS = {
					add_claim = root
				}
			}
			if = {
				limit = {
					s:STATE_NORTHERN_BALUCHISTAN = {
						any_scope_state = {
							NOT = {
								has_claim_by = root
							}
						}
					}
					NOT = {
						country_or_subject_owns_entire_state_region = STATE_NORTHERN_BALUCHISTAN
					}
				}
				s:STATE_NORTHERN_BALUCHISTAN = {
					add_claim = root
				}
			}
			if = {
				limit = {
					s:STATE_KHIVA = {
						any_scope_state = {
							NOT = {
								has_claim_by = root
							}
						}
					}
					NOT = {
						country_or_subject_owns_entire_state_region = STATE_KHIVA
					}
				}
				s:STATE_KHIVA = {
					add_claim = root
				}
			}
			if = {
				limit = {
					s:STATE_TAJIKISTAN = {
						any_scope_state = {
							NOT = {
								has_claim_by = root
							}
						}
					}
					NOT = {
						country_or_subject_owns_entire_state_region = STATE_TAJIKISTAN
					}
				}
				s:STATE_TAJIKISTAN = {
					add_claim = root
				}
			}
			if = {
				limit = {
					s:STATE_UZBEKIA = {
						any_scope_state = {
							NOT = {
								has_claim_by = root
							}
						}
					}
					NOT = {
						country_or_subject_owns_entire_state_region = STATE_UZBEKIA
					}
				}
				s:STATE_UZBEKIA = {
					add_claim = root
				}
			}
			if = {
				limit = {
					s:STATE_TURKMENIA = {
						NOT = {
							any_scope_state = {
								owner = {
									is_country_type = decentralized
								}
							}
							any_scope_state = {
								has_claim_by = root
							}
						}
					}
					NOT = {
						country_or_subject_owns_entire_state_region = STATE_TURKMENIA
					}
				}
				s:STATE_TURKMENIA = {
					add_claim = root
				}
			}
			if = {
				limit = {
					s:STATE_MERZ = {
						NOT = {
							any_scope_state = {
								owner = {
									is_country_type = decentralized
								}
							}
							any_scope_state = {
								has_claim_by = root
							}
						}
					}
					NOT = {
						country_or_subject_owns_entire_state_region = STATE_MERZ
					}
				}
				s:STATE_MERZ = {
					add_claim = root
				}
			}
			add_modifier = {
				name = modifier_herat_inspiration
				months = long_modifier_time
			}
			custom_tooltip = greater_khorasan_button_tt
			if = {
				limit = {
					c:GBR ?= {
						has_interest_marker_in_region = sr:region_persia
						relations:root <= relations_threshold:neutral
						NOR = {
							is_diplomatic_play_ally_of = root
							root = {
								is_subject_of = prev
							}
							has_truce_with = root
						}
					}
				}
				c:GBR ?= {
					trigger_event = { id = persia_events.6 popup = yes }
				}
			}
		}
	}

	ai_chance = {
		base = 20
		modifier = {
			trigger = {
				OR = {
					is_at_war = yes
					in_default = yes
				}
			}
			add = -100
		}
	}
}

persian_baluchistan_button = {
	name = "persian_baluchistan_button"
	desc = "persian_baluchistan_button_desc"

	visible = {
		NOT = {
			has_variable = persian_baluchistan_var
		}
		any_neighbouring_state = {
			OR = {
				state_region = s:STATE_MERZ
				state_region = s:STATE_TURKMENIA
			}
			owner = {
				is_country_type = decentralized
			}
		}
	}

	possible = {
		OR = {
			any_scope_state = {
				OR = {
					state_region = s:STATE_KHORASAN
					state_region = s:STATE_MAZANDARAN
					state_region = s:STATE_HERAT
				}
				any_scope_building = {
					is_building_type = building_barracks
					level >= 10
				}
			}
			army_size >= 50
		}
		has_technology_researched = colonization
	}

	effect = {
		trigger_event = { id = persia_events.3 popup = yes }
		set_variable = persian_baluchistan_var
		show_as_tooltip = {
			if = {
				limit = {
					NOT = {
						has_law = law_type:law_frontier_colonization
					}
				}
				activate_law = law_type:law_frontier_colonization
				add_modifier = {
					name = modifier_turkmen_subjugation
					months = normal_modifier_time
				}
			}
			else = {
				add_modifier = {
					name = modifier_turkmen_subjugation
					months = normal_modifier_time
					multiplier = 2
				}
			}
			add_modifier = {
				name = modifier_turkmen_logistics
				months = normal_modifier_time
				multiplier = money_amount_multiplier_very_large
			}
			add_radicals = {
				culture = cu:turkmen
				value = medium_radicals
			}
			add_loyalists = {
				culture = cu:persian
				value = small_radicals
			}
		}
	}

	ai_chance = {
		base = 20
		modifier = {
			trigger = {
				OR = {
					is_at_war = yes
					in_default = yes
				}
			}
			add = -100
		}
	}
}

persia_british_aid_button = {
	name = "persia_british_aid_button"
	desc = "persia_british_aid_button_desc"

	selected = {
		has_variable = PER_appealed_to_GBR
	}

	visible = {
		exists = c:GBR
	}

	possible = {
		NOT = {
			custom_tooltip = {
				text = PER_GBR_support_request_rejected_tt
				has_variable = PER_GBR_support_request_rejected
			}
		}
		c:GBR ?= {
			has_interest_marker_in_region = region_persia
			relations:root >= relations_threshold:amicable
		}
		NOT = {
			custom_tooltip = {
				text = persia_british_aid_button_cooldown_tt
				has_variable = persia_british_aid_button_cooldown_var
			}			
		}
	}

	effect = {
		set_variable = { 
			name = persia_british_aid_button_cooldown_var years = 10 
		}
		set_variable = PER_appealed_to_GBR
		save_scope_as = persian_nation_scope
		c:GBR = {
			save_scope_as = relevant_country
			trigger_event = { id = persia_events.4 popup = yes }
		}
		custom_tooltip = if_they_accept_tt
		show_as_tooltip = {
			if = {
				limit = {
					NOT = {
						has_modifier = modifier_south_persia_rifles
					}
				}
				add_modifier = {
					name = modifier_south_persia_rifles
				}
				add_modifier = {
					name = modifier_british_persian_aid
					months = normal_modifier_time
				}
			}
			if = {
				limit = {
					has_modifier = modifier_south_persia_rifles
				}
				add_modifier = {
					name = modifier_british_persian_aid
					months = normal_modifier_time
				}
			}
			scope:relevant_country.power_bloc = {
				add_leverage = { target = scope:persian_nation_scope value = 25 }
			}
		}
	}

	ai_chance = {
		base = 15
	}
}

persia_russian_aid_button = {
	name = "persia_russian_aid_button"
	desc = "persia_russian_aid_button_desc"

	selected = {
		has_variable = PER_appealed_to_RUS
	}

	visible = {
		exists = c:RUS
	}

	possible = {
		NOT = {
			custom_tooltip = {
				text = PER_RUS_support_request_rejected_tt
				has_variable = PER_RUS_support_request_rejected
			}
		}
		c:RUS ?= {
			has_interest_marker_in_region = region_persia
			relations:root >= relations_threshold:amicable
		}
		NOT = {
			custom_tooltip = {
				text = persia_russian_aid_button_cooldown_tt
				has_variable = persia_russian_aid_button_cooldown_var
			}			
		}
	}

	effect = {
		set_variable = { 
			name = persia_russian_aid_button_cooldown_var years = 10 
		}
		set_variable = PER_appealed_to_RUS
		save_scope_as = persian_nation_scope
		c:RUS = {
			save_scope_as = relevant_country
			trigger_event = { id = persia_events.4 popup = yes }
		}
		custom_tooltip = if_they_accept_tt
		show_as_tooltip = {
			if = {
				limit = {
					NOT = {
						has_modifier = modifier_persian_cossack_brigade
					}
				}
				add_modifier = {
					name = modifier_persian_cossack_brigade
				}
				add_modifier = {
					name = modifier_russian_persian_aid
					months = normal_modifier_time
				}
			}
			if = {
				limit = {
					has_modifier = modifier_persian_cossack_brigade
				}
				add_modifier = {
					name = modifier_russian_persian_aid
					months = normal_modifier_time
				}
			}
			scope:relevant_country.power_bloc = {
				add_leverage = { target = scope:persian_nation_scope value = 25 }
			}
		}
	}
}

persia_resettle_merv_button = {
	name = "persia_resettle_merv_button"
	desc = "persia_resettle_merv_button_desc"

	visible = {
		any_scope_state = {
			state_region = s:STATE_MERZ
		}
		NOT = {
			has_variable = restoration_of_merv_var
		}
	}

	possible = {
		owns_entire_state_region = STATE_MERZ
		any_scope_state = {
			state_region = s:STATE_MERZ
			any_scope_building = {
				is_building_type = building_urban_center
				level >= 2
			}
		}
	}

	effect = {
		set_variable = restoration_of_merv_var
		trigger_event = { id = persia_events.7 popup = yes }
		custom_tooltip = choose_one_of_tt
		show_as_tooltip = {
			add_modifier = {
				name = modifier_merv_queen_of_the_world
			}
			s:STATE_MERZ.region_state:PER = {
				add_modifier = {
					name = modifier_soltanbent_dam
				}
			}
		}
	}

	ai_chance = {
		base = 15
	}
}

﻿je_the_eastern_border_treaty_of_beijing = {
	name = "je_the_eastern_border_treaty_of_beijing"
	desc = "je_the_eastern_border_treaty_of_beijing_desc"

	visible = { 
		exists = c:RUS
		c:RUS = ROOT
		is_subject = no
		has_technology_researched = nationalism
		NOR = { 
			owns_entire_state_region = STATE_OUTER_MANCHURIA 
			has_global_variable = rus_bought_outer_manchuria
		}
		AND = {
			any_scope_state = {
				state_region = s:STATE_TRANS_BAIKAL
			}
			any_scope_state = {
				state_region = s:STATE_OKHOTSK
			}
		}
		s:STATE_OUTER_MANCHURIA = {
			any_scope_state = {
				is_split_state = no
				is_capital = no
				owner = {
					is_player = no
					is_country_type = unrecognized
			OR = {
				country_has_primary_culture = cu:manchu
				country_has_primary_culture = cu:han
			}
			}
		}
	}
	}

	ai_chance = {
		base = 10
	}

	possible = {
		c:RUS = {
			country_rank >= rank_value:great_power
		}
		any_country = {
			OR = {
				country_has_primary_culture = cu:manchu
				country_has_primary_culture = cu:han
			}
			OR = {
				trigger_if = {
					limit = {
						has_journal_entry = je_warlord_china
					}
					custom_tooltip = {
						text = china_explosion_point_2_tt
						var:china_warlord_explosion <= 3
					}
				}
				country_rank < rank_value:unrecognized_major_power
			}
			OR = {
				is_subject = no
				is_subject_of = ROOT
			}
			trigger_if = {
				limit = {
					country_rank >= rank_value:unrecognized_major_power
				}
				OR = {
					custom_tooltip = {
						text = war_with_china_not_russia_tt
						any_enemy_in_war = {
							NOT = {
								c:RUS ?= this
							}
						}
					}
					custom_tooltip = {
						text = owes_russia_obligation_tt
						c:RUS = {
							is_owed_obligation_by = PREV
						}
					}
				}	
			}
		}
		}

	effect = {
		random_country = {
			limit = {
				OR = {
					country_has_primary_culture = cu:manchu
					country_has_primary_culture = cu:han
				}
				any_scope_state = {
					state_region = s:STATE_OUTER_MANCHURIA
					is_split_state = no
					is_capital = no
				}
				is_country_type = unrecognized
				is_player = no
			}
			save_scope_as = donor_scope
		}
		if = {
			limit = {
				scope:donor_scope = {
					owes_obligation_to = ROOT
				}
			}
			custom_tooltip = obligation_for_outer_manchuria_tt
		}
		else_if = {
			limit = {
				scope:donor_scope = {
					is_subject_of = ROOT
				}
			}
			custom_tooltip = transfer_of_outer_manchuria_tt
		}
		else = {
			c:RUS = {
				create_incident = {
					country = scope:donor_scope
					value = 10
				}
			}	
			custom_tooltip = transfer_of_outer_manchuria_tt	
		}
		set_global_variable = rus_bought_outer_manchuria
		trigger_event = { id = russo_chinese.1 popup = yes }
	}
}

je_the_eastern_border_russia_chuguchak_protocol = {
	name = "je_the_eastern_border_russia_chuguchak_protocol"
	desc = "je_the_eastern_border_russia_chuguchak_protocol_desc"

	visible = { 
		exists = c:RUS 
		c:RUS = ROOT
		is_subject = no
		has_technology_researched = nationalism
		NOT = { 
			owns_entire_state_region = STATE_ALTAI
			owns_entire_state_region = STATE_JETISY 
			owns_entire_state_region = STATE_KIRGHIZIA  
		}
		NOT = {	
			has_global_variable = rus_chuguchak_protocol
		}
		OR = {
			AND = {
				owns_entire_state_region = STATE_SEMIRECHE
				owns_entire_state_region = STATE_AKMOLINSK
			}
			any_subject_or_below = {
				owns_entire_state_region = STATE_SEMIRECHE
				owns_entire_state_region = STATE_AKMOLINSK
			}
		}	
			OR = {
			s:STATE_ALTAI = {
				any_scope_state = {
					is_capital = no
					owner = {
						is_player = no
						is_country_type = unrecognized
						OR = {
				country_has_primary_culture = cu:manchu
				country_has_primary_culture = cu:han
			}
				}
				}
			}
			s:STATE_JETISY = {
				any_scope_state = {
					is_capital = no
					owner = {
						is_player = no
						is_country_type = unrecognized
						OR = {
							country_has_primary_culture = cu:manchu
							country_has_primary_culture = cu:han
				}
					}
				}
			}
			s:STATE_KIRGHIZIA = {
				any_scope_state = {
					is_capital = no
					owner = {
						is_player = no
						is_country_type = unrecognized
						OR = {
							country_has_primary_culture = cu:manchu
							country_has_primary_culture = cu:han
				}
			}
		}
	}
		}
	}

	ai_chance = {
		base = 10
	}

	possible = {
		any_country = {
			OR = {
				country_has_primary_culture = cu:manchu
				country_has_primary_culture = cu:han
			}
			OR = {
				trigger_if = {
					limit = {
						has_journal_entry = je_warlord_china
					}
					custom_tooltip = {
						text = china_explosion_point_2_tt
						var:china_warlord_explosion <= 3
					}
				}
				country_rank < rank_value:unrecognized_major_power
			}
			OR = {
				is_subject = no
				is_subject_of = ROOT
			}
			trigger_if = {
				limit = {
					country_rank >= rank_value:unrecognized_major_power
				}
				OR = {
					custom_tooltip = {
						text = war_with_china_not_russia_tt
						any_enemy_in_war = {
							NOT = {
								c:RUS ?= this
							}
						}
					}
					custom_tooltip = {
						text = owes_russia_obligation_tt
						c:RUS = {
							is_owed_obligation_by = PREV
						}
					}
				}	
			}
		}
		custom_tooltip = {
			text = russia_chuguchak_protocol_req_tt
			c:RUS = {
				OR = {
					AND = {
						owns_entire_state_region = STATE_SEMIRECHE
						owns_entire_state_region = STATE_AKMOLINSK
					}
					any_subject_or_below = {
						owns_entire_state_region = STATE_SEMIRECHE
						owns_entire_state_region = STATE_AKMOLINSK
					}
				}
			}	
		}
	}

	effect = {
		random_country = {
			limit = {
				OR = {
					country_has_primary_culture = cu:manchu
					country_has_primary_culture = cu:han
				}
				OR = {
					any_scope_state = {
						state_region = s:STATE_ALTAI
						is_capital = no
					}
					any_scope_state = {
						state_region = s:STATE_JETISY
						is_capital = no
					}
					any_scope_state = {
						state_region = s:STATE_KIRGHIZIA
						is_capital = no
					}
				}
				is_country_type = unrecognized
				is_player = no
			}
			save_scope_as = donor_scope
		}
		if = {
			limit = {
				scope:donor_scope = {
					owes_obligation_to = ROOT
				}
			}
			custom_tooltip = obligation_for_central_asia_tt
		}
		else_if = {
			limit = {
				scope:donor_scope = {
					is_subject_of = ROOT
				}
			}
			custom_tooltip = transfer_of_central_asia_tt
		}
		else = {
			c:RUS = {
				create_incident = {
					country = scope:donor_scope
					value = 15
				}
			}		
			custom_tooltip = transfer_of_central_asia_tt
		}
		set_global_variable = rus_chuguchak_protocol
		trigger_event = { id = russo_chinese.2 popup = yes }
	}
}

je_the_eastern_border_treaty_of_aigun = {
	name = "je_the_eastern_border_treaty_of_aigun"
	desc = "je_the_eastern_border_treaty_of_aigun_desc"

	visible = {
		has_technology_researched = nationalism
		NOR = { 
			owns_entire_state_region = STATE_AMUR 
			has_global_variable = rus_bought_amur
		}
		AND = {
			any_scope_state = {
				state_region = s:STATE_TRANS_BAIKAL
			}
			any_scope_state = {
				state_region = s:STATE_OKHOTSK
			}
		}
		s:STATE_AMUR = {
			any_scope_state = {
				is_split_state = no
				is_capital = no
				owner = {
					is_player = no
					is_country_type = unrecognized
			OR = {
				country_has_primary_culture = cu:manchu
				country_has_primary_culture = cu:han
			}
			}
		}
	}
	}

	ai_chance = {
		base = 10
	}

	possible = {
		sr:region_east_siberia = {
			save_temporary_scope_as = east_siberia_region
		}
		any_country = {
			OR = {
				is_subject = no
				is_subject_of = ROOT
			}
			OR = {
				custom_tooltip = {
					text = war_with_china_not_russia_tt
					any_enemy_in_war = {
						NOT = {
							c:RUS ?= this
						}
					}
				}
				custom_tooltip = {
					text = owes_russia_obligation_tt
					c:RUS = {
						is_owed_obligation_by = PREV
					}
				}
				trigger_if = {
					limit = {
						has_journal_entry = je_warlord_china
					}
					custom_tooltip = {
						text = china_explosion_point_2_tt
						var:china_warlord_explosion <= 3
					}
				}
				country_rank < rank_value:unrecognized_major_power
			}	
		}
		c:RUS = {
			country_rank >= rank_value:great_power
		}
		custom_tooltip = {
			text = east_siberia_formation_tt
			any_military_formation = {
				is_army = yes
				current_hq = p:x68226E.land_hq
				any_combat_unit = {
					count >= 20
				}
			}
		}
	}

	effect = {
		random_country = {
			limit = {
				OR = {
					country_has_primary_culture = cu:manchu
					country_has_primary_culture = cu:han
				}
				any_scope_state = {
					state_region = s:STATE_AMUR
					is_split_state = no
					is_capital = no
				}
				is_country_type = unrecognized
				is_player = no
			}
			save_scope_as = donor_scope
		}
		if = {
			limit = {
				scope:donor_scope = {
					owes_obligation_to = ROOT
				}
			}
			custom_tooltip = obligation_for_amur_tt
		}
		else_if = {
			limit = {
				scope:donor_scope = {
					is_subject_of = ROOT
				}
			}
			custom_tooltip = transfer_of_amur_tt
		}
		else = {
			c:RUS = {
				create_incident = {
					country = scope:donor_scope
					value = 10
				}
			}		
			custom_tooltip = transfer_of_amur_tt
		}
		set_global_variable = rus_bought_amur
		trigger_event = { id = russo_chinese.4 popup = yes }
	}
}


imamate_dispatch_muhammad_amin = {
	name = "imamate_dispatch_muhammad_amin"
	desc = "imamate_dispatch_muhammad_amin_desc"
	visible = {
		exists = c:CIR
		is_subject = no
		c:CIR ?= {
			has_journal_entry = je_caucasian_war_circassia
		}
		NOT = {
			has_variable = sent_muhammad_amin_var
		}
	}

	possible = {
		is_subject = no
		c:CIR = {
			has_journal_entry = je_caucasian_war_circassia
		}
		custom_tooltip = {
			text = muhammad_amin_possible
			c:CIR = {
				ruler = {
					NOT = {
						OR = {
							has_variable = ismail_var
							has_variable = hawduqo_var
						}
					}
				}
			}
		}
	}

	effect = {
		custom_tooltip = {
			text = circassia_muhammad_amin_tt
		}
		c:CIR = {
			trigger_event = { id = caucasuswar.9 }
		}
		set_variable = sent_muhammad_amin_var
	}  

	ai_chance = {
		base = 15
		modifier = {
			trigger = {
				c:CIR.relations:root < relations_threshold:neutral
			}
			add = -30
		}
	}
}

russia_escalate_caucasian_war = {
	name = "russia_escalate_caucasian_war"
	desc = "russia_escalate_caucasian_war_desc"
	visible = {
		is_subject = no
		NOT = { 
			owns_entire_state_region = STATE_KUBAN 
			owns_entire_state_region = STATE_NORTH_CAUCASUS
			owns_entire_state_region = STATE_DAGESTAN 
		}
		AND = {
			any_scope_state = {
				state_region = s:STATE_KUBAN
			}
			any_scope_state = {
				state_region = s:STATE_NORTH_CAUCASUS
			}
			any_scope_state = {
				state_region = s:STATE_DAGESTAN
			}
		}
		OR = {
			AND = {
				exists = c:CHC
				has_truce_with = c:CHC
			}
			AND = {
				exists = c:CIR	
				has_truce_with = c:CIR
			}
		}
        NOT = {
        	has_variable = escalated_caucasian_war
        }
	}

	possible = {
		c:RUS = {
			country_rank >= rank_value:great_power
		}
			OR = {
			s:STATE_KUBAN = {
				any_scope_state = {
					OR = {
						AND = {
							exists = c:CIR
							owner = c:CIR
			}
						AND = {
							exists = c:CHC
							owner = c:CHC
						}
					}
				}
			}
			s:STATE_DAGESTAN = {
				any_scope_state = {
			OR = {
						AND = {
							exists = c:CIR
				owner = c:CIR
						}
						AND = {
							exists = c:CHC
				owner = c:CHC
			}
		}
				}
			}
			s:STATE_NORTH_CAUCASUS = {
				any_scope_state = {
					OR = {
						AND = {
							exists = c:CIR
							owner = c:CIR
						}
						AND = {
							exists = c:CHC
							owner = c:CHC
						}
					}
				}
			}
		}
		has_technology_researched = rifling
		has_technology_researched = logistics
	}

	effect = {
		set_variable = escalated_caucasian_war
		end_truce = c:CHC
		end_truce = c:CIR
	}  

	ai_chance = {
		base = 15
	}
}

je_conquest_of_central_asia_turkmen_button = {
	name = "je_conquest_of_central_asia_turkmen_button"
	desc = "je_conquest_of_central_asia_turkmen_button_desc"

	visible = {
		NOT = {
			has_variable = russian_turkmenia_var
		}
		any_neighbouring_state = {
			OR = {
				state_region = s:STATE_MERZ
				state_region = s:STATE_TURKMENIA
				state_region = s:STATE_URALSK
			}
			owner = {
				is_country_type = decentralized
			}
		}
	}

	possible = {
		any_scope_state = {
			region = sr:region_central_asia
			any_scope_building = {
				is_building_type = building_barracks
				level >= 10
			}
		}
		has_technology_researched = colonization
	}

	effect = {
		trigger_event = { id = russian_central_asia.3 popup = yes }
		set_variable = russian_turkmenia_var
		show_as_tooltip = {
			if = {
				limit = {
					NOT = {
						has_law = law_type:law_frontier_colonization
					}
				}
				activate_law = law_type:law_frontier_colonization
				add_modifier = {
					name = modifier_turkmen_subjugation
					months = normal_modifier_time
				}
			}
			else = {
				add_modifier = {
					name = modifier_turkmen_subjugation
					months = normal_modifier_time
					multiplier = 2
				}
			}
			add_modifier = {
				name = modifier_turkmen_logistics
				months = normal_modifier_time
				multiplier = money_amount_multiplier_very_large
			}
			add_radicals = {
				culture = cu:turkmen
				value = medium_radicals
			}
			every_scope_state = {
				limit = { region = sr:region_central_asia }
				add_loyalists_in_state = {
					culture = cu:russian
					value = small_radicals
				}
			}
		}
	}

	ai_chance = {
		base = 20
		modifier = {
			trigger = {
				OR = {
					is_at_war = yes
					in_default = yes
				}
			}
			add = -100
		}
	}
}

russia_halt_circassian_expulsions = {
	name = "russia_halt_circassian_expulsions"
	desc = "russia_halt_circassian_expulsions_desc"

	visible = {
		always = yes
	}

	possible = {
		any_interest_group = {
			is_in_government = yes
			law_stance = {
				law = law_type:law_national_supremacy
				value < neutral
			}
		}
		any_interest_group = {
			is_in_government = yes
			law_stance = {
				law = law_type:law_state_religion
				value < neutral
			}
		}
		custom_tooltip = {
			text = halted_expulsions_tt
			NOT = {
				has_variable = halted_circassian_deportations
			}
		}
	}

	effect = {
		custom_tooltip = {
			text = halt_circassian_deportations_tt
			set_variable = halted_circassian_deportations
		}
		every_interest_group = {
			limit = {
				OR = {
					is_interest_group_type = ig_armed_forces
					leader = {
						has_ideology = ideology:ideology_jingoist_leader
					}
					law_stance = {
						law = law_type:law_national_supremacy
						value > neutral
					}
				}
			}
			add_modifier = {
				name = modifier_halted_circassian_expulsions
				months = normal_modifier_time
			}
		}
	}

	ai_chance = {
		base = 20
		modifier = {
			trigger = {
				OR = {
					is_at_war = yes
					in_default = yes
				}
			}
			add = -100
		}
	}
}

﻿acre_dispute_button = {
	name = "acre_dispute_button"
	desc = "acre_dispute_button_desc"

	visible = {
		has_dlc_feature = rp1_content
		s:STATE_AMAZONAS = {
			any_scope_state = {
				owner = ROOT
			}
		}
		NOR = {
			country_or_subject_owns_entire_state_region = STATE_ACRE
			has_global_variable = acre_dispute_button_global_var
		}
	}

	possible = {
		country_or_subject_owns_entire_state_region = STATE_AMAZONAS
		any_country = {
			owns_entire_state_region = STATE_ACRE
		}
	}

	effect = {
		trigger_event = { id = acre_dispute.1 popup = yes }
		show_as_tooltip = {
			s:STATE_AMAZONAS = {
				add_claim = ROOT
			}
			random_country = {
				limit = {
					owns_entire_state_region = STATE_ACRE
				}
				change_relations = {
					country = ROOT
					value = -50
				}
			}
			add_journal_entry = { type = je_acre_dispute }
		}
		set_global_variable = acre_dispute_button_global_var
	}

	ai_chance = {
		base = 20
		modifier = {
			trigger = {
				OR = {
					is_at_war = yes
					in_default = yes
				}
			}
			add = -100
		}
	}
}
﻿je_brazilian_nation_building_integrate_nordestino = {
	name = {
		first_valid = {
			triggered_desc = {
				desc = "je_brazilian_nation_building_integrate_nordestino"
				trigger = {
					NOT = { has_variable = nordestinos_integrated }
				}
			}
			triggered_desc = {
				desc = "je_brazilian_nation_building_integrate_nordestino_past_tense"
				trigger = {
					has_variable = nordestinos_integrated
				}
			}
		}
	}
	desc = "je_brazilian_nation_building_integrate_nordestino_desc"

	visible = { always = yes }

	possible = {
		OR = {
			has_law = law_type:law_slavery_banned
			custom_tooltip = {
				text = je_brazilian_nation_building_brazilian_national_hero_owned
				has_variable = brazilian_nordestino_hero_var
			}
		}
		NOR = { 
			exists = c:EQT 
			c:EQT ?= {
				is_country_alive = yes
			}
		}
		any_scope_state = {
			state_region = {
				is_homeland = cu:nordestino
			}
		}
		hidden_trigger = {
			NOT = {
				has_variable = nordestinos_integrated
			}
		}
	}

	effect = {
		trigger_event = { id = culture_brazil.6 }
		hidden_effect = {
			if = {
				limit = {
					has_variable = brazilian_nordestino_hero_var
				}
				remove_variable = brazilian_nordestino_hero_var
			}
			set_variable = {
				name = nordestinos_integrated
			}			
		}
		custom_tooltip = {
			text = je_brazilian_nation_building_integrate_nordestino_removal_tt
			every_scope_state = {
				limit = {
					state_region = {
						is_homeland = cu:nordestino
					}
				}
				state_region = {
					remove_homeland = cu:nordestino
				}
			}
		}
	}

	ai_chance = {
		base = 1
	}
}

je_brazilian_nation_building_integrate_sulista = {
	name = {
		first_valid = {
			triggered_desc = {
				desc = "je_brazilian_nation_building_integrate_sulista"
				trigger = {
					NOT = { has_variable = sulistas_integrated }
				}
			}
			triggered_desc = {
				desc = "je_brazilian_nation_building_integrate_sulista_past_tense"
				trigger = {
					has_variable = sulistas_integrated
				}
			}
		}
	}
	desc = "je_brazilian_nation_building_integrate_sulista_desc"

	visible = { always = yes }

	possible = {
		NOR = {
			exists = c:PNI
			exists = c:CTR
			c:PNI ?= {
				is_country_alive = yes
			}
			c:CTR ?= {
				is_country_alive = yes
			}
		}

		any_scope_state = {
			state_region = {
				is_homeland = cu:sulista
			}
		}
		OR = {
			custom_tooltip = {
				text = je_brazilian_nation_building_brazilian_national_hero_owned
				has_variable = brazilian_sulista_hero_var
			}
			custom_tooltip = {
				text = je_brazilian_nation_building_ragamuffin_war_south
				has_variable = ragamuffin_war_completed
				NOT = {
					any_scope_state = {
						state_region = {
							is_homeland = cu:sulista
						}
						radical_fraction = {
							value >= 0.10
							culture = cu:sulista
						}
					}
				}
			}
		}

		hidden_trigger = {
			NOT = {
				has_variable = sulistas_integrated
			}
		}
	}

	effect = {
		trigger_event = { id = culture_brazil.4 }
		hidden_effect = {
			if = {
				limit = {
					has_variable = brazilian_sulista_hero_var
				}
				remove_variable = brazilian_sulista_hero_var
			}
			set_variable = {
				name = sulistas_integrated
			}
		}
		custom_tooltip = {
			text = je_brazilian_nation_building_integrate_sulista_removal_tt
			every_scope_state = {
				limit = {
					state_region = {
						is_homeland = cu:sulista
					}
				}
				state_region = {
					remove_homeland = cu:sulista
				}
			}
		}
	}

	ai_chance = {
		base = 1
	}
}

je_brazilian_nation_building_integrate_paulista = {
	name = {
		first_valid = {
			triggered_desc = {
				desc = "je_brazilian_nation_building_integrate_paulista"
				trigger = {
					NOT = { has_variable = paulistas_integrated }
				}
			}
			triggered_desc = {
				desc = "je_brazilian_nation_building_integrate_paulista_past_tense"
				trigger = {
					has_variable = paulistas_integrated
				}
			}
		}
	}
	desc = "je_brazilian_nation_building_integrate_paulista_desc"

	visible = { always = yes }

	possible = {
		NOT = { 
			exists = c:PAU 
			c:PAU ?= {
				is_country_alive = yes
			}
		}
		any_scope_state = {
			state_region = {
				is_homeland = cu:paulista
			}
		}
		OR = {
			custom_tooltip = {
				text = je_brazilian_nation_building_brazilian_national_hero_owned
				has_variable = brazilian_paulista_hero_var
			}
			custom_tooltip = {
				text = je_brazilian_nation_building_integrate_paulista_je_tt
				has_variable = agricultural_dev_done
			}
		}
		hidden_trigger = {
			NOT = {
				has_variable = paulistas_integrated
			}
		}
	}

	effect = {
		trigger_event = { id = culture_brazil.3 }
		hidden_effect = {
			if = {
				limit = {
					has_variable = brazilian_paulista_hero_var
				}
				remove_variable = brazilian_paulista_hero_var
			}
			set_variable = {
				name = paulistas_integrated
			}
		}
		custom_tooltip = {
			text = je_brazilian_nation_building_integrate_paulista_removal_tt
			every_scope_state = {
				limit = {
					state_region = {
						is_homeland = cu:paulista
					}
				}
				state_region = {
					remove_homeland = cu:paulista
				}
			}
		}
	}

	ai_chance = {
		base = 1
	}
}

je_brazilian_nation_building_integrate_amazonic = {
	name = {
		first_valid = {
			triggered_desc = {
				desc = "je_brazilian_nation_building_integrate_amazonic"
				trigger = {
					NOT = { has_variable = amazonics_integrated }
				}
			}
			triggered_desc = {
				desc = "je_brazilian_nation_building_integrate_amazonic_past_tense"
				trigger = {
					has_variable = amazonics_integrated
				}
			}
		}
	}
	desc = "je_brazilian_nation_building_integrate_amazonic_desc"

	visible = { always = yes }

	possible = {
		NOR = { 
			exists = c:PRA 
			c:PRA ?= {
				is_country_alive = yes
			}
		}
		any_scope_state = {
			state_region = {
				is_homeland = cu:amazonic
			}
		}
		OR = {
			custom_tooltip = {
				text = je_brazilian_nation_building_brazilian_national_hero_owned
				has_variable = brazilian_amazonic_hero_var
			}
			custom_tooltip = {
				text = je_brazilian_nation_building_ragamuffin_war_done
				has_variable = ragamuffin_war_completed
				NOT = {
					any_scope_state = {
						state_region = {
							is_homeland = cu:amazonic
						}
						devastation > 0
					}
				}
			}
		}
		hidden_trigger = {
			NOT = {
				has_variable = amazonics_integrated
			}
		}
	}

	effect = {
		trigger_event = { id = culture_brazil.5 }
		hidden_effect = {
			if = {
				limit = {
					has_variable = brazilian_amazonic_hero_var
				}
				remove_variable = brazilian_amazonic_hero_var
			}
			set_variable = {
				name = amazonics_integrated
			}
		}
		custom_tooltip = {
			text = je_brazilian_nation_building_integrate_amazonic_removal_tt
			every_scope_state = {
				limit = {
					state_region = {
						is_homeland = cu:amazonic
					}
				}
				state_region = {
					remove_homeland = cu:amazonic
				}
			}
		}
	}
}

je_south_american_national_identity_integrate_a_state = {
	name = "je_south_american_national_identity_integrate_a_state"
	desc = "je_south_american_national_identity_integrate_a_state_desc"

	visible = { always = yes }

	possible = {
		exists = scope:old_national_culture
		any_scope_state = {
			is_incorporated = yes
			state_region = {
				is_homeland = scope:old_national_culture
			}
			any_neighbouring_state = {
				state_region = {
					is_homeland = scope:new_national_culture
				}
				OR = {
					is_capital = yes
					custom_tooltip = {
						text = new_culture_has_25_percent_tt
						culture_percent_state = {
							target = scope:new_national_culture
							value >= 0.25
						}
					}
				}
			}
			OR = {
				any_scope_building = {
					OR = {
						is_building_type = building_naval_base
						is_building_type = building_barracks
					}
					level >= 15
				}
				any_scope_building = {
					is_building_type = building_university
					level >= 5
				}
				any_scope_building = {
					is_building_type = building_government_administration
					level >= 5
				}
				any_scope_building = {
					is_building_type = building_urban_center
					level >= 5
				}
			}
		}
		custom_tooltip = {
			text = south_america_culture_convert_cooldown_tt
			NOT = {
				has_variable = south_america_culture_convert_cooldown_var
			}
		}
	}

	effect = {
		trigger_event = { id = culture_south_america.2 }
		set_variable = { name = south_america_culture_convert_cooldown_var years = 5 }
	}

	ai_chance = {
		base = 1
	}
}

﻿caudillo_decree_button = {
	name = "caudillo_decree_button"
	desc = "caudillo_decree_button_desc"

	visible = { always = yes }

	possible = {
		ig:ig_armed_forces = {
			is_in_government = yes
			is_powerful = yes
		}
		NOT = { has_modifier = caudillo_rule_by_decree_modifier }
	}

	effect = {
		custom_tooltip = {
			text = gain_caudillo_points
			change_variable = {
				name = caudillo_var
				add = 100
			}
		}
		add_modifier = {
			name = caudillo_rule_by_decree_modifier
			months = normal_modifier_time
		}
	}
}

﻿CHI_deport_missionaries_button = {
	name = "CHI_deport_missionaries_button"
	desc = "CHI_deport_missionaries_button_desc"

	visible = { always = yes }

	possible = {
		NOT = {
			any_neighbouring_state = {
				is_treaty_port = yes
				owner = {
					religion = {
						has_discrimination_trait = christian
					}
				}
			}
		}
		authority >= 200
	}

	selected = {
		has_variable = CHI_deported_missionaries
	}

	effect = {
		add_modifier = {
			name = modifier_chi_deporting_missionaries
			months = normal_modifier_time
		}
		every_country = {
			limit = {
				has_diplomatic_relevance = root
				religion = {
					has_discrimination_trait = christian
				}
				OR = {
					has_law = law_type:law_state_religion
					has_law = law_type:law_freedom_of_conscience
				}
			}
			change_relations = {
				country = root
				value = -25
			}
		}
		set_variable = CHI_deported_missionaries
	}
}

ban_opium_button = {
	name = "ban_opium"
	desc = "ban_opium_desc"

	visible = { 
		has_journal_entry = je_opium_obsession
		exists = market
		market.owner = root
		NOT = { is_banning_goods = g:opium }
	}

	possible = {
		has_journal_entry = je_opium_obsession
		NOT = { has_law = law_type:law_free_trade }
		custom_tooltip = {
			text = not_lost_opium_wars_tt
			NOT = { has_variable = lost_opium_wars }
		}
		exists = market	
	}

	effect = {
		add_banned_goods = g:opium
		add_modifier = {
			name = opium_ban_authority
		}
	}

	ai_chance = {
        base = 0
		modifier = {
			trigger = {
				OR = {
					has_strategy = ai_strategy_conservative_agenda
					has_strategy = ai_strategy_reactionary_agenda
					has_strategy = ai_strategy_maintain_mandate_of_heaven
				}
			}
			add = 10
		}		 
    }
}


unban_opium_button = {
	name = "remove_opium_ban"
	desc = "remove_opium_ban_desc"

	visible = { 
		has_journal_entry = je_opium_obsession
		is_banning_goods = g:opium
		exists = market
		market.owner = root
	}

	possible = {
		always = yes
	}

	effect = {
		remove_banned_goods = g:opium
		remove_modifier = opium_ban_authority
	}

	ai_chance = {
		base = 0
		  modifier = {
			  trigger = {
				  has_strategy = ai_strategy_progressive_agenda
			  }
			  add = 10
		  }		 
	 }	
}
﻿southamerica_migration_button = {
	name = southamerica_migration_button
	desc = southamerica_migration_button_desc

	visible = { always = yes }

	possible = {
		hidden_trigger = {
			has_variable = enable_sa_migration_button
		}
		# Note that this closely reflects triggers in the event. Do not change one without changing both
		custom_tooltip = {
			text = migration_button_cooldown_tt
			NOT = { has_variable = sa_migration_cooldown }
		}
		average_sol >= 10
		any_country = {
			country_rank <= rank_value:major_power
			custom_tooltip = {
				text = is_in_europe_tt
				country_is_in_europe = yes
			}
			custom_tooltip = {
				text = same_state_religion
				religion = root.religion
			}
			custom_tooltip = {
				text = average_sol_below_root_tt
				average_sol <= root.average_sol
			}
			any_primary_culture = {
				culture_can_have_mass_migration_to_country = ROOT
			}
			any_scope_state = {
				is_incorporated = yes
				custom_tooltip = {
					text = is_in_europe_tt
					state_is_in_europe = yes
				}
				count >= 3
			}
		}
		any_scope_state = {
			trigger_if = {
				limit = {
					owner = { has_journal_entry = je_south_america_migration }
				}
				custom_tooltip = {
					text = is_in_sa_tt
					state_is_in_south_america = yes
				}
			}
			trigger_else_if = {
				limit = {
					owner = { has_journal_entry = je_central_america_migration }
				}
				OR = {
					region = sr:region_mexico
					region = sr:region_central_america
				}
			}
			trigger_else_if = {
				limit = {
					owner = { has_journal_entry = je_american_west_migration }
				}
				OR = {
					region = sr:region_pacific_coast
					region = sr:region_great_plains
				}
			}
			state_is_eligible_as_mass_migration_target = yes
		}
		OR = {
			has_law = law_type:law_racial_segregation
			has_law = law_type:law_cultural_exclusion
			has_law = law_type:law_multicultural
		}
		NOR = {
			has_law = law_type:law_closed_borders
			has_law = law_type:law_isolationism
		}
	}

	effect = {
		set_variable = {
			name = sa_migration_cooldown
			months = normal_modifier_time
		}
		custom_tooltip = {
			text = mass_migration_button_tt
		}
		trigger_event = { id = sa_migration.1 popup = yes }
		show_as_tooltip = {
			add_modifier = {
				name = sa_migration_cost
				months = normal_modifier_time
			}
		}
	}

	ai_chance = {
		base = 1
	}
}

patagonia_button = {
	name = patagonia_button
	desc = patagonia_button_desc

	visible = { always = yes }

	possible = {
		has_technology_researched = civilizing_mission
		ig:ig_armed_forces = { 
			is_marginal = no
		}
		any_scope_state = {
			OR = {
				state_region = s:STATE_ARAUCANIA
				state_region = s:STATE_PATAGONIA
				state_region = s:STATE_RIO_NEGRO
			}
			is_under_colonization = yes
		}
		NOT = { has_modifier = patagonia_campaign }
	}

	effect = {
		add_modifier = {
			name = patagonia_campaign
			months = long_modifier_time
		}
	}

	ai_chance = {
		base = 10
	}
}
﻿je_unite_the_nations_proclaim_turtle_island_button = {
	name = "je_unite_the_nations_proclaim_turtle_island_button"
	desc = "je_unite_the_nations_proclaim_turtle_island_button_desc"

	visible = {
		NOT = {
			exists = c:TIS
		}
	}

	possible = {
		has_technology_researched = nationalism

		any_neighbouring_state = {
			state_is_in_north_america = yes
			owner = {
				is_country_type = decentralized
			}
		}
	}

	effect = {
		change_tag = TIS
	}
}

je_unite_the_nations_organize_the_tribes_button = {
	name = "je_unite_the_nations_organize_the_tribes_button"
	desc = "je_unite_the_nations_organize_the_tribes_button_desc"

	visible = {
		exists = c:TIS
		c:TIS = this
	}

	possible = {
		any_neighbouring_state = {
			state_is_in_north_america = yes
			owner = {
				is_country_type = decentralized
			}
		}
		bureaucracy > 150
	}

	effect = {
		ordered_country = {
			limit = {
				is_country_type = decentralized
				is_player = no
				is_subject = no
				any_primary_culture = {
					shares_heritage_trait_with_any_primary_culture = ROOT
				}
				any_scope_state = {
					state_is_in_north_america = yes
					any_neighbouring_state = {
						owner = ROOT
					}
				}
			}
			order_by = gdp

			save_temporary_scope_as = decentralized_neighboring_territory # NEIGHBORING SHOULD NOT HAVE A U IN IT
		}

		if = {
			limit = { NOT = { exists = scope:decentralized_neighboring_territory } }
			custom_tooltip = { text = je_unite_the_nations_organize_the_tribes_tt }
		}

		if = {
			limit = { exists = scope:decentralized_neighboring_territory }
			scope:decentralized_neighboring_territory = {
				set_country_type = unrecognized
				hidden_effect = {
					effect_starting_technology_tier_4_tech = yes
		
					effect_starting_politics_traditional = yes
				}
			}
		}

		add_modifier = {
			name = supporting_reform_efforts_among_brothers # -150 bureaucracy
			months = 12
		}
	}
}

je_unite_the_nations_offer_confederation_button = {
	name = "je_unite_the_nations_offer_confederation_button"
	desc = "je_unite_the_nations_offer_confederation_button_desc"

	visible = {
		exists = c:TIS
		c:TIS = this
	}

	possible = {
		any_neighbouring_state = {
			state_is_in_north_america = yes
			owner = {
				is_player = no
				is_subject = no
				any_primary_culture = {
					shares_heritage_trait_with_any_primary_culture = ROOT
				}
				NOT = { is_country_type = decentralized }
				relations:root >= 25
			}
		}
	}

	effect = {

		ordered_country = {
			limit = {
				NOT = { is_country_type = decentralized }
				relations:root >= 25
				is_player = no
				is_subject = no
				any_primary_culture = {
					shares_heritage_trait_with_any_primary_culture = ROOT
				}
				any_scope_state = {
					state_is_in_north_america = yes
					any_neighbouring_state = {
						owner = ROOT
					}
				}
			}
			order_by = gdp

			save_temporary_scope_as = to_be_annexed


			if = {
				limit = {
					scope:to_be_annexed = {
						any_primary_culture = {
							NOT = {
								is_primary_culture_of = ROOT
							}
						}
					}
				}
				scope:to_be_annexed = {
					random_primary_culture = {
						limit = {
							NOT = {
								is_primary_culture_of = ROOT
							}
						}
						save_temporary_scope_as = to_be_annexed_culture
					}
				}
			}
		}

		if = {
			limit = { NOT = { exists = scope:to_be_annexed } }
			custom_tooltip = { text = je_unite_the_nations_offer_confederation_tt }
		}
		if = {
			limit = { exists = scope:to_be_annexed }
			annex = scope:to_be_annexed
		}
		if = {
			limit = { exists = scope:to_be_annexed_culture }
			add_primary_culture = scope:to_be_annexed_culture
		}
	}
}

﻿debug_success = {
	add_treasury = 50000
}
debug_fail = {
	add_treasury = -50000
}

assert = {
	assert_if = {
		limit = { always = yes }
	}
}


set_all_colony = {
	every_state = {
		limit = {
			OR = {
				region = sr:region_north_africa
				region = sr:region_southern_africa
				region = sr:region_zanj
				region = sr:region_senegal
				region = sr:region_niger
				region = sr:region_nile_basin
				region = sr:region_congo
			}
		
		}
		set_state_owner = c:GBR
		set_state_type = unincorporated
	}
	
}
﻿niger_river_expedition_location = { 
	if = {
		limit = {
			var:expedition_progress = 1
		}
		random_state = {
			limit = {
				state_region = s:STATE_NIGER_DELTA
			}
			save_scope_as = current_expedition_location
		}
	}
	
	if = {
		limit = {
			var:expedition_progress = 2
		}
		random_state = {
			limit = {
				state_region = s:STATE_BENIN
			}
			save_scope_as = current_expedition_location
		}
	}
	
	if = {
		limit = {
			var:expedition_progress = 3
		}
		random_state = {
			limit = {
				state_region = s:STATE_HAUSALAND
			}
			save_scope_as = current_expedition_location
		}
	}
	
	if = {
		limit = {
			var:expedition_progress = 4
		}
		random_state = {
			limit = {
				state_region = s:STATE_OUTER_HAUSALAND
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 5
		}
		random_state = {
			limit = {
				state_region = s:STATE_TIMBUKTU
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 6
		}
		random_state = {
			limit = {
				state_region = s:STATE_EASTERN_MALI
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 7
		}
		random_state = {
			limit = {
				state_region = s:STATE_WESTERN_MALI
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 8
		}
		random_state = {
			limit = {
				state_region = s:STATE_GUINEA
			}
			save_scope_as = current_expedition_location
		}
	}
}

west_america_expedition_location = {
	if = {
		limit = {
			exists = var:expedition_progress
			var:expedition_progress = 1
		}
		random_state = {
			limit = {
				state_region = s:STATE_COLORADO
			}
			save_scope_as = current_expedition_location
		}
	} 

	if = {
		limit = {
			exists = var:expedition_progress
			var:expedition_progress >= 8
		}
		random_state = {
			limit = {
				state_region = s:STATE_OREGON
			}
			save_scope_as = current_expedition_location
		}
	} 	

	else = {
		random_state = {
			limit = {
				state_region = s:STATE_UTAH
			}
			save_scope_as = current_expedition_location
		}
	}
}

central_africa_location_effect = {
	if = {
		limit = {
			var:expedition_progress = 1
		}
		random_state = {
			limit = {
				state_region = s:STATE_ZANZIBAR
			}
			save_scope_as = current_expedition_location
		}
	} 

	if = {
		limit = {
			var:expedition_progress = 2
		}
		random_state = {
			limit = {
				state_region = s:STATE_ZANZIBAR
			}
			save_scope_as = current_expedition_location
		}
	} 

	if = {
		limit = {
			var:expedition_progress = 3
		}
		random_state = {
			limit = {
				state_region = s:STATE_LINDI
			}
			save_scope_as = current_expedition_location
		}
	} 

	if = {
		limit = {
			var:expedition_progress = 4
		}
		random_state = {
			limit = {
				state_region = s:STATE_LINDI
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 5
		}
		random_state = {
			limit = {
				state_region = s:STATE_TANGANYIKA
			}
			save_scope_as = current_expedition_location
		}
	} 

	if = {
		limit = {
			var:expedition_progress = 6
		}
		random_state = {
			limit = {
				state_region = s:STATE_TANGANYIKA
			}
			save_scope_as = current_expedition_location
		}
	} 

	if = {
		limit = {
			var:expedition_progress = 7
		}
		random_state = {
			limit = {
				state_region = s:STATE_TANGANYIKA
			}
			save_scope_as = current_expedition_location
		}
	} 

	if = {
		limit = {
			var:expedition_progress = 8
		}
		random_state = {
			limit = {
				state_region = s:STATE_UGANDA
			}
			save_scope_as = current_expedition_location
		}
	}
}

congo_river_expedition_location = { 
	if = {
		limit = {
			var:expedition_progress = 1
		}
		random_state = {
			limit = {
				state_region = s:STATE_BAS_CONGO
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 2
		}
		random_state = {
			limit = {
				state_region = s:STATE_CONGO
			}
			save_scope_as = current_expedition_location
		}
	}
	
	if = {
		limit = {
			var:expedition_progress = 3
		}
		random_state = {
			limit = {
				state_region = s:STATE_EQUATEUR
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 4
		}
		random_state = {
			limit = {
				state_region = s:STATE_EQUATEUR
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 5
		}
		random_state = {
			limit = {
				state_region = s:STATE_CONGO_ORIENTALE
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 6
		}

		random_state = {
			limit = {
				state_region = s:STATE_CONGO_ORIENTALE
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 7
		}
		random_state = {
			limit = {
				state_region = s:STATE_KATANGA
			}
			save_scope_as = current_expedition_location
		}
	}

	if = {
		limit = {
			var:expedition_progress = 8
		}
		random_state = {
			limit = {
				state_region = s:STATE_KATANGA
			}
			save_scope_as = current_expedition_location
		}
	}
}


# Progress and Peril Effects
add_small_peril_effect = {
	change_variable = {
		name = expedition_peril
		add = 1
	}
	custom_tooltip = expedition_minor_peril_tt
}
add_medium_peril_effect = {
	change_variable = {
		name = expedition_peril
		add = 3
	}
	custom_tooltip = expedition_medium_peril_tt
}
add_large_peril_effect = {
	change_variable = {
		name = expedition_peril
		add = 5
	} 
	custom_tooltip = expedition_large_peril_tt
}

expedition_peril_decrease_small_effect = {
	change_variable = {
		name = expedition_peril
		add = -1
	}
	custom_tooltip = expedition_event_decreasing_peril_tt
}	

expedition_peril_decrease_medium_effect = {
	change_variable = {
		name = expedition_peril
		add = -2
	}
	custom_tooltip = expedition_event_decreasing_peril_tt
}

expedition_minor_progress_effect = {
	change_variable = {
		name = expedition_progress
		add = 1
	}
	custom_tooltip = expedition_minor_progress_tt
}
expedition_moderate_progress_effect = {
	change_variable = {
		name = expedition_progress
		add = 2
	}
	custom_tooltip = expedition_moderate_progress_tt
}
expedition_great_progress_effect = {
	change_variable = {
		name = expedition_progress
		add = 4
	}
	custom_tooltip = expedition_great_progress_tt
}
expedition_lose_progress_effect = {
	change_variable = {
		name = expedition_progress
		add = -1
	}
	custom_tooltip = expedition_lose_progress_tt
}

remove_expedition_events_effect = {
	remove_variable = crew_gets_malaria
	remove_variable = crew_gets_dysentery	
	remove_variable = hippo_sighted
	remove_variable = crew_member_drowns
	remove_variable = river_attack
	remove_variable = expedition_lost_mules
	remove_variable = expedition_more_taxes
	remove_variable = previous_expedition_grave
	remove_variable = river_crossing
	remove_variable = bear_sighting
	remove_variable = wildlife_photography
	remove_variable = mountain_discovered
	remove_variable = snow_falls
	remove_variable = plant_gathering
	remove_variable = expedition_lost
	remove_variable = expedition_rhino_hunt
	remove_variable = expedition_ear_beetle
	remove_variable = expedition_commander_vice
	remove_variable = expedition_geographic_study
	remove_variable = expedition_boat_repair
	remove_variable = expedition_white_fog
	remove_variable = expedition_crocodile_attack
	remove_variable = expedition_rear_column
	remove_variable = expedition_trading_enclave
	remove_variable = expedition_deep_jungle
	remove_variable = expedition_found_falls
	remove_variable = expedition_trading_gifts
	remove_variable = icebound_var
	remove_variable = transantarctic_mountains_var
	remove_variable = jump_river_fail_var
	remove_variable = jump_river_success_var
	remove_variable = disciplinary_sanctions_var
	remove_variable = build_a_fort_var
	remove_variable = crazy_explorer_var
	remove_variable = kidnapped_ambassador_var
	remove_variable = expedition_quest_var
	remove_variable = team_disobeys_var
	remove_variable = expedition_baby_var
	remove_variable = guide_advice_var
	remove_variable = leaders_breakdown_var
	remove_variable = expedition_thief_var
	remove_variable = cancelled_expedition_var
	remove_variable = strange_rock_var
	remove_variable = found_explorer_var
	remove_variable = expedition_lost_expedition_var
	remove_variable = killed_lost_expedition_var
	remove_variable = south_pole_event_var
	remove_variable = pack_ice
	remove_variable = discovery_hut_var
	remove_variable = transantarctic_mountains_var
	remove_variable = mountain_spotted
	remove_variable = native_guide_var
	remove_variable = no_extra_expenses_var
	
	remove_modifier = expedition_taxes_modifier

	random_scope_character = {
		limit = { has_variable = expedition_leader_var }
		set_character_busy_and_immortal = no
	}

	set_variable = {
		name = help_from_locals
		value = no
	}
}
﻿change_to_parliamentary_elective = {
	if = {
		limit = {
			government_transfer_of_power = hereditary
		}
		heir ?= {
			disinherit_character = yes
		}
	}
}

post_change_to_parliamentary_elective = {
	get_ruler_for:parliamentary_elective = {
		set_character_as_ruler = yes
	}
}

change_to_presidential_elective = {
	if = {
		limit = {
			government_transfer_of_power = hereditary
		}
		heir ?= {
			disinherit_character = yes
		}
	}
}

post_change_to_presidential_elective = {
	get_ruler_for:presidential_elective = {
		set_character_as_ruler = yes
	}
}

change_to_dictatorial = {
	if = {
		limit = {
			government_transfer_of_power = hereditary
		}
		heir ?= {
			disinherit_character = yes
		}
	}
}

post_change_to_dictatorial = {
	get_ruler_for:dictatorial = {
		set_character_as_ruler = yes
	}
}

change_to_hereditary = {
	if = {
		limit = {
			government_transfer_of_power = parliamentary_elective
		}
		create_character = {
			noble =  yes
			save_scope_as = ruler_to_be
		}
	}
}

post_change_to_hereditary= {
	if = {
		limit = {
			government_transfer_of_power = parliamentary_elective
		}
		scope:ruler_to_be = {
			set_character_as_ruler = yes
		}
	}
}

﻿krakatoa_tsunami_effect = {
	every_state_region = {
		limit = {
			OR = {
				region = sr:region_indochina
				region = sr:region_indonesia
				region = sr:region_south_china
			}
		}
		add_devastation = 30
	}
		
	every_state_region = {
		limit = {
			OR = {
				region = sr:region_zanj
				region = sr:region_ethiopia
				region = sr:region_southern_africa
				region = sr:region_south_india
				region = sr:region_japan
				region = sr:region_oceania
			}
		}
		add_devastation = 10
	}
}
﻿initialize_lobby_custom_name = {

	remove_variable = lobby_custom_name_var_1
	remove_variable = lobby_custom_name_var_2
	remove_variable = lobby_custom_name_var_3
	remove_variable = lobby_custom_name_var_4
	remove_variable = lobby_custom_name_var_5
	remove_variable = lobby_custom_name_var_6
	remove_variable = lobby_custom_name_var_7
	remove_variable = lobby_custom_name_var_8
	remove_variable = lobby_custom_name_var_9
	remove_variable = lobby_custom_name_var_10
	remove_variable = lobby_custom_name_var_11
	remove_variable = lobby_custom_name_var_12
	remove_variable = lobby_custom_name_var_13
	remove_variable = lobby_custom_name_var_14
	remove_variable = lobby_custom_name_var_15
	remove_variable = lobby_custom_name_var_16
	remove_variable = lobby_custom_name_var_17
	remove_variable = lobby_custom_name_var_18
	remove_variable = lobby_custom_name_var_19
	remove_variable = lobby_custom_name_var_20
	
	if = {
		limit = { is_political_lobby_type = lobby_pro_country }
		random_list = { # Custom Lobby Name
			1 = { set_variable = lobby_custom_name_var_1 } # Union
			2 = { set_variable = lobby_custom_name_var_2 } # Association
			2 = { set_variable = lobby_custom_name_var_3 } # Society
			1 = { set_variable = lobby_custom_name_var_4 } # Friendship Committee
			2 = { set_variable = lobby_custom_name_var_5 } # Fellowship
			1 = { set_variable = lobby_custom_name_var_6 } # League
		}			
	}
	else_if = {
		limit = { is_political_lobby_type = lobby_anti_country }
		random_list = { # Custom Lobby Name
			1 = { set_variable = lobby_custom_name_var_2 } # Association
			1 = { set_variable = lobby_custom_name_var_3 } # Society
			2 = { set_variable = lobby_custom_name_var_6 } # League
		}		
	}
	else_if = {
		limit = { is_political_lobby_type = lobby_pro_overlord }
		random_list = { # Custom Lobby Name
			1 = { set_variable = lobby_custom_name_var_15 } # Empire Union 
			2 = { set_variable = lobby_custom_name_var_16 } # Loyalist Association
			2 = { set_variable = lobby_custom_name_var_17 } # Covenant
			2 = { set_variable = lobby_custom_name_var_18 } # Union Party
			2 = { set_variable = lobby_custom_name_var_19 } # Loyal Order
			1 = { set_variable = lobby_custom_name_var_20 } # League of Loyalists
		}		
	}
	else_if = {
		limit = { is_political_lobby_type = lobby_anti_overlord }
		random_list = { # Custom Lobby Name
			1 = { set_variable = lobby_custom_name_var_7 } # League 
			2 = { set_variable = lobby_custom_name_var_8 } # National Congress
			2 = { set_variable = lobby_custom_name_var_9 } # National Union
			1 = { set_variable = lobby_custom_name_var_10 } # National Council
			2 = { set_variable = lobby_custom_name_var_11 } # National League
			1 = { set_variable = lobby_custom_name_var_12 } # Brotherhood
			2 = { set_variable = lobby_custom_name_var_13 } # National Committee
			1 = { set_variable = lobby_custom_name_var_14 } # United League
		}	
	}
}

add_lobby_appeasement_from_diplomacy_bidirectional = {
	$FIRST$ = {
		every_political_lobby = {
			limit = {
				is_political_lobby_type = lobby_pro_country
				target = $SECOND$
			}
			change_appeasement = {
				amount = $PRO_AMOUNT$
				factor = $FACTOR$
			}
		}
		every_political_lobby = {
			limit = {
				is_political_lobby_type = lobby_anti_country
				target = $SECOND$
			}
			change_appeasement = {
				amount = $ANTI_AMOUNT$
				factor = $FACTOR$
			}
		}	
	}
	
	$SECOND$ = {
		every_political_lobby = {
			limit = {
				is_political_lobby_type = lobby_pro_country
				target = $FIRST$
			}
			change_appeasement = {
				amount = $PRO_AMOUNT$
				factor = $FACTOR$
			}
		}
		every_political_lobby = {
			limit = {
				is_political_lobby_type = lobby_anti_country
				target = $FIRST$
			}
			change_appeasement = {
				amount = $ANTI_AMOUNT$
				factor = $FACTOR$
			}
		}		
	}
}

add_lobby_appeasement_from_diplomacy_unidirectional = {
	$FIRST$ = {
		every_political_lobby = {
			limit = {
				is_political_lobby_type = lobby_pro_country
				target = $SECOND$
			}
			change_appeasement = {
				amount = $PRO_AMOUNT$
				factor = $FACTOR$
			}
		}
		every_political_lobby = {
			limit = {
				is_political_lobby_type = lobby_anti_country
				target = $SECOND$
			}
			change_appeasement = {
				amount = $ANTI_AMOUNT$
				factor = $FACTOR$
			}
		}	
	}
}

add_overlord_lobby_appeasement_from_diplomacy = {
	$FIRST$ = {
		every_political_lobby = {
			limit = {
				is_political_lobby_type = lobby_pro_overlord
				target = $SECOND$
			}
			change_appeasement = {
				amount = $PRO_AMOUNT$
				factor = $FACTOR$
			}
		}
		every_political_lobby = {
			limit = {
				is_political_lobby_type = lobby_anti_overlord
				target = $SECOND$
			}
			change_appeasement = {
				amount = $ANTI_AMOUNT$
				factor = $FACTOR$
			}
		}	
	}
}

﻿effect_native_conscription_1 = {
	if = {
		limit = { is_country_type = decentralized }		
		add_modifier = {
			name = native_conscription_1
			months = -1
		}		
	}
}

effect_native_conscription_2 = {
	if = {
		limit = { is_country_type = decentralized }		
		add_modifier = {
			name = native_conscription_2
			months = -1
		}		
	}
}

effect_native_conscription_3 = {
	if = {
		limit = { is_country_type = decentralized }	
		add_modifier = {
			name = native_conscription_3
			months = -1
		}		
	}
}

effect_native_conscription_4 = {
	if = {
		limit = { is_country_type = decentralized }		
		add_modifier = {
			name = native_conscription_4
			months = -1
		}		
	}
}

effect_native_conscription_5 = {
	if = {
		limit = { is_country_type = decentralized }	
		add_modifier = {
			name = native_conscription_5
			months = -1
		}		
	}
}

effect_native_conscription_6 = {
	if = {
		limit = { is_country_type = decentralized }		
		add_modifier = {
			name = native_conscription_6
			months = -1
		}		
	}
}

effect_native_conscription_7 = {
	if = {
		limit = { is_country_type = decentralized }		
		add_modifier = {
			name = native_conscription_7
			months = -1
		}		
	}
}

effect_native_conscription_8 = {
	if = {
		limit = { is_country_type = decentralized }		
		add_modifier = {
			name = native_conscription_8
			months = -1
		}		
	}
}

effect_native_conscription_9 = {
	if = {
		limit = { is_country_type = decentralized }		
		add_modifier = {
			name = native_conscription_9
			months = -1
		}		
	}
}

effect_native_conscription_10 = {
	if = {
		limit = { is_country_type = decentralized }		
		add_modifier = {
			name = native_conscription_10
			months = -1
		}		
	}
}

effect_native_conscription_11 = {
	if = {
		limit = { is_country_type = decentralized }		
		add_modifier = {
			name = native_conscription_11
			months = -1
		}		
	}
}

effect_native_conscription_12 = {
	if = {
		limit = { is_country_type = decentralized }		
		add_modifier = {
			name = native_conscription_12
			months = -1
		}		
	}
}
﻿# Very high liberalism, e.g. USA

effect_starting_politics_liberal = {
	activate_law = law_type:law_presidential_republic
	activate_law = law_type:law_total_separation
	activate_law = law_type:law_census_voting
	activate_law = law_type:law_per_capita_based_taxation
	activate_law = law_type:law_elected_bureaucrats
	activate_law = law_type:law_private_schools
	activate_law = law_type:law_no_workers_rights
	activate_law = law_type:law_interventionism
	activate_law = law_type:law_mercantilism	
	activate_law = law_type:law_racial_segregation
	activate_law = law_type:law_professional_army
	activate_law = law_type:law_no_migration_controls
	activate_law = law_type:law_professional_army
	activate_law = law_type:law_homesteading
}

effect_starting_politics_conservative = {
	activate_law = law_type:law_monarchy
	activate_law = law_type:law_state_religion
	activate_law = law_type:law_oligarchy
	activate_law = law_type:law_appointed_bureaucrats
	activate_law = law_type:law_religious_schools
	activate_law = law_type:law_local_police
	activate_law = law_type:law_per_capita_based_taxation
	activate_law = law_type:law_national_supremacy
	activate_law = law_type:law_interventionism
	activate_law = law_type:law_mercantilism
	activate_law = law_type:law_no_workers_rights
	activate_law = law_type:law_censorship
	activate_law = law_type:law_professional_army
	activate_law = law_type:law_migration_controls
	activate_law = law_type:law_professional_army
	activate_law = law_type:law_tenant_farmers
}

effect_starting_politics_reactionary = {
	activate_law = law_type:law_monarchy
	activate_law = law_type:law_state_religion
	activate_law = law_type:law_autocracy 
	activate_law = law_type:law_per_capita_based_taxation
	activate_law = law_type:law_local_police
	activate_law = law_type:law_hereditary_bureaucrats
	activate_law = law_type:law_national_supremacy
	activate_law = law_type:law_interventionism
	activate_law = law_type:law_mercantilism
	activate_law = law_type:law_no_workers_rights
	activate_law = law_type:law_censorship
	activate_law = law_type:law_professional_army
	activate_law = law_type:law_migration_controls
	activate_law = law_type:law_professional_army
	activate_law = law_type:law_tenant_farmers
}

effect_starting_politics_traditional = {
	activate_law = law_type:law_state_religion
	activate_law = law_type:law_autocracy
	activate_law = law_type:law_land_based_taxation
	activate_law = law_type:law_hereditary_bureaucrats
	activate_law = law_type:law_national_supremacy
	activate_law = law_type:law_traditionalism
	activate_law = law_type:law_right_of_assembly
	activate_law = law_type:law_peasant_levies	
	activate_law = law_type:law_closed_borders
	if = {
		limit = {
			is_country_type = decentralized
		}
		activate_law = law_type:law_chiefdom
		activate_law = law_type:law_isolationism
		activate_law = law_type:law_right_of_assembly	
		activate_law = law_type:law_serfdom
		activate_law = law_type:law_peasant_levies	
		activate_law = law_type:law_closed_borders
		activate_law = law_type:law_no_workers_rights
	}
	else = {
		activate_law = law_type:law_monarchy
		activate_law = law_type:law_mercantilism
		activate_law = law_type:law_serfdom
		activate_law = law_type:law_right_of_assembly
		activate_law = law_type:law_peasant_levies	
		activate_law = law_type:law_closed_borders
		activate_law = law_type:law_no_workers_rights
	}
}

﻿
set_radical_leader = {
	if = {
		limit = {
			exists = $RAD_IG$
			$RAD_IG$ = { is_interest_group_type = ig_rural_folk }
		}
		create_character = {
			ig_leader = yes
			ideology = ideology_radical
			interest_group = ig_rural_folk
		}
	}
	else_if = {
		limit = {
			exists = $RAD_IG$
			$RAD_IG$ = { is_interest_group_type = ig_intelligentsia }
		}
		create_character = {
			ig_leader = yes
			ideology = ideology_radical
			interest_group = ig_intelligentsia
		}
	}
	else_if = {
		limit = {
			exists = $RAD_IG$
			$RAD_IG$ = { is_interest_group_type = ig_trade_unions }
		}
		create_character = {
			ig_leader = yes
			ideology = ideology_radical
			interest_group = ig_trade_unions
		}
	}
	else_if = {
		limit = {
			exists = $RAD_IG$
			$RAD_IG$ = { is_interest_group_type = ig_petty_bourgeoisie }
		}
		create_character = {
			ig_leader = yes
			ideology = ideology_radical
			interest_group = ig_petty_bourgeoisie
		}
	}
	else_if = {
		limit = {
			exists = $RAD_IG$
			$RAD_IG$ = { is_interest_group_type = ig_industrialists }
		}
		create_character = {
			ig_leader = yes
			ideology = ideology_radical
			interest_group = ig_industrialists
		}
	}
}
﻿#	Example:
# 
#	example_effect = {
#		x = 100
#		y = 50
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#

relations_hit_with_power_bloc_leaders = {
	if = {
		limit = {
			has_game_started = yes
		}
		
		every_power_bloc = {
			limit = { 
				NOT = { scope:power_bloc ?= this }			
			}
			power_bloc_leader = {
				root = {
					change_relations = { 
						country = prev
						value = {
							add = -30
							if = {
								limit = {
									is_country_type = unrecognized
									prev = { is_country_type = recognized }
								}
								add = -30
							}
						}
					}
				}
			}
		}		
	}
}

save_neighbor_with_state = {
	random_neighbouring_state = {
		limit = {
			owner = {
				$CRITERIA$
			}
		}
		save_scope_as = neighbor_state
		owner = {
			save_scope_as = neighbor_country
		}

		random_neighbouring_state = {
			limit = {
				owner = ROOT
			}
			save_scope_as = neighbor_neighbor_state
		}
	}
}

save_industrialized_pm_building_and_state = {
	random_scope_building = {
		limit = {
			OR = {
				AND = {
					is_building_type = building_textile_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_textile_mills
								production_method = pm_mechanized_looms
							}
							is_production_method_active = {
								building_type = building_textile_mills
								production_method = pm_automatic_power_looms
							}
						}
					}
				}
				AND = {
					is_building_type = building_furniture_manufacturies
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_mechanized_workshops
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_watertube_boiler_building_furniture_manufacturies
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_rotary_valve_engine_building_furniture_manufacturies
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_assembly_lines_building_furniture_manufacturies
							}
						}
					}
				}
				AND = {
					is_building_type = building_tooling_workshops
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_watertube_boiler_building_tooling_workshops
							}
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_rotary_valve_engine_building_tooling_workshops
							}
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_assembly_lines_building_tooling_workshops
							}
						}
					}
				}
				AND = {
					is_building_type = building_paper_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_paper_mills
								production_method = pm_watertube_boiler_building_paper_mills
							}
							is_production_method_active = {
								building_type = building_paper_mills
								production_method = pm_rotary_valve_engine_building_paper_mills
							}
						}
					}
				}
				AND = {
					is_building_type = building_steel_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_steel_mills
								production_method = pm_watertube_boiler_building_steel_mills
							}
							is_production_method_active = {
								building_type = building_steel_mills
								production_method = pm_rotary_valve_engine_building_steel_mills
							}
						}
					}
				}
				AND = {
					is_building_type = building_motor_industry
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_motor_industry
								production_method = pm_watertube_boiler_building_motor_industry
							}
							is_production_method_active = {
								building_type = building_motor_industry
								production_method = pm_rotary_valve_engine_building_motor_industry
							}
						}
					}
				}
			}
		}

		save_scope_as = industrialized_pm_building
		state = {
			save_scope_as = industrialized_pm_state
		}
	}
}

warlord_setup_effect = {
	activate_law = law_type:law_autocracy 
	activate_law = law_type:law_presidential_republic
	activate_law = law_type:law_peasant_levies
	if = {
		limit = {
			NOR = {
				c:MGL ?= this
				c:TUV ?= this
				c:ALI ?= this
			}
		}
		random_character = {
			limit = {
				c:CHI ?= owner
				OR = {
					has_role = general
					AND = {
						PREV = {
							any_scope_state = {
								has_building = building_naval_base
							}
						}
						has_role = admiral
					}
				}
			}
			transfer_character = PREV
			set_character_as_ruler = yes
		}
		if = {
			limit = {
				NOR = {
					country_has_primary_culture = cu:han
					country_has_primary_culture = cu:manchu
				}
			}
			add_primary_culture = cu:han
			if = {
				limit = {
					OR = {
						has_law = law_type:law_ethnostate
						has_law = law_type:law_national_supremacy
					}
				}
				remove_primary_culture = cu:uighur
				remove_primary_culture = cu:tibetan
				remove_primary_culture = cu:mongol
			}
		}
	}
		
	every_scope_character = {
		random_list = {
			80 =  {
			}

			20 = {
				add_trait = bandit
			}
		}			
	}
}

scripted_effect_parties_emergence = {
	if = {
		limit = {
			country_has_voting_franchise = no
		}
		custom_tooltip = PARTIES_EMERGENCE
	}

	# Will immediately trigger elections and thus update parties so no need to call update_party_support here
}

scripted_effect_parties_disappearence = {
	if = {
		limit = {
			country_has_voting_franchise = yes
		}
		custom_tooltip = PARTIES_DISAPPEARENCE
	}

	deactivate_parties = yes
}

liberate_slaves = {
	every_scope_pop = {
		limit = {
			is_pop_type = slaves
		}
		if = {
			limit = {
				is_employed = yes
			}
			change_poptype = workplace.type.slaves_role
		}
		else = {
			change_poptype = pop_type:laborers
		}
	}
}

enslave_discriminated_farm_workers = {
	every_scope_pop = {
		limit = {
			is_pop_type = laborers
			pop_is_discriminated = yes
			OR = {
				pop_employment_building_group = bg_agriculture
				pop_employment_building_group = bg_ranching
				pop_employment_building_group = bg_plantations			
			}
		}
		change_poptype = pop_type:slaves
	}
}

save_revolution_scopes = {
	random_civil_war = {
		limit = {
			is_civil_war_type = revolution
		}
		save_scope_as = ongoing_revolution
	}
	random_political_movement = {
		limit = {
			is_revolutionary_movement = yes
		}
		save_scope_as = ongoing_revolution_movement
	}
}

save_agitator_law_scopes = {
	if = {
		limit = {
			agitator_supports_enaction = yes
		}
		random_scope_character = {
			limit = {
				has_role = agitator
				OR = {
					law_stance = {
						law = owner.currently_enacting_law.type
						value > neutral
					}
					AND = {	
						law_stance = {
							law = owner.currently_enacting_law.type
							value > strongly_approve # Equals 'count'
						}
						interest_group = {
							law_stance = {
								law = owner.currently_enacting_law.type
								value > neutral
							}
							NOT = {
								law_stance = {
									law = owner.currently_enacting_law.type
									value > strongly_approve # Equals 'count'
								}
							}
						}
					}
				}
			}
			save_scope_as = supporting_agitator
			interest_group = {
				save_scope_as = agitator_ig
			}
		}
		random_political_movement = {
			limit = {
				OR = {	
					is_political_movement_type = movement_to_enact
					is_political_movement_type = movement_to_restore	
				}
				this.desired_law = root.currently_enacting_law.type
			}
			save_scope_as = supporting_movement
		}
	}
	
	if = {
		limit = {
			agitator_opposes_enaction = yes
		}
		random_scope_character = {
			limit = {
				has_role = agitator
				OR = {
					law_stance = {
						law = owner.currently_enacting_law.type
						value < neutral
					}
					AND = {	
						law_stance = {
							law = owner.currently_enacting_law.type
							value > strongly_approve # Equals 'count'
						}
						interest_group = {
							law_stance = {
								law = owner.currently_enacting_law.type
								value < neutral
							}
							NOT = {
								law_stance = {
									law = owner.currently_enacting_law.type
									value > strongly_approve # Equals 'count'
								}
							}
						}
					}
				}
			}
			save_scope_as = opposing_agitator
			interest_group = {
				save_scope_as = agitator_ig
			}
		}
		random_political_movement = {
			limit = {
				is_political_movement_type = movement_to_preserve
			}
			save_scope_as = opposing_movement
		}
	}
}

generate_french_monarch = {
	hidden_effect = {
		if = {
			limit = {
				any_scope_character = {
					is_heir = yes
				}
			}
			random_scope_character = {
				limit = {
					is_heir = yes
				}
				kill_character = yes
			}
		}
	}
	if = {
		limit = {
			has_variable = orleanist_restoration_var
		}
		if = {
			limit = {
				year < 1850
			}
			if = {
				limit = {
					any_scope_character = {
						has_template = FRA_louis_philippe
					}
				}
				random_scope_character = {
					limit = {
						has_template = FRA_louis_philippe
					}
					set_character_as_ruler = yes
				}
			}
			else_if = {
				limit = {
					any_scope_character = {
						has_template = FRA_ferdinand_philippe
						is_ruler = no
					}
				}
				random_scope_character = {
					limit = {
						has_template = FRA_ferdinand_philippe
					}
					set_character_as_ruler = yes
				}
			}
			else = {
				create_character = {
					template = FRA_ferdinand_philippe
				}
			}
		}
		else_if = {
			limit = {
				year >= 1850
				year < 1894
			}
			create_character = {
				template = FRA_philippe_de_orleans_of_paris
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			if = {
				limit = {
					year >= 1870
					year < 1894
				}
				create_character = {
					template = FRA_philippe_de_orleans_of_orleans
				}
			}
		}
		else_if = {
			limit = {
				year >= 1894
				year < 1926
			}
			create_character = {
				template = FRA_philippe_de_orleans_of_orleans
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_jean_de_orleans
			}
		}
		else_if = {
			limit = {
				year >= 1926
			}
			create_character = {
				template = FRA_jean_de_orleans
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_henri_de_orleans
			}
		}
	}
	else_if = {
		limit = {
			has_variable = legitimist_restoration_var
		}
		if = {
			limit = {
				year < 1844
			}
			create_character = {
				template = FRA_louis_antoine_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_henri_de_bourbon
			}
		}
		else_if = {
			limit = {
				year >= 1844
				year < 1883
			}
			create_character = {
				template = FRA_henri_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_jean_de_bourbon
			}
		}
		else_if = {
			limit = {
				year >= 1883
				year < 1887
			}
			create_character = {
				template = FRA_jean_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_carlos_de_bourbon
			}
		}
		else_if = {
			limit = {
				year >= 1887
				year < 1909
			}
			create_character = {
				template = FRA_carlos_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_jacques_de_bourbon
			}
		}
		else_if = {
			limit = {
				year >= 1909
				year < 1931
			}
			create_character = {
				template = FRA_jacques_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician			
				}
			}
			create_character = {
				template = FRA_alfonso_carlos_de_bourbon
			}
		}
		else_if = {
			limit = {
				year >= 1931
			}
			create_character = {
				template = FRA_alfonso_carlos_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician
				}
			}
			create_character = {
				template = FRA_alfonso_de_bourbon
			}
		}
	}
	else_if = {
		limit = {
			has_variable = bonapartist_restoration_var
		}
	#		limit = { # Joseph and Louis commented out due Louis-Napoleon taking precedence, and due to them not having any real designs on the throne.
	#			year < 1844
	#		}
	#		create_character = {
	#			# Joseph-Napoléon Bonaparte
	#			first_name = "Joseph"
	#			last_name = "Bonaparte"
	#			ruler = yes
	#			birth_date = 1768.1.7
	#			culture = cu:corsican
	#			interest_group = ig_landowners
	#			ideology = ideology_bonapartist
	#			traits = {
	#				ambitious
	#				basic_diplomat
	#			}
	#			on_created = {
	#				set_variable = {
	#					name = bonapartist_leader
	#				}				
	#			}
	#		}
	#		create_character = {
	#			# Louis Napoléon Bonaparte
	#			first_name = "Louis"
	#			last_name = "Bonaparte"
	#			heir = yes
	#			birth_date = 1778.9.2
	#			culture = cu:corsican
	#			interest_group = ig_armed_forces
	#			ideology = ideology_bonapartist
	#			traits = {
	#				basic_artillery_commander
	#				meticulous
	#				tactful
	#			}
	#			on_created = {
	#				set_variable = {
	#					name = bonapartist_leader
	#				}				
	#			}
	#		}
	#	}
	#	else_if = {
	#		limit = {
	#			year >= 1844
	#			year < 1846
	#		}
	#		create_character = {
	#			# Louis Napoléon Bonaparte
	#			first_name = "Louis"
	#			last_name = "Bonaparte"
	#			ruler = yes
	#			birth_date = 1778.9.2
	#			culture = cu:corsican
	#			interest_group = ig_armed_forces
	#			ideology = ideology_bonapartist
	#			traits = {
	#				basic_artillery_commander
	#				meticulous
	#				tactful
	#			}
	#			on_created = {
	#				set_variable = {
	#					name = bonapartist_leader
	#				}				
	#			}
	#		}
	#		create_character = {
	#			# Charles Louis Napoléon Bonaparte
	#			first_name = "Louis-Napoleon"
	#			last_name = "Bonaparte"
	#			heir = yes
	#			birth_date = 1808.4.20
	#			culture = cu:french
	#			interest_group = ig_petty_bourgeoisie
	#			ideology = ideology_bonapartist
	#			traits = {
	#				ambitious
	#				experienced_political_operator
	#				demagogue
	#			}
	#			on_created = {
	#				set_variable = {
	#					name = bonapartist_leader
	#				}				
	#			}
	#		}
	#	}
		if = {
			limit = {
				year < 1873
			}
			if = {
				limit = {
					any_scope_character = {
						has_variable = napoleon_iii_var
					}
				}
				random_scope_character =  {
					limit = {
						has_variable = napoleon_iii_var
					}
					set_character_as_ruler = yes
					add_character_role = politician
					if = {
						limit = {
							has_role = agitator
						}
						remove_character_role = agitator
					}
				}
			}
			else_if = {
				limit = {
					any_character_in_exile_pool = {
						has_variable = napoleon_iii_var
					}
				}
				random_character_in_exile_pool =  {
					limit = {
						has_variable = napoleon_iii_var
					}
					transfer_character = root
					hidden_effect = {
						remove_modifier = in_exile_modifier
					}
					set_character_as_ruler = yes
					add_character_role = politician
					if = {
						limit = {
							has_role = agitator
						}
						remove_character_role = agitator
					}
				}
			}
			else_if = {
				limit = {
					any_country = {
						NOT = {
							this = root
						}
						any_scope_character = {
							has_variable = napoleon_iii_var
						}
					}
				}
				random_country = {
					limit = {
						NOT = {
							this = root
						}
						any_scope_character = {
							has_variable = napoleon_iii_var
						}
					}
					random_scope_character = {
						limit = {
							has_variable = napoleon_iii_var
						}
						kill_character = {
							hidden = yes
						}
					}
					post_notification = napoleon_iii_leaves_country
				}
				create_character = {
					template = fra_napoleon_iii_character_template
					on_created = {
						set_variable = {
							name = bonapartist_leader
						}		
						set_variable = napoleon_iii_var	
						set_global_variable = napoleon_iii_spawn
						set_character_as_ruler = yes
						add_character_role = politician
						remove_character_role = agitator
					}
				}
			}
			else = {
				create_character = {
					template = fra_napoleon_iii_character_template
					on_created = {
						set_variable = {
							name = bonapartist_leader
						}		
						set_variable = napoleon_iii_var
						set_global_variable = napoleon_iii_spawn
						set_character_as_ruler = yes	
						add_character_role = politician	
						remove_character_role = agitator
					}
				}
			}
			if = {
				limit = {
					year >= 1857
					year < 1873
				}
				create_character = {
					template = FRA_napoleon_eugene_louis_bonaparte
				}
			}
		}
		else_if = {
			limit = {
				year >= 1873
				year < 1879
			}
			create_character = {
				template = FRA_napoleon_eugene_louis_bonaparte
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician
				}
			}
			create_character = {
				template = FRA_victor_bonaparte
			}
		}
		else_if = {
			limit = {
				year >= 1879
				year < 1926
			}
			create_character = {
				template = FRA_victor_bonaparte
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician
				}
			}
			if = {
				limit = {
					year >= 1915
					year < 1926
				}
				create_character = {
					template = FRA_louis_bonaparte
				}
			}
		}
		else_if = {
			limit = {
				year >= 1926
			}
			create_character = {
				template = FRA_louis_bonaparte
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician
				}
			}
		}
	}
	random_scope_character = {
		limit = {
			is_ruler = yes
		}
		save_scope_as = french_monarch_scope
	}
}

clean_up_exile_character_roles = { # scope: character
	if = {
		limit = {
			NOT = { has_role = agitator }
		}
		add_character_role = agitator
	}
	if = {
		limit = {
			has_role = politician
		}
		remove_character_role = politician
	}
	if = {
		limit = {
			has_role = general
		}
		remove_character_role = general
	}
	if = {
		limit = {
			has_role = admiral
		}
		remove_character_role = admiral
	}
}

unification_claims_effect = {
	if = {
		limit = {
			any_state_region = {
				any_scope_state = {
					is_homeland_of_country_cultures = ROOT
					NOT = { owner = ROOT }
					NOT = { has_claim_by = ROOT }
				}
			}
		}
		every_state_region = {
			limit = {
				any_scope_state = {
					is_homeland_of_country_cultures = ROOT
					NOT = { owner = ROOT }
					NOT = { has_claim_by = ROOT }
				}
			}
			add_claim = ROOT
		}
	}
	else = {
		add_loyalists = {
			value = 0.05
		}
	}
}
﻿# THIS EFFECT TO BE USED IN STATE SCOPE FOR ADDING/REFRESHING PLAGUE MODIFIERS
randomize_plague_level_effect = {
	# first we need a random number between 1 and 5
	set_variable = {
		name = plague_level
		value = 1
	}
	hidden_effect = {
		# it's maths time
		random_list = {
			1 = {
			 # no effect
			}
			1 = {
				change_variable = {
					name = plague_level
					add = 1
				}
			}
			1 = {
				change_variable = {
					name = plague_level
					add = 2
				}
			}
			1 = {
				change_variable = {
					name = plague_level
					add = 3
				}
			}
			1 = {
				change_variable = {
					name = plague_level
					add = 4
				}
			}
		}
	}
	# now we modify that number if the country has mitigation efforts
	if = {
		limit = {
			owner = {
				has_variable = plague_lockdown
			}
		}
		change_variable = {
			name = plague_level
			add = -3
		}
	}
	if = {
		limit = {
			owner = {
				has_variable = plague_measures
			}
		}
		change_variable = {
			name = plague_level
			add = -1
		}
	}
	if = {
		limit = {
			owner = { # treatments were not very effective but care affects mortality
				institution_investment_level = { 
					institution = institution_health_system
					value >= 3
				}
			}
		}
		change_variable = {
			name = plague_level
			add = -1
		}
	}
	clamp_variable = {
		name = plague_level
		max = 5
		min = 1
	}
}

add_plague_modifier_effect = {
	# clear any old plague modifiers
	hidden_effect = {
		remove_modifier = plague_modifier
		remove_modifier = plague_lockdown_mod
		remove_modifier = plague_measures_mod
	}
	# now we can add the modifiers based on the final number
	if = {
		limit = {
			var:plague_level = 1
		}
		add_modifier = {
			name = plague_modifier
			months = 6
		}
	}
	else_if = {
		limit = {
			var:plague_level = 2
		}
		add_modifier = {
			name = plague_modifier
			months = 6
			multiplier = 2
		}
	}
	else_if = {
		limit = {
			var:plague_level = 3
		}
		add_modifier = {
			name = plague_modifier
			months = 6
			multiplier = 3
		}
	}
	else_if = {
		limit = {
			var:plague_level = 4
		}
		add_modifier = {
			name = plague_modifier
			months = 6
			multiplier = 4
		}
	}
	else_if = {
		limit = {
			var:plague_level = 5
		}
		add_modifier = {
			name = plague_modifier
			months = 6
			multiplier = 5
		}
	}
	# remove the variable for safety
	remove_variable = plague_level
	# now add anti-plague measures modifiers for economy
	if = {
		limit = {
			owner = {
				has_variable = plague_lockdown
			}
		}
		add_modifier = {
			name = plague_lockdown_mod
			months = 6
		}
	}
	if = {
		limit = {
			owner = {
				has_variable = plague_measures
			}
		}
		add_modifier = {
			name = plague_measures_mod
			months = 6
		}
	}
	# set the wave
	if = {
		limit = {
			NOT = { 
				has_variable = plague_wave
			}
		}
		set_variable = {
			name = plague_wave
			value = 1
		}
	}
	else = {
		change_variable = {
			name = plague_wave
			add = 1
		}
	}
	#set a variable that the state has already been affected so that the pandemic can eventually die out
	set_variable = state_hit_by_plague
	# set (or reset) variable - modified on weekly pulse in the JE - to track how long the restrictions have been active in the specified state
	set_variable = {
		name = plague_restrictions_tracker
		value = 0
	}
	# trigger an event in 6 months to determine if the state should be hit in another wave
	hidden_effect = {
		trigger_event = { id = plague.100 days = 179 }
	}
}


check_the_next_wave = {
	hidden_effect = {
		random_list = {
			4 = {
				modifier = {
					if = {
						limit = {
							var:plague_restrictions_tracker >= 40
						}
						add = -4 # 0% chance for next wave
					}
					else_if = {
						limit = {
							var:plague_restrictions_tracker < 40
							var:plague_restrictions_tracker >= 30
						}
						add = -2 # 40% chance for the next wave
					}
					else_if = {
						limit = {
							var:plague_restrictions_tracker < 30
							var:plague_restrictions_tracker >= 20
						}
						add = 0 #67% chance for the next wave
					}
					else_if = {
						limit = {
							var:plague_restrictions_tracker < 20
							var:plague_restrictions_tracker >= 10
						}
						add = 2 # 86% chance for the next wave
					}
					else_if = {
						limit = {
							var:plague_restrictions_tracker < 10
						}
						add = 4 # 100% chance for the next wave
					}
				}
				trigger_event = { id = plague.3 }
			}
			1 = {
				modifier = {
					if = {
						limit = {
							var:plague_restrictions_tracker >= 40
						}
						add = 3 # 0% chance for next wave
					}
					else_if = {
						limit = {
							var:plague_restrictions_tracker < 40
							var:plague_restrictions_tracker >= 30
						}
						add = 2	# 40% chance for the next wave
					}
					else_if = {
						limit = {
							var:plague_restrictions_tracker < 30
							var:plague_restrictions_tracker >= 20
						}
						add = 1 #67% chance for the next wave
					}
					else_if = {
						limit = {
							var:plague_restrictions_tracker < 20
							var:plague_restrictions_tracker >= 10
						}
						add = 0 # 86% chance for the next wave
					}
					else_if = {
						limit = {
							var:plague_restrictions_tracker < 10
						}
						add = -1 # 100% chance for the next wave
					}
				}
				#no new waves
				remove_variable = plague_restrictions_tracker
				remove_modifier = plague_lockdown_mod
				remove_modifier = plague_measures_mod
			}
		}
	}
}

﻿
# Starting techs for the cutting edge Western powers - Britain, America, France, Belgium etc

effect_starting_technology_tier_1_tech = {
	add_era_researched = era_1

	# Economic
	add_technology_researched = railways
	add_technology_researched = intensive_agriculture
	add_technology_researched = mechanical_tools
	add_technology_researched = atmospheric_engine

	# Military	
	add_technology_researched = screw_frigate
	add_technology_researched = general_staff
	add_technology_researched = percussion_cap
	add_technology_researched = power_of_the_purse

	# Cultural
	add_technology_researched = dialectics
	add_technology_researched = central_archives
	add_technology_researched = central_banking
	add_technology_researched = egalitarianism
	add_technology_researched = corporate_charters
}

# Starting techs for advanced European and American powers - Austria, Prussia, Sweden etc

effect_starting_technology_tier_2_tech = {
	add_era_researched = era_1
}

# Starting techs for backwards European and American powers - Spain, Sicily, Russia

effect_starting_technology_tier_3_tech = {

	# Economic
	add_technology_researched = enclosure
	add_technology_researched = manufacturies
	add_technology_researched = shaft_mining
	add_technology_researched = distillation
	add_technology_researched = steelworking
	add_technology_researched = prospecting
	add_technology_researched = cotton_gin
	
	# Military	
	add_technology_researched = military_drill
	add_technology_researched = standing_army
	add_technology_researched = navigation
	add_technology_researched = gunsmithing
	add_technology_researched = admiralty
	add_technology_researched = artillery
	add_technology_researched = drydocks
	add_technology_researched = mandatory_service
	add_technology_researched = army_reserves
	add_technology_researched = line_infantry

	# Cultural
	add_technology_researched = urbanization
	add_technology_researched = rationalism
	add_technology_researched = tech_bureaucracy
	add_technology_researched = democracy
	add_technology_researched = romanticism
	add_technology_researched = academia
	add_technology_researched = international_trade
	add_technology_researched = international_relations
	add_technology_researched = centralization
	add_technology_researched = currency_standards
	add_technology_researched = colonization
	add_technology_researched = urban_planning
	add_technology_researched = law_enforcement
	add_technology_researched = medical_degrees
}

# Starting techs for most unrecognized nations and very backwards European powers (Ottomans, etc)

effect_starting_technology_tier_4_tech = {

	# Economic
	add_technology_researched = enclosure
	add_technology_researched = manufacturies
	add_technology_researched = steelworking
	add_technology_researched = shaft_mining
	add_technology_researched = distillation
	add_technology_researched = prospecting

	# Military
	add_technology_researched = military_drill
	add_technology_researched = standing_army
	add_technology_researched = navigation
	add_technology_researched = admiralty
	add_technology_researched = gunsmithing
	add_technology_researched = artillery
	add_technology_researched = drydocks

	# Cultural
	add_technology_researched = urbanization
	add_technology_researched = rationalism
	add_technology_researched = tech_bureaucracy
	add_technology_researched = centralization
	add_technology_researched = democracy
	add_technology_researched = international_relations
	add_technology_researched = international_trade
}

# Very backwards centralized powers
effect_starting_technology_tier_5_tech = {	
	# Economic
	add_technology_researched = enclosure
	add_technology_researched = manufacturies
	add_technology_researched = shaft_mining
	
	# Military
	add_technology_researched = standing_army
	add_technology_researched = military_drill
	add_technology_researched = navigation
	
	# Cultural
	add_technology_researched = urbanization
	add_technology_researched = rationalism
	add_technology_researched = tech_bureaucracy
}

# Decentralized countries with organized armies, extremely backwards centralized powers
effect_starting_technology_tier_6_tech = {	
	# Economic
	add_technology_researched = enclosure
	
	# Military
	add_technology_researched = standing_army
	
	# Cultural
	add_technology_researched = urbanization
}

# Decentralized countries with no technology
effect_starting_technology_tier_7_tech = {
}



﻿### NOTE: This file only exist to set a baseline for the simulation, the ACTUAL literacy of pops is calculated during setup so starting literacy January 1, 1836 will NOT match the values set in this file


# Very high literacy

# Examples: Sweden, Netherlands
effect_starting_pop_literacy_very_high = {
	every_scope_pop = {
		set_pop_literacy = {
			literacy_rate = {
				value = 0.6
				# Professions requiring reading at 100%
				if = {
					limit = {
						OR = {
							is_pop_type = bureaucrats
							is_pop_type = academics
							is_pop_type = clergymen
							is_pop_type = engineers
						}
					}
					add = 0.2
				}
				# Upper Class pops at 95%
				if = {
					limit = {
						strata = rich
					}
					add = 0.15
				}
				# Professions where reading is important at 90%
				if = {
					limit = {
						OR = {
							is_pop_type = clerks
							is_pop_type = shopkeepers
						}
					}
					add = 0.1
				}
				# Subsistence farmers at 70% base
				if = {
					limit = {
						OR = {
							pop_employment_building_group = bg_subsistence_agriculture
							pop_employment_building_group = bg_subsistence_ranching
						}
					}
					add = -0.1
				}
				# People in Unincorporated territories at half
				if = {
					limit = {
						state = { is_incorporated = no }
					}
					multiply = 0.5
				}
			}
		}
	}
}

# Examples: USA, UK, Germany
effect_starting_pop_literacy_high = {
	every_scope_pop = {
		set_pop_literacy = {
			literacy_rate = {
				value = 0.5
				# Professions requiring reading at 95%
				if = {
					limit = {
						OR = {
							is_pop_type = bureaucrats
							is_pop_type = academics
							is_pop_type = clergymen
							is_pop_type = engineers
						}
					}
					add = 0.35
				}
				# Upper Class pops at 80%
				if = {
					limit = {
						strata = rich
					}
					add = 0.15
				}
				# Professions where reading is important at 70%
				if = {
					limit = {
						OR = {
							is_pop_type = clerks
							is_pop_type = shopkeepers
						}
					}
					add = 0.1
				}
				# Subsistence farmers at 50% base
				if = {
					limit = {
						OR = {
							pop_employment_building_group = bg_subsistence_agriculture
							pop_employment_building_group = bg_subsistence_ranching
						}
					}
					add = -0.1
				}
				# People in Unincorporated territories at half
				if = {
					limit = {
						state = { is_incorporated = no }
					}
					multiply = 0.5
				}
			}
		}
	}
}

# Examples: France
effect_starting_pop_literacy_middling = {
	every_scope_pop = {
		set_pop_literacy = {
			literacy_rate = {
				value = 0.35
				# Professions requiring reading at 90%
				if = {
					limit = {
						OR = {
							is_pop_type = bureaucrats
							is_pop_type = academics
							is_pop_type = clergymen
							is_pop_type = engineers
						}
					}
					add = 0.5
				}
				# Upper Class pops at 75%
				if = {
					limit = {
						strata = rich
					}
					add = 0.35
				}
				# Professions where reading is important at 50%
				if = {
					limit = {
						OR = {
							is_pop_type = clerks
							is_pop_type = shopkeepers
						}
					}
					add = 0.1
				}
				# Subsistence farmers at 30% base
				if = {
					limit = {
						OR = {
							pop_employment_building_group = bg_subsistence_agriculture
							pop_employment_building_group = bg_subsistence_ranching
						}
					}
					add = -0.1
				}
				# People in Unincorporated territories at half
				if = {
					limit = {
						state = { is_incorporated = no }
					}
					multiply = 0.5
				}
			}
		}
	}
}

# Examples: Italy, Spain, China
effect_starting_pop_literacy_low = {
	every_scope_pop = {
		set_pop_literacy = {
			literacy_rate = {
				value = 0.2
				# Professions requiring reading at 85%
				if = {
					limit = {
						OR = {
							is_pop_type = bureaucrats
							is_pop_type = academics
							is_pop_type = clergymen
							is_pop_type = engineers
						}
					}
					add = 0.65
				}
				# Upper Class pops at 60%
				if = {
					limit = {
						strata = rich
					}
					add = 0.4
				}
				# Professions where reading is important at 30%
				if = {
					limit = {
						OR = {
							is_pop_type = clerks
							is_pop_type = shopkeepers
						}
					}
					add = 0.1
				}
				# Subsistence farmers at 10% base
				if = {
					limit = {
						OR = {
							pop_employment_building_group = bg_subsistence_agriculture
							pop_employment_building_group = bg_subsistence_ranching
						}
					}
					add = -0.1
				}
				# People in Unincorporated territories at half
				if = {
					limit = {
						state = { is_incorporated = no }
					}
					multiply = 0.5
				}
			}
		}
	}
}

# Examples: Russia, Brazil
effect_starting_pop_literacy_very_low = {
	every_scope_pop = {
		set_pop_literacy = {
			literacy_rate = {
				value = 0.1
				# Professions requiring reading at 75%
				if = {
					limit = {
						OR = {
							is_pop_type = bureaucrats
							is_pop_type = academics
							is_pop_type = clergymen
							is_pop_type = engineers
						}
					}
					add = 0.65
				}
				# Upper Class pops at 50%
				if = {
					limit = {
						strata = rich
					}
					add = 0.4
				}
				# Professions where reading is important at 20%
				if = {
					limit = {
						OR = {
							is_pop_type = clerks
							is_pop_type = shopkeepers
						}
					}
					add = 0.1
				}
				# Subsistence farmers at 5% base
				if = {
					limit = {
						OR = {
							pop_employment_building_group = bg_subsistence_agriculture
							pop_employment_building_group = bg_subsistence_ranching
						}
					}
					add = -0.05
				}
				# People in Unincorporated territories at half
				if = {
					limit = {
						state = { is_incorporated = no }
					}
					multiply = 0.5
				}
			}
		}
	}
}

# Examples: India, Indonesia, Egypt
effect_starting_pop_literacy_baseline = {
	every_scope_pop = {
		set_pop_literacy = {
			literacy_rate = {
				value = 0.05
				# Professions requiring reading at 50%
				if = {
					limit = {
						OR = {
							is_pop_type = bureaucrats
							is_pop_type = academics
							is_pop_type = clergymen
							is_pop_type = engineers
						}
					}
					add = 0.45
				}
				# Upper Class pops at 20%
				if = {
					limit = {
						strata = rich
					}
					add = 0.15
				}
				# Professions where reading is important at 10%
				if = {
					limit = {
						OR = {
							is_pop_type = clerks
							is_pop_type = shopkeepers
						}
					}
					add = 0.05
				}
				# People in Unincorporated territories at half
				if = {
					limit = {
						state = { is_incorporated = no }
					}
					multiply = 0.5
				}
			}
		}
	}
}


﻿### NOTE: This file only exist to set a baseline for the simulation, the ACTUAL wealth of pops is calculated during setup so starting wealth January 1, 1836 will NOT match the values set in this file


# Very high wealth, British and Dutch special cases ($1,800 and $1,700 GDP/capita (PPP) in 1820)

effect_starting_pop_wealth_very_high = {
	every_scope_pop = {
		set_pop_wealth = {
			wealth_distribution = {
				value = 13
				if = {
					limit = {
						strata = rich
					}
					add = 15
				}
				if = {
					limit = {
						strata = middle
					}
					add = 7
				}
				if = {
					limit = {
						is_pop_type = laborers
					}
					add = -2
				}
				if = {
					limit = {
						is_pop_type = peasants
					}
					add = -3
				}			
			}
			update_loyalties = no
		}
		effect_reset_wealth_if_slave = yes
	}
} 

# High wealth, eg Belgium, Germany, USA, Spain ($1,300 to $1,000 GDP/capita (PPP) in 1820)

effect_starting_pop_wealth_high = {
	every_scope_pop = {
		set_pop_wealth = {
			wealth_distribution = {
				value = 12
				if = {
					limit = {
						strata = rich
					}
					add = 15
				}
				if = {
					limit = {
						strata = middle
					}
					add = 7
				}
				if = {
					limit = {
						is_pop_type = laborers
					}
					add = -2
				}
				if = {
					limit = {
						is_pop_type = peasants
					}
					add = -3
				}		
			}
			update_loyalties = no
		}
		effect_reset_wealth_if_slave = yes
	}
}

# Medium wealth, eg Portugal, Finland, Latin America, Japan, Russia ($900 to $650 GDP/capita (PPP) in 1820)

effect_starting_pop_wealth_medium = {
	every_scope_pop = {
		set_pop_wealth = {
			wealth_distribution = {
				value = 11
				if = {
					limit = {
						strata = rich
					}
					add = 15
				}
				if = {
					limit = {
						strata = middle
					}
					add = 7
				}
				if = {
					limit = {
						is_pop_type = laborers
					}
					add = -2
				}
				if = {
					limit = {
						is_pop_type = peasants
					}
					add = -3
				}				
			}
			update_loyalties = no
		}
		effect_reset_wealth_if_slave = yes
	}
}

# Low wealth, eg China, India, Africa ($600 to $400 GDP/capita (PPP) in 1820)

effect_starting_pop_wealth_low = {
	every_scope_pop = {
		set_pop_wealth = {
			wealth_distribution = {
				value = 10
				if = {
					limit = {
						strata = rich
					}
					add = 15
				}
				if = {
					limit = {
						strata = middle
					}
					add = 7
				}		
				if = {
					limit = {
						is_pop_type = laborers
					}
					add = -2
				}
				if = {
					limit = {
						is_pop_type = peasants
					}
					add = -3
				}		
			}
			update_loyalties = no
		}
		effect_reset_wealth_if_slave = yes
	}
}

effect_reset_wealth_if_slave = {
	if = {
		limit = {
			is_pop_type = slaves
		}
		set_pop_wealth = {
			wealth_distribution = {
				value = 1
			}
			update_loyalties = no
		}
	}
}

﻿effect_set_non_hostile_mutual_secret_goal_power_difference = {
	save_scope_as = second_country

	scope:first_country = {
		if = {
			limit = { "relations(scope:first_country)" >= relations_threshold:friendly }
			set_secret_goal = {
				country = scope:second_country
				secret_goal = protect
			}						
		}
		else = {
			set_secret_goal = {
				country = scope:second_country
				secret_goal = none
			}		
		}
	}
	
	scope:second_country = {
		if = {
			limit = { "relations(scope:first_country)" >= relations_threshold:friendly }
			set_secret_goal = {
				country = scope:first_country
				secret_goal = befriend
			}			
		}
		else = {
			set_secret_goal = {
				country = scope:first_country
				secret_goal = none
			}		
		}
	}
}

effect_set_non_hostile_mutual_secret_goal = {
	save_scope_as = second_country
	scope:first_country = {
		if = {
			limit = { "relations(scope:first_country)" >= relations_threshold:friendly }
			set_mutual_secret_goal = {
				country = scope:second_country
				secret_goal = protect
			}						
		}
		else = {
			set_mutual_secret_goal = {
				country = scope:second_country
				secret_goal = none
			}		
		}
	}
}

effect_set_limited_non_hostile_mutual_secret_goal = {
	save_scope_as = second_country
	scope:first_country = {
		if = {
			limit = { 
				has_strategic_adjacency = scope:second_country
				"relations(scope:first_country)" >= relations_threshold:friendly 
			}
			set_mutual_secret_goal = {
				country = scope:second_country
				secret_goal = befriend
			}						
		}
		else = {
			set_mutual_secret_goal = {
				country = scope:second_country
				secret_goal = none
			}		
		}
	}
}


﻿# state scope
strike_state_add_modifier_effect_strong = {
	if = {
		limit = {
			owner = {
				has_variable = industrial_strike
			}
		}
		add_modifier = {
			name = industrial_strike_modifier
			multiplier = 2
			months = short_modifier_time
		}
	}
	else_if = {
		limit = {
			owner = {
				has_variable = mining_strike
			}
		}
		add_modifier = {
			name = mining_strike_modifier
			multiplier = 2
			months = short_modifier_time
		}
	}
	else_if = {
		limit = {
			owner = {
				has_variable = railway_strike
			}
		}
		add_modifier = {
			name = railway_strike_modifier
			multiplier = 2
			months = short_modifier_time
		}
	}
	if = { 
		limit = {
			any_scope_pop = {
				is_pop_type = laborers
			}
		}
		add_radicals_in_state = {
			value = medium_radicals
			pop_type = laborers
		}
	}
	if = { 
		limit = {
			any_scope_pop = {
				is_pop_type = machinists
			}
		}
		add_radicals_in_state = {
			value = medium_radicals
			pop_type = machinists
		}
	}
}

strike_state_add_modifier_effect_weak = {
	hidden_effect = {
		remove_modifier = mining_strike_modifier
		remove_modifier = industrial_strike_modifier
		remove_modifier = railway_strike_modifier
	}
	if = {
		limit = {
			owner = {
				has_variable = industrial_strike
			}
		}
		add_modifier = {
			name = industrial_strike_modifier
			months = normal_modifier_time
		}
	}
	else_if = {
		limit = {
			owner = {
				has_variable = mining_strike
			}
		}
		add_modifier = {
			name = mining_strike_modifier
			months = normal_modifier_time
		}
	}
	else_if = {
		limit = {
			owner = {
				has_variable = railway_strike
			}
		}
		add_modifier = {
			name = railway_strike_modifier
			months = normal_modifier_time
		}
	}
}

strike_end_effect = {
	remove_variable = strike_breaker
	remove_variable = strike_negotiator
	remove_variable = industrial_strike
	remove_variable = mining_strike
	remove_variable = railway_strike
	remove_variable = strike_promised_pensions
	remove_variable = strike_police_crackdown_var
	remove_variable = strike_promised_regulatory_bodies
	remove_variable = strike_promised_wage_controls
	remove_variable = strike_promised_worker_protections
	remove_variable = strike_strikebreakers_var
	every_scope_state = {
		remove_modifier = strike_suppression
		remove_modifier = industrial_strike_modifier
		remove_modifier = mining_strike_modifier
		remove_modifier = railway_strike_modifier
		remove_modifier = mining_scabs_modifier
		remove_modifier = industrial_scabs_modifier
		remove_modifier = railway_scabs_modifier
	}
}
﻿give_claims_on_italy = {
	every_state = {
		limit = {
			NOT = { owner = ROOT }
			OR = {
				state_region = s:STATE_LOMBARDY
				state_region = s:STATE_PIEDMONT
				state_region = s:STATE_UMBRIA
				state_region = s:STATE_CAMPANIA
				state_region = s:STATE_CALABRIA
				state_region = s:STATE_APULIA
				state_region = s:STATE_ABRUZZO
				state_region = s:STATE_SICILY
				state_region = s:STATE_TUSCANY
				state_region = s:STATE_ROMAGNA
				state_region = s:STATE_SOUTH_TYROL
				state_region = s:STATE_LAZIO
				state_region = s:STATE_VENETIA
				state_region = s:STATE_ISTRIA
			}
		}
		
		state_region = { add_claim = ROOT }
	}
}

give_claims_on_germany = {
	every_state = {
		limit = {
			NOT = { owner = ROOT }
			OR = {
				state_region = s:STATE_POMERANIA
				state_region = s:STATE_BADEN
				state_region = s:STATE_BAVARIA
				state_region = s:STATE_FRANCONIA
				state_region = s:STATE_BRUNSWICK
				state_region = s:STATE_ELBE
				state_region = s:STATE_WESTPHALIA
				state_region = s:STATE_ANHALT
				state_region = s:STATE_RHINELAND
				state_region = s:STATE_NORTH_RHINE
				state_region = s:STATE_RHINELAND
				state_region = s:STATE_SCHLESWIG_HOLSTEIN
				state_region = s:STATE_HANNOVER
				state_region = s:STATE_SAXONY
				state_region = s:STATE_HESSE
				state_region = s:STATE_MECKLENBURG
				state_region = s:STATE_SILESIA
				state_region = s:STATE_POMERANIA
				state_region = s:STATE_EAST_PRUSSIA
				state_region = s:STATE_WEST_PRUSSIA		
				state_region = s:STATE_ALSACE_LORRAINE
				state_region = s:STATE_WURTTEMBERG
			}
		}
		
		state_region = { add_claim = ROOT }
	}
}
﻿paris_commune_automated_opposition_paris = {
	random_list = {
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_1_fired
				}
				c:PRC = {
					any_interest_group = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_atheist
								has_ideology = ideology:ideology_communist
								has_ideology = ideology:ideology_anarchist
								has_ideology = ideology:ideology_vanguardist
							}
						}
						is_marginal = no
					}	
				}
			}
			paris_commune_automation_pulse_1 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_2_fired
				}
				any_scope_character = {
					has_role = general
					is_busy = no
					is_heir = no
					is_ruler = no
				#	hq = region_france 
				}
				c:PRC = {
					any_interest_group = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_radical
								has_ideology = ideology:ideology_social_democrat
							}
						}
					}	
				}
			}
			paris_commune_automation_pulse_2 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_3_fired
				}
			}
			paris_commune_automation_pulse_3 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_4_fired
				}
				c:PRC = {
					any_interest_group = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_feminist
								AND = {
									is_female = yes
									OR = {
										has_ideology = ideology:ideology_radical
										has_ideology = ideology:ideology_communist
										has_ideology = ideology:ideology_social_democrat
										has_ideology = ideology:ideology_anarchist
										has_ideology = ideology:ideology_vanguardist
									}
								}
							}
						}
					}
				}
			}
			paris_commune_automation_pulse_4 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_6_fired
				}
				c:PRC = {
					any_interest_group = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_communist
								has_ideology = ideology:ideology_anarchist
								has_ideology = ideology:ideology_vanguardist
								has_ideology = ideology:ideology_atheist
							}
						}
						is_marginal = no
					}
				}
			}
			paris_commune_automation_pulse_6 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_9_fired
				}
				c:PRC = {
					any_interest_group = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_feminist
								AND = {
									is_female = yes
									OR = {
										has_ideology = ideology:ideology_radical
										has_ideology = ideology:ideology_communist
										has_ideology = ideology:ideology_social_democrat
										has_ideology = ideology:ideology_anarchist
										has_ideology = ideology:ideology_vanguardist
									}
								}
							}
						}
						is_marginal = no
					}
				}
			}
			paris_commune_automation_pulse_9 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_11_fired
				}
				c:PRC = {
					any_interest_group = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_communist
								has_ideology = ideology:ideology_vanguardist
								has_ideology = ideology:ideology_anarchist
							}
						}
						is_marginal = no
					}
				}
			}
			paris_commune_automation_pulse_11 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_12_fired
				}
				c:PRC = {
					any_interest_group = {
						law_stance = {
							law = law_type:law_compulsory_primary_school
							value > neutral
						}
						is_marginal = no
					}
				}
			}
			paris_commune_automation_pulse_12 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_13_fired
				}
				c:PRC = {
					any_interest_group = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_radical
								has_ideology = ideology:ideology_authoritarian
							}
						}
						is_marginal = no
					}
				}
			}
			paris_commune_automation_pulse_13 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_14_fired
				}
				c:PRC = {
					any_scope_character = {
						has_role = general
					}
				}
			}
			paris_commune_automation_pulse_14 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_15_fired
				}
				c:PRC = {
					any_scope_character = {
						OR = {
							has_ideology = ideology:ideology_communist
							has_ideology = ideology:ideology_anarchist
							has_ideology = ideology:ideology_vanguardist
						}
					}
					NOT = {
						has_law = law_type:law_council_republic
					}
				}
			}
			paris_commune_automation_pulse_15 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_16_fired
				}
			}
			paris_commune_automation_pulse_16 = yes
		}
	}
}

paris_commune_automated_opposition_versailles = {
	random_list = {
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_5_fired
				}
			}
			paris_commune_automation_pulse_5 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_7_fired
				}
			}
			paris_commune_automation_pulse_7 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_8_fired
				}
			}
			paris_commune_automation_pulse_8 = yes
		}
		20 = {
			trigger = {
				NOT = {
					has_variable = paris_commune_automation_pulse_10_fired
				}
			}
			paris_commune_automation_pulse_10 = yes
		}
	}
}

# Simulates effect of paris_commune_pulse_events.1 - Commune PoV
paris_commune_automation_pulse_1 = {
	set_variable = { name = paris_commune_automation_pulse_1_fired months = short_modifier_time }
	# Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_interest_group = {
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_atheist
						has_ideology = ideology:ideology_communist
						has_ideology = ideology:ideology_anarchist
						has_ideology = ideology:ideology_vanguardist
					}
				}
			}
			save_scope_as = seize_church_ig_scope
		}
		capital = {
			save_scope_as = paris_scope
		}
		rel:atheist = {
			save_scope_as = atheist_scope
		}
	}
	# Variable Effects
	random_list = {
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 10
	        }
			c:PRC = {
				scope:seize_church_ig_scope = {
					add_modifier = {
						name = divine_forclosure_modifier
						months = short_modifier_time
					}
				}
				random_scope_state = {	
					convert_population = {
						target = rel:atheist
						value = 0.1
					}
				}
			}
			post_notification = paris_commune_automation_pulse_1_a
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 10
	        }
			c:PRC = {
				add_modifier = {
					name = the_riches_of_the_church_modifier
					months = short_modifier_time
				}
				every_interest_group = {
					limit = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_atheist
								has_ideology = ideology:ideology_communist
								has_ideology = ideology:ideology_anarchist
								has_ideology = ideology:ideology_vanguardist
							}
						}
						is_marginal = no
					}
					add_modifier = {
						name = capital_gains_modifier
						months = short_modifier_time
					}
				}
			}
			post_notification = paris_commune_automation_pulse_1_b
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			c:PRC = {
				scope:seize_church_ig_scope = {
					add_modifier = {
						name = secret_clubhouse_modifier
						months = short_modifier_time
					}
				}
				create_character = {
					is_agitator = yes
					religion = rel:atheist
					culture = cu:french
					interest_group = scope:seize_church_ig_scope
					ideology = ideology_atheist
				}
			}
			post_notification = paris_commune_automation_pulse_1_c
		}
	}
}

# Simulates effect of paris_commune_pulse_events.2 - Commune PoV
paris_commune_automation_pulse_2 = {
	set_variable = { name = paris_commune_automation_pulse_2_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	random_scope_character = {
		limit = {
			has_role = general
			is_busy = no
			is_heir = no
			is_ruler = no
		#	hq = region_france
		}
		save_scope_as = executed_general_scope
	}
	#Variable Effects
	random_list = {
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 10
	        }
			scope:executed_general_scope = {
				kill_character = yes
			}
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_social_democrat
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_social_democrat
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = one_hydra_head_claimed_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_2_a
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			scope:executed_general_scope = {
				set_variable = imprisoned_general_var
				add_modifier = {
					name = miraculous_survival_modifier
				}
				place_character_in_void = 10000
			}
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_moderate
									has_ideology = ideology:ideology_humanitarian
									has_ideology = ideology:ideology_humanitarian_royalist
									has_ideology = ideology:ideology_reformer
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_moderate
									has_ideology = ideology:ideology_humanitarian
									has_ideology = ideology:ideology_humanitarian_royalist
									has_ideology = ideology:ideology_reformer
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = airs_of_civility_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_2_b
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -5
	        }
			scope:executed_general_scope = {
				kill_character = yes
			}
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_jingoist_leader
									has_ideology = ideology:ideology_authoritarian
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_jingoist_leader
									has_ideology = ideology:ideology_authoritarian
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = war_is_the_answer_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_2_c
		}
	}
}

# Simulates effect of paris_commune_pulse_events.3 - Commune PoV
paris_commune_automation_pulse_3 = {
	set_variable = { name = paris_commune_automation_pulse_3_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	#Variable Effects
	random_list = {
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 10
	        }
			c:PRC = {
				add_modifier = {
					name = modifier_popular_defense_commune
					months = short_modifier_time
				}
				every_interest_group = {
					limit = {
						NOR = {
							is_interest_group_type = ig_armed_forces
							has_ideology = ideology:ideology_vanguardist
							has_ideology = ideology:ideology_communist
						}
						is_marginal = no
					}
					add_modifier = {
						name = wishful_initiative_modifier
						months = short_modifier_time
					}
				}
			}
			post_notification = paris_commune_automation_pulse_3_a
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -10
	        }
			c:PRC = {
				ig:ig_armed_forces = {
					add_modifier = {
						name = communard_citadel_modifier
						months = short_modifier_time
					}
				}
				if = {
					limit = {
						capital = {
							any_scope_building = {
								is_building_type = building_barracks
								level < 15
							}
						}
					}
					capital = {
						create_building={
							building="building_barracks"
							level=15
							reserves=1
						}
					}
				}
				activate_law = law_type:law_professional_army
			}
			c:PRC = {
				every_interest_group = {
					limit = {
						NOR = {
							is_interest_group_type = ig_armed_forces
							has_ideology = ideology:ideology_vanguardist
							has_ideology = ideology:ideology_communist
						}
						is_marginal = no
					}
					add_modifier = {
						name = wages_of_pragmatism_modifier
						months = short_modifier_time
					}
				}
			}
			post_notification = paris_commune_automation_pulse_3_b
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			c:PRC = {
				if = {
					limit = {
						capital = {
							any_scope_building = {
								is_building_type = building_barracks
								level < 10
							}
						}
					}
					capital = {
						create_building={
							building="building_barracks"
							level=10
							reserves=1
						}
					}
				}
				every_interest_group = {
					limit = {
						NOR = {
							is_interest_group_type = ig_armed_forces
							has_ideology = ideology:ideology_vanguardist
							has_ideology = ideology:ideology_communist
						}
						is_marginal = no
					}
					add_modifier = {
						name = wages_of_pragmatism_modifier
						months = short_modifier_time
					}
				}
			}
			post_notification = paris_commune_automation_pulse_3_c
		}
	}
}

# Simulates effect of paris_commune_pulse_events.4 - Commune PoV
paris_commune_automation_pulse_4 = {
	set_variable = { name = paris_commune_automation_pulse_4_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	#Variable Effects
	random_list = {
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 10
	        }
			s:STATE_ILE_DE_FRANCE = {
				add_devastation = 5
			}
			if = {
				limit = {
					any_interest_group = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_feminist
								AND = {
									is_female = yes
									OR = {
										has_ideology = ideology:ideology_radical
										has_ideology = ideology:ideology_communist
										has_ideology = ideology:ideology_social_democrat
										has_ideology = ideology:ideology_anarchist
										has_ideology = ideology:ideology_vanguardist
									}
								}
							}
						}
						is_marginal = no
					}
				}
				every_interest_group = {
					limit = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_feminist
								AND = {
									is_female = yes
									OR = {
										has_ideology = ideology:ideology_radical
										has_ideology = ideology:ideology_communist
										has_ideology = ideology:ideology_social_democrat
										has_ideology = ideology:ideology_anarchist
										has_ideology = ideology:ideology_vanguardist
									}
								}
							}
						}
						is_marginal = no
					}
					leader = {
						add_modifier = {
							name = accusations_of_hysterical_mania_modifier
							months = normal_modifier_time
						}
					}
				}
			}
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									AND = {
										is_female = yes
										OR = {
											has_ideology = ideology:ideology_radical
											has_ideology = ideology:ideology_communist
											has_ideology = ideology:ideology_social_democrat
											has_ideology = ideology:ideology_anarchist
											has_ideology = ideology:ideology_vanguardist
										}
									}
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									AND = {
										is_female = yes
										OR = {
											has_ideology = ideology:ideology_radical
											has_ideology = ideology:ideology_communist
											has_ideology = ideology:ideology_social_democrat
											has_ideology = ideology:ideology_anarchist
											has_ideology = ideology:ideology_vanguardist
										}
									}
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = rallying_cries_ignored_modifier
							months = short_modifier_time
						}
					}
				}		
			}
			post_notification = paris_commune_automation_pulse_4_a
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -10
	        }
			s:STATE_ILE_DE_FRANCE = {
				add_devastation = 5
			}
			if = {
				limit = {
					c:PRC = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_jingoist_leader
									has_ideology = ideology:ideology_authoritarian
								}
							}
						}
					}
				}
				c:PRC = {
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_jingoist_leader
									has_ideology = ideology:ideology_authoritarian
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = cries_of_havoc_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_4_b
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -5
	        }
			s:STATE_ILE_DE_FRANCE = {
				add_devastation = 10
			}
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									AND = {
										is_female = yes
										OR = {
											has_ideology = ideology:ideology_radical
											has_ideology = ideology:ideology_communist
											has_ideology = ideology:ideology_social_democrat
											has_ideology = ideology:ideology_anarchist
											has_ideology = ideology:ideology_vanguardist
										}
									}
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									AND = {
										is_female = yes
										OR = {
											has_ideology = ideology:ideology_radical
											has_ideology = ideology:ideology_communist
											has_ideology = ideology:ideology_social_democrat
											has_ideology = ideology:ideology_anarchist
											has_ideology = ideology:ideology_vanguardist
										}
									}
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = cries_of_havoc_modifier
							months = short_modifier_time
						}
					}
				}		
			}
			post_notification = paris_commune_automation_pulse_4_c
		}
	}
}

# Simulates effect of paris_commune_pulse_events.5 - Versailles PoV
paris_commune_automation_pulse_5 = {
	set_variable = { name = paris_commune_automation_pulse_5_fired months = short_modifier_time }
	#Shared Effects
	ig:ig_armed_forces = {
		save_scope_as = armed_forces_scope
	}
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	#Variable Effects
	random_list = {
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -5
	        }
			every_state = {
				limit = {
					state_region = s:STATE_ILE_DE_FRANCE
				}
				add_modifier = { name = modifier_slaughter_with_decrees months = 12 }
			}
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
									has_ideology = ideology:ideology_jingoist_leader
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
									has_ideology = ideology:ideology_jingoist_leader
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = unacceptable_losses_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_5_a
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -10
	        }
			every_state = {
				limit = {
					state_region = s:STATE_ILE_DE_FRANCE
				}
				add_modifier = { name = modifier_slaughter_with_decrees months = 12 multiplier = 2 }
			}
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
									has_ideology = ideology:ideology_jingoist_leader
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
									has_ideology = ideology:ideology_jingoist_leader
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = moral_high_ground_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_5_b
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
									has_ideology = ideology:ideology_jingoist_leader
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
									has_ideology = ideology:ideology_jingoist_leader
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = divisive_instigation_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_5_c
		}
	}
}

# Simulates effect of paris_commune_pulse_events.6 - Commune PoV
paris_commune_automation_pulse_6 = {
	set_variable = { name = paris_commune_automation_pulse_6_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	#Variable Effects
	random_list = {
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
									has_ideology = ideology:ideology_atheist
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
									has_ideology = ideology:ideology_atheist
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = to_strike_god_modifier
							months = short_modifier_time
						}
					}
				}
				capital = {	
					add_radicals_in_state = {
						value = small_radicals
						religion = rel:catholic
					}
				}
			}
			post_notification = paris_commune_automation_pulse_6_a
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -5
	        }
			if = {
				limit = {
					c:PRC = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_moderate
									has_ideology = ideology:ideology_reformer
									has_ideology = ideology:ideology_social_democrat
								}
							}
							is_marginal = no
						}
					}
				}
				c:PRC = {
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_moderate
									has_ideology = ideology:ideology_reformer
									has_ideology = ideology:ideology_social_democrat
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = virtue_of_mercy_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_6_b
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 10
	        }
			c:PRC = {
				if = {
					limit = {
						NOT = {
							has_law = law_type:law_state_atheism
						}
					}
					activate_law = law_type:law_state_atheism
				}
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_atheist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_atheist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = a_boldered_tomb_modifier
							months = short_modifier_time
						}
					}
				}
				capital = {	
					kill_population_percent_in_state = {
						percent = 0.05
						pop_type = clergymen
					}
					add_radicals_in_state = {
						value = medium_radicals
						religion = rel:catholic
					}
				}
			}
			post_notification = paris_commune_automation_pulse_6_c
		}
	}
}

# Simulates effect of paris_commune_pulse_events.7 - Versailles PoV
paris_commune_automation_pulse_7 = {
	set_variable = { name = paris_commune_automation_pulse_7_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	#Variable Effects
	random_list = {
		50 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -5
	        }
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_moderate
									has_ideology = ideology:ideology_reformer
									has_ideology = ideology:ideology_social_democrat
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_moderate
									has_ideology = ideology:ideology_reformer
									has_ideology = ideology:ideology_social_democrat
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = virtue_of_mercy_modifier
							months = short_modifier_time
						}
					}
				}	
			}
			post_notification = paris_commune_automation_pulse_7_a
		}
		50 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 10
	        }
			add_radicals = {
				value = small_radicals
				interest_group = ig:ig_trade_unions
			}
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_jingoist_leader
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_jingoist_leader
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = unacceptable_losses_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_7_b
		}
	}
}

# Simulates effect of paris_commune_pulse_events.8 - Versailles PoV
paris_commune_automation_pulse_8 = {
	set_variable = { name = paris_commune_automation_pulse_8_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}

	random_scope_character = {
		limit = {
			has_role = general
			is_busy = no
		#	hq = region_france 				
		}
		save_scope_as = cannon_seizing_general_scope
	}
	#Variable Effects
	random_list = {
		30 = {
			random_list = {
				60 = {
					change_global_variable = {
			            name = paris_commune_progress_var
			            add = -5
			        }
					scope:cannon_seizing_general_scope = {
						add_modifier = {
							name = first_blood_modifier
							months = short_modifier_time
						}
					}
					post_notification = paris_commune_automation_pulse_8_a1
				}
				40 = {
					change_global_variable = {
			            name = paris_commune_progress_var
			            add = 10
			        }
					scope:cannon_seizing_general_scope = {
						add_modifier = {
							name = humiliation_upon_humiliation_modifier
							months = short_modifier_time
						}
					}
					c:PRC = {
						if = {
							limit = {
								any_scope_character = {
									has_role = general
								}
							}	
							every_scope_character = {
								limit = {
									has_role = general
								}
								add_modifier = {
									name = military_defectors_modifier
									months = short_modifier_time
								}	
							}
						}
					}
					post_notification = paris_commune_automation_pulse_8_a2
				}
			}
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			c:PRC = {
				if = {
					limit = {
						any_scope_character = {
							has_role = general
						}
					}	
					every_scope_character = {
						limit = {
							has_role = general
						}
						add_modifier = {
							name = first_blood_modifier
							months = short_modifier_time
						}	
					}
				}
			}
			post_notification = paris_commune_automation_pulse_8_b
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -5
	        }
			c:PRC = {
				if = {
					limit = {
						any_scope_character = {
							has_role = general
						}
					}	
					every_scope_character = {
						limit = {
							has_role = general
						}
						add_modifier = {
							name = first_blood_modifier
							months = short_modifier_time
							multiplier = 0.5
						}	
					}
				}
			}
			post_notification = paris_commune_automation_pulse_8_c
		}
	}
}

# Simulates effect of paris_commune_pulse_events.9 - Commune PoV
paris_commune_automation_pulse_9 = {
	set_variable = { name = paris_commune_automation_pulse_9_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	c:PRC = {
		random_interest_group = {
			limit = {
				leader = {
					OR = {
						has_ideology = ideology:ideology_feminist
						AND = {
							is_female = yes
							OR = {
								has_ideology = ideology:ideology_radical
								has_ideology = ideology:ideology_communist
								has_ideology = ideology:ideology_social_democrat
								has_ideology = ideology:ideology_anarchist
								has_ideology = ideology:ideology_vanguardist
							}
						}
					}
				}
				is_marginal = no
			}
			save_scope_as = paris_feminist_ig_scope
		}
	}
	random_interest_group = {
		limit = {
			is_same_interest_group_type = scope:paris_feminist_ig_scope
		}
		save_scope_as = france_feminist_ig_scope
	}
	c:FRA = {
		save_scope_as = france_scope
	}
	#Variable Effects
	random_list = {
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									AND = {
										is_female = yes
										OR = {
											has_ideology = ideology:ideology_radical
											has_ideology = ideology:ideology_communist
											has_ideology = ideology:ideology_social_democrat
											has_ideology = ideology:ideology_anarchist
											has_ideology = ideology:ideology_vanguardist
										}
									}
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									AND = {
										is_female = yes
										OR = {
											has_ideology = ideology:ideology_radical
											has_ideology = ideology:ideology_communist
											has_ideology = ideology:ideology_social_democrat
											has_ideology = ideology:ideology_anarchist
											has_ideology = ideology:ideology_vanguardist
										}
									}
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = assertion_of_rights_modifier
							months = short_modifier_time
						}
					}
				}	
			}
			random_list = {
				50 = {
					trigger = {
						NOT = {
							any_scope_character = {
								has_role = agitator
								has_ideology = ideology:ideology_feminist
							}
						}
					}
					create_character = {
						is_agitator = yes
						interest_group = scope:france_feminist_ig_scope
						ideology = ideology_feminist
					}
					post_notification = paris_commune_automation_pulse_9_a1
				}
				50 = {
					post_notification = paris_commune_automation_pulse_9_a2
				}
			}
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -5
	        }
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									AND = {
										is_female = yes
										OR = {
											has_ideology = ideology:ideology_radical
											has_ideology = ideology:ideology_communist
											has_ideology = ideology:ideology_social_democrat
											has_ideology = ideology:ideology_anarchist
											has_ideology = ideology:ideology_vanguardist
										}
									}
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									AND = {
										is_female = yes
										OR = {
											has_ideology = ideology:ideology_radical
											has_ideology = ideology:ideology_communist
											has_ideology = ideology:ideology_social_democrat
											has_ideology = ideology:ideology_anarchist
											has_ideology = ideology:ideology_vanguardist
										}
									}
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = lingering_male_gaze_modifier
							months = short_modifier_time
						}
					}
				}	
			}
			post_notification = paris_commune_automation_pulse_9_b
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -5
	        }
			c:PRC = {
				ig:ig_devout = {
					add_modifier = {
						name = fruit_of_the_loin_modifier
						months = short_modifier_time
					}
				}
			}
			post_notification = paris_commune_automation_pulse_9_c
		}
	}
}

# Simulates effect of paris_commune_pulse_events.10 - Versailles PoV
paris_commune_automation_pulse_10 = {
	set_variable = { name = paris_commune_automation_pulse_10_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	random_scope_character = {
		limit = {
			has_role = general
			is_busy = no
		#	hq = region_france 
		}
		save_scope_as = issy_general
	}
	#Variable Effects
	random_list = {
		50 = {
			random_list = {
				60 = {
					change_global_variable = {
						name = paris_commune_progress_var
						add = 10
					}
					if = {
						limit = {
							c:PRC = {
								any_interest_group = {
									leader = {
										has_ideology = ideology:ideology_jingoist_leader
									}
								}
							}
						}
						c:PRC = {
							every_interest_group = {
								limit = {
									leader = {
										has_ideology = ideology:ideology_jingoist_leader
									}
									is_marginal = no
								}
								add_modifier = {
									name = unacceptable_losses_modifier
									months = short_modifier_time
								}
							}
						}
					}
					post_notification = paris_commune_automation_pulse_10_a1
				}
				40 = {
					change_global_variable = {
						name = paris_commune_progress_var
						add = 5
					}
					if = {
						limit = {
							c:PRC = {
								any_interest_group = {
									leader = {
										OR = {
											has_ideology = ideology:ideology_moderate
											has_ideology = ideology:ideology_social_democrat
										}
									}
									is_marginal = no
								}
							}
						}
						c:PRC = {
							every_interest_group = {
								limit = {
									leader = {
										OR = {
											has_ideology = ideology:ideology_moderate
											has_ideology = ideology:ideology_social_democrat
										}
									}
									is_marginal = no
								}
								add_modifier = {
									name = an_olive_branch_modifier
									months = short_modifier_time
								}
							}
						}
					}
					post_notification = paris_commune_automation_pulse_10_a2
				}
			}
		}
		50 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -10
	        }
			add_modifier = {
				name = guidelines_of_engagement_modifier
				months = normal_modifier_time		
			}
			scope:issy_general = {
				if = {
					limit = {
						NOT = {
							has_trait = war_criminal
						}
					}
					add_trait = war_criminal
				}
			}
			post_notification = paris_commune_automation_pulse_10_b
		}
	}
}

# Simulates effect of paris_commune_pulse_events.11 - Commune PoV
paris_commune_automation_pulse_11 = {
	set_variable = { name = paris_commune_automation_pulse_11_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	#Variable Effects
	random_list = {
		50 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			c:PRC = {
				every_interest_group = {
					limit = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_social_democrat
								has_ideology = ideology:ideology_radical
							}
						}
						is_marginal = no
					}
					add_modifier = {
						name = a_rapturous_promise_modifier
						months = short_modifier_time
					}
				}
				if = {
					limit = {
						has_law = law_type:law_council_republic
						NOT = {
							has_law = law_type:law_cooperative_ownership
						}
					}
					activate_law = law_type:law_cooperative_ownership
				}
			}
			post_notification = paris_commune_automation_pulse_11_a
		}
		50 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -5
	        }
			c:PRC = {
				every_interest_group = {
					limit = {
						leader = {
							OR = {
								has_ideology = ideology:ideology_communist
								has_ideology = ideology:ideology_vanguardist
								has_ideology = ideology:ideology_anarchist
							}
						}
						is_marginal = no
					}
					add_modifier = {
						name = dominating_narratives_modifier
						months = short_modifier_time
					}
				}
				if = {
					limit = {
						has_law = law_type:law_council_republic
						NOT = {
							has_law = law_type:law_cooperative_ownership
						}
					}
					activate_law = law_type:law_cooperative_ownership
				}
			}
			post_notification = paris_commune_automation_pulse_11_b
		}
	}
}

# Simulates effect of paris_commune_pulse_events.12 - Commune PoV
paris_commune_automation_pulse_12 = {
	set_variable = { name = paris_commune_automation_pulse_12_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
		random_interest_group = {
			limit = {
				law_stance = {
					law = law_type:law_compulsory_primary_school
					value > neutral
				}	
			}
			save_scope_as = paris_radical_ig_scope
		}
	}
	random_interest_group = {
		limit = {
			is_same_interest_group_type = scope:paris_radical_ig_scope
		}
		save_scope_as = france_radical_ig_scope
	}
	c:FRA = {
		save_scope_as = france_scope
	}
	#Variable Effects
	random_list = {
		30 = {
			c:PRC = {
				every_interest_group = {
					limit = {
						law_stance = {
							law = law_type:law_compulsory_primary_school
							value > neutral
						}
						is_marginal = no
					}
					add_modifier = {
						name = to_inherit_the_earth_modifier
						months = short_modifier_time
					}
					leader = {
						add_modifier = {
							name = to_inherit_the_earth_char_modifier
							months = short_modifier_time
						}
					}
				}
			}	
			post_notification = paris_commune_automation_pulse_12_a
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			ig:ig_armed_forces = {
				add_modifier = {
					name = child_soldiery_modifier
					months = short_modifier_time				
				}
			}
			if = {
				limit = {
					c:PRC = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_jingoist_leader
									has_ideology = ideology:ideology_authoritarian
								}
							}
							is_marginal = no
						}
					}
				}
				c:PRC = {
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_jingoist_leader
									has_ideology = ideology:ideology_authoritarian
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = strong_borders_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_12_b
		}
		30 = {
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							law_stance = {
								law = law_type:law_compulsory_primary_school
								value > neutral
							}
						}
					}
					every_interest_group = {
						limit = {
							law_stance = {
								law = law_type:law_compulsory_primary_school
								value > neutral
							}
							is_marginal = no
						}
						add_modifier = {
							name = a_learning_future_modifier
							months = short_modifier_time
						}
					}
				}
				if = {
					limit = {
						NOT = {
							has_law = law_type:law_compulsory_primary_school
						}
					}
					activate_law = law_type:law_compulsory_primary_school
				}
			}
			random_list = {
				50 = {
					trigger = {
						NOT = {
							any_scope_character = {
								has_role = agitator
								has_ideology = ideology:ideology_radical
							}
						}
					}
					create_character = {
						is_agitator = yes
						interest_group = scope:france_radical_ig_scope
						ideology = ideology_radical
					}
					post_notification = paris_commune_automation_pulse_12_c1
				}
				50 = {
					post_notification = paris_commune_automation_pulse_12_c2
				}
			}
		}
	}
}

# Simulates effect of paris_commune_pulse_events.13 - Commune PoV
paris_commune_automation_pulse_13 = {
	set_variable = { name = paris_commune_automation_pulse_13_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	#Variable Effects
	random_list = {
		30 = {
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_authoritarian
								}
							}
							is_marginal = no
						}
					}		
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_authoritarian
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = holy_meat_shields_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_13_a
		}
		30 = {
			if = {
				limit = {
					c:PRC = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_moderate
									has_ideology = ideology:ideology_social_democrat
								}
							}
							is_marginal = no
						}
					}
				}
				c:PRC = {
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_moderate
									has_ideology = ideology:ideology_social_democrat
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = virtue_of_mercy_modifier
							months = short_modifier_time
						}
					}
				}
			}
			scope:paris_scope = {
				add_loyalists_in_state = {
					pop_type = clergymen
					value = small_radicals
				}
			}
			post_notification = paris_commune_automation_pulse_13_b
		}
		30 = {
			if = {
				limit = {
					c:PRC = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_atheist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
					}
				}
				c:PRC = {
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_atheist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = to_strike_god_modifier
							months = short_modifier_time
						}
					}
				}
			}
			scope:paris_scope = {
				add_radicals_in_state = {
					pop_type = clergymen
					value = medium_radicals
				}
			}
			post_notification = paris_commune_automation_pulse_13_c
		}
	}
}

# Simulates effect of paris_commune_pulse_events.14 - Commune PoV
paris_commune_automation_pulse_14 = {
	set_variable = { name = paris_commune_automation_pulse_14_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	#Variable Effects
	random_list = {
		30 = {
			if = {
				limit = {
					c:PRC = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_authoritarian
									has_ideology = ideology:ideology_jingoist_leader
								}
							}
							is_marginal = no
						}
					}
				}
				c:PRC = {
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_authoritarian
									has_ideology = ideology:ideology_jingoist_leader
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = winning_minds_modifier
							months = short_modifier_time
						}
					}
				}
			}
			c:PRC = {
				every_scope_character = {
					limit = {
						has_role = general
					}
					add_modifier = {
						name = all_that_which_opposes_us_modifier
						months = short_modifier_time
					}
				}
			}
			post_notification = paris_commune_automation_pulse_14_a
		}
		30 = {
			if = {
				limit = {
					c:PRC = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
					}
				}
				c:PRC = {
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = winning_minds_modifier
							months = short_modifier_time
						}
					}
				}
			}
			c:PRC = {
				every_scope_character = {
					limit = {
						has_role = general
					}
					add_modifier = {
						name = the_peoples_champions_modifier
						months = short_modifier_time
					}
				}
			}
			post_notification = paris_commune_automation_pulse_14_b
		}
		30 = {
			if = {
				limit = {
					c:PRC = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_social_democrat
									has_ideology = ideology:ideology_republican_leader
								}
							}
							is_marginal = no
						}
					}
				}
				c:PRC = {
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_social_democrat
									has_ideology = ideology:ideology_republican_leader
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = winning_minds_modifier
							months = short_modifier_time
						}
					}
				}
			}
			c:PRC = {
				every_scope_character = {
					limit = {
						has_role = general
					}
					add_modifier = {
						name = for_homes_and_lives_modifier
						months = short_modifier_time
					}
				}
			}
			post_notification = paris_commune_automation_pulse_14_c
		}
	}
}

# Simulates effect of paris_commune_pulse_events.15 - Commune PoV
paris_commune_automation_pulse_15 = {
	set_variable = { name = paris_commune_automation_pulse_15_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
		random_scope_character = {
			limit = {
				OR = {
					has_ideology = ideology:ideology_communist
					has_ideology = ideology:ideology_anarchist
					has_ideology = ideology:ideology_vanguardist
				}
			}
			save_scope_as = commune_leftist_leader
		}
	}
	#Variable Effects
	random_list = {
		50 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = -5
	        }
			if = {
				limit = {
					has_law = law_type:law_monarchy
				}
				add_loyalists = {
					value = small_radicals
				}
			}
			else_if = {
				add_radicals = {
					value = small_radicals
				}
			}
			c:PRC = {
				if = {
					limit = {
						NOT = {
							has_law = law_type:law_council_republic
						}
					}
					activate_law = law_type:law_council_republic
				}
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = a_glorious_dictatorship_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_15_a
		}
		50 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			if = {
				limit = {
					has_law = law_type:law_monarchy
				}
				ruler = {
					add_modifier = {
						name = an_enemy_of_the_republic
						months = normal_modifier_time					
					}
				}
			}
			else_if = {
				add_radicals = {
					strata = poor
					value = small_radicals
				}
			}
			c:PRC = {
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_social_democrat
									has_ideology = ideology:ideology_radical
								}
							}
							is_marginal = no
						}
					}
					custom_tooltip = {
						text = communard_effects_header_tt
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_social_democrat
									has_ideology = ideology:ideology_radical
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = democracy_stands_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_15_b
		}
	}
}

# Simulates effect of paris_commune_pulse_events.16 - Commune PoV
paris_commune_automation_pulse_16 = {
	set_variable = { name = paris_commune_automation_pulse_16_fired months = short_modifier_time }
	#Shared Effects
	c:PRC = {
		save_scope_as = paris_commune_nation_scope
		random_scope_state = {
			limit = {
				state_region = s:STATE_ILE_DE_FRANCE
			}
			save_scope_as = paris_scope		
		}
	}
	if = {
		limit = {
			c:PRC = {
				any_interest_group = {
					leader = {
						OR = {
							has_ideology = ideology:ideology_feminist
							has_ideology = ideology:ideology_radical
							has_ideology = ideology:ideology_communist
							has_ideology = ideology:ideology_anarchist
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
			}
		}
		c:PRC = {
			random_interest_group = {
				limit = {
					leader = {
						OR = {
							has_ideology = ideology:ideology_feminist
							has_ideology = ideology:ideology_radical
							has_ideology = ideology:ideology_communist
							has_ideology = ideology:ideology_anarchist
							has_ideology = ideology:ideology_vanguardist
						}
					}
				}
				save_scope_as = paris_radical_ig_scope
			}
		}
	}
	#Variable Effects
	random_list = {
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 5
	        }
			c:PRC = {
				add_modifier = {
					name = modifier_woman_soldiers
					months = short_modifier_time
					multiplier = 0.5
				}
				c:PRC = {
					add_loyalists = {
						value = medium_radicals
						pop_type = soldiers
					}
				}
			}
			post_notification = paris_commune_automation_pulse_16_a
		}
		30 = {
			c:PRC = {
				every_interest_group = {
					limit = {
						law_stance = {
							law = law_type:law_women_in_the_workplace
							value < neutral
						}
						is_marginal = no
					}
					add_modifier = {
						name = modifier_progressives_stalled
						months = short_modifier_time
					}
				}
				if = {
					limit = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
					}
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = rallying_cries_ignored_modifier
							months = short_modifier_time
						}
					}
				}
			}	
			post_notification = paris_commune_automation_pulse_16_b
		}
		30 = {
			change_global_variable = {
	            name = paris_commune_progress_var
	            add = 10
	        }
			c:PRC = {
				add_modifier = {
					name = modifier_woman_soldiers
					months = short_modifier_time
				}
				add_radicals = {
					value = medium_radicals
				}
			}
			if = {
				limit = {
					c:PRC = {
						any_interest_group = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
					}
				}
				c:PRC = {
					every_interest_group = {
						limit = {
							leader = {
								OR = {
									has_ideology = ideology:ideology_feminist
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
							is_marginal = no
						}
						add_modifier = {
							name = cries_of_havoc_modifier
							months = short_modifier_time
						}
					}
				}
			}
			post_notification = paris_commune_automation_pulse_16_c
		}
	}
}
﻿assign_taiping_states = {
	c:TPG = {
		create_military_formation = {
			type = army
			hq_region = scope:heavenly_kingdom_spawn.region #Because the Heavenly Kingdom is not always in South China.

			combat_unit = {
				type = unit_type:combat_unit_type_irregular_infantry
				state_region = scope:heavenly_kingdom_spawn.state_region
				count = 10
			}

			combat_unit = {
				type = unit_type:combat_unit_type_cannon_artillery
				state_region = scope:heavenly_kingdom_spawn.state_region
				count = 5
			}
		}
	}
	if = {
		limit = {
			any_scope_state = {
				has_variable = cult_center
			}
		}
		every_scope_state = {
			limit = {
				has_variable = cult_center
			}
			save_scope_as = tpg_defector_state
			custom_tooltip = {
				text = taiping_state_defection
				set_state_owner = c:TPG
				set_state_type = incorporated
				add_culture_standard_of_living_modifier = {
					culture = cu:manchu
					months = long_modifier_time
					multiplier = -5
				}
			}
		}
		every_scope_state = {
			limit = {
				is_capital = no
				NOT = { 
					has_variable = cult_center 
					state_region = { 
						is_homeland = cu:manchu
					}
				}
				any_neighbouring_state = {
					has_variable = cult_center
				}
				turmoil >= 0.1
			}
			if = {
				limit = {
					this = {
						state_region = { 
							OR = {
								is_homeland = cu:han 
								is_homeland = cu:hakka 
							}
						}
					}
				}
				save_scope_as = tpg_defector_state
				custom_tooltip = {
					text = taiping_state_defection
					set_state_owner = c:TPG
					set_state_type = incorporated
					add_culture_standard_of_living_modifier = {
						culture = cu:manchu
						months = long_modifier_time
						multiplier = -5
					}
					c:TPG = {
						create_military_formation = {
							type = army
							hq_region = scope:tpg_defector_state.region
				
							combat_unit = {
								type = unit_type:combat_unit_type_irregular_infantry
								state_region = scope:tpg_defector_state.state_region
								count = 5
							}
						}
					}
				}
				
			}
			else_if = {
				random_list = {
					50 = {
						save_scope_as = tpg_defector_state
						custom_tooltip = {
							text = taiping_state_defection
							set_state_owner = c:TPG
							set_state_type = incorporated
							add_culture_standard_of_living_modifier = {
								culture = cu:manchu
								months = long_modifier_time
								multiplier = -5
							}
							c:TPG = {
								create_military_formation = {
									type = army
									hq_region = scope:tpg_defector_state.region
						
									combat_unit = {
										type = unit_type:combat_unit_type_irregular_infantry
										state_region = scope:tpg_defector_state.state_region
										count = 5
									}
								}
							}
						}
					}
					50 = {
						add_radicals_in_state = {
							value = very_large_radicals
							religion = rel:protestant
						}
						this.state_region = {
							add_claim = c:TPG
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		every_state = {
			limit = {
				owner = c:TPG
			}
			this.state_region = {
				add_claim = c:CHI
			}
		}	
	}
	hidden_effect = {
		every_state = {
			limit = {
				owner = c:TPG
			}
			add_modifier = {
				name = modifier_taiping_hiring_bonus
				months = 6
			}
		}
	}
}

create_taiping_characters = {
	if = {
		limit = {
			game_date < 1880.1.1
			NOT = { #If you exiled Hong and he got recruited somewhere else, he doesn't get to be here.
				any_country = {
					NOT = {
						this = c:CHI
					}
					any_scope_character = {
						has_variable = hong_var
					}
				}
			}
		}
		create_character = {
			first_name = Hong
			last_name = Xiuquan
			birth_date = 1814.1.1
			culture = cu:hakka
			religion = rel:protestant
			interest_group = ig_devout
			ruler = yes
			historical = yes
			ideology = ideology_theocrat
			traits = {
				inspirational_orator
				persistent
				psychological_affliction
			}
			on_created = {
				set_variable = hong_var
				add_modifier = {
					name = modifier_brother_of_christ
					months = long_modifier_time
				}
			}
		}
		if = {
			limit = {
				game_date > 1847.1.1
			}
			create_character = {
				first_name = Hong
				last_name = Tianguifu
				birth_date = 1846.6.6
				culture = cu:hakka
				historical = yes
				religion = rel:protestant
				interest_group = ig_devout
				heir = yes
				ideology = ideology_moderate
				traits = {
					reserved 
				}
			}
		}
	}
	else = { #Fallback chars if Hong is unavailable.
		create_character = {
			religion = rel:protestant
			interest_group = ig_devout
			ideology = ideology_theocrat
			ruler = yes
			traits = {
				inspirational_orator
				persistent
				psychological_affliction
			}
			on_created = {
				add_modifier = {
					name = modifier_brother_of_christ
					months = long_modifier_time
				}
			}
		}

		create_character = {
			religion = rel:protestant
			interest_group = ig_devout
			heir = yes
			ideology = ideology_moderate
		}
	}

	if = {
		limit = {
			game_date > 1841.1.1
			game_date < 1880.1.1
		}
		create_character = {
			first_name = Yang
			last_name = Xiuqing
			birth_date = 1821.9.23
			culture = cu:han
			religion = rel:protestant
			is_general = yes
			ig_leader = yes
			historical = yes
			interest_group = ig_armed_forces
			hq = region_south_china
			ideology = ideology_theocrat
			commander_rank = commander_rank_3
			traits = {
				grifter
				expert_political_operator
				ambitious
				demagogue
			}
		}
	}
	if = {
		limit = {
			game_date > 1840.1.1
			game_date < 1880.1.1
		}
		create_character = {
			first_name = Xiao
			last_name = Chaogui
			birth_date = 1820.1.1
			culture = cu:hakka
			religion = rel:protestant
			is_general = yes
			ig_leader = yes
			historical = yes
			interest_group = ig_devout
			hq = region_south_china
			ideology = ideology_theocrat
			commander_rank = commander_rank_1
			traits = {
				reckless
				charismatic
				demagogue
			}
		}
	}
	if = {
		limit = {
			game_date > 1842.1.1
			game_date < 1880.1.1
		}
		create_character = {
			first_name = Hong
			last_name = Rengan
			birth_date = 1822.2.18
			culture = cu:han
			religion = rel:protestant
			ig_leader = yes
			historical = yes
			interest_group = ig_intelligentsia
			ideology = ideology_market_liberal
			traits = {
				innovative
				persistent
				basic_diplomat
			}
		}
	}
}

# Vicky and the Expedition Machine
ai_expedition_simulator_start = {
	random_scope_character = {
		limit = {
			is_ruler = no
			OR = {
				has_role = general
				has_role = admiral
			}
		}
		set_variable = expedition_leader_var
		set_character_busy_and_immortal = yes
	}
	set_variable = on_expedition
	add_modifier = {
		name = modifier_large_expedition_cost
		multiplier = money_amount_multiplier_medium
	}
	trigger_event = { id = ai_expedition_simulator.1 days = 365 }
}

ai_expedition_simulator_end = {
	remove_variable = on_expedition
	remove_modifier = modifier_large_expedition_cost
	remove_modifier = expedition_extra_expenses_modifier
	remove_variable = AI_EXPEDITION_ANTARCTICA
	remove_variable = AI_EXPEDITION_NILE
	remove_variable = AI_EXPEDITION_CONGO
	remove_variable = AI_EXPEDITION_NIGER
	remove_variable = AI_EXPEDITION_WAMERICA
	remove_expedition_events_effect = yes
	random_scope_character = {
		limit = {
			has_variable = expedition_leader_var
		}
		remove_variable = expedition_leader_var
	}
}


voyage_of_potemkin = {
	while = { 
		limit = { 
			any_state = {
				has_variable = potemkin_destination_state
				OR = {
					owner = ROOT
					owner = {
						is_subject_of = ROOT
					}
				}
			}
		}  
		random_state = {
			limit = {
				has_variable = potemkin_destination_state
			}
			remove_variable = potemkin_destination_state
			random_neighbouring_state = {
				limit = {
					is_coastal = yes
				}
				set_variable = potemkin_destination_state
			}
			debug_log_scopes = yes
		}	
	}	
	random_state = {
		limit = {
			has_variable = potemkin_destination_state
		}
		remove_variable = potemkin_destination_state
		owner = {
			save_scope_as = potemkin_final_destination
		}
	}
}

adopt_random_antigovernment_ideology = {
	custom_tooltip = {
		text = adopt_random_antigovernment_ideology_tt
		random_list = { 
			50 = {
				trigger = {
					owner = {
						has_technology_researched = socialism
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_social_democrat	
							}
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								has_law = law_type:law_council_republic
							}
						}
						add = 50
					}
				}
				set_ideology = ideology:ideology_social_democrat
			}
			100 = {
				trigger = {
					owner = {
						has_technology_researched = socialism
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_communist	
							}
						}
						NOT = {
							has_law = law_type:law_council_republic
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								has_law = law_type:law_monarchy
							}
						}
						add = 25
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_autocracy
							}
						}
						add = 25
					}
					if = {
						limit = {
							this.interest_group = {
								is_interest_group_type = ig_trade_unions
							}
						}
						add = 100
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_fascist
									has_ideology = ideology:ideology_integralist
									has_ideology = ideology:ideology_ethno_nationalist
									has_ideology = ideology:ideology_traditionalist
								}
							}
						}
						add = 100
					}
				}
				set_ideology = ideology:ideology_communist
			}
			100 = {
				trigger = {
					owner = {
						has_technology_researched = political_agitation
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_vanguardist	
							}
						}
						NOT = {
							has_law = law_type:law_council_republic
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								has_law = law_type:law_monarchy
							}
						}
						add = 25
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_autocracy
							}
						}
						add = 25
					}
					if = {
						limit = {
							this.interest_group = {
								is_interest_group_type = ig_trade_unions
							}
						}
						add = 100
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_fascist
									has_ideology = ideology:ideology_integralist
									has_ideology = ideology:ideology_ethno_nationalist
									has_ideology = ideology:ideology_traditionalist
								}
							}
						}
						add = 100
					}
				}
				set_ideology = ideology:ideology_vanguardist
			}
			100 = {
				trigger = {
					owner = {
						has_technology_researched = anarchism
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_anarchist	
							}
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								has_law = law_type:law_monarchy
							}
						}
						add = 25
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_autocracy
							}
						}
						add = 50
					}
					if = {
						limit = {
							this.interest_group = {
								OR = {
									is_interest_group_type = ig_trade_unions
									is_interest_group_type = ig_rural_folk
								}
							}
						}
						add = 100
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_fascist
									has_ideology = ideology:ideology_integralist
									has_ideology = ideology:ideology_ethno_nationalist
									has_ideology = ideology:ideology_traditionalist
								}
							}
						}
						add = 100
					}
				}
				set_ideology = ideology:ideology_anarchist
			}
			100 = {
				trigger = {
					owner = {
						has_technology_researched = political_agitation
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_ethno_nationalist	
							}
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_feminist
									has_ideology = ideology:ideology_humanitarian
									has_ideology = ideology:ideology_humanitarian_royalist
									has_ideology = ideology:ideology_social_democrat
								}
							}
						}
						add = 50
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
						}
						add = 100
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_fascist
									has_ideology = ideology:ideology_integralist
									has_ideology = ideology:ideology_ethno_nationalist
									has_ideology = ideology:ideology_traditionalist
								}
							}
						}
						multiply = {
							value = 0.25
						}
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_no_migration_controls
							}
						}
						add = 100
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_multicultural
							}
						}
						multiply = {
							value = 3
						}
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_cultural_exclusion
							}
						}
						multiply = {
							value = 2
						}
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_council_republic
							}
						}
						multiply = {
							value = 1.5
						}
					}
				}
				set_ideology = ideology:ideology_ethno_nationalist
			}
			50 = {
				trigger = {
					owner = {
						has_technology_researched = realism
						has_law = law_type:law_state_religion
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_atheist	
							}
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								has_law = law_type:law_monarchy
							}
						}
						add = 50
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_state_religion
							}
						}
						add = 100
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_theocracy
							}
						}
						add = 200
					}
				}
				set_ideology = ideology:ideology_atheist
			}
			50 = {
				trigger = {
					owner = {
						has_technology_researched = egalitarianism
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_radical	
							}
						}
					}
				}
				modifier = {	
					if = {
						limit = {
							owner = {
								has_law = law_type:law_monarchy
							}
						}
						add = 100
					}	
					if = {
						limit = {
							owner = {
								has_law = law_type:law_autocracy
							}
						}
						add = 100
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_oligarchy
							}
						}
						add = 50
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_landed_voting
							}
						}
						add = 25
					}
				}
				set_ideology = ideology:ideology_radical
			}
			100 = {
				trigger = {
					owner = {
						has_technology_researched = mass_propaganda
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_fascist	
								has_ideology = ideology:ideology_integralist
							}
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_feminist
									has_ideology = ideology:ideology_humanitarian
									has_ideology = ideology:ideology_humanitarian_royalist
									has_ideology = ideology:ideology_social_democrat
								}
							}
						}
						add = 50
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
						}
						add = 100
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_fascist
									has_ideology = ideology:ideology_integralist
									has_ideology = ideology:ideology_ethno_nationalist
									has_ideology = ideology:ideology_traditionalist
								}
							}
						}
						multiply = {
							value = 0.25
						}
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_council_republic
							}
						}
						multiply = {
							value = 2
						}
					}
				}
				set_ideology = ideology:ideology_fascist
			}
			50 = {
				trigger = {
					owner = {
						has_technology_researched = stock_exchange
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_market_liberal	
							}
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								has_law = law_type:law_command_economy
							}
						}
						add = 50
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_traditionalism
							}
						}
						add = 50
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_isolationism
							}
						}
						add = 50
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
						}
						add = 100
					}
				}
				set_ideology = ideology:ideology_market_liberal
			}
			50 = {
				trigger = {
					owner = {
						has_technology_researched = romanticism
						OR = {
							has_law = law_type:law_command_economy
							has_law = law_type:law_laissez_faire
							has_law = law_type:law_interventionism
						}
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_luddite	
							}
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								any_scope_state = {
									any_scope_building = {
										is_building_group = bg_heavy_industry
										level >= 5
									}
									state_unemployment_rate > 0.1
								}
							}
						}
						add = 25
					}
					if = {
						limit = {
							owner = {
								any_scope_building = {
									is_building_group = bg_heavy_industry
									level >= 5
								}
							}
						}
						add = 25
					}
					if = {
						limit = {
							OR = {
								is_interest_group_type = ig_rural_folk
								is_interest_group_type = ig_devout
							}
						}
						add = 50
					}
					if = {
						limit = {
							NOR = {
								is_interest_group_type = ig_rural_folk
								is_interest_group_type = ig_devout
							}
						}
						add = -50
					}
					if = {
						limit = {
							owner = {
								has_ruling_interest_group = ig_industrialists
							}
						}
						multiply = {
							value = 2
						}
					}
					if = {
						limit = {
							owner = {
								has_ruling_interest_group = ig_rural_folk
							}
						}
						multiply = {
							value = 0.25
						}
					}
				}
				set_ideology = ideology:ideology_luddite
			}
			50 = {
				trigger = {
					owner = {
						has_technology_researched = feminism
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_feminist	
							}
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								has_law = law_type:law_monarchy
							}
						}
						add = 25
					}
				}
				set_ideology = ideology:ideology_feminist
			}
			50 = {
				trigger = {
					owner = {
						has_technology_researched = feminism
						NOT = {
							ruler = {
								OR = {
									has_ideology = ideology:ideology_humanitarian	
									has_ideology = ideology:ideology_humanitarian_royalist
								}
							}
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								has_law = law_type:law_monarchy
							}
						}
						add = 25
					}
				}
				set_ideology = ideology:ideology_humanitarian
			}

			50 = {
				trigger = {
					NOT = {	
						owner.ruler = {
							has_ideology = ideology:ideology_traditionalist	
						}
					}
				}
				modifier = {
					if = {
						limit = {
							this.interest_group = {
								OR = {
									is_interest_group_type = ig_landowners
									is_interest_group_type = ig_devout
								}
							}
						}
						multiply = {
							value = 2
						}
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_radical
									has_ideology = ideology:ideology_feminist
									has_ideology = ideology:ideology_humanitarian	
									has_ideology = ideology:ideology_humanitarian_royalist
									has_ideology = ideology:ideology_social_democrat
								}
							}
						}
						add = 50
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_communist
									has_ideology = ideology:ideology_anarchist
									has_ideology = ideology:ideology_vanguardist
								}
							}
						}
						add = 100
					}
					if = {
						limit = {
							owner.ruler = {
								OR = {
									has_ideology = ideology:ideology_fascist
									has_ideology = ideology:ideology_integralist
									has_ideology = ideology:ideology_ethno_nationalist
									has_ideology = ideology:ideology_traditionalist
								}
							}
						}
						multiply = {
							value = 0.25
						}
					}
					if = {
						limit = {
							this.interest_group = {
								OR = {
									is_interest_group_type = ig_intelligentsia
									is_interest_group_type = ig_industrialists
									is_interest_group_type = ig_trade_unions
								}
							}
						}
						multiply = {
							value = 0.2
						}
					}
				}
				set_ideology = ideology:ideology_traditionalist
			}

			50 = {
				trigger = {
					NOT = {	
						owner.ruler = {
							has_ideology = ideology:ideology_republican_leader	
						}
					}
					owner = {
						has_law = law_type:law_monarchy
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								has_law = law_type:law_monarchy
							}
						}
						multiply = {
							value = 2
						}
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_autocracy
							}
						}
						multiply = {
							value = 2
						}
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_oligarchy
							}
						}
						add = 25
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_landed_voting
							}
						}
						add = 25
					}
					if = {
						limit = {
							this.interest_group = {
								is_interest_group_type = ig_landowners
							}
						}
						multiply = {
							value = 0.10
						}
					}
				}
				set_ideology = ideology:ideology_republican_leader
			}

			50 = {
				trigger = {
					owner = {
						NOT = {
							ruler = {
								has_ideology = ideology:ideology_abolitionist	
							}
						}
						OR = {
							has_law = law_type:law_serfdom
							NOT = {
								has_law = law_type:law_slavery_banned
							}
						}
					}
				}
				modifier = {
					if = {
						limit = {
							owner = {
								has_law = law_type:law_serfdom
							}
						}
						add = 25
					}
					if = {
						limit = {
							owner = {
								NOT = {
									has_law = law_type:law_slavery_banned
								}
							}
						}
						add = 25
					}
					if = {
						limit = {
							owner = {
								has_law = law_type:law_slave_trade
							}
						}
						add = 50
					}
					if = {
						limit = {
							this.interest_group = {
								is_interest_group_type = ig_landowners
							}
						}
						multiply = {
							value = 0.05
						}
					}
				}
				set_ideology = ideology:ideology_abolitionist
			}
		} 
	}
}

save_agitator_election_scopes = {
	if = {
		limit = {
			has_variable = preset_ideology
		}
		scope:agitator_scope = {
			this.interest_group = {
				save_scope_as = agitator_ig_scope
			}
		}
	}
	else = {
		random_scope_character = {
			limit = {
				has_role = agitator
				NOT = {
					has_variable = agitator_election_participation
				}
			}
			save_scope_as = agitator_scope
			this.interest_group = {
				save_scope_as = agitator_ig_scope
			}
		}
	}

	#Attach to party

	if = {
		limit = {
			any_political_movement = {
				any_supporting_character = {
					this = scope:agitator_scope
				}
			}
		} 
		random_political_movement = {
			limit = {
				any_supporting_character = {
					this = scope:agitator_scope
				}	
			}
			save_scope_as = agitator_movement_scope
		}
	}
	if = {
		limit = {
			scope:agitator_scope.interest_group = {
				has_party = yes
			}
		}
		scope:agitator_scope.interest_group.party = {
			save_scope_as = agitator_party_scope
		}
	}
	else = {
		if = {
			limit = {
				scope:agitator_scope = {
					has_socialist_ideology = yes
				}
				any_active_party = {
					any_member = {
						leader = {
							has_socialist_ideology = yes
						}
					}	
				}
			}	
			random_active_party = {
				limit = {
					any_member = {
						leader = {
							has_socialist_ideology = yes
						}	
					}
				}
				save_scope_as = agitator_party_scope	
			}
		}
		else_if = {
			limit = {
				scope:agitator_scope = {
					has_progressive_ideology = yes
				}
				any_active_party = {
					any_member = {
						leader = {
							has_progressive_ideology = yes
						}
					}
				}
			}	
			random_active_party = {
				limit = {
					any_member = {
						leader = {
							has_progressive_ideology = yes
						}	
					}
				}
				save_scope_as = agitator_party_scope	
			}
		}
		else_if = {
			limit = {
				scope:agitator_scope = {
					has_liberal_ideology = yes
				}
				any_active_party = {
					any_member = {
						leader = {
							has_liberal_ideology = yes
						}
					}
				}
			}	
			random_active_party = {
				limit = {
					any_member = {
						leader = {
							has_liberal_ideology = yes
						}	
					}
				}
				save_scope_as = agitator_party_scope	
			}
		}
		else_if = {
			limit = {
				scope:agitator_scope = {
					has_reactionary_ideology = yes
				}
				any_active_party = {
					any_member = {
						leader = {
							has_reactionary_ideology = yes
						}
					}
				}
			}	
			random_active_party = {
				limit = {
					any_member = {
						leader = {
							has_reactionary_ideology = yes
						}	
					}
				}
				save_scope_as = agitator_party_scope	
			}
		}
		else_if = {
			limit = {
				scope:agitator_scope = {
					has_conservative_ideology = yes
				}
				any_active_party = {
					any_member = {
						leader = {
							has_conservative_ideology = yes
						}
					}
				}
			}	
			random_active_party = {
				limit = {
					any_member = {
						leader = {
							has_conservative_ideology = yes
						}	
					}
				}
				save_scope_as = agitator_party_scope	
			}
		}
		else = {
			random_active_party = { #Chaos reigns
				save_scope_as = agitator_party_scope
			}
		}
	}
	remove_variable = preset_ideology
}

clear_legal_single_party = { 
	remove_variable = only_valid_party
}	


communist_agitator_election_scope_effect = {
	random_active_party = {
		limit = {
			is_party_type = communist_party
		}
		save_scope_as = agitator_party_scope
	}
	random_scope_character = {
		limit = {
			OR = {
				has_ideology = ideology:ideology_communist
				has_ideology = ideology:ideology_vanguardist
				has_ideology = ideology:ideology_anarchist
				AND = {
					this.interest_group = {
						is_member_of_party = owner.py:communist_party
					}
					NOT = {
						law_stance = {
							law = law_type:law_council_republic
							value < neutral
						}
					}
				}
			}
			has_role = agitator
			NOT = {
				has_variable = agitator_election_participation
			}
		}
		save_scope_as = agitator_scope
		this.interest_group = {
			save_scope_as = agitator_ig_scope
		}
		this.political_movement ?= {
			save_scope_as = agitator_movement_scope
		}
	}
}


fascist_agitator_election_scope_effect = {
	random_active_party = {
		limit = {
			is_party_type = fascist_party
		}
		save_scope_as = agitator_party_scope
	}
	random_scope_character = {
		limit = {
			OR = {
				has_ideology = ideology:ideology_fascist
				has_ideology = ideology:ideology_integralist
				has_ideology = ideology:ideology_ethno_nationalist
				AND = {
					this.interest_group = {
						is_member_of_party = owner.py:fascist_party
					}
					NOT = {
						law_stance = {
							law = law_type:law_ethnostate
							value < neutral
						}
					}
				}
			}
			has_role = agitator
		}
		save_scope_as = agitator_scope
		this.interest_group = {
			save_scope_as = agitator_ig_scope
		}
		this.political_movement ?= {
			save_scope_as = agitator_movement_scope
		}
	}
}

agrarian_agitator_election_scope_effect = {
	random_active_party = {
		limit = {
			is_party_type = agrarian_party
		}
		save_scope_as = agitator_party_scope
	}
	random_scope_character = {
		limit = {
			OR = {
				has_ideology = ideology:ideology_agrarian
				this.interest_group = {
					is_member_of_party = owner.py:agrarian_party
				}
			}
			has_role = agitator
			NOT = {
				has_variable = agitator_election_participation
			}
		}
		save_scope_as = agitator_scope
		this.interest_group = {
			save_scope_as = agitator_ig_scope
		}
		this.political_movement ?= {
			save_scope_as = agitator_movement_scope
		}
	}
}

socdem_agitator_election_scope_effect = {
	random_active_party = {
		limit = {
			is_party_type = social_democrat_party
		}
		save_scope_as = agitator_party_scope
	}
	random_scope_character = {
		limit = {
			OR = {
				has_ideology = ideology:ideology_social_democrat
				this.interest_group = {
					is_member_of_party = owner.py:social_democrat_party
				}
			}
			has_role = agitator
			NOT = {
				has_variable = agitator_election_participation
			}
		}
		save_scope_as = agitator_scope
		this.interest_group = {
			save_scope_as = agitator_ig_scope
		}
		this.political_movement ?= {
			save_scope_as = agitator_movement_scope
		}
	}
}

liberal_agitator_election_scope_effect = {
	random_active_party = {
		limit = {
			is_party_type = liberal_party
		}
		save_scope_as = agitator_party_scope
	}
	random_scope_character = {
		limit = {
			OR = {
				has_ideology = ideology:ideology_reformer
				has_ideology = ideology:ideology_humanitarian	
				has_ideology = ideology:ideology_humanitarian_royalist
				has_ideology = ideology:ideology_market_liberal
				this.interest_group = {
					is_member_of_party = owner.py:liberal_party
				}
			}
			has_role = agitator
			NOT = {
				has_variable = agitator_election_participation
			}
		}
		save_scope_as = agitator_scope
		this.interest_group = {
			save_scope_as = agitator_ig_scope
		}
		this.political_movement ?= {
			save_scope_as = agitator_movement_scope
		}
	}
}

conservative_agitator_election_scope_effect = {
	random_active_party = {
		limit = {
			is_party_type = conservative_party
		}
		save_scope_as = agitator_party_scope
	}
	random_scope_character = {
		limit = {
			OR = {
				has_ideology = ideology:ideology_traditionalist
				has_ideology = ideology:ideology_slaver
				this.interest_group = {
					is_member_of_party = owner.py:conservative_party
				}
			}
			has_role = agitator
			NOT = {
				has_variable = agitator_election_participation
			}
		}
		save_scope_as = agitator_scope
		this.interest_group = {
			save_scope_as = agitator_ig_scope
		}
		this.political_movement ?= {
			save_scope_as = agitator_movement_scope
		}
	}
}

radical_agitator_election_scope_effect = {
	random_active_party = {
		limit = {
			is_party_type = radical_party
		}
		save_scope_as = agitator_party_scope
	}
	random_scope_character = {
		limit = {
			OR = {
				has_ideology = ideology:ideology_radical
				this.interest_group = {
					is_member_of_party = owner.py:radical_party
				}
			}
			has_role = agitator
			NOT = {
				has_variable = agitator_election_participation
			}
		}
		save_scope_as = agitator_scope
		this.interest_group = {
			save_scope_as = agitator_ig_scope
		}
		this.political_movement ?= {
			save_scope_as = agitator_movement_scope
		}
	}
}

free_trade_agitator_election_scope_effect = {
	random_active_party = {
		limit = {
			is_party_type = free_trade_party
		}
		save_scope_as = agitator_party_scope
	}
	random_scope_character = {
		limit = {
			OR = {
				has_ideology = ideology:ideology_market_liberal
				this.interest_group = {
					is_member_of_party = owner.py:free_trade_party
				}
			}
			has_role = agitator
			NOT = {
				has_variable = agitator_election_participation
			}
		}
		save_scope_as = agitator_scope
		save_scope_as = exile_scope
		this.interest_group = {
			save_scope_as = agitator_ig_scope
		}
		this.political_movement ?= {
			save_scope_as = agitator_movement_scope
		}
	}
}

gen_ruler_party = {
	ruler.interest_group = {
		save_scope_as = ruler_ig
	}
	if = {
		limit = {
			has_technology_researched = socialism
			OR = {
				ruler = {
					has_socialist_ideology = yes
				}
				ruler.interest_group.leader = {
					has_socialist_ideology = yes
				}
			}
		}
		random_potential_party = {
			limit = {
				is_party_type = communist_party
			}
			save_scope_as = only_legit_party_scope
			add_ig_to_party = scope:ruler_ig
		}
		set_variable = { name = only_valid_party value = scope:only_legit_party_scope }
	}
	else_if = {
		limit = {
			has_technology_researched = political_agitation
			OR = {
				ruler = {
					OR = {
						has_ideology = ideology:ideology_fascist
						has_ideology = ideology:ideology_integralist
						has_ideology = ideology:ideology_ethno_nationalist
					}
				}
				ruler.interest_group.leader = {
					OR = {
						has_ideology = ideology:ideology_fascist
						has_ideology = ideology:ideology_integralist
						has_ideology = ideology:ideology_ethno_nationalist
					}
				}
			}
		}
		random_potential_party = {
			limit = {
				is_party_type = fascist_party
			}
			save_scope_as = only_legit_party_scope
			add_ig_to_party = scope:ruler_ig
		}
		set_variable = { name = only_valid_party value = scope:only_legit_party_scope }
	}
	else_if = {
		limit = {
			has_technology_researched = anarchism
			OR = {
				ruler = {
					has_ideology = ideology:ideology_anarchist
				}
				ruler.interest_group.leader = {
					has_ideology = ideology:ideology_anarchist
				}
			}
		}
		random_potential_party = {
			limit = {
				is_party_type = anarchist_party
			}
			save_scope_as = only_legit_party_scope
			add_ig_to_party = scope:ruler_ig
		}
		set_variable = { name = only_valid_party value = scope:only_legit_party_scope }
	}
	else_if = {
		limit = {
			has_technology_researched = labor_movement
			OR = {
				ruler = {
					OR = {
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_feminist
						has_ideology = ideology:ideology_humanitarian	
						has_ideology = ideology:ideology_humanitarian_royalist
					}
				}
				ruler.interest_group.leader = {
					OR = {
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_feminist
						has_ideology = ideology:ideology_humanitarian	
						has_ideology = ideology:ideology_humanitarian_royalist
					}
				}
				ruler = {
					is_interest_group_type = ig_trade_unions
				}
			}
		}
		random_potential_party = {
			limit = {
				is_party_type = social_democrat_party
			}
			save_scope_as = only_legit_party_scope
			add_ig_to_party = scope:ruler_ig
		}
		set_variable = { name = only_valid_party value = scope:only_legit_party_scope }
	}
	else_if = {
		limit = {
			has_technology_researched = egalitarianism
			OR = {
				ruler = {
					has_progressive_ideology = yes
				}
				ruler.interest_group.leader = {
					has_progressive_ideology = yes
				}
			}
		}
		random_potential_party = {
			limit = {
				is_party_type = radical_party
			}
			save_scope_as = only_legit_party_scope
			add_ig_to_party = scope:ruler_ig
		}
		set_variable = { name = only_valid_party value = scope:only_legit_party_scope }
	}
	else_if = {
		limit = {
			has_technology_researched = empiricism
			OR = {
				ruler = {
					has_liberal_ideology = yes
				}
				ruler.interest_group.leader = {
					has_liberal_ideology = yes
				}
				ruler = {
					is_interest_group_type = ig_intelligentsia
				}
			}
		}
		random_potential_party = {
			limit = {
				is_party_type = liberal_party
			}
			save_scope_as = only_legit_party_scope
			add_ig_to_party = scope:ruler_ig
		}
		set_variable = { name = only_valid_party value = scope:only_legit_party_scope }
	}
	else_if = {
		limit = {
			OR = {
				ruler = {
					has_ideology = ideology:ideology_jingoist_leader
				}
				ruler.interest_group.leader = {
					has_ideology = ideology:ideology_jingoist_leader
				}
				ruler = {
					is_interest_group_type = ig_armed_forces
				}
			}
		}
		random_potential_party = {
			limit = {
				is_party_type = military_party
			}
			save_scope_as = only_legit_party_scope
			add_ig_to_party = scope:ruler_ig
		}
		set_variable = { name = only_valid_party value = scope:only_legit_party_scope }
	}
	else_if = {
		limit = {
			has_technology_researched = stock_exchange
			OR = {
				ruler = {
					has_ideology = ideology:ideology_market_liberal
				}
				ruler.interest_group.leader = {
					has_ideology = ideology:ideology_market_liberal
				}
				ruler = {
					is_interest_group_type = ig_industrialists
				}
			}
		}
		random_potential_party = {
			limit = {
				is_party_type = free_trade_party
			}
			save_scope_as = only_legit_party_scope
			add_ig_to_party = scope:ruler_ig
		}
		set_variable = { name = only_valid_party value = scope:only_legit_party_scope }
	}
	else_if = {
		limit = {
			OR = {
				ruler = {
					has_ideology = ideology:ideology_pacifist
				}
				ruler.interest_group.leader = {
					has_ideology = ideology:ideology_pacifist
				}
				ruler = {
					is_interest_group_type = ig_rural_folk
				}
			}
		}
		random_potential_party = {
			limit = {
				is_party_type = agrarian_party
			}
			save_scope_as = only_legit_party_scope
			add_ig_to_party = scope:ruler_ig
		}
		set_variable = { name = only_valid_party value = scope:only_legit_party_scope }
	}
	else = {
		random_potential_party = {
			limit = {
				is_party_type = conservative_party
			}
			save_scope_as = only_legit_party_scope
			add_ig_to_party = scope:ruler_ig
		}
		set_variable = { name = only_valid_party value = scope:only_legit_party_scope }
	}
}

create_paris_commune_characters = {
	if = {
		limit = {
			game_date > 1866.1.1
			game_date < 1900.1.1
		}
		if = {
			limit = {
				NOR = {
					any_character = {
						has_template = rus_jaroslaw_dabrowski_character_template
					}
					any_character_in_exile_pool = {
						has_template = rus_jaroslaw_dabrowski_character_template
					}
				}
			}
			create_character = {
				template = rus_jaroslaw_dabrowski_character_template
				on_created = {
					add_character_role = general
					add_commander_rank = 1
					set_variable = dabrowski_var
					set_global_variable = dabrowski_spawn
				}
			}
		}
		else_if = {
			limit = {
				any_character = {
					owner = c:FRA
					has_template = rus_jaroslaw_dabrowski_character_template
				}
			}
			random_character = {
				limit = {
					owner = c:FRA
					has_template = rus_jaroslaw_dabrowski_character_template
				}
				transfer_character = c:PRC
				add_character_role = general
				add_commander_rank = 1
			}
		}	
		else_if = {
			limit = {
				any_character_in_exile_pool = {
					has_template = rus_jaroslaw_dabrowski_character_template
				}
			}
			random_character_in_exile_pool = {
				limit = {
					has_template = rus_jaroslaw_dabrowski_character_template
				}
				transfer_character = c:PRC
				add_character_role = general
				add_commander_rank = 1
			}
		}
	}
	if = {
		limit = {
			game_date < 1890.1.1
		}
		if = {
			limit = {
				NOR = {
					any_character = {
						has_template = fra_delescluze_character_template
					}
					any_character_in_exile_pool = {
						has_template = fra_delescluze_character_template
					}
				}
			}
			create_character = {
				template = fra_delescluze_character_template
				on_created = {
					add_character_role = politician
					remove_character_role = agitator
					set_as_interest_group_leader = yes
					set_variable = delescluze_var
					set_global_variable = delescluze_spawn
				}
			}
		}
		else_if = {
			limit = {
				any_character = {
					owner = c:FRA
					has_template = fra_delescluze_character_template
				}
			}
			random_character = {
				limit = {
					owner = c:FRA
					has_template = fra_delescluze_character_template
				}
				transfer_character = c:PRC
				add_character_role = politician
				remove_character_role = agitator
				set_as_interest_group_leader = yes
			}
		}	
		else_if = {
			limit = {
				any_character_in_exile_pool = {
					has_template = fra_delescluze_character_template
				}
			}
			random_character_in_exile_pool = {
				limit = {
					has_template = fra_delescluze_character_template
				}
				transfer_character = c:PRC
				add_character_role = politician
				remove_character_role = agitator
				set_as_interest_group_leader = yes
			}
		}
	}
	if = {
		limit = {
			game_date > 1860.1.1
			game_date < 1900.1.1
		}
		if = {
			limit = {
				NOR = {
					any_character = {
						has_template = agitator_louise_michel
					}
					any_character_in_exile_pool = {
						has_template = agitator_louise_michel
					}
				}
			}
			create_character = {
				template = agitator_louise_michel
			}
		}
		else_if = {
			limit = {
				any_character = {
					owner = c:FRA
					has_template = agitator_louise_michel
				}
			}
			random_character = {
				limit = {
					owner = c:FRA
					has_template = agitator_louise_michel
				}
				transfer_character = c:PRC
			}
		}	
		else_if = {
			limit = {
				any_character_in_exile_pool = {
					has_template = agitator_louise_michel
				}
			}
			random_character_in_exile_pool = {
				limit = {
					has_template = agitator_louise_michel
				}
				transfer_character = c:PRC
			}
		}	
	}
	if = {
		limit = {
			game_date > 1860.1.1
			game_date < 1900.1.1
		}
		create_character = {
			first_name = Gustave
			last_name = Cluseret
			birth_date = 1823.6.13
			culture = cu:french
			ig_leader = yes
			is_general = yes
			interest_group = ig_armed_forces
			ideology = ideology_radical
			hq = region_france
			commander_rank = commander_rank_2
			traits = {
				grifter
				reckless
				explorer
			}
		}
	}
	if = {
		limit = {
			game_date > 1865.1.1
			game_date < 1910.1.1
		}
		create_character = {
			first_name = Eugene
			last_name = Varlin
			birth_date = 1839.10.5
			culture = cu:french
			ig_leader = yes
			interest_group = ig_trade_unions
			ideology = ideology_anarchist
			traits = {
				persistent
				brave
				charismatic
			}
		}
	}
}

enact_preferred_governance_principle = {
	random_interest_group = {
		limit = {
			is_in_government = yes
			is_strongest_ig_in_government = yes
		}
		save_scope_as = ruling_ig
	}
	if = {
		limit = {
			scope:ruling_ig ?= {
				law_stance = {
					law = law_type:law_council_republic
					value = strongly_approve
				}
			}
		}
		activate_law = law_type:law_council_republic
	}
	else_if = {
		limit = {
			scope:ruling_ig ?= {
				law_stance = {
					law = law_type:law_monarchy
					value = strongly_approve
				}
			}
		}
		activate_law = law_type:law_monarchy
	}
	else_if = {
		limit = {
			scope:ruling_ig ?= {
				law_stance = {
					law = law_type:law_parliamentary_republic
					value = strongly_approve
				}
			}
		}
		activate_law = law_type:law_parliamentary_republic
	}
	else_if = {
		limit = {
			scope:ruling_ig ?= {
				law_stance = {
					law = law_type:law_presidential_republic
					value = strongly_approve
				}
			}
		}
		activate_law = law_type:law_presidential_republic
	}
	else_if = {
		limit = {
			scope:ruling_ig ?= {
				law_stance = {
					law = law_type:law_theocracy
					value = strongly_approve
				}
			}
		}
		activate_law = law_type:law_theocracy
	}
	else_if = {
		limit = {
			scope:ruling_ig ?= {
				law_stance = {
					law = law_type:law_council_republic
					value = approve
				}
			}
		}
		activate_law = law_type:law_council_republic
	}
	else_if = {
		limit = {
			scope:ruling_ig ?= {
				law_stance = {
					law = law_type:law_monarchy
					value = approve
				}
			}
		}
		activate_law = law_type:law_monarchy
	}
	else_if = {
		limit = {
			scope:ruling_ig ?= {
				law_stance = {
					law = law_type:law_parliamentary_republic
					value = approve
				}
			}
		}
		activate_law = law_type:law_parliamentary_republic
	}
	else_if = {
		limit = {
			scope:ruling_ig ?= {
				law_stance = {
					law = law_type:law_presidential_republic
					value = approve
				}
			}
		}
		activate_law = law_type:law_presidential_republic
	}
	else_if = {
		limit = {
			scope:ruling_ig ?= {
				law_stance = {
					law = law_type:law_theocracy
					value = approve
				}
			}
		}
		activate_law = law_type:law_theocracy
	}
	else = {
		activate_law = law_type:law_presidential_republic
		if = {
			limit = {
				civil_war_origin_country ?= {
					has_law = law_type:law_monarchy
				}
			}
			set_variable = prov_gov_monarchy
		}
		else_if = {
			limit = {
				civil_war_origin_country ?= {
					has_law = law_type:law_theocracy
				}
			}
			set_variable = prov_gov_theocracy
		}
		else_if = {
			limit = {
				civil_war_origin_country ?= {
					has_law = law_type:law_council_republic
				}
			}
			set_variable = prov_gov_council_republic
		}
		set_variable = revolutionary_prov_gov_var
	}
}

enact_preferred_governance_principle_new = {
	random_interest_group = {
		limit = {
			is_in_government = yes
			is_strongest_ig_in_government = yes
		}
		save_scope_as = ruling_ig
	}
	random_law = {
		limit = {
			OR = {
				type = law_type:law_chiefdom
				type = law_type:law_monarchy
				type = law_type:law_presidential_republic
				type = law_type:law_parliamentary_republic
				type = law_type:law_theocracy
				type = law_type:law_council_republic
			}
			type = {
				save_temporary_scope_as = enacted_gov_pric
			}
			scope:ruling_ig = {
				law_stance = {
					law = scope:enacted_gov_pric
					value = strongly_approve
				}
			}
		}
		save_scope_as = preferred_gov_principles
	}
	if = {
		limit = {
			NOT = {
				exists = scope:preferred_gov_principles
			}
		}
		random_law = {
			limit = {
				OR = {
					type = law_type:law_chiefdom
					type = law_type:law_monarchy
					type = law_type:law_presidential_republic
					type = law_type:law_parliamentary_republic
					type = law_type:law_theocracy
					type = law_type:law_council_republic
				}
				type = {
					save_temporary_scope_as = enacted_gov_pric
				}
				scope:ruling_ig = {
					law_stance = {
						law = scope:enacted_gov_pric
						value = approve
					}
				}
			}
			save_scope_as = preferred_gov_principles
		}
	}
	if = {
		limit = {
			NOT = {
				exists = scope:preferred_gov_principles
			}
		}
		random_law = {
			limit = {
				OR = {
					type = law_type:law_chiefdom
					type = law_type:law_monarchy
					type = law_type:law_presidential_republic
					type = law_type:law_parliamentary_republic
					type = law_type:law_theocracy
					type = law_type:law_council_republic
				}	
				type = {
					save_temporary_scope_as = enacted_gov_pric
				}
				scope:ruling_ig = {
					law_stance = {
						law = scope:enacted_gov_pric
						value = neutral
					}
				}
			}
			save_scope_as = preferred_gov_principles
		}
	}
	activate_law = scope:preferred_gov_principles
}

exile_character_with_martyrdom = {
	save_scope_as = martyred_exile_scope
	if = {
		limit = {
			NOT = {
				has_modifier = modifier_political_martyr
			}
		}
		add_modifier = modifier_political_martyr
	}
	if = {
		limit = {
			owner = {
				NOT = {
					any_primary_culture = {
						this = scope:martyred_exile_scope.culture
					}
				}
			}
		}
		if = {
			limit = {
				any_country = {
					NOT = {
						this = scope:martyred_exile_scope.owner
					}
					any_primary_culture = {
						this = scope:martyred_exile_scope.culture
					}
				}
			}
			ordered_country = {
				limit = {
					NOT = {
						this = scope:martyred_exile_scope.owner
					}
					any_primary_culture = {
						this = scope:martyred_exile_scope.culture
					}
				}
				order_by = country_rank
				create_diplomatic_catalyst = {
					type = catalyst_exiled_culture_member
					target = scope:martyred_exile_scope.owner
				}
			}
		}
	}
	clean_up_exile_character_roles = yes
	exile_character = yes
}

# Divided Monarchists
# Made by Victoria/Pacifica/AcresOfAsteraceae
# Refer to comments here and in 02_french_monarchism to get an idea as to how this works.
fra_set_divided_monarchist_variables = {
	#Bonapartist Variables
	set_variable = { name = bonapartist_progress_from_characters value = 0 } #Progress-from-character component. This updates with the combined popularities of every Bonapartist character later on, and is used to calculate monthly progress in the progress bar.
	set_variable = { name = bonapartist_progress_from_igs value = 0 } #Progress-from-IG component. This updates with the combined clout of every Bonapartist IG later on, and is used to calculate monthly progress in the progress bar.
	set_variable = { name = bonapartist_progress_from_military value = 0 } #Progress-from-military-building component. This updates with the sum of military building levels in France later on, and is used to calculate monthly progress in the progress bar.
	set_variable = { name = bonapartist_progress_from_legitimacy value = 0 } #Progress-from-legitimacy component. This updates with the current government legitimacy, and is also used to calculate monthly progress in the progress bar.
	set_variable = { name = bonapartist_progress_from_effects value = 0 } #Final element in the progress bar. This is defined by various effects, and is based solely on scripted effects. This is how designers can manually grant ticking bonuses or maluses to this mechanic.
	
	#Orleanist Variables
	set_variable = { name = orleanist_progress_from_characters value = 0 } 
	set_variable = { name = orleanist_progress_from_igs value = 0 }
	set_variable = { name = orleanist_progress_from_factories value = 0 } #These variables use the same scheme as the Bonapartist ones, with the exception that Orleanists derive from the sum of light/heavy industry building levels in France.
	set_variable = { name = orleanist_progress_from_legitimacy value = 0 }
	set_variable = { name = orleanist_progress_from_effects value = 0 }

	#Legitimist Variables
	set_variable = { name = legitimist_progress_from_characters value = 0 }
	set_variable = { name = legitimist_progress_from_igs value = 0 }
	set_variable = { name = legitimist_progress_from_farms value = 0 } #These variables use the same scheme as the Bonapartist ones, with the exception that Legitimists derive from the sum of agricultural building levels in France.
	set_variable = { name = legitimist_progress_from_legitimacy value = 0 }
	set_variable = { name = legitimist_progress_from_effects value = 0 }

	set_variable = { name = ig_weight value = 0 } #This variable is used solely for mathematical purposes, and is set as equivalent to the clout of a given interest group. It exists so that IGs can be weighted higher or lower depending on whether they're in-government or not.
}

fra_weekly_pulse_bonapartist_progress = { #Effects like these are run three times, one for each house. All of them function essentially the same way.
	set_variable = { name = bonapartist_progress_from_characters value = 0 } #All of these variables are ephemeral and should never be manually set to anything.
	set_variable = { name = bonapartist_progress_from_igs value = 0 }
	set_variable = { name = bonapartist_progress_from_military value = 0 }
	set_variable = { name = bonapartist_progress_from_legitimacy value = root.government_legitimacy } #Government legitimacy is a single constant, and so this variable is set immediately rather than needing a calculation.
	#From Characters
	every_scope_character = {
		limit = {
			has_ideology = ideology:ideology_bonapartist
		}
		ROOT = {
			change_variable = { name = bonapartist_progress_from_characters add = prev.popularity } #for_each loop. For each character of ideology_bonapartist, add that character's popularity to bonapartist_progress_from_characters.
		}
	}
	change_variable = { name = bonapartist_progress_from_characters divide = 100 } #Character popularities are -100/100, rather than our desired -1/1, so divide by 100.
	# From Interest Groups
	every_interest_group = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_bonapartist
			}
		}
		ROOT = {														#for_each loop. For each interest group of ideology_bonapartist, perform the following steps in sequence.
			set_variable = { name = ig_weight value = prev.ig_clout } 	#1. Set ig_weight as equal to the interest group's clout.
		}
		if = {
			limit = {
				is_in_government = yes
			}
			ROOT = {
				change_variable = { name = ig_weight multiply = 3 }		#2. If that IG is in government, multiply ig_weight by a given value.
			}
		}
		ROOT = {
			change_variable = { name = bonapartist_progress_from_igs add = var:ig_weight }	#3. Add ig_weight to the central bonapartist_progress_from_igs variable. This will run until there are no more Bonapartist IGs.
		}
	}
	# From Buildings
	every_scope_building = { 
		limit = {
			is_building_group = bg_military # Derives from barracks and naval bases.
			occupancy >= 0.5
		}
		ROOT = {
			change_variable = { name = bonapartist_progress_from_military add = prev.level } #for_each loop, uses similar context to the character component. Iterates through every building in the country matching the filter, gets that building's level, and adds it to the central bonapartist_progress_from_military variable.
		}
	}
	change_variable = { name = bonapartist_progress_from_military divide = 100 } #Building levels are converted to decimal. This usually equals something between 1 and 3, with 0.01 = one building level.
	# From Legitimacy
	change_variable = { name = bonapartist_progress_from_legitimacy divide = 100 } #Legitimacy divided by 100, to make it minimum 0 and maximum 1.
	change_variable = { name = bonapartist_progress_from_legitimacy subtract = 0.5 } #Legitimacy subtracted by 0.5, to make it minimum -0.5 and maximum 0.5. Balanced scale of negative to absolute value.
	if = {
		limit = {
			NOT = {
				ruler_is_bonapartist = yes #If the ruler is Bonapartist, then the Bonapartists benefit from high legitimacy and suffer from low legitimacy.
			}
		}
		change_variable = { name = bonapartist_progress_from_legitimacy multiply = -0.5 } #If the ruler is not Bonapartist, they benefit from low legitimacy and suffer from high legitimacy.
	}
}

fra_weekly_pulse_orleanist_progress = { #See Bonapartist progress to see how this works.
	set_variable = { name = orleanist_progress_from_characters value = 0 }
	set_variable = { name = orleanist_progress_from_igs value = 0 }
	set_variable = { name = orleanist_progress_from_factories value = 0 }
	set_variable = { name = orleanist_progress_from_legitimacy value = root.government_legitimacy }
	#From Characters
	every_scope_character = {
		limit = {
			has_ideology = ideology:ideology_orleanist
		}
		ROOT = {
			change_variable = { name = orleanist_progress_from_characters add = prev.popularity }
		}
	}
	change_variable = { name = orleanist_progress_from_characters divide = 100 }
	# From Interest Groups
	every_interest_group = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_orleanist
			}
		}
		ROOT = {
			set_variable = { name = ig_weight value = prev.ig_clout }
		}
		if = {
			limit = {
				is_in_government = yes
			}
			ROOT = {
				change_variable = { name = ig_weight multiply = 3 }
			}
		}
		ROOT = {
			change_variable = { name = orleanist_progress_from_igs add = var:ig_weight }
		}
	}
	# From Buildings
	every_scope_building = {
		limit = {
			is_building_group = bg_manufacturing
			weekly_profit > 0
		}
		ROOT = {
			change_variable = { name = orleanist_progress_from_factories add = prev.level }
		}
	}
	change_variable = { name = orleanist_progress_from_factories divide = 100 }
	# From Legitimacy
	change_variable = { name = orleanist_progress_from_legitimacy divide = 100 }
	change_variable = { name = orleanist_progress_from_legitimacy subtract = 0.5 }
	if = {
		limit = {
			NOT = {
				ruler_is_orleanist = yes
			}
		}
		change_variable = { name = orleanist_progress_from_legitimacy multiply = -0.5 }
	}
}

fra_weekly_pulse_legitimist_progress = { #See Legitimist progress to see how this works.
	set_variable = { name = legitimist_progress_from_characters value = 0 }
	set_variable = { name = legitimist_progress_from_igs value = 0 }
	set_variable = { name = legitimist_progress_from_farms value = 0 }
	set_variable = { name = legitimist_progress_from_legitimacy value = root.government_legitimacy }
	#From Characters
	every_scope_character = {
		limit = {
			has_ideology = ideology:ideology_legitimist
		}
		ROOT = {
			change_variable = { name = legitimist_progress_from_characters add = prev.popularity }
		}
	}
	change_variable = { name = legitimist_progress_from_characters divide = 100 }
	# From Interest Groups
	every_interest_group = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_legitimist
			}
		}
		ROOT = {
			set_variable = { name = ig_weight value = prev.ig_clout }
		}
		if = {
			limit = {
				is_in_government = yes
			}
			ROOT = {
				change_variable = { name = ig_weight multiply = 3 }
			}
		}
		ROOT = {
			change_variable = { name = legitimist_progress_from_igs add = var:ig_weight }
		}
	}
	# From Buildings
	every_scope_building = {
		limit = {
			is_building_group = bg_agriculture
			NOT = {
				is_building_group = bg_subsistence_agriculture
			}
			weekly_profit > 0
		}
		ROOT = {
			change_variable = { name = legitimist_progress_from_farms add = prev.level }
		}
	}
	change_variable = { name = legitimist_progress_from_farms divide = 100 }
	# From Legitimacy
	change_variable = { name = legitimist_progress_from_legitimacy divide = 100 }
	change_variable = { name = legitimist_progress_from_legitimacy subtract = 0.5 }
	if = {
		limit = {
			NOT = {
				ruler_is_legitimist = yes
			}
		}
		change_variable = { name = legitimist_progress_from_legitimacy multiply = -0.5 }
	}
}

fra_clear_divided_monarchist_variables = { #Clears all variables, to save memory/performance. Should be executed by anything that makes Divided Monarchists irrelevant.
	remove_variable = bonapartist_progress_from_characters 
	remove_variable = bonapartist_progress_from_igs 
	remove_variable = bonapartist_progress_from_military 
	remove_variable = bonapartist_progress_from_legitimacy 
	remove_variable = bonapartist_progress_from_effects 
	remove_variable = orleanist_progress_from_characters 
	remove_variable = orleanist_progress_from_igs 
	remove_variable = orleanist_progress_from_factories 
	remove_variable = orleanist_progress_from_legitimacy 
	remove_variable = orleanist_progress_from_effects 
	remove_variable = legitimist_progress_from_characters 
	remove_variable = legitimist_progress_from_igs 
	remove_variable = legitimist_progress_from_farms 
	remove_variable = legitimist_progress_from_legitimacy 
	remove_variable = legitimist_progress_from_effects 
	remove_variable = ig_weight 
}

fra_freeze_divided_monarchist_progress = { #Used upon initiation of cement_the_rightful_dynasty, to prevent the bars from excessively accumulating.
	set_variable = fra_divided_monarchists_freeze
}

# Used in IG scope
fra_disfavor_leader_ig_dynasty = {
	if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_bonapartist
			}
		}
		owner = {
			custom_tooltip = {
				text = bonapartist_progress_decrease_10_tt
				je:je_divided_monarchists = {
					add_progress = { value = -10 name = divided_monarchists_bonapartist_progress_bar }
				}
			}
		}
	}
	else_if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_orleanist
			}
		}
		owner = {
			custom_tooltip = {
				text = orleanist_progress_decrease_10_tt
				je:je_divided_monarchists = {
					add_progress = { value = -10 name = divided_monarchists_orleanist_progress_bar }
				}
			}
		}
	}
	else_if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_legitimist
			}
		}
		owner = {
			custom_tooltip = {
				text = legitimist_progress_decrease_10_tt
				je:je_divided_monarchists = {
					add_progress = { value = -10 name = divided_monarchists_legitimist_progress_bar }
				}
			}
		}
	}
}

# Used in IG scope
fra_favor_leader_ig_dynasty = {
	if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_bonapartist
			}
		}
		owner = {
			custom_tooltip = {
				text = bonapartist_progress_increase_10_tt
				je:je_divided_monarchists = {
					add_progress = { value = 10 name = divided_monarchists_bonapartist_progress_bar }
				}
			}
		}
	}
	else_if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_orleanist
			}
		}
		owner = {
			custom_tooltip = {
				text = orleanist_progress_increase_10_tt
				je:je_divided_monarchists = {
					add_progress = { value = 10 name = divided_monarchists_orleanist_progress_bar }
				}
			}
		}
	}
	else_if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_legitimist
			}
		}
		owner = {
			custom_tooltip = {
				text = legitimist_progress_increase_10_tt
				je:je_divided_monarchists = {
					add_progress = { value = 10 name = divided_monarchists_legitimist_progress_bar }
				}
			}
		}
	}
}

# Country scope
fra_favor_ruler_dynasty = {
	if = {
		limit = {
			ruler_is_bonapartist = yes
		}
		custom_tooltip = {
			text = bonapartist_progress_increase_10_tt
			je:je_divided_monarchists = {
				add_progress = { value = 10 name = divided_monarchists_bonapartist_progress_bar }
			}
		}
	}
	else_if = {
		limit = {
			ruler_is_orleanist = yes
		}
		custom_tooltip = {
			text = orleanist_progress_increase_10_tt
			je:je_divided_monarchists = {
				add_progress = { value = 10 name = divided_monarchists_orleanist_progress_bar }
			}
		}
	}
	else_if = {
		limit = {
			ruler_is_legitimist = yes
		}
		custom_tooltip = {
			text = legitimist_progress_increase_10_tt
			je:je_divided_monarchists = {
				add_progress = { value = 10 name = divided_monarchists_legitimist_progress_bar }
			}
		}
	}
}

# Country scope
fra_disfavor_ruler_dynasty = {
	if = {
		limit = {
			ruler_is_bonapartist = yes
		}
		custom_tooltip = {
			text = bonapartist_progress_decrease_10_tt
			je:je_divided_monarchists = {
				add_progress = { value = -10 name = divided_monarchists_bonapartist_progress_bar }
			}
		}
	}
	else_if = {
		limit = {
			ruler_is_orleanist = yes
		}
		custom_tooltip = {
			text = orleanist_progress_decrease_10_tt
			je:je_divided_monarchists = {
				add_progress = { value = -10 name = divided_monarchists_orleanist_progress_bar }
			}
		}
	}
	else_if = {
		limit = {
			ruler_is_legitimist = yes
		}
		custom_tooltip = {
			text = legitimist_progress_decrease_10_tt
			je:je_divided_monarchists = {
				add_progress = { value = -10 name = divided_monarchists_legitimist_progress_bar }
			}
		}
	}
}

fra_handle_republic_monarch_assignment = { #Used specifically in the case of a Republican France that enacts monarchy, and is now determining its monarch.
	if = {
		limit = { #If the ruler is a Bonapartist, but is not a Bonapartist ruler - eg. a general with the Bonapartist ideology, the monarch is automatically set to the first available Bonaparte.
			ruler = { 
				has_ideology = ideology:ideology_bonapartist
			}
		}
		if = {
			limit = {
				has_variable = orleanist_restoration_var #Misc. variable cleanup, just in case there's anything left in the way.
			}
			remove_variable = orleanist_restoration_var
		}
		if = {
			limit = {
				has_variable = legitimist_restoration_var
			}
			remove_variable = legitimist_restoration_var
		}
		if = {
			limit = {
				has_variable = supporting_orleanist_var
			}
			remove_variable = supporting_orleanist_var
		}
		if = {
			limit = {
				has_variable = supporting_legitimist_var
			}
			remove_variable = supporting_legitimist_var
		}
		set_variable = bonapartist_restoration_var #Bonapartist restoration activated, for the purpose of je_divided_monarchists and other things it tracks.
		if = {
			limit = {
				has_journal_entry = je_divided_monarchists
			}
			je:je_divided_monarchists = {
				add_progress = { value = 10 name = divided_monarchists_bonapartist_progress_bar }
			}
		}
		set_variable = supporting_bonapartist_var #For the character interaction. The player can change this with the buttons whenever they wish.
		hidden_effect = { generate_french_monarch = yes } #Standard generate_french_monarch effect.
	}
	else_if = {
		limit = {
			ruler = {
				has_ideology = ideology:ideology_orleanist
			}
		}
		if = {
			limit = {
				has_variable = legitimist_restoration_var
			}
			remove_variable = legitimist_restoration_var
		}
		if = {
			limit = {
				has_variable = bonapartist_restoration_var
			}
			remove_variable = bonapartist_restoration_var
		}
		if = {
			limit = {
				has_variable = supporting_bonapartist_var
			}
			remove_variable = supporting_bonapartist_var
		}
		if = {
			limit = {
				has_variable = supporting_legitimist_var
			}
			remove_variable = supporting_legitimist_var
		}
		set_variable = orleanist_restoration_var
		if = {
			limit = {
				has_journal_entry = je_divided_monarchists
			}
			je:je_divided_monarchists = {
				add_progress = { value = 10 name = divided_monarchists_orleanist_progress_bar }
			}
		}
		set_variable = supporting_orleanist_var
		hidden_effect = { generate_french_monarch = yes }
	}
	else_if = {
		limit = {
			ruler = {
				has_ideology = ideology:ideology_legitimist
			}
		}
		if = {
			limit = {
				has_variable = orleanist_restoration_var
			}
			remove_variable = orleanist_restoration_var
		}
		if = {
			limit = {
				has_variable = bonapartist_restoration_var
			}
			remove_variable = bonapartist_restoration_var
		}
		if = {
			limit = {
				has_variable = supporting_bonapartist_var
			}
			remove_variable = supporting_bonapartist_var
		}
		if = {
			limit = {
				has_variable = supporting_orleanist_var
			}
			remove_variable = supporting_orleanist_var
		}
		set_variable = legitimist_restoration_var
		if = {
			limit = {
				has_journal_entry = je_divided_monarchists
			}
			je:je_divided_monarchists = {
				add_progress = { value = 10 name = divided_monarchists_legitimist_progress_bar }
			}
		}
		set_variable = supporting_legitimist_var
		hidden_effect = { generate_french_monarch = yes }
	}
	else = {
		trigger_event = { id = french_pretenders.7 popup = yes } #If the ruler is neither a Bonapartist, Legitimist, or Orleanist claimant, then it fires this event, which allows either restoring a dynasty of your choice, or making the previous President King. The latter option will cancel out of Divided Monarchists, and add a bunch of radicals.
	}
}

### Vargas

calculate_populism_progress = {
	# From Laws
	set_variable = { name = populism_progress_from_laws value = 0 }
	# Cops
	set_variable = { name = temp_policing_var_contribution value = institution:institution_police.investment }
	if = {
		limit = {
			has_law = law_type:law_no_police
		}
		change_variable = { name = temp_policing_var_contribution add = 0.3 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_local_police
		}
		change_variable = { name = temp_policing_var_contribution multiply = -0.1 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_dedicated_police
		}
		change_variable = { name = temp_policing_var_contribution multiply = -0.3 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_militarized_police
		}
		change_variable = { name = temp_policing_var_contribution multiply = -0.5 }
	}
	
	# Internal Affairs
	set_variable = { name = temp_ha_var_contribution value = institution:institution_home_affairs.investment }
	if = {
		limit = {
			has_law = law_type:law_no_home_affairs
		}
		change_variable = { name = temp_ha_var_contribution add = 0.3 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_guaranteed_liberties
		}
		change_variable = { name = temp_ha_var_contribution multiply = -0.1 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_national_guard
		}
		change_variable = { name = temp_ha_var_contribution multiply = -0.3 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_secret_police
		}
		change_variable = { name = temp_ha_var_contribution multiply = -0.5 }
	}
	change_variable = { name = populism_progress_from_laws add = var:temp_policing_var_contribution }
	change_variable = { name = populism_progress_from_laws add = var:temp_ha_var_contribution }
	remove_variable = temp_policing_var_contribution
	remove_variable = temp_ha_var_contribution
}

set_populism_vars = {
	set_variable = { name = populism_progress_from_laws value = 0 }
	set_variable = { name = populism_progress_var_add value = 0 }
}

clear_populism_vars = {
	remove_variable = populism_progress_from_laws
	remove_variable = populism_progress_var_add
}

do_risorgimento_math = {
	set_variable = { name = italian_states_pop_total value = 0 }
	set_variable = { name = italian_states_radicals_total value = 0 }
	every_scope_state = {
		limit = {
			state_region = {
				OR = {
					is_homeland = cu:north_italian
					is_homeland = cu:south_italian
				}
			}
		}
		set_variable = { name = italian_state_pop_radicals value = this.turmoil }
		change_variable = { name = italian_state_pop_radicals multiply = this.state_population }
		ROOT = {
			change_variable = { name = italian_states_pop_total add = prev.state_population }
			change_variable = { name = italian_states_radicals_total add = prev.var:italian_state_pop_radicals }
		}
	}
	set_variable = { name = italian_states_radicals_total_bar value = var:italian_states_radicals_total }
	change_variable = { name = italian_states_radicals_total_bar divide = var:italian_states_pop_total }
	change_variable = { name = italian_states_radicals_total_bar multiply = 100 }
}

### Communism

calculate_communism_progress = {
	#From Poverty
	set_variable = { name = communism_progress_from_poverty value = 0 }
	every_scope_state = {
		limit = {
			is_incorporated = yes
		}
		set_variable = { name = temp_sol value = this.population_below_expected_sol } 
		change_variable = { name = temp_sol multiply = this.state_population }
		change_variable = { name = temp_sol divide = root.total_population }
		change_variable = { name = temp_sol multiply = 10 } # This variable equals the percentage of pops in incorporated states below expected SoL times ten. If 25% of your pops in incorporated states are below expected SoL, this will equal 2.5.
		ROOT = {
			change_variable = { name = communism_progress_from_poverty add = prev.var:temp_sol }
		}
	}
	
	# From Laws
	set_variable = { name = communism_progress_from_laws value = 0 }
	# Cops
	set_variable = { name = temp_policing_var_contribution value = institution:institution_police.investment }
	if = {
		limit = {
			has_law = law_type:law_no_police
		}
		change_variable = { name = temp_policing_var_contribution add = 0.3 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_local_police
		}
		change_variable = { name = temp_policing_var_contribution multiply = -0.1 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_dedicated_police
		}
		change_variable = { name = temp_policing_var_contribution multiply = -0.3 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_militarized_police
		}
		change_variable = { name = temp_policing_var_contribution multiply = -0.5 }
	}
	
	# Internal Affairs
	set_variable = { name = temp_ha_var_contribution value = institution:institution_home_affairs.investment }
	if = {
		limit = {
			has_law = law_type:law_no_home_affairs
		}
		change_variable = { name = temp_ha_var_contribution add = 0.3 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_guaranteed_liberties
		}
		change_variable = { name = temp_ha_var_contribution multiply = -0.1 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_national_guard
		}
		change_variable = { name = temp_ha_var_contribution multiply = -0.3 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_secret_police
		}
		change_variable = { name = temp_ha_var_contribution multiply = -0.5 }
	}
	if = {
		limit = {
			has_variable = temp_policing_var_contribution
		}
		change_variable = { name = communism_progress_from_laws add = var:temp_policing_var_contribution }
		remove_variable = temp_policing_var_contribution
	}
	if = {
		limit = {
			has_variable = temp_ha_var_contribution
		}
		change_variable = { name = communism_progress_from_laws add = var:temp_ha_var_contribution }
		remove_variable = temp_ha_var_contribution
	}
}

set_communism_vars = {
	set_variable = { name = communism_progress_from_poverty value = 0 }
	set_variable = { name = communism_progress_from_laws value = 0 }
	set_variable = { name = communism_progress_var_add value = 0 }
}

clear_communism_vars = {
	remove_variable = communism_progress_from_poverty
	remove_variable = communism_progress_from_laws
	remove_variable = communism_progress_var_add
}

restore_peruvian_constitution = {
	# Made by Hansi
	# the Constitution of 1834 was largely a hotfix of the Constitution of 1828 and was also swept aside with the Peru-Bolivian Confederation
	if = {
		limit = {
			NOT = {
				has_law = law_type:law_presidential_republic
			}
		}
		activate_law = law_type:law_presidential_republic
	}
	if = {
		limit = {
			NOT = {
				has_law = law_type:law_state_religion
			}
		}
		activate_law = law_type:law_state_religion # Article 2 of the 1834 consitution: "[Peru's] Religion is Catholic, Apostolic, Roman, The Nation protects it by all means [...] and does not allow the exercise of any other."
	}
	if = {
		limit = {
			NOT = {
				has_law = law_type:law_census_voting
			}
		}
		activate_law = law_type:law_census_voting # Political rights for citizens had no land ownership requirement 
	}
	if = {
		limit = {
			NOT = {
				has_law = law_type:law_racial_segregation
			}
		}
		activate_law = law_type:law_racial_segregation
	}
	if = {
		limit = {
			NOT = {
				has_law = law_type:law_mercantilism
			}
		}
		activate_law = law_type:law_mercantilism
	}
	if = {
		limit = {
			NOT = {
				has_law = law_type:law_interventionism
			}
		}
		activate_law = law_type:law_interventionism
	}
	if = {
		limit = {
			NOT = {
				has_law = law_type:law_right_of_assembly
			}
		}
		activate_law = law_type:law_right_of_assembly # Article 147 of the 1834 constitution: "Everyone can communicate their thoughts [...] or publish them through the printing press without prior censorship; but under the responsibility determined by law."
	}
	if = {
		limit = {
			NOR = {
				has_law = law_type:law_legacy_slavery
				has_law = law_type:law_slavery_banned
			}
		}
		activate_law = law_type:law_legacy_slavery # Slavery was legal, but the slave trade was restricted
	}
	if = {
		limit = {
			NOT = {
				has_law = law_type:law_per_capita_based_taxation
			}
		}
		activate_law = law_type:law_per_capita_based_taxation
	}
}

# National Identity
calculate_national_identity_progress = {
	set_variable = { name = national_identity_progress_var_next value = 0 }
	set_variable = { name = national_identity_progress_from_igs value = 0 }

	# From Interest Groups
	every_interest_group = {
		limit = {
			OR = {
				has_ideology = ideology:ideology_patriotic
				has_ideology = ideology:ideology_liberal
				has_ideology = ideology:ideology_liberal_modern
			}
		}
		ROOT = {
			set_variable = { name = ig_weight value = prev.ig_clout }
		}
		if = {
			limit = {
				is_in_government = yes
			}
			ROOT = {
				change_variable = { name = ig_weight multiply = 3 }
			}
		}
		ROOT = {
			change_variable = { name = national_identity_progress_from_igs add = var:ig_weight }
		}
	}

	#Wars
	set_variable = { name = national_identity_progress_from_wars value = 0 }
	every_scope_war = {
		limit = {
			has_war_support = { target = root value > 50 }
		}
		ROOT = {
			change_variable = { name = national_identity_progress_from_wars add = 0.50 }
		}
	}
	every_scope_war = {
		limit = {
			has_war_support = { target = root value <= 50 }
			has_war_support = { target = root value > 25 }
		}
		ROOT = {
			change_variable = { name = national_identity_progress_from_wars add = 0.25 }
		}
	}
	every_scope_war = {
		limit = {
			has_war_support = { target = root value <= 25 }
			has_war_support = { target = root value > 0 }
		}
		ROOT = {
			change_variable = { name = national_identity_progress_from_wars add = 0.10 }
		}
	}

	#Buildings
	set_variable = { name = national_identity_progress_from_universities value = 0 }
	every_scope_building = {
		limit = {
			OR = {
				is_building_type = building_arts_academy
				is_building_type = building_university
				is_building_type = building_government_administration
			}
			occupancy >= 0.75
		}
		ROOT = {
			change_variable = { name = national_identity_progress_from_universities add = prev.level }
		}
	}
	change_variable = { name = national_identity_progress_from_universities divide = 25 }

	set_variable = { name = national_identity_progress_from_prestige value = 0 }

	#Prestige
	ROOT = {
		change_variable = { name = national_identity_progress_from_prestige add = root.prestige }
	}
	change_variable = { name = national_identity_progress_from_prestige divide = 100 }

	set_variable = { name = national_identity_progress_from_homelands value = 0 }

	#Homelands
	every_scope_state = {
		limit = {
			NOT = {
				is_homeland_of_country_cultures = ROOT
			}
		}
		ROOT = {
			change_variable = { name = national_identity_progress_from_homelands subtract = 0.25 }
		}
	}

	change_variable = { name = national_identity_progress_var_next add = var:national_identity_progress_from_igs }
	change_variable = { name = national_identity_progress_var_next add = var:national_identity_progress_from_wars }
	change_variable = { name = national_identity_progress_var_next add = var:national_identity_progress_from_universities }
	change_variable = { name = national_identity_progress_var_next add = var:national_identity_progress_from_prestige }
	change_variable = { name = national_identity_progress_var_next add = var:national_identity_progress_from_homelands }
	change_variable = { name = national_identity_progress_var_next add = var:national_identity_progress_var_add }
}

add_national_identity_progress = {
	change_variable = { name = national_identity_progress_var add = var:national_identity_progress_var_next }
	clamp_variable = { name = national_identity_progress_var max = 100 min = 0 }
}

set_national_identity_vars = {
	set_variable = { name = national_identity_progress_from_igs value = 0 }
	set_variable = { name = national_identity_progress_from_wars value = 0 }
	set_variable = { name = national_identity_progress_from_universities value = 0 }
	set_variable = { name = national_identity_progress_from_prestige value = 0 }
	set_variable = { name = national_identity_progress_from_homelands value = 0 }
	set_variable = { name = national_identity_progress_var_add value = 0 }
	set_variable = { name = ig_weight value = 0 }
}

clear_national_identity_vars = {
	remove_variable = national_identity_progress_from_igs
	remove_variable = national_identity_progress_from_wars
	remove_variable = national_identity_progress_from_universities
	remove_variable = national_identity_progress_from_prestige
	remove_variable = national_identity_progress_from_homelands
	remove_variable = national_identity_progress_var_add
}

remove_pedropoint_effect = {
	custom_tooltip = {
		text = remove_pedropoint
		change_variable = {
			name = pedropoints
			add = -1
		}
	}
}

add_pedropoint_effect = {
	custom_tooltip = {
		text = add_pedropoint
		change_variable = {
			name = pedropoints
			add = 1
		}
	}
}
			
add_pedropoint_effect_3 = {
	custom_tooltip = {
		text = add_3_pedropoint
		change_variable = {
			name = pedropoints
			add = 3
		}
	}
}

replicate_laws_from_root = {
	every_law = {
		limit = {
			ROOT = {
				has_law = PREV.type
			}
			PREV = {
				NOT = {
					has_law = PREV.type
				}
			}
		}
		PREV = {
			activate_law = PREV.type
		}
	}
}

replicate_laws_from_prev = {
	every_law = {
		limit = {
			PREV = {
				has_law = PREV.type
			}
			ROOT = {
				NOT = {
					has_law = PREV.type
				}
			}
		}
		ROOT = {
			activate_law = PREV.type
		}
	}
}

paris_commune_update_tick = {
	set_global_variable = {
		name = paris_commune_drift_final_var
		value = 0
	}
	change_global_variable = {
		name = paris_commune_drift_final_var
		add = global_var:paris_commune_progress_drift
	}
	change_global_variable = {
		name = paris_commune_drift_final_var
		add = var:PRC_recognition_level
	}
}

capitulate_to_revolution = {
	scope:ongoing_revolution_movement = { #Can't trigger if they want governance reforms anyway.
		this.desired_law = {
			save_scope_as = revolutionaries_law
		}
	}
	every_interest_group = {
		limit = {
			is_insurrectionary = yes
		}
		set_variable = { name = revolutionary_ig days = 7 }
	}
	ordered_interest_group = {
		limit = {
			is_insurrectionary = yes
		}
		order_by = ig_clout
		save_scope_as = revolution_leader_ig
	}
	if = { # Never activate Governance Principles twice.
		limit = {
			NOR = {
				scope:revolutionaries_law = law_type:law_presidential_republic
				scope:revolutionaries_law = law_type:law_parliamentary_republic
				scope:revolutionaries_law = law_type:law_monarchy
				scope:revolutionaries_law = law_type:law_council_republic
				scope:revolutionaries_law = law_type:law_theocracy
			}
		}
		if = {
			limit = {
				scope:revolution_leader_ig = {
					law_stance = {
						law = law_type:law_council_republic
						value = strongly_approve
					}
				}
				NOT = {
					has_law = law_type:law_council_republic
				}
			}
			activate_law = law_type:law_council_republic
		}
		else_if = {
			limit = {
				scope:revolution_leader_ig = {
					law_stance = {
						law = law_type:law_monarchy
						value = strongly_approve
					}
				}
				NOT = {
					has_law = law_type:law_monarchy
				}
			}
			activate_law = law_type:law_monarchy
		}
		else_if = {
			limit = {
				scope:revolution_leader_ig = {
					law_stance = {
						law = law_type:law_parliamentary_republic
						value = strongly_approve
					}
				}
				NOT = {
					has_law = law_type:law_parliamentary_republic
				}
			}
			activate_law = law_type:law_parliamentary_republic
		}
		else_if = {
			limit = {
				scope:revolution_leader_ig = {
					law_stance = {
						law = law_type:law_presidential_republic
						value = strongly_approve
					}
				}
				NOT = {
					has_law = law_type:law_presidential_republic
				}
			}
			activate_law = law_type:law_presidential_republic
		}
		else_if = {
			limit = {
				scope:revolution_leader_ig = {
					law_stance = {
						law = law_type:law_theocracy
						value = strongly_approve
					}
				}
				NOT = {
					has_law = law_type:law_theocracy
				}
			}
			activate_law = law_type:law_theocracy
		}
		else_if = {
			limit = {
				scope:revolution_leader_ig = {
					law_stance = {
						law = law_type:law_council_republic
						value = approve
					}
				}
				NOT = {
					has_law = law_type:law_council_republic
				}
			}
			activate_law = law_type:law_council_republic
		}
		else_if = {
			limit = {
				scope:revolution_leader_ig = {
					law_stance = {
						law = law_type:law_monarchy
						value = approve
					}
				}
				NOT = {
					has_law = law_type:law_monarchy
				}
			}
			activate_law = law_type:law_monarchy
		}
		else_if = {
			limit = {
				scope:revolution_leader_ig = {
					law_stance = {
						law = law_type:law_parliamentary_republic
						value = approve
					}
				}
				NOT = {
					has_law = law_type:law_parliamentary_republic
				}
			}
			activate_law = law_type:law_parliamentary_republic
		}
		else_if = {
			limit = {
				scope:revolution_leader_ig = {
					law_stance = {
						law = law_type:law_presidential_republic
						value = approve
					}
				}
				NOT = {
					has_law = law_type:law_presidential_republic
				}
			}
			activate_law = law_type:law_presidential_republic
		}
		else_if = {
			limit = {
				scope:revolution_leader_ig = {
					law_stance = {
						law = law_type:law_theocracy
						value = approve
					}
				}
				NOT = {
					has_law = law_type:law_theocracy
				}
			}
			activate_law = law_type:law_theocracy
		}
	}

	if = {
		limit = {
			scope:ongoing_revolution_movement = {
				is_political_movement_type = movement_to_preserve
			}
		}
		cancel_enactment = yes
	}
	else = {
		activate_law = scope:revolutionaries_law
	}

	add_loyalists = {
		value = 0.25
	}
	
	every_interest_group = {
		limit = {
			has_variable = revolutionary_ig
		}
		owner = {
			add_loyalists = {
				value = 0.8
				interest_group = PREV
			}
		}
	}

	if = {
		limit = {
			country_has_voting_franchise = yes
		}
		call_election = {
			months = 6
		}
	}
	if = {
		limit = {
			NOT = {
				has_law = law_type:law_monarchy
			}
		}
		hidden_effect = {
			scope:revolution_leader_ig = {
				leader = {
					set_character_as_ruler = yes
				}
			}
		}
	}
	
	every_interest_group = {
		limit = {
			is_in_government = yes
		}
		remove_ruling_interest_group = yes
		add_modifier = {
			name = modifier_revolution_defeated_light
			months = normal_modifier_time
			is_decaying = yes
		}
	}

	every_interest_group = {
		limit = {
			has_variable = revolutionary_ig
		}
		hidden_effect = {
			abandon_revolution = yes
		}
		add_modifier = {
			name = modifier_revolution_victorious_light
			months = normal_modifier_time
			is_decaying = yes
		}
		if = {
			limit = {
				is_insurrectionary = no
			}
			add_ruling_interest_group = yes
		}
	}
}

calculate_caudillo_progress = {
	set_variable = { name = caudillo_next value = 0 }
	if = {
		limit = {
			ig:ig_armed_forces = {
				is_powerful = yes
			}
		}
		change_variable = {
			name = caudillo_next
			add = 1
		}
	}
	if = {
		limit = {
			ig:ig_armed_forces = {
				is_in_government = yes
			}
		}
		change_variable = {
			name = caudillo_next
			add = 1
		}
	}
	if = {
		limit = {
			OR = {
				has_law = law_type:law_autocracy
				has_law = law_type:law_technocracy
				has_law = law_type:law_oligarchy
				has_law = law_type:law_single_party_state
			}
		}
		change_variable = {
			name = caudillo_next
			add = 1
		}
	}
	if = {
		limit = {
			ig:ig_armed_forces = {
				is_marginal = yes
			}
		}
		change_variable = {
			name = caudillo_next
			add = -1
		}
	}
	if = {
		limit = {
			ig:ig_armed_forces = {
				is_in_government = no
			}
		}
		change_variable = {
			name = caudillo_next
			add = -1
		}
	}
	if = {
		limit = {
			any_scope_character = {
				OR = {
					has_role = general
					has_role = admiral
				}
				popularity >= 50 # Loved
			}
		}
		change_variable = {
			name = caudillo_next
			add = 1
		}
	}
	if = {
		limit = {
			any_scope_character = {
				has_role = politician
				NOT = { has_role = general }
				popularity >= 50 # Loved
				interest_group = {
					is_powerful = yes
					AND = {
						law_stance = {
							law = law_type:law_autocracy
							value <= neutral
						}
						law_stance = {
							law = law_type:law_technocracy
							value >= neutral
						}
						law_stance = {
							law = law_type:law_oligarchy
							value >= neutral
						}
						law_stance = {
							law = law_type:law_single_party_state
							value >= neutral
						}
					}
				}
			}
			NOT = {
				any_scope_character = {
					has_role = general
					popularity >= 50 # Loved
				}
			}
		}
		change_variable = {
			name = caudillo_next
			add = -1
		}
	}
	if = {
		limit = {
			any_scope_character = {
				is_ruler = yes
				has_ideology = ideology:ideology_authoritarian
			}
		}
		change_variable = {
			name = caudillo_next
			add = 1
		}
	}
	if = {
		limit = {
			OR = {
				has_law = law_type:law_census_voting
				has_law = law_type:law_universal_suffrage
			}
		}
		change_variable = {
			name = caudillo_next
			add = -1
		}
	}
}

chi_add_1_fragile_unity = {
	custom_tooltip = chi_add_1_fragile_unity_tt
	post_notification = warlord_china_explosion_point_add
	change_variable = {
		name = china_warlord_explosion
		add = 1
	}
}

chi_remove_1_fragile_unity = {
	custom_tooltip = chi_remove_1_fragile_unity_tt
	post_notification = warlord_china_explosion_point_remove
	change_variable = {
		name = china_warlord_explosion
		subtract = 1
	}
}

reset_afghan_treaty = {
	custom_tooltip = {
		text = reset_afghan_treaty_tt
		if = {
			limit = {
				has_variable = proposed_durand_line
			}
			remove_variable = proposed_durand_line
		}
		if = {
			limit = {
				has_variable = proposed_indus_line
			}
			remove_variable = proposed_indus_line
		}
		if = {
			limit = {
				has_variable = proposed_status_quo
			}
			remove_variable = proposed_status_quo
		}
		if = {
			limit = {
				has_variable = proposed_torkestan_line
			}
			remove_variable = proposed_torkestan_line
		}
		if = {
			limit = {
				has_variable = proposed_amu_darya_line
			}
			remove_variable = proposed_amu_darya_line
		}
		if = {
			limit = {
				has_variable = proposed_status_quo_north
			}
			remove_variable = proposed_status_quo_north
		}
		if = {
			limit = {
				has_variable = proposed_compensation_for_afghanistan
			}
			remove_variable = proposed_compensation_for_afghanistan
		}
		if = {
			limit = {
				has_variable = proposed_reprisals_for_afghanistan
			}
			remove_variable = proposed_reprisals_for_afghanistan
		}
		if = {
			limit = {
				has_variable = afghanistan_delimitation_treaty_approved
			}
			remove_variable = afghanistan_delimitation_treaty_approved
		}
	}
}

clear_afghanistan_variables = { # Different from the treaty one. This can't clear the delimitation treaty approved variable, as it's required for JE cleanup.
	if = {
		limit = {
			has_variable = proposed_durand_line
		}
		remove_variable = proposed_durand_line
	}
	if = {
		limit = {
			has_variable = proposed_indus_line
		}
		remove_variable = proposed_indus_line
	}
	if = {
		limit = {
			has_variable = proposed_status_quo
		}
		remove_variable = proposed_status_quo
	}
	if = {
		limit = {
			has_variable = proposed_torkestan_line
		}
		remove_variable = proposed_torkestan_line
	}
	if = {
		limit = {
			has_variable = proposed_amu_darya_line
		}
		remove_variable = proposed_amu_darya_line
	}
	if = {
		limit = {
			has_variable = proposed_status_quo_north
		}
		remove_variable = proposed_status_quo_north
	}
	if = {
		limit = {
			has_variable = proposed_compensation_for_afghanistan
		}
		remove_variable = proposed_compensation_for_afghanistan
	}
	if = {
		limit = {
			has_variable = proposed_reprisals_for_afghanistan
		}
		remove_variable = proposed_reprisals_for_afghanistan
	}
	if = {
		limit = {
			has_variable = afghan_notification_sender
		}
		remove_variable = afghan_notification_sender
	}
	if = {
		limit = {
			has_variable = afghanistan_rejection
		}
		remove_variable = afghanistan_rejection
	}
	if = {
		limit = {
			has_variable = north_border_rejected
		}
		remove_variable = north_border_rejected
	}
	if = {
		limit = {
			has_variable = southwest_border_rejected
		}
		remove_variable = southwest_border_rejected
	}
}

handle_revolutionary_sps = {
	hidden_effect = {
		random_active_party = {
			disband_party = yes
		}
		scripted_effect_parties_disappearence = yes
		clear_legal_single_party = yes
		if = {
			limit = {
				ROOT = {
					ruler.interest_group = {
						has_party = yes
					}
				}
			}
			ROOT = {
				set_variable = { name = only_valid_party value = ruler.interest_group.party }
			}
		}
		else_if = {
			limit = {
				NOT = {
					any_active_party = {
						exists = this
					}
				}
			}
			root = { gen_ruler_party = yes }
		}
	}
	hidden_effect = { #Clears all currently active parties
		deactivate_parties = yes
	}
	update_party_support = yes #Reactivates precisely one legal party
	
	custom_tooltip = {
		text = sps_government_reshuffle_tt
		every_interest_group = {
			limit = {
				is_in_government = yes
				NOT = { #Removes all IGs from government that aren't in your party
					has_party = yes
				}
			}
			remove_ruling_interest_group = yes
		}
		every_interest_group = {
			limit = { #Adds all IGs that are in your party to the government
				is_in_government = no
				has_party = yes
			}
			add_ruling_interest_group = yes
		}
	}
}

great_game_britain_progress_10 = {
	custom_tooltip = {
		text = great_game_points_britain_increases_10_tt
		every_country = {
			limit = {
				has_journal_entry = je_great_game_control
			}
			je:je_great_game_control = {
				add_progress = { value = -10 name = great_game_core_progress_bar }
			}
			update_gg_progressbar_tooltips = yes
		}
	}
}

great_game_britain_progress_15 = {
	custom_tooltip = {
		text = great_game_points_britain_increases_15_tt
		every_country = {
			limit = {
				has_journal_entry = je_great_game_control
			}
			je:je_great_game_control = {
				add_progress = { value = -15 name = great_game_core_progress_bar }
			}
			update_gg_progressbar_tooltips = yes
		}
	}
}

great_game_britain_progress_25 = {
	custom_tooltip = {
		text = great_game_points_britain_increases_25_tt
		every_country = {
			limit = {
				has_journal_entry = je_great_game_control
			}
			je:je_great_game_control = {
				add_progress = { value = -25 name = great_game_core_progress_bar }
			}
			update_gg_progressbar_tooltips = yes
		}
	}
}

great_game_britain_progress_50 = {
	custom_tooltip = {
		text = great_game_points_britain_increases_50_tt
		every_country = {
			limit = {
				has_journal_entry = je_great_game_control
			}
			je:je_great_game_control = {
				add_progress = { value = -50 name = great_game_core_progress_bar }
			}
			update_gg_progressbar_tooltips = yes
		}
	}
}

great_game_russia_progress_10 = {
	custom_tooltip = {
		text = great_game_points_russia_increases_10_tt
		every_country = {
			limit = {
				has_journal_entry = je_great_game_control
			}
			je:je_great_game_control = {
				add_progress = { value = 10 name = great_game_core_progress_bar }
			}
			update_gg_progressbar_tooltips = yes
		}
	}
}

great_game_russia_progress_15 = {
	custom_tooltip = {
		text = great_game_points_russia_increases_15_tt
		every_country = {
			limit = {
				has_journal_entry = je_great_game_control
			}
			je:je_great_game_control = {
				add_progress = { value = 15 name = great_game_core_progress_bar }
			}
			update_gg_progressbar_tooltips = yes
		}
	}
}

great_game_russia_progress_25 = {
	custom_tooltip = {
		text = great_game_points_russia_increases_25_tt
		every_country = {
			limit = {
				has_journal_entry = je_great_game_control
			}
			je:je_great_game_control = {
				add_progress = { value = 25 name = great_game_core_progress_bar }
			}
			update_gg_progressbar_tooltips = yes
		}
	}
}

complete_great_game_effect = {
	set_global_variable = persia_conflict_started
	set_global_variable = afghanistan_conflict_started
	set_global_variable = korean_protectorate_started
	set_global_variable = central_asia_consolidation_happened
	set_global_variable = kazakhstan_revolt_happened
	set_global_variable = caucasian_war_happened
	random_list = {
		50 = {
			set_global_variable = caucasus_consolidated_var
		}
		50 = {
			set_global_variable = caucasus_failure_var
		}
	}
	random_list = {
		50 = {
			set_global_variable = kazakhstan_victory_var
		}
		50 = {
			set_global_variable = kazakhstan_defeat_var
		}
	}
	set_global_variable = khanates_russia_victory_var
	random_list = {
		50 = {
			set_global_variable = korean_protectorate_success
		}
		50 = {
			set_global_variable = korean_protectorate_failure
		}
	}
	random_list = {
		50 = {
			set_global_variable = afghanistan_russia_victory_var
		}
		50 = {
			set_global_variable = afghanistan_britain_victory_var
		}
		50 = {
			set_global_variable = afghanistan_afghan_victory_var
		}
	}
	random_list = {
		50 = {
			set_global_variable = persia_russia_victory_var
		}
		50 = {
			set_global_variable = persia_britain_victory_var
		}
		50 = {
			set_global_variable = persia_persian_victory_var
		}
	}
	set_global_variable = china_border_codified_variable
	set_global_variable = manchurian_railway_variable
	set_global_variable = trans_siberian_done
	set_global_variable = consolidated_british_india_variable
	set_global_variable = contained_russian_pacific_variable
}

generate_pro_lobby_diplomatic_pact_opportunity = {
	random_list = {
		20 = {
			trigger = {
				can_create_diplomatic_pact = { target = scope:relevant_country type = trade_agreement }
				NOT = {
					has_diplomatic_pact = {
						who = scope:relevant_country
						type = trade_agreement
					}
				}
			}
			set_variable = pro_lobby_proposal_trade_agreement
		}
		20 = {
			trigger = {
				can_create_diplomatic_pact = { target = scope:relevant_country type = defensive_pact }
				NOT = {
					has_diplomatic_pact = {
						who = scope:relevant_country
						type = defensive_pact
					}
				}
			}
			set_variable = pro_lobby_proposal_defensive_pact
		}
		20 = {
			trigger = {
				can_create_diplomatic_pact = { target = scope:relevant_country type = alliance }
				NOT = {
					has_diplomatic_pact = {
						who = scope:relevant_country
						type = alliance
					}
				}
			}
			set_variable = pro_lobby_proposal_alliance
		}
		20 = {
			trigger = {
				OR = {
					can_create_diplomatic_pact = { target = scope:relevant_country type = foreign_investment_agreement }
					can_create_diplomatic_pact = { target = scope:relevant_country type = foreign_investment_rights }
				}
				NOR = {
					has_diplomatic_pact = {
						who = scope:relevant_country
						type = foreign_investment_rights
					}
					has_diplomatic_pact = {
						who = scope:relevant_country
						type = foreign_investment_agreement
					}
				}
			}
			set_variable = pro_lobby_proposal_investment_agreement
		}
		20 = {
			trigger = {
				scope:relevant_country = {
					is_power_bloc_leader = yes
				}
				can_create_diplomatic_pact = { target = scope:relevant_country type = join_power_bloc }
				NOT = {
					is_in_same_power_bloc = scope:relevant_country
				}
			}
			set_variable = pro_lobby_proposal_power_bloc
		}
		20 = {
			trigger = {
				is_power_bloc_leader = yes
				can_create_diplomatic_pact = { target = scope:relevant_country type = invite_to_power_bloc }
				NOT = {
					is_in_same_power_bloc = scope:relevant_country
				}
			}
			set_variable = pro_lobby_proposal_power_bloc_invite
		}
	}
}

generate_pro_lobby_diplomatic_pact_proposal = {
	random_list = {
		20 = { # Break an alliance
			trigger = {
				can_break_diplomatic_pact = { target = scope:third_party_country type = alliance }
			}
			set_variable = pro_lobby_proposal_break_alliance
		}
		20 = { # Break a trade agreement
			trigger = {
				can_break_diplomatic_pact = { target = scope:third_party_country type = trade_agreement }
			}
			set_variable = pro_lobby_proposal_break_trade_agreement
		}
		20 = { # Break a defensive pact
			trigger = {
				can_break_diplomatic_pact = { target = scope:third_party_country type = defensive_pact }
			}
			set_variable = pro_lobby_proposal_break_defensive_pact
		}
		20 = { # Do a rivalry
			trigger = {
				can_create_diplomatic_pact = { target = scope:third_party_country type = rivalry }
			}
			set_variable = pro_lobby_proposal_rivalry
		}
		20 = { # Do an embargo
			trigger = {
				can_create_diplomatic_pact = { target = scope:third_party_country type = embargo }
			}
			set_variable = pro_lobby_proposal_embargo
		}
		20 = { # Do a war
			trigger = {
				pro_lobby_war_valid_check = yes
			}
			set_variable = pro_lobby_proposal_war
		}
		20 = { # Leave Power Bloc
			trigger = {
				pro_lobby_leave_power_bloc_valid_check = yes
			}
			set_variable = pro_lobby_proposal_leave_power_bloc
		}
	}
}

generate_anti_lobby_diplomatic_pact_opportunity = {
	random_list = {
		20 = {
			trigger = {
				can_create_diplomatic_pact = { target = scope:third_party_country type = trade_agreement }
				NOT = {
					has_diplomatic_pact = {
						who = scope:third_party_country
						type = trade_agreement
					}
				}
			}
			set_variable = anti_lobby_proposal_trade_agreement
		}
		20 = {
			trigger = {
				can_create_diplomatic_pact = { target = scope:third_party_country type = defensive_pact }
				NOT = {
					has_diplomatic_pact = {
						who = scope:third_party_country
						type = defensive_pact
					}
				}
			}
			set_variable = anti_lobby_proposal_defensive_pact
		}
		20 = {
			trigger = {
				can_create_diplomatic_pact = { target = scope:third_party_country type = alliance }
				NOT = {
					has_diplomatic_pact = {
						who = scope:third_party_country
						type = alliance
					}
				}
			}
			set_variable = anti_lobby_proposal_alliance
		}
		20 = {
			trigger = {
				OR = {
					can_create_diplomatic_pact = { target = scope:relevant_country type = foreign_investment_agreement }
					can_create_diplomatic_pact = { target = scope:relevant_country type = foreign_investment_rights }
				}
				NOR = {
					has_diplomatic_pact = {
						who = scope:third_party_country
						type = foreign_investment_rights
					}
					has_diplomatic_pact = {
						who = scope:third_party_country
						type = foreign_investment_agreement
					}
				}
			}
			set_variable = anti_lobby_proposal_investment_agreement
		}
		20 = {
			trigger = {
				scope:third_party_country = {
					is_power_bloc_leader = yes
				}
				can_create_diplomatic_pact = { target = scope:third_party_country type = join_power_bloc }
				NOT = {
					is_in_same_power_bloc = scope:third_party_country
				}
			}
			set_variable = anti_lobby_proposal_power_bloc
		}
		20 = {
			trigger = {
				is_power_bloc_leader = yes
				can_create_diplomatic_pact = { target = scope:third_party_country type = invite_to_power_bloc }
				NOT = {
					is_in_same_power_bloc = scope:third_party_country
				}
			}
			set_variable = anti_lobby_proposal_power_bloc_invite
		}
	}
}

generate_anti_lobby_diplomatic_pact_proposal = {
	random_list = {
		20 = { # Break an alliance
			trigger = {
				can_break_diplomatic_pact = { target = scope:relevant_country type = alliance }
			}
			set_variable = anti_lobby_proposal_break_alliance
		}
		20 = { # Break a trade agreement
			trigger = {
				can_break_diplomatic_pact = { target = scope:relevant_country type = trade_agreement }
			}
			set_variable = anti_lobby_proposal_break_trade_agreement
		}
		20 = { # Break a defensive pact
			trigger = {
				can_break_diplomatic_pact = { target = scope:relevant_country type = defensive_pact }
			}
			set_variable = anti_lobby_proposal_break_defensive_pact
		}
		20 = { # Do a rivalry
			trigger = {
				can_create_diplomatic_pact = { target = scope:relevant_country type = rivalry }
			}
			set_variable = anti_lobby_proposal_rivalry
		}
		20 = { # Do an embargo
			trigger = {
				can_create_diplomatic_pact = { target = scope:relevant_country type = embargo }
			}
			set_variable = anti_lobby_proposal_embargo
		}
		20 = { # Do a war
			trigger = {
				anti_lobby_war_valid_check = yes
			}
			set_variable = anti_lobby_proposal_war
		}
		20 = { # Leave Power Bloc
			trigger = {
				anti_lobby_leave_power_bloc_valid_check = yes
			}
			set_variable = anti_lobby_proposal_leave_power_bloc
		}
	}
}

clear_anti_lobby_vars = {
	remove_variable = anti_lobby_proposal_break_alliance
	remove_variable = anti_lobby_proposal_break_trade_agreement
	remove_variable = anti_lobby_proposal_break_defensive_pact
	remove_variable = anti_lobby_proposal_rivalry
	remove_variable = anti_lobby_proposal_embargo
	remove_variable = anti_lobby_proposal_war
	remove_variable = anti_lobby_proposal_leave_power_bloc
	remove_variable = anti_lobby_proposal_defensive_pact
	remove_variable = anti_lobby_proposal_alliance
	remove_variable = anti_lobby_proposal_trade_agreement
	remove_variable = anti_lobby_proposal_power_bloc
	remove_variable = anti_lobby_proposal_power_bloc_invite
	remove_variable = anti_lobby_proposal_investment_agreement
	remove_variable = anti_lobby_opportunity_target
	remove_variable = anti_lobby_demand_target
}

clear_pro_lobby_vars = {
	remove_variable = pro_lobby_proposal_defensive_pact
	remove_variable = pro_lobby_proposal_alliance
	remove_variable = pro_lobby_proposal_trade_agreement
	remove_variable = pro_lobby_proposal_power_bloc
	remove_variable = pro_lobby_proposal_power_bloc_invite
	remove_variable = pro_lobby_proposal_investment_agreement
	remove_variable = pro_lobby_proposal_break_alliance
	remove_variable = pro_lobby_proposal_break_trade_agreement
	remove_variable = pro_lobby_proposal_break_defensive_pact
	remove_variable = pro_lobby_proposal_rivalry
	remove_variable = pro_lobby_proposal_embargo
	remove_variable = pro_lobby_proposal_war
	remove_variable = pro_lobby_proposal_leave_power_bloc
	remove_variable = pro_lobby_demand_target
	remove_variable = pro_lobby_opportunity_target
}

update_gg_progressbar_tooltips = {
	je:je_great_game_control = {
		if = {
			limit = {
				"scripted_bar_progress(great_game_core_progress_bar)" < 0
			}
			set_bar_progress = { value = 0 name = great_game_core_progress_bar }
		}
		if = {
			limit = {
				"scripted_bar_progress(great_game_core_progress_bar)" > 200
			}
			set_bar_progress = { value = 200 name = great_game_core_progress_bar }
		}
		set_global_variable = { name = great_game_gbr_progress value = "scripted_bar_progress(great_game_core_progress_bar)" }
		set_global_variable = { name = great_game_rus_progress value = 200 }
		change_global_variable = { name = great_game_rus_progress subtract = global_var:great_game_gbr_progress }
	}
}

clear_great_game_variables = {
	remove_global_variable = great_game_gbr_progress
	remove_global_variable = great_game_rus_progress
	remove_global_variable = great_game_british_passive_var
	remove_global_variable = great_game_russian_passive_var
	remove_global_variable = great_game_balance_passive_var
	remove_global_variable = great_game_central_asia_gdp
}

calculate_great_game_passive_progress = {
	set_global_variable = { name = great_game_russian_passive_var value = 0 }
	set_global_variable = { name = great_game_british_passive_var value = 0 }
	set_global_variable = { name = great_game_balance_passive_var value = 0 }
	set_global_variable = { name = great_game_central_asia_gdp value = 0 }
	
	every_state = {
		limit = {
			OR = {
				region = sr:region_central_asia
				region = sr:region_persia
			}
		}
		change_global_variable = { name = great_game_central_asia_gdp add = this.gdp }
	}

	change_global_variable = { name = great_game_central_asia_gdp divide = 1000 }

	c:GBR ?= {
		every_scope_state = {
			limit = {
				OR = {
					region = sr:region_central_asia
					region = sr:region_persia
				}
			}
			change_global_variable = { name = great_game_british_passive_var add = this.gdp }
		}
		every_subject_or_below = {
			limit = {
				any_scope_state = {
					OR = {
						region = sr:region_central_asia
						region = sr:region_persia
					}
				}
			}
			every_scope_state = {
				limit = {
					OR = {
						region = sr:region_central_asia
						region = sr:region_persia
					}
				}
				change_global_variable = { name = great_game_british_passive_var add = this.gdp }
			}
		}
		power_bloc ?= {
			every_power_bloc_member = {
				limit = {
					NOR = {
						c:GBR ?= this
						is_subject_of = c:GBR
					}
					any_scope_state = {
						OR = {
							region = sr:region_central_asia
							region = sr:region_persia
						}
					}
				}
				every_scope_state = {
					limit = {
						OR = {
							region = sr:region_central_asia
							region = sr:region_persia
						}
					}
					change_global_variable = { name = great_game_british_passive_var add = this.gdp }
				}
			}
		}
		change_global_variable = { name = great_game_british_passive_var divide = 1000 }
		change_global_variable = { name = great_game_british_passive_var divide = global_var:great_game_central_asia_gdp }
	}
	
	c:RUS ?= {
		every_scope_state = {
			limit = {
				OR = {
					region = sr:region_central_asia
					region = sr:region_persia
				}
			}
			change_global_variable = { name = great_game_russian_passive_var add = this.gdp }
		}
		every_subject_or_below = {
			limit = {
				any_scope_state = {
					OR = {
						region = sr:region_central_asia
						region = sr:region_persia
					}
				}
			}
			every_scope_state = {
				limit = {
					OR = {
						region = sr:region_central_asia
						region = sr:region_persia
					}
				}
				change_global_variable = { name = great_game_russian_passive_var add = this.gdp }
			}
		}
		power_bloc ?= {
			every_power_bloc_member = {
				limit = {
					NOR = {
						c:RUS ?= this
						is_subject_of = c:RUS
					}
					any_scope_state = {
						OR = {
							region = sr:region_central_asia
							region = sr:region_persia
						}
					}
				}
				every_scope_state = {
					limit = {
						OR = {
							region = sr:region_central_asia
							region = sr:region_persia
						}
					}
					change_global_variable = { name = great_game_russian_passive_var add = this.gdp }
				}
			}
		}
		change_global_variable = { name = great_game_russian_passive_var divide = 1000 }
		change_global_variable = { name = great_game_russian_passive_var divide = global_var:great_game_central_asia_gdp  }
	}

	set_global_variable = { name = great_game_balance_passive_var value = global_var:great_game_russian_passive_var }
	change_global_variable = { name = great_game_balance_passive_var subtract = global_var:great_game_british_passive_var }
	change_global_variable = { name = great_game_balance_passive_var multiply = 5 }
}
﻿# This is a dummy file to ensure the folder gets created, remove this file if any actually useful files get added to this folder
﻿great_game_core_progress_bar = {
 	name = "great_game_core_progress_bar_name"
 	desc = "great_game_core_progress_bar_britain_desc"
 	second_desc = "great_game_core_progress_bar_russia_desc"

 	double_sided_gold = yes

 	yearly_progress = {
		if = {
			limit = {
				exists = global_var:great_game_balance_passive_var
				NOT = {
					global_var:great_game_balance_passive_var = 0
				}
			}
			add = {
			   desc = "great_game_core_progress_passive_balance"
			   value = global_var:great_game_balance_passive_var
		    }
		}
 	}

 	start_value = 100
 	min_value = 0
 	max_value = 200
}
﻿ ### For je_divided_monarchists

 divided_monarchists_bonapartist_progress_bar = {
	name = "divided_monarchists_bonapartist_progress_bar"
	desc = "divided_monarchists_bonapartist_progress_bar_desc"

	default = yes

	monthly_progress = {
		if = {
			limit = {
				NOT = {
					has_variable = fra_divided_monarchists_freeze #This variable stops iteration, and is granted by reaching 360 with one dynasty. It's reset when this JE is completed, or when je_cement_the_rightful_dynasty fails.
				}
			}
			add = {
				desc = "bonapartist_progress_from_characters"
				value = owner.var:bonapartist_progress_from_characters
			}
			add = {
				desc = "bonapartist_progress_from_igs"
				value = owner.var:bonapartist_progress_from_igs
			}
			add = {
				desc = "bonapartist_progress_from_military"
				value = owner.var:bonapartist_progress_from_military
			}
			add = {
				desc = "bonapartist_progress_from_legitimacy"
				value = owner.var:bonapartist_progress_from_legitimacy
			}
			add = {
				desc = "bonapartist_progress_from_effects"
				value = owner.var:bonapartist_progress_from_effects
			}
		}
	}

	start_value = 10
	min_value = 0
	max_value = 360

 }

 divided_monarchists_orleanist_progress_bar = {
	name = "divided_monarchists_orleanist_progress_bar"
	desc = "divided_monarchists_orleanist_progress_bar_desc"

	default_bad = yes

	monthly_progress = {
		if = {
			limit = {
				NOT = {
					has_variable = fra_divided_monarchists_freeze #This variable stops iteration, and is granted by reaching 360 with one dynasty. It's reset when this JE is completed, or when je_cement_the_rightful_dynasty fails.
				}
			}
			add = {
				desc = "orleanist_progress_from_characters"
				value = owner.var:orleanist_progress_from_characters
			}
			add = {
				desc = "orleanist_progress_from_igs"
				value = owner.var:orleanist_progress_from_igs
			}
			add = {
				desc = "orleanist_progress_from_factories"
				value = owner.var:orleanist_progress_from_factories
			}
			add = {
				desc = "orleanist_progress_from_legitimacy"
				value = owner.var:orleanist_progress_from_legitimacy
			}
			add = {
				desc = "orleanist_progress_from_effects"
				value = owner.var:orleanist_progress_from_effects
			}
		}
	}

	start_value = 25
	min_value = 0
	max_value = 360

 }

 divided_monarchists_legitimist_progress_bar = {
	name = "divided_monarchists_legitimist_progress_bar"
	desc = "divided_monarchists_legitimist_progress_bar_desc"

	default_green = yes

	monthly_progress = {
		if = {
			limit = {
				NOT = {
					has_variable = fra_divided_monarchists_freeze #This variable stops iteration, and is granted by reaching 360 with one dynasty. It's reset when this JE is completed, or when je_cement_the_rightful_dynasty fails.
				}
			}
			add = {
				desc = "legitimist_progress_from_characters"
				value = owner.var:legitimist_progress_from_characters
			}
			add = {
				desc = "legitimist_progress_from_igs"
				value = owner.var:legitimist_progress_from_igs
			}
			add = {
				desc = "legitimist_progress_from_farms"
				value = owner.var:legitimist_progress_from_farms
			}
			add = {
				desc = "legitimist_progress_from_legitimacy"
				value = owner.var:legitimist_progress_from_legitimacy
			}
			add = {
				desc = "legitimist_progress_from_effects"
				value = owner.var:legitimist_progress_from_effects
			}
		}
	}

	start_value = 10
	min_value = 0
	max_value = 360

 }

 ### For je_communism_1

 communism_1_progress_bar = {
	name = "communism_1_progress_bar"
	desc = "communism_1_progress_bar_desc"

	default_bad = yes

	monthly_progress = {
		if = {
			limit = {
				owner = {
					any_scope_state = {
						is_incorporated = yes
						turmoil >= 0.10
					}
				}
			}
			add = {
				desc = "communism_progress_from_radicals_tt"
				owner = {
					every_scope_state = {
						limit = {
							is_incorporated = yes
							turmoil >= 0.10
						}
						add = this.turmoil
					}
				}
			}
		}
		if = {
			limit = {
				owner = {
					any_scope_state = {
						is_incorporated = yes
						loyalty >= 0.10
					}
				}
			}
			subtract = {
				desc = "communism_progress_from_loyalists_tt"
				owner = {
					every_scope_state = {
						limit = {
							is_incorporated = yes
							loyalty >= 0.10
						}
						add = this.loyalty
					}
				}
			}
		}
		if = {
			limit = {
				exists = owner.var:communism_progress_from_poverty
				owner.var:communism_progress_from_poverty > 0
			}
			add = {
				desc = "communism_progress_from_poverty_tt"
				value = owner.var:communism_progress_from_poverty
			}
		}
		if = {
			limit = {
				owner = {
					any_scope_character = {
						OR = {
							has_ideology = ideology:ideology_communist
							has_ideology = ideology:ideology_vanguardist
							has_ideology = ideology:ideology_anarchist
						}
					}
				}
			}
			add = {
				desc = "communism_progress_from_characters_tt"
				owner = {
					every_scope_character = {
						limit = {
							OR = {
								has_ideology = ideology:ideology_communist
								has_ideology = ideology:ideology_vanguardist
								has_ideology = ideology:ideology_anarchist
							}
						}
						add = this.popularity
						divide = 100
					}
				}
			}
		}
		if = {
			limit = {
				owner = {
					any_interest_group = {
						OR = {
							law_stance = {
								law = law_type:law_council_republic
								value = approve
							}
							law_stance = {
								law = law_type:law_council_republic
								value = strongly_approve
							}
						}
					}
				}
			}
			add = {
				desc = "communism_progress_from_interest_groups_tt"
				owner = {
					every_interest_group = {
						limit = {
							OR = { # There is a very good reason for this, and that's because of the 'count' value causing problems with a greater-than.
								law_stance = {
									law = law_type:law_council_republic
									value = approve
								}
								law_stance = {
									law = law_type:law_council_republic
									value = strongly_approve
								}
							}
						}
						add = this.ig_clout
					}
				}
			}
		}
		if = {
			limit = {
				exists = owner.var:communism_progress_from_laws
				NOT = {  
					owner.var:communism_progress_from_laws = 0
				}
			}
			add = {
				desc = "communism_progress_from_laws_tt"
				value = owner.var:communism_progress_from_laws
			}
		}
		if = {
			limit = {
				exists = owner.var:communism_progress_var_add
				NOT = {  
					owner.var:communism_progress_var_add = 0
				}
			}
			add = {
				desc = "communism_progress_from_events_tt"
				value = owner.var:communism_progress_var_add
			}
		}
	}

	start_value = 10
	min_value = 0
	max_value = 100

 }

 
 ### For je_populist_unrest

 populist_unrest_progress_bar = {
	name = "populist_unrest_progress_bar"
	desc = "populist_unrest_progress_bar_desc"

	default = yes

	monthly_progress = {
		if = {
			limit = {
				owner = {
					any_scope_state = {
						is_incorporated = yes
						turmoil >= 0.10
					}
				}
			}
			add = {
				desc = "populism_progress_from_radicals_tt"
				owner = {
					every_scope_state = {
						limit = {
							is_incorporated = yes
							turmoil >= 0.10
						}
						add = this.turmoil
					}
				}
			}
		}
		if = {
			limit = {
				owner = {
					any_scope_state = {
						is_incorporated = yes
						loyalty >= 0.10
					}
				}
			}
			subtract = {
				desc = "populism_progress_from_loyalists_tt"
				owner = {
					every_scope_state = {
						limit = {
							is_incorporated = yes
							loyalty >= 0.10
						}
						add = this.loyalty
					}
				}
			}
		}
		if = {
			limit = {
				owner = {
					any_scope_state = {
						is_incorporated = yes
						state_unemployment_rate > 0
					}
				}
			}
			subtract = {
				desc = "populism_progress_from_unemployment_tt"
				owner = {
					every_scope_state = {
						limit = {
							is_incorporated = yes
							state_unemployment_rate > 0
						}
						add = this.state_unemployment_rate
					}
				}
			}
		}
		add = {
			desc = "populism_progress_from_pb_tt"
			if = {
				limit = {
					owner = {
						ig:ig_petty_bourgeoisie = {
							is_marginal = yes
						}
					}
				}
				value = -10
			}
			else_if = {
				limit = {
					owner = {
						ig:ig_petty_bourgeoisie = {
							is_powerful = yes
						}
					}
				}
				value = 3
			}
			else = {
				value = 0
			}
		}
		if = {
			limit = {
				exists = owner.var:populism_progress_from_laws
				NOT = {  
					owner.var:populism_progress_from_laws = 0
				}
			}
			add = {
				desc = "populism_progress_from_laws_tt"
				value = owner.var:populism_progress_from_laws
			}
		}
		if = {
			limit = {
				exists = owner.var:populism_progress_var_add
				NOT = {  
					owner.var:populism_progress_var_add = 0
				}
			}
			add = {
				desc = "populism_progress_from_events_tt"
				value = owner.var:populism_progress_var_add
			}
		}
	}

	start_value = 10
	min_value = 0
	max_value = 100

 }
 
 ### For je_matter_of_slavery

 matter_of_slavery_progress_bar = {
	name = "matter_of_slavery_progress_bar"
	desc = "matter_of_slavery_progress_bar_desc"

	default_green = yes

	monthly_progress = {
		if = {
			limit = {
				NOT = {
					any_political_movement = {
						is_political_movement_type = movement_to_preserve
						OR = {
							this.desired_law = law_type:law_legacy_slavery
							this.desired_law = law_type:law_debt_slavery
							this.desired_law = law_type:law_slave_trade
						}
					}
				}
			}
			 # Towards Slaveowner Domination
			if = {
				limit = {
					ig:ig_landowners = {
						is_in_government = yes
					}
				}
				subtract = {
					desc = "slavery_progress_from_landowners_in_gov_tt"
					value = 1
				}
			}
			if = {
				limit = {
					ig:ig_landowners = {
						is_powerful = yes
					}
				}
				subtract = {
					desc = "slavery_progress_from_landowners_powerful_tt"
					value = 1
				}
			}
			if = {
				limit = {
					has_modifier = brz_regency
				}
				subtract = {
					desc = "slavery_progress_from_regency_tt"
					value = 1
				}
			}
			if = {
				limit = {
					ruler = {
						OR = {
							interest_group = {
								is_interest_group_type = ig_landowners
							}
							has_ideology = ideology:ideology_slaver
						}
					}
				}
				subtract = {
					desc = "slavery_progress_from_slaver_ruler_tt"
					value = 1
				}
			}
			if = {
				limit = {
					any_scope_character = {
						filter = {
							OR = {
								has_role = admiral
								has_role = general
							}
						}
						OR = {
							has_ideology = ideology:ideology_slaver
							interest_group = {
								is_interest_group_type = ig_landowners
							}
						}
						percent >= 0.5
					}
				}
				subtract = {
					desc = "slavery_progress_from_slavers_tt"
					value = 1
				}
			}
			# Away from slaveowner Domination
			if = {
				limit = {
					has_variable = var_slave_trade_suppression_var
				}
				add = {
					desc = "slavery_progress_from_suppression_tt"
					value = 1
				}
			}
			if = {
				limit = {
					ig:ig_landowners = {
						is_marginal = yes
					}
				}
				add = {
					desc = "slavery_progress_from_marginal_landowners_tt"
					value = 1
				}
			}
			if = {
				limit = {
					ig:ig_intelligentsia = {
						is_in_government = yes
					}
				}
				add = {
					desc = "slavery_progress_from_intelligentsia_tt"
					value = 1
				}
			}
			if = {
				limit = {
					NOT = { 
						has_law = law_type:law_slave_trade
					}
				}
				add = {
					desc = "slavery_progress_from_abolished_slave_trade_tt"
					value = 1
				}
			}
			if = {
				limit = {
					NOT = { 
						has_modifier = brz_regency 
					}
				}
				add = {
					desc = "slavery_progress_from_ended_regency_tt"
					value = 1
				}
			}
			if = {
				limit = {
					has_variable = isabel_confirmed_heir_var
				}
				add = {
					desc = "slavery_progress_from_isabel_tt"
					value = 1
				}
			}
		}
	}

	start_value = 180
	min_value = 0
	max_value = 360
 }
﻿# Root = War
# scope:target_country = target of violate sovereignty
violate_sovereignty_war_check_rule = {
	violate_sovereignty_war_check = yes
}

# Root = Country
has_voting_franchise = {
	country_has_voting_franchise = yes
}

# Root = Country
can_form_power_bloc = {
	country_can_form_power_bloc = yes
}

# Root = Country
can_lead_power_bloc = {
	country_rank >= rank_value:major_power
}

# Root = Power Bloc
is_weak_power_bloc = {
	power_bloc_is_weak = yes
}

# Checks if any diplomatic play is possible against the target country
# Root = Country
# scope:target_country = target of a diplomatic play
can_start_diplomatic_plays_against = {
	# Might be disallowed by power bloc
	NOT = {
		custom_tooltip = {
			text = "power_bloc_disallow_war_bool"
			is_in_same_power_bloc = scope:target_country
			power_bloc ?= {
				modifier:power_bloc_disallow_war_bool = yes
			}
			# Conflicts between Overlord and (their own) Subject are always permitted despite Power Bloc special conditions
			NOR = {
				is_direct_subject_of = scope:target_country
				scope:target_country = {
					is_direct_subject_of = root
				}
			}
		}
	}
	NOT = {
		# Disallow plays targeting your indirect subjects
		scope:target_country = {
			is_indirect_subject_of = root
		}
	}
}

# Checks if Country can join the target country's side in a diplomatic play
# Root = Country
# scope:target_country = country of the side to join to
# scope:enemy_country = enemy country of target_country to which we could fight against
can_join_side_in_diplomatic_play = {
	# Might be disallowed by power bloc
	NOT = {
		custom_tooltip = {
			text = "POWER_BLOC_CANNOT_SIDE_AGAINST_OVERLORD"
			is_in_same_power_bloc = scope:target_country
			is_in_same_power_bloc = scope:enemy_country
			power_bloc ?= {
				modifier:power_bloc_disallow_war_bool = yes
			}
			# Conflicts between Overlord and (their own) Subject are always permitted despite Power Bloc special conditions
			# We can join the overlord side but not the subject's one
			scope:target_country = {
				is_direct_subject_of = scope:enemy_country
			}
		}
	}
	NOT = {
		# Disallow plays targeting your indirect subjects
		scope:enemy_country = {
			is_indirect_subject_of = root
		}
	}
}

# Evaluated if the law_type does not have its own trigger for this purpose
# root = imposing country
# scope:target_country = country imposed upon
# scope:law = the law type being considered
can_impose_law_default = {
	can_impose_law_default = yes
}

unlock_power_bloc_principle_slot_1 = {
	always = yes
}

unlock_power_bloc_principle_slot_2 = {
	hidden_trigger = {
		has_dlc_feature = power_bloc_features
	}
}

# If you ever change these conditions, remember to update the loc-key: TOOLTIP_LOCKED_PRINCIPLE_SLOT_3_DURING_FORMATION
unlock_power_bloc_principle_slot_3 = {
	hidden_trigger = {
		has_dlc_feature = power_bloc_features
	}
	OR = {
		hidden_trigger = {
			used_principle_slots >= 3
		}
		AND = {
			power_bloc_rank <= 5
			num_power_bloc_members >= 5
		}
	}
}

# If you ever change these conditions, remember to update the loc-key: TOOLTIP_LOCKED_PRINCIPLE_SLOT_4_DURING_FORMATION
unlock_power_bloc_principle_slot_4 = {
	hidden_trigger = {
		has_dlc_feature = power_bloc_features
	}
	OR = {
		hidden_trigger = {
			used_principle_slots = 4
		}
		AND = {
			power_bloc_rank <= 3
			num_power_bloc_members >= 10
		}
	}
}

unlock_power_bloc_formation_principle_slot_1 = {
	always = yes
}

unlock_power_bloc_formation_principle_slot_2 = {
	has_dlc_feature = power_bloc_features
}

unlock_power_bloc_formation_principle_slot_3 = {
	always = no
}

unlock_power_bloc_formation_principle_slot_4 = {
	always = no
}
﻿lenient_ai_behavior_trigger = {
	has_game_rule = lenient_ai_behavior
	scope:target_country = { is_player = yes }
}

harsh_ai_behavior_trigger = {
	has_game_rule = harsh_ai_behavior
	scope:target_country = { is_player = yes }
}

ai_strongly_desires_target_state = {
	OR = {
		has_secret_goal = { # AI wants to conquer the state owner
			who = scope:target_state.owner
			secret_goal = conquer
		}	
		scope:target_state = { has_claim_by = root } # AI always wants claims	
	}			
}

ai_desires_target_state = {
	OR = {
		ai_strongly_desires_target_state = yes
		scope:target_state = { is_homeland_of_country_cultures = root } # AI is interested in homelands
		AND = { # AI wants to unify split states
			scope:target_state = { 
				is_split_state = yes 
				state_region = { 
					any_scope_state = { owner = root }
				}
			}				
		}
		AND = { # Aggressive AI wants nearby land
			OR = {
				has_strategy = ai_strategy_world_revolution
				has_strategy = ai_strategy_territorial_expansion
			}					
			has_strategic_adjacency = scope:target_state
		}
		AND = { # Colonialist AI wants colonies
			OR = {
				has_strategy = ai_strategy_economic_imperialism
				has_strategy = ai_strategy_colonial_expansion
			}
			scope:target_state.owner = { is_country_type = unrecognized }				
			can_reach_target_state = yes
		}
		AND = { # AI wants nearby states if gifted them by overlord
			has_strategic_adjacency = scope:target_state
			any_overlord_or_above = { this = scope:target_country }
		}	
	}
}

ai_has_reasons_to_not_oppose_law = {
	OR = {
		any_political_movement = {
			desired_law ?= scope:law.type
			political_movement_radicalism >= 75
		}
		AND = {
			has_journal_entry = je_government_petition
			var:desired_law_var	?= scope:law			
		}
		AND = {
			has_journal_entry = je_law_imposition
			imposed_law	?= scope:law			
		}
	}
}

ai_has_enact_weight_modifier_journal_entries = {
	OR = {
		AND = {
			has_journal_entry = je_government_petition
			has_variable = desired_law_var
			scope:law = var:desired_law_var
		}
		AND = {
			has_journal_entry = je_law_imposition
			scope:law = imposed_law
		}
		AND = {
			has_journal_entry = je_gyojo_shinwon
			OR = {
				scope:law = scope:donghak_desired_law_1
				scope:law = scope:donghak_desired_law_2
				scope:law = scope:donghak_desired_law_3
			}
		}
	}
}

has_je_conquest_reason = {
	can_reach_target_country = yes

	OR = {	
		AND = {
			has_journal_entry = je_sick_man_syria
			exists = c:EGY
			$TARGET$ = c:EGY
		}

		AND = {
			has_journal_entry = je_opium_wars
			$TARGET$ = {
				has_variable = opium_wars_target
			}
		}

		AND = {
			has_journal_entry = je_boxer_rebellion
			$TARGET$ = {
				any_scope_state = {
					state_region = { is_homeland = cu:han }
				}
			}
		}

		AND = {
			has_journal_entry = je_greek_nationalism
			$TARGET$ = {
				any_scope_state = {
					state_region = { is_homeland = cu:greek }
					has_claim_by = root
				}
			}
		}

		AND = {
			has_journal_entry = je_consolidate_colonial_rule
			$TARGET$ = {
				is_country_type = unrecognized
				target_is_our_or_fellow_subject = no
				any_scope_state = {
					OR = {
						region = sr:region_north_india
						region = sr:region_south_india
						# himalayas intentionally excluded to make BIC less aggressive against Tibet etc
						state_region = s:STATE_BURMA
						state_region = s:STATE_KACHIN
						state_region = s:STATE_SHAN_STATES
						state_region = s:STATE_PEGU						
					}
				}
			}
		}

		AND = {
			has_strategy = ai_strategy_unify_china
			$TARGET$ = {
				has_variable = warlord_state
			}
		}

		AND = {
			has_journal_entry = je_age_of_princes
			has_strategy = ai_strategy_unify_ethiopia
			$TARGET$ = {
				any_scope_state = {
					OR = {
						state_region = s:STATE_AMHARA
						state_region = s:STATE_GONDER
					}
				}
			}
		}

		AND = {
			has_journal_entry = je_manifest_destiny_mexico
			$TARGET$ = {
				any_scope_state = {
					OR = {
						state_region = s:STATE_CALIFORNIA
						state_region = s:STATE_NEVADA
						state_region = s:STATE_UTAH
						state_region = s:STATE_COLORADO
						state_region = s:STATE_ARIZONA
						state_region = s:STATE_NEW_MEXICO
						state_region = s:STATE_TEXAS
					}
				}
			}
		}

		AND = {
			has_journal_entry = je_conquer_oregon
			$TARGET$ = {
				any_scope_state = {
					OR = {
						state_region = s:STATE_WASHINGTON
						state_region = s:STATE_IDAHO
						state_region = s:STATE_OREGON
					}
				}
			}
		}

		AND = {
			has_journal_entry = je_alaska
			$TARGET$ = {
				any_scope_state = {
					state_region = s:STATE_ALASKA
				}
			}
		}

		AND = {
			country_has_primary_culture = cu:russian
			has_law = law_type:law_national_supremacy
			$TARGET$ = {
				any_scope_state = {
					OR = {
						state_region = s:STATE_KUBAN
						state_region = s:STATE_DAGESTAN
					}
				}
			}
		}
		
		AND = {
			wants_to_solve_schleswig_holstein = yes
			$TARGET$ = {
				is_oppressor_of_schleswig_holstein = yes
			}
		}

		AND = {
			has_journal_entry = je_conquest_of_algeria
			$TARGET$ = {
				any_scope_state = {
					OR = {
						state_region = s:STATE_ALGIERS
						state_region = s:STATE_CONSTANTINE
						state_region = s:STATE_ORAN
						state_region = s:STATE_SAHARA
						state_region = s:STATE_EAST_SAHARA
					}
				}
			}
		}

		AND = {
			has_journal_entry = je_eastern_frontier
			$TARGET$ = {
				any_scope_state = {
					OR = {
						region = sr:region_persia
						region = sr:region_central_asia
						region = sr:region_north_india
					}
					has_claim_by = ROOT
				}
			}
		}
		
		AND = {
			has_journal_entry = je_unify_afghanistan
			is_afghan_nation = yes
			$TARGET$ = {
				OR = {
					is_afghan_nation = yes
					any_scope_state = {
						OR = {
							state_region = s:STATE_KABUL
							state_region = s:STATE_HERAT
							state_region = s:STATE_KANDAHAR
							state_region = s:STATE_CENTRAL_HIGHLANDS
						}
					}
				}
			}
		}
		
		AND = {
			c:GBR ?= this
			has_variable = committed_to_afghanistan_assistance
			$TARGET$ = {
				has_variable = AFG_appealed_to_RUS
			}
		}

		AND = {
			c:RUS ?= this
			has_variable = committed_to_afghanistan_assistance
			$TARGET$ = {
				has_variable = AFG_appealed_to_GBR
			}
		}	

		AND = {
			has_variable = sided_with_korean_gov
			scope:target_country = {
				country_has_primary_culture = cu:korean
				is_revolutionary = yes
			}
		}

		AND = {
			has_variable = sided_with_korean_rebels
			scope:target_country = {
				country_has_primary_culture = cu:korean
				is_revolutionary = no
			}
		}		
	}
}

has_je_subjugation_reason = {
	can_reach_target_country = yes

	OR = {	
		AND = {
			OR = {
				has_journal_entry = je_sick_man_syria
				has_journal_entry = je_veiled_protectorate
			}
			exists = c:EGY
			$TARGET$ = c:EGY		
		}
		AND = { # Open up Japan	
			has_strategy = ai_strategy_economic_imperialism
			has_technology_researched = nationalism # Just to make sure it doesn't happen immediately in 1836
			country_rank = rank_value:great_power
			navy_size >= 25
			scope:target_country = { 
				exists = c:JAP
				this = c:JAP		
				has_law = law_type:law_isolationism
				gdp >= 5000000
			} 		
		}
		AND = {
			c:GBR ?= this
			has_variable = committed_to_afghanistan_assistance
			$TARGET$ = {
				has_variable = AFG_appealed_to_RUS
			}
		}
		AND = {
			c:RUS ?= this
			has_variable = committed_to_afghanistan_assistance
			$TARGET$ = {
				has_variable = AFG_appealed_to_GBR
			}
		}
		AND = {
			has_journal_entry = je_maintain_afghan_protectorate
			$TARGET$ = {
				capital = {
					region = sr:region_persia
				}
				OR = {
					country_has_primary_culture = cu:pashtun
					country_has_primary_culture = cu:tajik
				}
			}
		}
	}	
}

has_je_befriend_reason = {
	can_reach_target_country = yes
	country_rank <= $TARGET$.country_rank
	
	OR = {
		AND = {
			exists = c:RSM
			THIS = {
				has_journal_entry = je_risorgimento
			}
			has_variable = rsm_friendship
		}
		
		AND = {
			has_journal_entry = je_oregon
			$TARGET$ = {
				any_scope_state = {
					OR = {
						state_region = s:STATE_WASHINGTON
						state_region = s:STATE_IDAHO
						state_region = s:STATE_OREGON
					}
				}
			}
		}

		AND = {
			c:GBR ?= this
			$TARGET$ = { has_journal_entry = je_oregon }			
		}			
	
		AND = {
			c:GBR ?= this
			has_variable = committed_to_afghanistan_assistance
			$TARGET$ = {
				has_variable = AFG_appealed_to_GBR
			}
		}
		
		AND = {
			c:RUS ?= this
			has_variable = committed_to_afghanistan_assistance
			$TARGET$ = {
				has_variable = AFG_appealed_to_RUS
			}
		}
		
		AND = {
			has_variable = sided_with_korean_gov
			scope:target_country = {
				country_has_primary_culture = cu:korean
				is_revolutionary = no
			}
		}

		AND = {
			has_variable = sided_with_korean_rebels
			scope:target_country = {
				country_has_primary_culture = cu:korean
				is_revolutionary = yes
			}
		}			
	}	
}

has_je_protect_reason = {
	can_reach_target_country = yes
	country_rank > $TARGET$.country_rank
	
	OR = {
		AND = {
			exists = c:RSM
			THIS = {
				has_journal_entry = je_risorgimento
			}
			has_variable = rsm_friendship
		}
	
		AND = {
			c:GBR ?= this
			has_variable = committed_to_afghanistan_assistance
			$TARGET$ = {
				has_variable = AFG_appealed_to_GBR
			}
		}
		
		AND = {
			c:RUS ?= this
			has_variable = committed_to_afghanistan_assistance
			$TARGET$ = {
				has_variable = AFG_appealed_to_RUS
			}
		}
		
		AND = {
			c:GBR ?= this
			$TARGET$ = {
				has_modifier = modifier_south_persia_rifles
			}
		}
		
		AND = {
			c:RUS ?= this
			$TARGET$ = {
				has_modifier = modifier_persian_cossack_brigade
			}
		}

		AND = {
			has_variable = sided_with_korean_gov
			scope:target_country = {
				country_has_primary_culture = cu:korean
				is_revolutionary = no
			}
		}

		AND = {
			has_variable = sided_with_korean_rebels
			scope:target_country = {
				country_has_primary_culture = cu:korean
				is_revolutionary = yes
			}
		}			
	}	
}

has_powerful_protectors = {
	any_diplomatically_relevant_country = {
		NOT = { this = scope:actor }
		NOT = { is_in_same_power_bloc = scope:actor }
		NOT = { is_subject_of = scope:actor }
		OR = {
			country_rank >= scope:actor.country_rank
			army_size >= scope:actor.army_size
		}			
		OR = {
			has_diplomatic_pact = {
				who = root
				type = alliance
			}
			has_diplomatic_pact = {
				who = root
				type = defensive_pact
			}
			has_diplomatic_pact = {
				who = root
				type = guarantee_independence
			}						
		}							
	}
}

target_is_our_or_fellow_subject = {
	OR = {
		is_subject_of = root
		AND = {
			root = { is_subject = yes }
			is_subject_of = root.overlord
		}	
	}
}

should_carve_up_china = {
	country_rank >= rank_value:great_power
	OR = {
		sr:region_north_china = {
			any_scope_state = {
				is_treaty_port = yes
				owner = {
					NOT = { this = root }
					NOT = { is_country_type = unrecognized }
				}
			}
		}
		sr:region_south_china = {
			any_scope_state = {
				is_treaty_port = yes
				owner = {
					NOT = { this = root }
					NOT = { is_country_type = unrecognized }
				}
			}
		}
		sr:region_manchuria = {
			any_scope_state = {
				is_treaty_port = yes
				owner = {
					NOT = { this = root }
					NOT = { is_country_type = unrecognized }
				}
			}
		}
	}
}

﻿british_empire_clothes_trigger = {
	exists = scope:character
	scope:character = {
		exists = c:GBR
		exists = home_country
		home_country = {
			OR = {
				AND = {
					c:GBR = this
					is_subject = no # preventing uniform conflicts if GBR becomes a subject of another country with puppet uniforms
				}
				is_subject_of = c:GBR
			}		
		}
	}
}

british_empire_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		exists = c:GBR
		home_country = {
			OR = {
				AND = {
					c:GBR = this
					is_subject = no # preventing uniform conflicts if GBR becomes a subject of another country with puppet uniforms
				}
				is_subject_of = c:GBR
			}		
		}
	}
}

british_empire_clothes_p_trigger = {
	exists = scope:pop
	scope:pop = {
		exists = c:GBR
		home_country = {
			OR = {
				AND = {
					c:GBR = this
					is_subject = yes # preventing uniform conflicts if GBR becomes a subject of another country with puppet uniforms
				}
				is_subject_of = c:GBR
			}		
		}
	}
}

french_empire_clothes_trigger = {
	exists = scope:character
	scope:character = {
		exists = c:FRA
		exists = home_country
		home_country = {
			OR = {
				AND = {
					c:FRA = this
					is_subject = no # preventing uniform conflicts if FRA becomes a subject of another country with puppet uniforms
				}
				is_subject_of = c:FRA
			}		
		}
	}
}

french_empire_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		exists = c:FRA
		home_country = {
			OR = {
				AND = {
					c:FRA = this
					is_subject = no # preventing uniform conflicts if FRA becomes a subject of another country with puppet uniforms
				}
				is_subject_of = c:FRA
			}		
		}
	}
}

russian_empire_clothes_trigger = {
	exists = scope:character
	scope:character = {
		exists = c:RUS
		exists = home_country
		home_country = {
			OR = {
				AND = {
					c:RUS = this
					is_subject = no # preventing uniform conflicts if RUS becomes a subject of another country with puppet uniforms
				}
				is_subject_of = c:RUS
			}		
		}
	}
}

russian_empire_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		exists = c:RUS
		home_country = {
			OR = {
				AND = {
					c:RUS = this
					is_subject = no # preventing uniform conflicts if RUS becomes a subject of another country with puppet uniforms
				}
				is_subject_of = c:RUS
			}		
		}
	}
}

german_clothes_trigger = {
	exists = scope:character
	scope:character = {
		exists = home_country
		home_country = {
			is_subject = no
			OR = {
				country_has_primary_culture = cu:north_german
				country_has_primary_culture = cu:south_german
			}	
		}
	}
}

german_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		home_country = {
			is_subject = no
			OR = {
				country_has_primary_culture = cu:north_german
				country_has_primary_culture = cu:south_german
			}	
		}
	}
}


native_american_clothes_trigger = {
	exists = scope:character
	scope:character = {
		culture = {
			has_discrimination_trait = indigenous_american_heritage
		}
	}
}

native_north_american_clothes_trigger = {
	exists = scope:character
	scope:character = {
		culture = {
			has_discrimination_trait = north_american_group
		}
	}
}

muslim_clothes_pop_trigger = {
     exists = scope:pop
  	scope:pop = {
		religion = {
			has_discrimination_trait = muslim
		}
	}
}

jewish_clothes_pop_trigger = {
     exists = scope:pop
  	scope:pop = {
		religion = {
			has_discrimination_trait = jewish
		}
	}
}

hindu_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		religion = rel:hindu
	}
}

african_diaspora_clothes_trigger = {
	exists = scope:character
	scope:character = {
		OR = {
			culture = cu:afro_caribbean
			culture = cu:afro_antillean
			culture = cu:afro_caribeno
			culture = cu:afro_american
			culture = cu:afro_brazilian
		}
	}
}

african_diaspora_pop_clothes_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			culture = cu:afro_caribbean
			culture = cu:afro_antillean
			culture = cu:afro_caribeno
			culture = cu:afro_american
			culture = cu:afro_brazilian
		}
	}
}

japanese_imperial_clothes_trigger = {
	exists = scope:character
	scope:character = {
		is_ruler = yes
		exists = home_country
     	home_country = {
     		has_law = law_type:law_monarchy
     	}
		OR = {
			AND = {
				culture = {
					has_discrimination_trait = yamato
				}
				OR = {
					NOT = {
						exists = c:JAP
					}
					AND = {
						exists = c:JAP
						NOT = { home_country = c:JAP }
					}
				}
			}
			AND = {
				exists = c:JAP
				home_country = {
					this = c:JAP
					NOT = { has_variable = meiji_restoration_complete }
				}
			}
		}
	}
}

chinese_imperial_clothes_trigger = {
	exists = scope:character
	scope:character = {
		is_ruler = yes
		exists = home_country
     	home_country = {
     		has_law = law_type:law_monarchy
     	}
		OR = {
			culture = {
				has_discrimination_trait = han_chinese
			}
			AND = {
				exists = c:CHI
				home_country = c:CHI
			}
		}
	}
}

chinese_manchu_queue_hairstyle_character_trigger = { # hairsyle for Manchu characters not living living under discriminatory Han rule, and Han characters living under discriminatory Manchu rule
	exists = scope:character
	scope:character = {
		exists = home_country
		OR = {
			AND = {
				home_country = { 
					ruler = { 
						has_culture = cu:manchu 
					}
					NOT = { 
						has_law = law_type:law_multicultural
					}
				}
				culture = { 
					has_discrimination_trait = han_chinese 
				}
			}
			AND = {
				NOT = {
					home_country = { 
						ruler = { 
							culture = { 
								has_discrimination_trait = han_chinese 
							}
						}
						cu:manchu = {
							NOT = { 
								culture_is_discriminated_in = scope:character.home_country 
							}
						}
					}
				}
				culture = cu:manchu
			}
		}
	}
}

chinese_manchu_queue_hairstyle_pops_trigger = { # hairsyle for Manchu pops not living living under discriminatory Han rule, and Han pops living under discriminatory Manchu rule
	exists = scope:pop
	scope:pop = {
		OR = {
			AND = {
				home_country = { 
					ruler = { 
						has_culture = cu:manchu 
					}
					NOT = { 
						has_law = law_type:law_multicultural
					}
				}
				culture = { 
					has_discrimination_trait = han_chinese 
				}
			}
			AND = {
				NOT = {
					home_country = { 
						ruler = { 
							culture = { 
								has_discrimination_trait = han_chinese 
							}
						}
						cu:manchu = {
							NOT = { 
								culture_is_discriminated_in = scope:pop.home_country 
							}
						}
					}
				}
				culture = cu:manchu
			}
		}
	}
}

chinese_court_clothes_trigger = {
	exists = scope:character
	scope:character = {
		NOT = {
			AND = {
				exists = home_country
				is_ruler = yes
				culture = {
					has_discrimination_trait = tai
					has_discrimination_trait = southeast_asian_heritage
				}
		     	home_country = {
		     		OR = {
			     		has_law = law_type:law_monarchy
			     		has_law = law_type:law_theocracy
			     	}
		     	}			
			}
		}
		culture = {
			NOT = { this = cu:kalmyk }
			OR = {
				has_discrimination_trait = sinosphere
				has_discrimination_trait = han_chinese
				has_discrimination_trait = tibetan_language
				has_discrimination_trait = mongol_language
				has_discrimination_trait = tai
				has_discrimination_trait = hmong_mien_language
			}
		}
	}	
}

chinese_court_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		culture = {
			OR = {
				has_discrimination_trait = sinosphere
				has_discrimination_trait = han_chinese
				has_discrimination_trait = tibetan_language
				has_discrimination_trait = mongol_language
				has_discrimination_trait = tai
				has_discrimination_trait = hmong_mien_language
			}
		}
	}	
}


african_clothes_trigger = {
	exists = scope:character
	scope:character = {
		culture = {
			OR = {
				has_discrimination_trait = central_african_culture_group
				has_discrimination_trait = east_african_culture_group
				has_discrimination_trait = west_african_culture_group
				has_discrimination_trait = southern_african_culture_group
				has_discrimination_trait = malagasy_language
			}
		}
	}     
}

arabic_fez_trigger = {
	exists = scope:character
	scope:character = {
		exists = home_country
		OR = {
			home_country = {
				OR = {
					is_country_type = recognized
					is_country_type = colonial
				}	
			}
			home_country = {
				top_overlord = {
					OR = {
						is_country_type = recognized
						is_country_type = colonial
					}	
				}
			}
			home_country = {
				exists = c:EGY
				c:EGY = this
				c:EGY = { has_law = law_type:law_monarchy }
			}
		}
	}       
}

arabic_military_fez_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		AND = {
			OR = {
				home_country = {
					exists = c:EGY
					c:EGY = this
					c:EGY = { has_law = law_type:law_monarchy }
				}
				home_country = {
					exists = c:TUR
					c:TUR = this
					c:TUR = { has_law = law_type:law_monarchy }
				}
				home_country = {
					exists = c:TUN
					c:TUN = this
					c:TUN = { has_law = law_type:law_monarchy }
				}
				home_country = {
					exists = c:MOR
					c:MOR = this
					c:MOR = { has_law = law_type:law_monarchy }
				}
			}
			OR = {
				culture = {
					OR = {
						has_discrimination_trait = middle_eastern_heritage
						has_discrimination_trait = central_asian_heritage
					}
				}
				AND = { # Albanian characters serving either the Ottomans or Egyptians should wear that country's clothing.
					culture = cu:albanian
					OR = {
						home_country = {
							exists = c:TUR
							c:TUR = this
							c:TUR = { has_law = law_type:law_monarchy }
						}
						home_country = {
							exists = c:EGY
							c:EGY = this
							c:EGY = { has_law = law_type:law_monarchy }
						}
					}
				}
			}
		}
	}       
}

arabic_clothes_trigger = {
	exists = scope:character
	scope:character = {
		OR = {
			culture = {
				OR = {
					has_discrimination_trait = middle_eastern_heritage
					has_discrimination_trait = central_asian_heritage #Currently no point having a different check
				}
			}
			culture = cu:circassian
			AND = { # Albanian characters serving either the Ottomans or Egyptians should wear that country's clothing.
				culture = cu:albanian
				exists = home_country
				OR = {
					home_country = {
						exists = c:TUR
						c:TUR = this
						c:TUR = { has_law = law_type:law_monarchy }
					}
					home_country = {
						exists = c:EGY
						c:EGY = this
						c:EGY = { has_law = law_type:law_monarchy }
					}
				}
			}
		}
	}        
}

ethiopian_clothes_trigger = {
	exists = scope:character
	scope:character = {
		culture = {
			has_discrimination_trait = ethiopian
		}
	}
}

european_clothes_trigger = {
	exists = scope:character
	scope:character = {
		OR = {
			AND = {
				culture = cu:japanese
				devout_clothes_trigger = no
				NOT = {
					has_ideology = ideology:ideology_traditionalist
					is_ruler = yes
				}
				owner ?= {
					has_variable = meiji_restoration_complete
				}
			}
			has_template = AST_william_light
			AND = {
				culture = {
					has_discrimination_trait = european_heritage
				}
				NOT = {
					culture = cu:circassian
				}
				NOT = {
					AND = { # Albanian characters serving either the Ottomans or Egyptians should wear that country's clothing.
						culture = cu:albanian
						exists = home_country
						OR = {
							home_country = {
								exists = c:TUR
								c:TUR = this
							}
							home_country = {
								exists = c:EGY
								c:EGY = this
							}
						}
					}
				}
			}
		}
	}
}

indian_clothes_trigger = {
	exists = scope:character
	scope:character = {
		OR = {
			culture = {
				has_discrimination_trait = south_asian_heritage
			}
			religion = rel:sikh
		}
	}
}

siamese_clothes_trigger = { #Pretty sure this is actual burmese
	exists = scope:character
	scope:character = {
		culture = {
			has_discrimination_trait = southeast_asian_heritage
		}
	}
}

american_clothes_trigger = {
	exists = scope:character
	scope:character = {
		exists = home_country
		home_country = {
			exists = c:USA
			c:USA = this
			is_subject = no
		}
	}
}

american_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		home_country = {
			exists = c:USA
			c:USA = this
			is_subject = no
		}
	}
}

politician_clothes_trigger = {
	exists = scope:character
	scope:character = {
		AND = {
			has_role = politician
			is_ruler = no
		}
	}
}

recognized_country_trigger = {
	exists = scope:character
	scope:character = {
		exists = home_country
		OR = {
			home_country = {
				OR = {
					is_country_type = recognized
					is_country_type = colonial
				}	
			}
			home_country = {
				top_overlord = {
					OR = {
						is_country_type = recognized
						is_country_type = colonial
					}	
				}
			}
		}
	}       
}

recognized_country_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			home_country = {
				OR = {
					is_country_type = recognized
					is_country_type = colonial
				}	
			}
			home_country = {
				top_overlord = {
					OR = {
						is_country_type = recognized
						is_country_type = colonial
					}	
				}
			}
		}
	}       
}

christian_clothes_trigger = {
  	exists = scope:character
	scope:character = {
		religion = {
			has_discrimination_trait = christian
		}
	}
}

devout_clothes_trigger = {
	exists = scope:character
	scope:character = {
		is_interest_group_type = ig_devout
	}
}

armed_forces_clothes_trigger = {
	exists = scope:character
	scope:character = {
		is_interest_group_type = ig_armed_forces
	}
}

ruler_clothes_trigger = {
	exists = scope:character
	scope:character = {
		is_ruler = yes
	}
}

military_clothes_trigger = {
	exists = scope:character
	scope:character = {
		OR = {
			has_role = general
			has_role = admiral
		}
	}
}

monarchy_clothes_trigger = {
	exists = scope:character
	scope:character = {
		exists = owner
		OR = {
	     	is_ruler = yes
	     	is_heir = yes
	     }
     	owner = {
     		has_law = law_type:law_monarchy
     	}
	}
}

republic_clothes_trigger = {
	exists = scope:character
	scope:character = {
		exists = home_country
		is_ruler = yes
		home_country = {
			NOT = { has_law = law_type:law_monarchy}
		}
	}
}

overweight_trigger = {
	exists = scope:character
	scope:character = {
     	has_trait = expensive_tastes
     }
}

army_traits_trigger = {
	exists = scope:character
	scope:character = {
		OR = {
			has_trait = resupply_commander
			has_trait = surveyor
			has_trait = forest_commander
			has_trait = plains_commander
			has_trait = mountain_commander
			has_trait = basic_artillery_commander
			has_trait = experienced_artillery_commander
			has_trait = expert_artillery_commander
			has_trait = stalwart_defender
			has_trait = trench_rat
			has_trait = defense_in_depth_specialist
			has_trait = basic_offensive_planner
			has_trait = experienced_offensive_planner
			has_trait = expert_offensive_planner
			has_trait = basic_defensive_strategist
			has_trait = experienced_defensive_strategist
			has_trait = expert_defensive_strategist
			has_trait = traditionalist_commander
			has_trait = popular_commander
			has_trait = celebrity_commander
		}
	}
}

navy_traits_trigger = {
	exists = scope:character
	scope:character = {
		OR = {
			has_trait = basic_naval_commander
			has_trait = experienced_naval_commander
			has_trait = expert_naval_commander
			has_trait = convoy_raider_commander
			has_trait = experienced_convoy_raider
			has_trait = expert_convoy_raider
			has_trait = dockyard_master
		}
	}
}

#Pop 

east_asian_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		NOR = { 
			culture = cu:yakut 
			culture = cu:siberian
		}
		culture = {
			OR = {
				has_discrimination_trait = east_asian_heritage
				has_discrimination_trait = north_asian_heritage
			}
		}   
	}
}

central_asian_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		culture = {
			has_discrimination_trait = central_asian_heritage
		}   
	}
}

european_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		culture = {
			has_discrimination_trait = european_heritage
		}
		NOT = {
			culture = cu:circassian
		}
	}
}

arabic_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			culture = {
				has_discrimination_trait = middle_eastern_heritage
			}   
			culture = cu:circassian
		}
	}
}

indigenous_oceanic_clothes_trigger = {
	OR = {
		AND = {
			exists = scope:pop
			scope:pop = {
				culture = {
					has_discrimination_trait = indigenous_oceanic_heritage
				}   
			}
		}
		AND = {
			exists = scope:character
			scope:character = {
				culture = {
					has_discrimination_trait = indigenous_oceanic_heritage
				}   
			}
		}
	}
}

circumpolar_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			culture = cu:inuit
			culture = {
				has_discrimination_trait = siberian_culture_group
			}
		}
		NOT = { is_pop_type = slaves }
	}
}

sami_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		culture = cu:sami
	}
}


african_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		culture = {
			OR = {
				has_discrimination_trait = central_african_culture_group
				has_discrimination_trait = east_african_culture_group
				has_discrimination_trait = west_african_culture_group
				has_discrimination_trait = southern_african_culture_group
				has_discrimination_trait = malagasy_language
			}
		}   
	}
}

native_american_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		culture = {
			has_discrimination_trait = indigenous_american_heritage
		}   
	}
}

south_east_asia_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		culture = {
			has_discrimination_trait = southeast_asian_heritage
		}   
	}
}

south_american_clothes_character_trigger = {
	exists = scope:character
	scope:character = {
		culture = {
			has_discrimination_trait = european_heritage
			OR = {
				has_discrimination_trait = lusophone
				has_discrimination_trait = hispanophone
			}
			NOT = { has_discrimination_trait = iberian_culture_group }
		}
	}
}

south_american_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		culture = {
			has_discrimination_trait = european_heritage
			OR = {
				has_discrimination_trait = lusophone
				has_discrimination_trait = hispanophone
			}
			NOT = { has_discrimination_trait = iberian_culture_group }
		}
	}
}

integrated_south_american_natives_pop_trigger = { # Represents those South American native groups that had long been integrated into wider South and Central American society.
	exists = scope:pop
	scope:pop = {
		culture = {
			OR = {
				has_discrimination_trait = native_mesoamerican_culture_group
				has_discrimination_trait = south_american_group
			}
			NOT = {
				OR = {
					this = cu:patagonian
					this = cu:amazonian
				}
			}
		}
	}
}

cold_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			has_pop_culture = inuit
			has_pop_culture = athabaskan
			has_pop_culture = siberian
		}
	}
}

japanese_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			culture = cu:japanese
			culture = cu:ainu
		}
	}
}


japanese_clothes_trigger = {
	exists = scope:character
	scope:character = {
          OR = {
          	culture = cu:japanese
          	culture = cu:ainu
          }
	}
}

indian_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			culture = {
				has_discrimination_trait = south_asian_heritage
			} 
			religion = rel:sikh  
		}
	}
}

slavic_clothes_pop_trigger = {
	scope:pop ?= {
		culture = {
			OR = {
				has_discrimination_trait = slavic
				has_discrimination_trait = east_slavic
				has_discrimination_trait = west_slavic
				has_discrimination_trait = jugoslav
			}
			
		}   
	}
}

slavic_clothes_trigger = {
	scope:character ?= {
		culture = {
			OR = {
				has_discrimination_trait = slavic
				has_discrimination_trait = east_slavic
				has_discrimination_trait = west_slavic
				has_discrimination_trait = jugoslav
			}
		}   
	}
}

nordic_clothes_pop_trigger = {
	scope:pop ?= {
		culture = {
			has_discrimination_trait = scandinavian_culture_group			
		}   
	}
}

poor_clothes_pop_trigger = {
	exists = scope:pop
     scope:pop = {
       	OR = {
			is_pop_type = farmers
			is_pop_type = peasants
			is_pop_type = laborers
			is_pop_type = machinists
       	}
     }   
}

middle_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
       	OR = {
			is_pop_type = clerks
			is_pop_type = engineers
			is_pop_type = bureaucrats
			is_pop_type = shopkeepers
       	}
     }  
}

upper_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
     	OR = {
			is_pop_type = aristocrats
			is_pop_type = capitalists
			is_pop_type = academics
     	}
     }  
}



soldier_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = soldiers
     }
}

officers_clothes_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		is_pop_type = officers
	} 
}

clergy_clothes_pop_trigger = {
	exists = scope:pop
     scope:pop = {
		is_pop_type = clergymen
     }
}

shopkeepers_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = shopkeepers	
     }    
}

clerks_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = clerks	
     }   
}

academics_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = academics	
     }   
}

farmers_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = farmers	
     }   
}

laborers_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = laborers	
     }   
}

peasants_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = peasants	
     }   
}

slaves_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = slaves	
     }   
}

aristocrats_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = aristocrats	
     }   
}

machinists_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = machinists	
     }   
}

engineers_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = engineers	
     }   
}

bureaucrats_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		is_pop_type = bureaucrats	
     }   
}

christian_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
		religion = {
			has_discrimination_trait = christian
		}
	}
}

buddhist_clothes_pop_trigger = {
     exists = scope:pop
     scope:pop = {
  		OR = {
			religion = {
				has_discrimination_trait = buddhist
			}
			religion = rel:shinto
		}
     }
}

slightly_underweight_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			AND = {
				pop_weight_modifier_scale < 25	
				standard_of_living >= 10		
			}
			AND = {
				standard_of_living >= 5
				standard_of_living < 10
				pop_weight_modifier_scale >= 25
				pop_weight_modifier_scale < 50
			}			
			AND = {
				standard_of_living < 5
				pop_weight_modifier_scale >= 50
			}		
		}	
    }
}

underweight_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			AND = {
				pop_weight_modifier_scale < 25
				standard_of_living >= 5
				standard_of_living < 10
			}		
			AND = {
				standard_of_living < 5
				pop_weight_modifier_scale >= 25
				pop_weight_modifier_scale < 50
			}		
		}	
    }
}

very_underweight_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		pop_weight_modifier_scale < 25
		standard_of_living < 5	
    }
}

slightly_overweight_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			AND = {
				standard_of_living >= 15
				standard_of_living < 20
				pop_weight_modifier_scale >= 90	
			}
			AND = {
				standard_of_living >= 20
				standard_of_living < 40
				pop_weight_modifier_scale >= 85	
				pop_weight_modifier_scale < 90
			}
			AND = {
				standard_of_living >= 40
				pop_weight_modifier_scale >= 70
				pop_weight_modifier_scale < 80
			}					
		}	
    }
}

overweight_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			AND = {
				standard_of_living >= 15
				standard_of_living < 20
				pop_weight_modifier_scale >= 95
			}
			AND = {
				standard_of_living >= 20
				standard_of_living < 40
				pop_weight_modifier_scale >= 90
				pop_weight_modifier_scale < 95
			}
			AND = {
				standard_of_living >= 40
				pop_weight_modifier_scale >= 80	
				pop_weight_modifier_scale < 90
			}				
		}	
    }
}

very_overweight_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		OR = {
			AND = {
				standard_of_living >= 20
				standard_of_living < 40
				pop_weight_modifier_scale >= 95
			}
			AND = {
				standard_of_living >= 40
				pop_weight_modifier_scale >= 90
			}				
		}	
    }
}

struggling_pop_trigger = {
	exists = scope:pop
	scope:pop = {
		standard_of_living < 10
	}
}

agitator_character_trigger = {
	scope:character ?= {
		has_role = agitator
	}
}

should_be_naked_trigger = {
	exists = scope:pop
	scope:pop = {
       	OR = {
			is_pop_type = farmers
			is_pop_type = peasants
			is_pop_type = laborers
			is_pop_type = slaves
		}
		OR = {
			culture = cu:amazonian
			culture = cu:nuba
			culture = cu:dinka
		}
	}
}

## Can only be checked in the interface since the setting isn't synced
should_be_fully_naked_portrait_trigger = {
	should_be_naked_trigger = yes
	should_show_nudity = yes
}
#
#should_be_topless_portrait_trigger = {
#	exists = scope:pop
#	has_character_flag = single_combat_stripped_to_waist
#	should_show_nudity = yes
#}
﻿#            | existing country | releasing a country | country formation |
# |==========|==================|=====================|===================|
# |root      | definition       | definition          | definition        |
# |----------|------------------|---------------------|-------------------|
# |target    | country          | N/A                 | N/A               |
# |----------|------------------|---------------------|-------------------|
# |initiator | N/A              | player              | player            |
# |----------|------------------|---------------------|-------------------|
# |actor     | country          | player              | player            |
# |----------|------------------|---------------------|-------------------|
# |          | country's        |                     | player's          |
# |overlord  | direct overlord  | player              | direct overlord   |
# |          | if it exists     |                     | if it exists      |
# |----------|------------------|---------------------|-------------------|

### scope is COUNTRY ###

coa_monarchy_trigger = {
	OR = {
		has_law = law_type:law_chiefdom
		has_law = law_type:law_monarchy
	}
}

coa_absolute_monarchy_trigger = {
	coa_monarchy_trigger = yes
	coa_autocracy_trigger = yes
}

coa_undemocratic_monarchy_trigger = {
	coa_monarchy_trigger = yes
	OR = {
		has_law = law_type:law_autocracy 
		has_law = law_type:law_elder_council
		has_law = law_type:law_oligarchy
	}
}

coa_republic_trigger = {
	OR = {
		has_law = law_type:law_presidential_republic
		has_law = law_type:law_parliamentary_republic
		has_law = law_type:law_council_republic
	}
}

coa_dictatorship_trigger = {
	coa_republic_trigger = yes
	coa_autocracy_trigger = yes
}

coa_oligarchy_trigger = {
	coa_republic_trigger = yes
	has_law = law_type:law_oligarchy
}

coa_theocracy_trigger = {
	has_law = law_type:law_theocracy
}

coa_multicultural_trigger = {
	has_law = law_type:law_multicultural
}

coa_autocracy_trigger = {
	OR = {
		has_law = law_type:law_autocracy
		has_law = law_type:law_single_party_state  
	}
}

coa_anarchy_trigger = {
	has_law = law_type:law_anarchy
}

coa_communist_trigger = {
	has_law = law_type:law_council_republic
	#OR = {
	#	ig:ig_trade_unions = {
	#		is_in_government = yes
	#	}
	#	any_interest_group = {
	#		is_in_government = yes
	#		has_ideology = ideology:ideology_proletarian
	#	}
	#}
}

coa_military_trigger = {
	OR = {
		has_government_type = gov_military_dictatorship
		has_government_type = gov_junta
	}
}

coa_controls_part_of_ireland = {
	any_scope_state = {
		state_region = {
			is_homeland = irish
		}
	}
}

coa_controls_part_of_france = {
	any_scope_state = {
		state_region = {
			is_homeland = french
		}
	}
}

coa_fascist_trigger = {
	# A fascist can lead a monarchy or a theocracy without the government changing form. The Papal State should retain the same flag even if the Pope's a fascist, for example.
	# A fascist can also lead a democracy without the democracy immediately becoming fascist. If the fascist successfully implements his wildest dreams and becomes a dictatorship, then sure the government will become Fascist, but while there's still voting the government shouldn't count as (fully) fascist yet.
	coa_dictatorship_trigger = yes
	ruler ?= {
		OR = {
			has_ideology = ideology:ideology_fascist
			has_ideology = ideology:ideology_integralist
		}
    }
}

coa_nihilist_trigger = {
	has_law = law_type:law_state_atheism
	NOR = {
		has_law = law_type:law_theocracy
		has_law = law_type:law_monarchy
		has_law = law_type:law_council_republic
	}
	ruler ?= {
		has_ideology = ideology:ideology_atheist
    }
}

coa_secessionist_or_revolutionary_trigger = {
	OR = {
		is_secessionist = yes
		is_revolutionary = yes
	}
}

### scope is COUNTRY DEFINITION ###

coa_def_independent_trigger = {
	exists = scope:actor
	scope:actor ?= { is_subject = no }
}

coa_def_subject_trigger = {
	exists = scope:actor
	scope:actor ?= { is_subject = yes }
}

coa_def_lesser_subject_trigger = {
	OR = {
		NOT = { exists = scope:actor }
		AND = {
			exists = scope:actor
			scope:actor ?= { 
				OR = {
					is_subject_type = subject_type_puppet
					is_subject_type = subject_type_vassal
				}
			}
		}
	}
}

# Government

coa_def_monarchy_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_monarchy_trigger = yes }
}

coa_def_absolute_monarchy_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_absolute_monarchy_trigger = yes }
}

coa_def_undemocratic_monarchy_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_undemocratic_monarchy_trigger = yes }
}

coa_def_republic_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_republic_trigger = yes }
}

coa_def_theocracy_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_theocracy_trigger = yes }
}

coa_def_multicultural_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_multicultural_trigger = yes }
}

coa_def_autocracy_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_autocracy_trigger = yes }
}

coa_def_communist_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_communist_trigger = yes }
}

coa_def_anarchy_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_anarchy_trigger = yes }
}

coa_def_dictatorship_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_dictatorship_trigger = yes }
}

coa_def_oligarchy_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_oligarchy_trigger = yes }
}

coa_def_state_religion_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { has_law = law_type:law_state_religion }
}

coa_def_egalitarian_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { has_law = law_type:law_multicultural }
}

coa_def_military_junta_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_military_trigger = yes }
}

coa_def_fascist_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_fascist_trigger = yes }
}

coa_def_nihilist_flag_trigger = {
	exists = scope:actor
	scope:actor ?= { coa_nihilist_trigger = yes }
}

# Overlord

coa_def_ensign_trigger = {
	NOT = { has_game_rule = no_subject_flags }
	exists = scope:overlord
	scope:overlord ?= {
		OR = {
			this = scope:custom_overlord
			any_overlord_or_above ?= {
				this = scope:custom_overlord
			} 
		}
	}
}

coa_def_american_ensign_trigger = {
	exists = c:USA
	c:USA ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_british_ensign_trigger = {
	OR = {
		AND = {
			exists = c:GBR
			c:GBR ?= { save_temporary_scope_as = custom_overlord }
			coa_def_ensign_trigger = yes
		}
		AND = {
			exists = c:ENG
			c:ENG ?= { save_temporary_scope_as = custom_overlord }
			coa_def_ensign_trigger = yes
		}
	}
}

coa_def_british_india_trigger = {
	exists = c:BIC
	c:BIC ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_finnish_ensign_trigger = {
	exists = c:FIN
	c:FIN ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_french_ensign_trigger = {
	exists = c:FRA
	c:FRA ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_german_ensign_trigger = {
	exists = c:GER
	c:GER ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_prussian_ensign_trigger = {
	exists = c:PRU
	c:PRU ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_spanish_ensign_trigger = {
	exists = c:SPA
	c:SPA ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_mexican_ensign_trigger = {
	exists = c:MEX
	c:MEX ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_swedish_ensign_trigger = {
	exists = c:SWE
	c:SWE ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_danish_ensign_trigger = {
	exists = c:DEN
	c:DEN ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_dominant_scotland_trigger = {
	OR = {
		AND = {
			exists = scope:actor
			scope:actor ?= {
				capital ?= {
					state_region = {
						OR = {
							this = s:STATE_LOWLANDS
							this = s:STATE_HIGHLANDS
						}
					}
				}
			}			
		}
		AND = {
			exists = c:SCO
			c:SCO ?= { save_temporary_scope_as = custom_overlord }
			coa_def_ensign_trigger = yes
		}		
	}
}

coa_def_turkish_ensign_trigger = {
	exists = c:TUR
	c:TUR ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_chinese_ensign_trigger = {
	exists = c:CHI
	c:CHI ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_siam_ensign_trigger = {
	exists = c:SIA
	c:SIA ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_russian_ensign_trigger = {
	exists = c:RUS
	c:RUS ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_austrian_ensign_trigger = {
	exists = c:AUS
	c:AUS ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_brazilian_ensign_trigger = {
	exists = c:BRZ
	c:BRZ ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_netherlands_ensign_trigger = {
	exists = c:NET
	c:NET ?= { save_temporary_scope_as = custom_overlord }
	coa_def_ensign_trigger = yes
}

coa_def_colonial_ensign_trigger = {
	OR = {
		coa_def_british_ensign_trigger = yes	
		coa_def_french_ensign_trigger = yes	
		coa_def_german_ensign_trigger = yes	
		coa_def_spanish_ensign_trigger = yes
		coa_def_american_ensign_trigger = yes
		coa_def_austrian_ensign_trigger = yes
		coa_def_russian_ensign_trigger = yes
		coa_def_swedish_ensign_trigger = yes
		coa_def_danish_ensign_trigger = yes
		coa_def_netherlands_ensign_trigger = yes
	}
}

# Cultural

coa_def_african_trigger = {
    any_primary_culture = {
        has_discrimination_trait = african_heritage
    }
}

coa_def_west_african_trigger = {
    any_primary_culture = {
        has_discrimination_trait = african_heritage
        has_discrimination_trait = west_african_culture_group		
    }
}

coa_def_native_american_trigger = {
    any_primary_culture = {
        has_discrimination_trait = indigenous_american_heritage
    }
}

coa_def_cross_trigger = {
    religion = {
    	has_discrimination_trait = christian
    }
}

coa_def_crescent_trigger = {
    religion = {
		has_discrimination_trait = muslim
    }
}

coa_def_buddhist_trigger = {
    religion = {
        has_discrimination_trait = buddhist
    }
}

coa_def_nordic_cross_trigger = {
    any_primary_culture = {
        has_discrimination_trait = scandinavian_culture_group
    }
	coa_def_cross_trigger = yes
}

coa_def_oceanic_trigger = {
    any_primary_culture = {
        has_discrimination_trait = indigenous_oceanic_heritage
    }
}

coa_def_german_trigger = {
    any_primary_culture = {
        has_discrimination_trait = german_speaking
        has_discrimination_trait = european_heritage
    }
}

coa_def_italian_trigger = {
    any_primary_culture = {
        has_discrimination_trait = italophone
        has_discrimination_trait = european_heritage
    }
}

coa_def_iberian_trigger = {
    any_primary_culture = {
        has_discrimination_trait = iberian_culture_group
        has_discrimination_trait = european_heritage
    }
}

coa_def_turkic_trigger = {
    any_primary_culture = {
        has_discrimination_trait = turkic
    }
}

coa_def_hispanic_american_trigger = {
    any_primary_culture = {
    	has_discrimination_trait = hispanophone
    	has_discrimination_trait = european_heritage
	    NOT = {
	    	has_discrimination_trait = iberian_culture_group
	    }
    }
}

coa_SWE_use_norway_canton_trigger = {
	exists = c:NOR
	c:NOR ?= { 
		is_subject_of = scope:target
	}
}

coa_SWE_use_union_mark_flag_trigger = {
	NOT = { exists = c:NOR }
	scope:actor ?= {
		any_scope_state = {
			state_region = {
				is_homeland = norwegian
			}
		}
	}
}

coa_SWE_use_union_mark_canton_trigger = {
	coa_SWE_karl_johan_is_king_trigger = yes
}

coa_SWE_karl_johan_is_king_trigger = {
	exists = c:SWE
	c:SWE ?= {
		NOT = {
			# hacky way to see if King Karl Johan has been succeeded
			ruler = {
				is_monarch = yes
				has_culture = cu:french
			}
		}
	}
}

coa_def_controls_part_of_ireland = {
	exists = scope:actor
	scope:actor ?= {
		OR = {
			coa_controls_part_of_ireland = yes
			any_subject_or_below = {
				coa_controls_part_of_ireland = yes
			}
		}
	}
}

coa_def_controls_part_of_france = {
	exists = scope:actor
	scope:actor ?= {
		OR = {
			coa_controls_part_of_france = yes
			any_subject_or_below = {
				coa_controls_part_of_france = yes
			}
		}
	}
}

coa_def_war_trigger = {
	exists = scope:actor
	scope:actor ?= {
		is_at_war = yes
	}
}
coa_def_secessionist_or_revolutionary_trigger = {
	exists = scope:target
	scope:target ?= {
		coa_secessionist_or_revolutionary_trigger = yes
	}
}

coa_def_secessionist_country_trigger = {
	exists = scope:target
	scope:target ?= {
		is_secessionist = yes
	}
}

coa_def_catholic_trigger = {
	exists = scope:target
	scope:target ?= {
		country_has_state_religion = rel:catholic
	}
}

coa_def_kalmar_flag_trigger = {
	exists = scope:actor
	scope:actor ?= {
		has_law = law_type:law_monarchy
		was_formed_from = DEN
	}
}
﻿assert = {
	assert_if = {
		limit = { always = yes }
	}
}

﻿has_friendly_diplomatic_pact = {
	OR = {
		has_diplomatic_pact = {
			who = $TARGET$
			type = trade_agreement
		}
		has_diplomatic_pact = {
			who = $TARGET$
			type = alliance
		}	
		has_diplomatic_pact = {
			who = $TARGET$
			type = defensive_pact
		}	
		has_diplomatic_pact = {
			who = $TARGET$
			type = foreign_investment_agreement
		}	
	}
}

﻿### State geography triggers

state_is_in_europe = {
	OR = {
		region = sr:region_north_germany
		region = sr:region_south_germany
		region = sr:region_england
		region = sr:region_iberia
		region = sr:region_france
		region = sr:region_occitania
		region = sr:region_rhine
		region = sr:region_italy	
		region = sr:region_poland
		region = sr:region_danubia
		region = sr:region_balkans
		region = sr:region_baltic
		region = sr:region_russia
		region = sr:region_dnieper
		region = sr:region_belarus
		region = sr:region_finland
		region = sr:region_baltic_states
	}
}

state_is_in_north_america = {
	OR = {
		region = sr:region_canada
		region = sr:region_new_england
		region = sr:region_pacific_coast
		region = sr:region_great_plains
		region = sr:region_the_midwest
		region = sr:region_dixie
	}
}

state_is_in_central_america = {
	OR = {
		region = sr:region_mexico
		region = sr:region_central_america
		region = sr:region_caribbean
	}
}

state_is_in_south_america = {
	OR = {
		region = sr:region_brazil	
		region = sr:region_la_plata
		region = sr:region_andes	
		region = sr:region_gran_colombia
	}
}

state_is_in_americas = {
	OR = {
		state_is_in_north_america = yes
		state_is_in_central_america = yes
		state_is_in_south_america = yes
	}
}

state_is_in_africa = {
	OR = {
		region = sr:region_nile_basin
		region = sr:region_ethiopia
		region = sr:region_north_africa
		region = sr:region_senegal
		region = sr:region_niger
		region = sr:region_congo
		region = sr:region_southern_africa
		region = sr:region_zanj		
	}
}

state_is_in_middle_east = {
	OR = {
		region = sr:region_anatolia
		region = sr:region_arabic
		region = sr:region_persia
		region = sr:region_caucasus
	}
}

state_is_in_central_asia = {
	OR = {
		region = sr:region_himalayas
		region = sr:region_central_asia
	}
}

state_is_in_india = {
	OR = {
		region = sr:region_south_india
		region = sr:region_north_india		
	}
}

state_is_in_east_asia = {
	OR = {
		region = sr:region_south_china
		region = sr:region_north_china
		region = sr:region_manchuria
		region = sr:region_japan
		region = sr:region_west_siberia
		region = sr:region_east_siberia
	}
}

state_is_in_china = {
	OR = {
		region = sr:region_south_china
		region = sr:region_north_china
		# not counting manchuria here deliberately
	}
}

state_is_in_southeast_asia = {
	OR = {
		region = sr:region_indonesia
		region = sr:region_indochina
	}
}
### Country geography triggers
# exists = capital checks are necessary only because we may test these triggers and scope switch to capitals before states are initialized properly

country_is_in_china = {
	exists = capital
	capital = {
		state_is_in_china = yes
	}
}

country_is_in_europe = {
	exists = capital
	capital = {
		state_is_in_europe = yes
	}
}

country_is_in_north_america = {
	exists = capital
	capital = {
		state_is_in_north_america = yes
	}
}

country_is_in_central_america = {
	exists = capital
	capital = {
		state_is_in_central_america = yes
	}
}

country_is_in_south_america = {
	exists = capital
	capital = {
		state_is_in_south_america = yes
	}
}

country_is_in_africa = {
	exists = capital
	capital = {
		state_is_in_africa = yes
	}
}

country_is_in_middle_east = {
	exists = capital
	capital = {
		state_is_in_middle_east = yes
	}
}

country_is_in_central_asia = {
	exists = capital
	capital = {
		state_is_in_central_asia = yes
	}
}

country_is_in_india = {
	exists = capital
	capital = {
		state_is_in_india = yes
	}
}

country_is_in_east_asia = {
	exists = capital
	capital = {
		state_is_in_east_asia = yes
	}
}

country_is_in_southeast_asia = {
	exists = capital
	capital = {
		state_is_in_southeast_asia = yes
	}
}

### Climate triggers

is_arabic_farmland = {
	OR = {
		region = sr:region_anatolia
		region = sr:region_arabic
		region = sr:region_persia
		region = sr:region_central_asia
		region = sr:region_nile_basin
		region = sr:region_north_africa
		region = sr:region_senegal
		region = sr:region_niger
		region = sr:region_congo
		region = sr:region_ethiopia
		region = sr:region_zanj
		region = sr:region_southern_africa
	}
}

is_jungle_hills = {
	OR = {
		region = sr:region_indochina
		region = sr:region_indonesia
		region = sr:region_south_china
		this = s:STATE_RYUKYU_ISLANDS
	}
}

is_asian_farmland = {
	OR = {
		region = sr:region_indochina
		region = sr:region_indonesia
		region = sr:region_south_china
		region = sr:region_north_china
		region = sr:region_manchuria
		region = sr:region_japan
	}
}

is_subtropic_farmland = {
	OR = {
		region = sr:region_mexico
		region = sr:region_central_america
		region = sr:region_gran_colombia
		region = sr:region_andes
		region = sr:region_brazil
		region = sr:region_la_plata
		region = sr:region_caribbean
	}
}

is_arid_region = {
	OR = {
		region = sr:region_oceania
		region = sr:region_congo
		region = sr:region_southern_africa
		region = sr:region_niger
		region = sr:region_zanj
		region = sr:region_ethiopia
		region = sr:region_nile_basin
		region = sr:region_north_africa
		region = sr:region_senegal
		region = sr:region_anatolia
		region = sr:region_arabic
		region = sr:region_persia
	}
}
﻿#################################################################
#####				ROUTE GRAPHICS TRIGGERS					#####
#################################################################

gfx_car_condition_trigger = {
	
	scope:state = {
		market = {
			mg:automobiles = {
				market_goods_sell_orders >= 10
			}
		}
	}

}

gfx_truck_condition_trigger = {
	
	scope:state = {
		any_scope_building = {
			has_active_production_method = pm_public_motor_carriages
		}
	}

}

gfx_tracktor_condition_trigger = {

	has_technology_researched = mechanized_farming

	scope:state = {
		any_scope_building = {
			OR = {
				has_active_production_method = pm_tractors
				has_active_production_method = pm_compression_ignition_tractors
			}
		}
	}

}

#################################################################
#####				TRADE TRAIN TRIGGERS					#####
#################################################################


gfx_experimental_locomotive_trigger = {

	scope:state = {
		NOR = {
			any_scope_building = {
				has_active_production_method = pm_steam_trains
			}
			any_scope_building = {
				has_active_production_method = pm_electric_trains
			}
			any_scope_building = {
				has_active_production_method = pm_diesel_trains
			}

		}
	}

}

gfx_steam_locomotive_trigger = {

	scope:state = {
		any_scope_building = {
			has_active_production_method = pm_steam_trains
		}
	}

}

gfx_electrical_locomotive_trigger = {

	scope:state = {
		any_scope_building = {
			has_active_production_method = pm_electric_trains
		}
	}

}

gfx_diesel_locomotive_trigger = {

	scope:state = {
		any_scope_building = {
			has_active_production_method = pm_diesel_trains
		}
	}

}

gfx_passanger_train_trigger = {

	scope:state = {
		market = {
			mg:transportation = {
				market_goods_sell_orders > 20
			}
		}
	}

}

gfx_mining_train_trigger = {

	scope:state = {
		OR = {
			has_building = building_coal_mine
			has_building = building_iron_mine
			has_building = building_steel_mills
			has_building = building_sulfur_mine
		}
	}

}

gfx_forestry_train_trigger = {

	scope:state = {
		has_building = building_logging_camp
	}

}


#################################################################
#####				TRAIN CULTURE TRIGGERS					#####
#################################################################


#####			BRITTISH TRAIN CULTURE TRIGGERS				#####

gfx_has_british_trains_trigger = {
	
	OR = {
		AND = {
			OR = {
				country_has_primary_culture = cu:british
				country_has_primary_culture = cu:scottish
				country_has_primary_culture = cu:irish
				AND = {
					is_subject = yes
					any_overlord_or_above = {
						OR = {
							country_has_primary_culture = cu:british
							country_has_primary_culture = cu:scottish
							country_has_primary_culture = cu:irish
						}
					}
				}
				any_trade_route = {
					goods = g:engines
					exporter.owner = {
						OR = {
							country_has_primary_culture = cu:british
							country_has_primary_culture = cu:scottish
							country_has_primary_culture = cu:irish
						}
					}
				}
				power_bloc ?= {
					power_bloc_leader = {
						OR = {
							country_has_primary_culture = cu:british
							country_has_primary_culture = cu:scottish
							country_has_primary_culture = cu:irish
						}
					}
				}
		
			}
		
			NOR = {
				country_has_primary_culture = cu:north_german
				country_has_primary_culture = cu:south_german
				country_has_primary_culture = cu:french
				country_has_primary_culture = cu:occitan
				country_has_primary_culture = cu:breton
				country_has_primary_culture = cu:russian
				country_has_primary_culture = cu:ukrainian
				country_has_primary_culture = cu:yankee
				country_has_primary_culture = cu:dixie
				country_has_primary_culture = cu:anglo_canadian
				country_has_primary_culture = cu:franco_canadian
				country_has_primary_culture = cu:afro_american
				AND = {
					is_subject = yes
					any_overlord_or_above = {
						OR = {
							country_has_primary_culture = cu:north_german
							country_has_primary_culture = cu:south_german
							country_has_primary_culture = cu:french
							country_has_primary_culture = cu:occitan
							country_has_primary_culture = cu:breton
							country_has_primary_culture = cu:russian
							country_has_primary_culture = cu:ukrainian
							country_has_primary_culture = cu:yankee
							country_has_primary_culture = cu:dixie
							country_has_primary_culture = cu:anglo_canadian
							country_has_primary_culture = cu:franco_canadian
							country_has_primary_culture = cu:afro_american
						}
					}
				}
			}
		}
	
		NOR = {
			country_has_primary_culture = cu:british
			country_has_primary_culture = cu:scottish
			country_has_primary_culture = cu:irish
			country_has_primary_culture = cu:north_german
			country_has_primary_culture = cu:south_german
			country_has_primary_culture = cu:french
			country_has_primary_culture = cu:occitan
			country_has_primary_culture = cu:breton
			country_has_primary_culture = cu:russian
			country_has_primary_culture = cu:ukrainian
			country_has_primary_culture = cu:yankee
			country_has_primary_culture = cu:dixie
			country_has_primary_culture = cu:anglo_canadian
			country_has_primary_culture = cu:franco_canadian
			country_has_primary_culture = cu:afro_american
			AND = {
				is_subject = yes
				any_overlord_or_above = {
					OR = {
						country_has_primary_culture = cu:british
						country_has_primary_culture = cu:scottish
						country_has_primary_culture = cu:irish
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
						country_has_primary_culture = cu:french
						country_has_primary_culture = cu:occitan
						country_has_primary_culture = cu:breton
						country_has_primary_culture = cu:russian
						country_has_primary_culture = cu:ukrainian
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
						country_has_primary_culture = cu:anglo_canadian
						country_has_primary_culture = cu:franco_canadian
						country_has_primary_culture = cu:afro_american
					}
				}
			}
			any_trade_route = {
				goods = g:engines
				exporter.owner = {
					OR = {
						country_has_primary_culture = cu:british
						country_has_primary_culture = cu:scottish
						country_has_primary_culture = cu:irish
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
						country_has_primary_culture = cu:french
						country_has_primary_culture = cu:occitan
						country_has_primary_culture = cu:breton
						country_has_primary_culture = cu:russian
						country_has_primary_culture = cu:ukrainian
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
						country_has_primary_culture = cu:anglo_canadian
						country_has_primary_culture = cu:franco_canadian
						country_has_primary_culture = cu:afro_american
					}
				}
			}
			power_bloc ?= {
				power_bloc_leader = {
					OR = {
						country_has_primary_culture = cu:british
						country_has_primary_culture = cu:scottish
						country_has_primary_culture = cu:irish
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
						country_has_primary_culture = cu:french
						country_has_primary_culture = cu:occitan
						country_has_primary_culture = cu:breton
						country_has_primary_culture = cu:russian
						country_has_primary_culture = cu:ukrainian
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
						country_has_primary_culture = cu:anglo_canadian
						country_has_primary_culture = cu:franco_canadian
						country_has_primary_culture = cu:afro_american
					}
				}
			}
		}
	}
}	



#####			GERMAN TRAIN CULTURE TRIGGERS				#####

gfx_has_german_trains_trigger = {
	
	AND = {
		OR = {
			country_has_primary_culture = cu:north_german
			country_has_primary_culture = cu:south_german
			AND = {
				is_subject = yes
				any_overlord_or_above = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			any_trade_route = {
				goods = g:engines
				exporter.owner = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			power_bloc ?= {
				power_bloc_leader = {
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
		}
	
		NOR = {
			country_has_primary_culture = cu:british
			country_has_primary_culture = cu:scottish
			country_has_primary_culture = cu:irish
			country_has_primary_culture = cu:french
			country_has_primary_culture = cu:occitan
			country_has_primary_culture = cu:breton
			country_has_primary_culture = cu:russian
			country_has_primary_culture = cu:ukrainian
			country_has_primary_culture = cu:yankee
			country_has_primary_culture = cu:dixie
			country_has_primary_culture = cu:anglo_canadian
			country_has_primary_culture = cu:franco_canadian
			country_has_primary_culture = cu:afro_american
		}
	}
}



#####			FRENCH TRAIN CULTURE TRIGGERS				#####

gfx_has_french_trains_trigger = {

	AND = {
		OR = {
			country_has_primary_culture = cu:french
			country_has_primary_culture = cu:occitan
			country_has_primary_culture = cu:breton
			AND = {
				is_subject = yes
				any_overlord_or_above = {
					OR = {
						country_has_primary_culture = cu:french
						country_has_primary_culture = cu:occitan
						country_has_primary_culture = cu:breton
					}
				}
			}
			any_trade_route = {
				goods = g:engines
				exporter.owner = {
					OR = {
						country_has_primary_culture = cu:french
						country_has_primary_culture = cu:occitan
						country_has_primary_culture = cu:breton
					}
				}
			}
			power_bloc ?= {
				power_bloc_leader = {
					OR = {
						country_has_primary_culture = cu:french
						country_has_primary_culture = cu:occitan
						country_has_primary_culture = cu:breton
					}
				}
			}			
		}
	
		NOR = {
			country_has_primary_culture = cu:british
			country_has_primary_culture = cu:scottish
			country_has_primary_culture = cu:irish
			country_has_primary_culture = cu:north_german
			country_has_primary_culture = cu:south_german
			country_has_primary_culture = cu:russian
			country_has_primary_culture = cu:ukrainian
			country_has_primary_culture = cu:yankee
			country_has_primary_culture = cu:dixie
			country_has_primary_culture = cu:anglo_canadian
			country_has_primary_culture = cu:franco_canadian
			country_has_primary_culture = cu:afro_american
		}
	}
}	


#####			RUSSIAN TRAIN CULTURE TRIGGERS				#####

gfx_has_russian_trains_trigger = {
	
	AND = {
		OR = {
			country_has_primary_culture = cu:russian
			country_has_primary_culture = cu:ukrainian
			AND = {
				is_subject = yes
				any_overlord_or_above = {
					OR = {
						country_has_primary_culture = cu:russian
						country_has_primary_culture = cu:ukrainian
					}
				}
			}
			any_trade_route = {
				goods = g:engines
				exporter.owner = {
					OR = {
						country_has_primary_culture = cu:russian
						country_has_primary_culture = cu:ukrainian
					}
				}
			}
			power_bloc ?= {
				power_bloc_leader = {
					OR = {
						country_has_primary_culture = cu:russian
						country_has_primary_culture = cu:ukrainian
					}
				}
			}
		}
	
		NOR = {
			country_has_primary_culture = cu:british
			country_has_primary_culture = cu:scottish
			country_has_primary_culture = cu:irish
			country_has_primary_culture = cu:north_german
			country_has_primary_culture = cu:south_german
			country_has_primary_culture = cu:french
			country_has_primary_culture = cu:occitan
			country_has_primary_culture = cu:breton
			country_has_primary_culture = cu:yankee
			country_has_primary_culture = cu:dixie
			country_has_primary_culture = cu:anglo_canadian
			country_has_primary_culture = cu:franco_canadian
			country_has_primary_culture = cu:afro_american
		}
	}
}	


#####			MURICA, FUCK OFF TRAIN CULTURE TRIGGERS				#####

gfx_has_american_trains_trigger = {
	
	AND = {
		OR = {
			country_has_primary_culture = cu:yankee
			country_has_primary_culture = cu:dixie
			country_has_primary_culture = cu:anglo_canadian
			country_has_primary_culture = cu:franco_canadian
			country_has_primary_culture = cu:afro_american
			AND = {
				is_subject = yes
				any_overlord_or_above = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
						country_has_primary_culture = cu:anglo_canadian
						country_has_primary_culture = cu:franco_canadian
						country_has_primary_culture = cu:afro_american
					}
				}
			}
			any_trade_route = {
				goods = g:engines
				exporter.owner = {
					OR = {
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
						country_has_primary_culture = cu:anglo_canadian
						country_has_primary_culture = cu:franco_canadian
						country_has_primary_culture = cu:afro_american
					}
				}
			}
			power_bloc ?= {
				power_bloc_leader = {
					OR = {	
						country_has_primary_culture = cu:yankee
						country_has_primary_culture = cu:dixie
						country_has_primary_culture = cu:anglo_canadian
						country_has_primary_culture = cu:franco_canadian
						country_has_primary_culture = cu:afro_american
					}
				}
			}
		}
	
		NOR = {
			country_has_primary_culture = cu:british
			country_has_primary_culture = cu:scottish
			country_has_primary_culture = cu:irish
			country_has_primary_culture = cu:north_german
			country_has_primary_culture = cu:south_german
			country_has_primary_culture = cu:french
			country_has_primary_culture = cu:occitan
			country_has_primary_culture = cu:breton
			country_has_primary_culture = cu:russian
			country_has_primary_culture = cu:ukrainian
		}
	}
}


#####			NO TRAIN CULTURE TRIGGERS				#####

gfx_has_no_culture_trains_trigger = {
	
	NOR = {
		country_has_primary_culture = cu:british
		country_has_primary_culture = cu:scottish
		country_has_primary_culture = cu:irish
		country_has_primary_culture = cu:north_german
		country_has_primary_culture = cu:south_german
		country_has_primary_culture = cu:french
		country_has_primary_culture = cu:occitan
		country_has_primary_culture = cu:breton
		country_has_primary_culture = cu:russian
		country_has_primary_culture = cu:ukrainian
		country_has_primary_culture = cu:yankee
		country_has_primary_culture = cu:dixie
		country_has_primary_culture = cu:anglo_canadian
		country_has_primary_culture = cu:franco_canadian
		country_has_primary_culture = cu:afro_american
		AND = {
			is_subject = yes
			any_overlord_or_above = {
				OR = {
					country_has_primary_culture = cu:british
					country_has_primary_culture = cu:scottish
					country_has_primary_culture = cu:irish
					country_has_primary_culture = cu:north_german
					country_has_primary_culture = cu:south_german
					country_has_primary_culture = cu:french
					country_has_primary_culture = cu:occitan
					country_has_primary_culture = cu:breton
					country_has_primary_culture = cu:russian
					country_has_primary_culture = cu:ukrainian
					country_has_primary_culture = cu:yankee
					country_has_primary_culture = cu:dixie
					country_has_primary_culture = cu:anglo_canadian
					country_has_primary_culture = cu:franco_canadian
					country_has_primary_culture = cu:afro_american
				}
			}
		}
		any_trade_route = {
			goods = g:engines
			exporter.owner = {
				OR = {
					country_has_primary_culture = cu:british
					country_has_primary_culture = cu:scottish
					country_has_primary_culture = cu:irish
					country_has_primary_culture = cu:north_german
					country_has_primary_culture = cu:south_german
					country_has_primary_culture = cu:french
					country_has_primary_culture = cu:occitan
					country_has_primary_culture = cu:breton
					country_has_primary_culture = cu:russian
					country_has_primary_culture = cu:ukrainian
					country_has_primary_culture = cu:yankee
					country_has_primary_culture = cu:dixie
					country_has_primary_culture = cu:anglo_canadian
					country_has_primary_culture = cu:franco_canadian
					country_has_primary_culture = cu:afro_american
				}
			}
		}
		power_bloc ?= {
			power_bloc_leader = {
				OR = {
					country_has_primary_culture = cu:british
					country_has_primary_culture = cu:scottish
					country_has_primary_culture = cu:irish
					country_has_primary_culture = cu:north_german
					country_has_primary_culture = cu:south_german
					country_has_primary_culture = cu:french
					country_has_primary_culture = cu:occitan
					country_has_primary_culture = cu:breton
					country_has_primary_culture = cu:russian
					country_has_primary_culture = cu:ukrainian
					country_has_primary_culture = cu:yankee
					country_has_primary_culture = cu:dixie
					country_has_primary_culture = cu:anglo_canadian
					country_has_primary_culture = cu:franco_canadian
					country_has_primary_culture = cu:afro_american
				}
			}
		}
	}	
}

#################################################################
#####			MILITARY MOBILIZATION  TRIGGERS				#####
#################################################################

gfx_military_mobilization_culture_is_european = {

	any_primary_culture = { has_culture_graphics = european }

}

gfx_military_mobilization_culture_is_african = {

	any_primary_culture = { has_culture_graphics = african }

}

gfx_military_mobilization_culture_is_arabic = {

	any_primary_culture = { has_culture_graphics = arabic }

}

gfx_military_mobilization_culture_is_east_asian = {

	any_primary_culture = { has_culture_graphics = east_asian }

}

gfx_military_mobilization_culture_is_south_asian = {

	any_primary_culture = { has_culture_graphics = south_asian }

}

#################################################################

gfx_military_mobilization_is_irregular = {

	country_army_unit_type_fraction = {
		target = unit_type:combat_unit_type_irregular_infantry  
		value >= 0.2  
	}

}

gfx_military_mobilization_is_line = {

	country_army_unit_type_fraction = {
		target = unit_type:combat_unit_type_line_infantry  
		value >= 0.2  
	}

}

gfx_military_mobilization_is_skirmish = {

	country_army_unit_type_fraction = {
		target = unit_type:combat_unit_type_skirmish_infantry  
		value >= 0.2  
	}

}

gfx_military_mobilization_is_trench = {

	country_army_unit_type_fraction = {
		target = unit_type:combat_unit_type_trench_infantry  
		value >= 0.2  
	}

}

gfx_military_mobilization_is_squad = {

	country_army_unit_type_fraction = {
		target = unit_type:combat_unit_type_squad_infantry  
		value >= 0.2  
	}

}

gfx_military_mobilization_is_mechanized = {

	country_army_unit_type_fraction = {
		target = unit_type:combat_unit_type_mechanized_infantry  
		value >= 0.2  
	}

}


#################################################################
#####				MILITARY CULTURE TRIGGERS				#####
#################################################################

gfx_military_deploy_culture_is_european = {

	scope:military_formation = {
		any_combat_unit = {
			culture = { has_culture_graphics = european }
		}
	}

}

gfx_military_deploy_culture_is_african = {

	scope:military_formation = {
		any_combat_unit = {
			culture = { has_culture_graphics = african }
		}
	}

}

gfx_military_deploy_culture_is_arabic = {

	scope:military_formation = {
		any_combat_unit = {
			culture = { has_culture_graphics = arabic }
		}
	}

}

gfx_military_deploy_culture_is_east_asian = {

	scope:military_formation = {
		any_combat_unit = {
			culture = { has_culture_graphics = east_asian }
		}
	}

}

gfx_military_deploy_culture_is_south_asian = {

	scope:military_formation = {
		any_combat_unit = {
			culture = { has_culture_graphics = south_asian }
		}
	}

}

#################################################################
#####				MILITARY UNIT TYPE TIGGER				#####
#################################################################

gfx_military_unit_is_irregular = {

	scope:military_formation = {
		any_combat_unit = {
			has_unit_type = unit_type:combat_unit_type_irregular_infantry
		}
	}

}

gfx_military_unit_is_line = {

	scope:military_formation = {
		any_combat_unit = {
			has_unit_type = unit_type:combat_unit_type_line_infantry
		}
	}

}

gfx_military_unit_is_skirmish = {

	scope:military_formation = {
		any_combat_unit = {
			has_unit_type = unit_type:combat_unit_type_skirmish_infantry
		}
	}

}

gfx_military_unit_is_trench = {

	scope:military_formation = {
		any_combat_unit = {
			has_unit_type = unit_type:combat_unit_type_trench_infantry
		}
	}

}

gfx_military_unit_is_squad = {

	scope:military_formation = {
		any_combat_unit = {
			has_unit_type = unit_type:combat_unit_type_squad_infantry
		}
	}

}

gfx_military_unit_is_mechanized = {

	scope:military_formation = {
		any_combat_unit = {
			has_unit_type = unit_type:combat_unit_type_mechanized_infantry
		}
	}

}
﻿has_v2_soundtrack_dlc_trigger = {
	has_cosmetic_dlc = "Victoria 2 Remastered Soundtrack" 
}

has_american_buildings_dlc_trigger = {
	has_gameplay_dlc = "American Buildings Pack"
}

has_agitators_cosmetics_dlc_trigger = {
	has_cosmetic_dlc = "Voice of the People Theme"
}

﻿is_lobby_formation_reason_defense = {
	OR = {
		AND = {
			exists = scope:political_lobby
			scope:political_lobby = { lobby_formation_reason = defense }
		}
		AND = {
			exists = scope:diplomatic_catalyst
			scope:diplomatic_catalyst = { lobby_formation_reason = defense }
		}					
	}
}

is_lobby_formation_reason_diplomacy = {
	OR = {
		AND = {
			exists = scope:political_lobby
			scope:political_lobby = { lobby_formation_reason = diplomacy }
		}
		AND = {
			exists = scope:diplomatic_catalyst
			scope:diplomatic_catalyst = { lobby_formation_reason = diplomacy }
		}					
	}
}

is_lobby_formation_reason_ideology = {
	OR = {
		AND = {
			exists = scope:political_lobby
			scope:political_lobby = { lobby_formation_reason = ideology }
		}
		AND = {
			exists = scope:diplomatic_catalyst
			scope:diplomatic_catalyst = { lobby_formation_reason = ideology }
		}					
	}
}

is_lobby_formation_reason_funded = {
	OR = {
		AND = {
			exists = scope:political_lobby
			scope:political_lobby = { lobby_formation_reason = funded }
		}
		AND = {
			exists = scope:diplomatic_catalyst
			scope:diplomatic_catalyst = { lobby_formation_reason = funded }
		}					
	}
}

is_lobby_formation_reason_aggression = {
	OR = {
		AND = {
			exists = scope:political_lobby
			scope:political_lobby = { lobby_formation_reason = aggression }
		}
		AND = {
			exists = scope:diplomatic_catalyst
			scope:diplomatic_catalyst = { lobby_formation_reason = aggression }
		}					
	}
}

is_lobby_formation_reason_religion = {
	OR = {
		AND = {
			exists = scope:political_lobby
			scope:political_lobby = { lobby_formation_reason = religion }
		}
		AND = {
			exists = scope:diplomatic_catalyst
			scope:diplomatic_catalyst = { lobby_formation_reason = religion }
		}					
	}
}

is_lobby_formation_reason_technology = {
	OR = {
		AND = {
			exists = scope:political_lobby
			scope:political_lobby = { lobby_formation_reason = technology }
		}
		AND = {
			exists = scope:diplomatic_catalyst
			scope:diplomatic_catalyst = { lobby_formation_reason = technology }
		}					
	}
}

is_lobby_formation_reason_economy = {
	OR = {
		AND = {
			exists = scope:political_lobby
			scope:political_lobby = { lobby_formation_reason = economy }
		}
		AND = {
			exists = scope:diplomatic_catalyst
			scope:diplomatic_catalyst = { lobby_formation_reason = economy }
		}					
	}
}
﻿#	Example:
# 
#	example_trigger = {
#		x = 100
#		y = 50
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_trigger = yes
#	}
#

country_has_voting_franchise = {
	OR = {
		modifier:country_voting_power_base_add > 0
		modifier:country_voting_power_from_literacy_add > 0
		modifier:country_voting_power_wealth_threshold_add > 0
		modifier:country_academics_voting_power_add > 0
		modifier:country_aristocrats_voting_power_add > 0
		modifier:country_bureaucrats_voting_power_add > 0
		modifier:country_capitalists_voting_power_add > 0
		modifier:country_clergymen_voting_power_add > 0
		modifier:country_clerks_voting_power_add > 0
		modifier:country_engineers_voting_power_add > 0
		modifier:country_farmers_voting_power_add > 0
		modifier:country_laborers_voting_power_add > 0
		modifier:country_machinists_voting_power_add > 0
		modifier:country_officers_voting_power_add > 0
		modifier:country_peasants_voting_power_add > 0
		modifier:country_shopkeepers_voting_power_add > 0
		modifier:country_slaves_voting_power_add > 0
		modifier:country_soldiers_voting_power_add > 0
	}
}

country_can_form_power_bloc = {
	AND = {
		trigger_if = {
			limit = {
				is_country_type = decentralized
			}
			NOT = { is_country_type = decentralized }
		}
		trigger_if = {
			limit = {
				is_revolutionary = yes
			}
			is_revolutionary = no
		}
		country_rank >= rank_value:unrecognized_major_power
		NOT = { has_law = law_type:law_isolationism }
	}
}

power_bloc_is_weak = {
	power_bloc_leader = {
		country_rank < rank_value:great_power
	}
}

country_is_in_different_power_bloc = {
	is_in_power_bloc = yes
	$TARGET$ = {
		is_in_power_bloc = yes
	}

	NOT = {
		power_bloc = $TARGET$.power_bloc
	}
}

country_is_power_struggle_rival = {
	power_bloc ?= {
		OR = {
			AND = {
				power_bloc_leader = root
				power_struggle_contender ?= $TARGET$
			}
			AND = {
				power_bloc_leader = $TARGET$
				power_struggle_contender ?= root
			}
		}
	}
}

country_has_education_system = {
	OR = {
		has_law = law_type:law_religious_schools
		has_law = law_type:law_public_schools
		has_law = law_type:law_private_schools
	}
}

is_being_incorporated = {
	incorporation_progress > 0
   	incorporation_progress < 1
}

violate_sovereignty_war_check = {
	save_temporary_scope_as = relevant_war

	scope:target_country = {
		any_scope_theater = {
			is_land_theater = yes

			save_temporary_scope_as = target_theater

			scope:relevant_war.attacker_warleader = {
				any_scope_theater = {
					is_land_theater = yes

					check_area = {
						mode = adjacent
						target = scope:target_theater
					}
				}
			}

			scope:relevant_war.defender_warleader = {
				any_scope_theater = {
					is_land_theater = yes

					check_area = {
						mode = adjacent
						target = scope:target_theater
					}
				}
			}
		}
	}
}


has_industrialized_pm = {
	OR = {
		# Textile Mills
		is_production_method_active = {
			building_type = building_textile_mills
			production_method = pm_mechanized_looms
		}
		is_production_method_active = {
			building_type = building_textile_mills
			production_method = pm_automatic_power_looms
		}
		
		# Furniture Manufacturies
		is_production_method_active = {
			building_type = building_furniture_manufacturies
			production_method = pm_mechanized_workshops
		}
		is_production_method_active = {
			building_type = building_furniture_manufacturies
			production_method = pm_watertube_boiler_building_furniture_manufacturies
		}
		is_production_method_active = {
			building_type = building_furniture_manufacturies
			production_method = pm_rotary_valve_engine_building_furniture_manufacturies
		}
		is_production_method_active = {
			building_type = building_furniture_manufacturies
			production_method = pm_assembly_lines_building_furniture_manufacturies
		}

		# Tooling Workshops
		is_production_method_active = {
			building_type = building_tooling_workshops
			production_method = pm_watertube_boiler_building_tooling_workshops
		}
		is_production_method_active = {
			building_type = building_tooling_workshops
			production_method = pm_rotary_valve_engine_building_tooling_workshops
		}
		is_production_method_active = {
			building_type = building_tooling_workshops
			production_method = pm_assembly_lines_building_tooling_workshops
		}

		# Paper Mills
		is_production_method_active = {
			building_type = building_paper_mills
			production_method = pm_watertube_boiler_building_paper_mills
		}
		is_production_method_active = {
			building_type = building_paper_mills
			production_method = pm_rotary_valve_engine_building_paper_mills
		}

		# Steel Mills
		is_production_method_active = {
			building_type = building_steel_mills
			production_method = pm_watertube_boiler_building_steel_mills
		}
		is_production_method_active = {
			building_type = building_steel_mills
			production_method = pm_rotary_valve_engine_building_steel_mills
		}

		# Motor Industries
		is_production_method_active = {
			building_type = building_motor_industry
			production_method = pm_watertube_boiler_building_motor_industry
		}
		is_production_method_active = {
			building_type = building_motor_industry
			production_method = pm_rotary_valve_engine_building_motor_industry
		}
	}
}

using_watertube_boiler = {
	OR = {
		AND = {
			has_building = building_furniture_manufacturies
			is_production_method_active = { 
				building_type = building_furniture_manufacturies 
				production_method = pm_watertube_boiler_building_furniture_manufacturies
			}
		}
		AND = {
			has_building = building_tooling_workshops
			is_production_method_active = { 
				building_type = building_tooling_workshops 
				production_method = pm_watertube_boiler_building_tooling_workshops
			}
		}
		AND = {
			has_building = building_paper_mills
			is_production_method_active = { 
				building_type = building_paper_mills
				production_method = pm_watertube_boiler_building_paper_mills
			}
		}
		AND = {
			has_building = building_steel_mills
			is_production_method_active = { 
				building_type = building_steel_mills
				production_method = pm_watertube_boiler_building_steel_mills
			}
		}
		AND = {
			has_building = building_motor_industry
			is_production_method_active = { 
				building_type = building_motor_industry
				production_method = pm_watertube_boiler_building_motor_industry
			}
		}
		AND = {
			has_building = building_tooling_workshops
			is_production_method_active = { 
				building_type = building_tooling_workshops 
				production_method = pm_watertube_boiler_building_tooling_workshops
			}
		}
	}
}

countries_are_valid_rivals = {
	has_overlapping_interests = scope:target_country
	
	trigger_if = {
		limit = {
			country_rank = rank_value:great_power
		}
		scope:target_country = { 
			OR = {
				country_rank = rank_value:great_power
				country_rank = rank_value:major_power
			}
		}		
	}
	
	trigger_if = {
		limit = {
			country_rank = rank_value:major_power
		}
		scope:target_country = { 
			OR = {
				country_rank = rank_value:great_power
				country_rank = rank_value:major_power
				country_rank = rank_value:minor_power
			}
		}		
	}

	trigger_if = {
		limit = {
			country_rank = rank_value:minor_power
		}
		scope:target_country = { 
			OR = {
				country_rank = rank_value:major_power
				country_rank = rank_value:minor_power
				country_rank = rank_value:insignificant_power
			}
		}		
	}

	trigger_if = {
		limit = {
			country_rank = rank_value:insignificant_power
		}
		scope:target_country = { 
			OR = {
				country_rank = rank_value:minor_power
				country_rank = rank_value:insignificant_power
			}
		}		
	}

	trigger_if = {
		limit = {
			country_rank = rank_value:unrecognized_major_power
		}
		scope:target_country = { 
			OR = {
				country_rank = rank_value:unrecognized_major_power
				country_rank = rank_value:unrecognized_regional_power
			}
		}		
	}

	trigger_if = {
		limit = {
			country_rank = rank_value:unrecognized_regional_power
		}
		scope:target_country = { 
			OR = {
				country_rank = rank_value:unrecognized_major_power
				country_rank = rank_value:unrecognized_regional_power
				country_rank = rank_value:unrecognized_power
			}
		}		
	}

	trigger_if = {
		limit = {
			country_rank = rank_value:unrecognized_power
		}
		scope:target_country = { 
			OR = {
				country_rank = rank_value:unrecognized_regional_power
				country_rank = rank_value:unrecognized_power
			}
		}		
	}			
}

in_earthquake_zone = {
	OR = {
		region = sr:region_indonesia
		region = sr:region_indochina
		region = sr:region_south_china
		region = sr:region_north_china
		region = sr:region_manchuria
		region = sr:region_himalayas
		region = sr:region_japan
		region = sr:region_la_plata
		region = sr:region_andes
		region = sr:region_gran_colombia
		region = sr:region_central_america
		region = sr:region_mexico
		region = sr:region_pacific_coast
	}
}

in_volcanic_zone = {
	OR = {
		region = sr:region_indonesia
		region = sr:region_japan
		region = sr:region_la_plata
		region = sr:region_andes
		region = sr:region_gran_colombia
		region = sr:region_central_america
		region = sr:region_mexico
		region = sr:region_pacific_coast
		region = sr:region_zanj
		region = sr:region_italy
		state_region = s:STATE_ICELAND
		state_region = s:STATE_HAWAIIAN_ISLANDS
	}
}

on_river = {
	OR = {
		has_state_trait = state_trait_rhine_river
		has_state_trait = state_trait_danube_river
		has_state_trait = state_trait_drava_river
		has_state_trait = state_trait_volga_river
		has_state_trait = state_trait_elbe_river
		has_state_trait = state_trait_oder_river
		has_state_trait = state_trait_dnieper_river
		has_state_trait = state_trait_rhone_river
		has_state_trait = state_trait_loire_river
		has_state_trait = state_trait_seine_river
		has_state_trait = state_trait_nile_river
		has_state_trait = state_trait_congo_river
		has_state_trait = state_trait_niger_river
		has_state_trait = state_trait_zambezi_river
		has_state_trait = state_trait_yangtze_river
		has_state_trait = state_trait_pearl_river
		has_state_trait = state_trait_yellow_river
		has_state_trait = state_trait_ganges_river
		has_state_trait = state_trait_tigris_river
		has_state_trait = state_trait_euphrates_river
		has_state_trait = state_trait_indus_river
		has_state_trait = state_trait_brahmaputra_river
		has_state_trait = state_trait_mekong_river
		has_state_trait = state_trait_ob_river
		has_state_trait = state_trait_po_river
		has_state_trait = state_trait_mississippi_river
		has_state_trait = state_trait_ohio_river
		has_state_trait = state_trait_columbia_river
		has_state_trait = state_trait_orinoco_river
		has_state_trait = state_trait_uruguay_river
		has_state_trait = state_trait_parana_river
		has_state_trait = state_trait_paraguay_river
		has_state_trait = state_trait_amazon_river
	}
}

has_government_building = {
	OR = {
		has_building = building_university
		has_building = building_arts_academy
	}
}

has_military_building = {
	OR = {
		has_building = building_barracks
		has_building = building_naval_base
	}
}

has_industry_building = {
	OR = {
		has_building = building_food_industry
		has_building = building_textile_mills
		has_building = building_furniture_manufacturies
		has_building = building_glassworks
		has_building = building_tooling_workshops
		has_building = building_paper_mills
	}
}

is_industry_building = {
	OR = {
		is_building_type = building_food_industry
		is_building_type = building_textile_mills
		is_building_type = building_furniture_manufacturies
		is_building_type = building_glassworks
		is_building_type = building_tooling_workshops
		is_building_type = building_paper_mills
	}
}

has_heavy_industry_building = {
	OR = {
		has_building = building_chemical_plants
		has_building = building_synthetics_plants
		has_building = building_steel_mills
		has_building = building_motor_industry
		has_building = building_war_machine_industry
		has_building = building_electrics_industry
		has_building = building_munition_plants
		has_building = building_power_plant
	}
}

is_heavy_industry_building = {
	OR = {
		is_building_type = building_chemical_plants
		is_building_type = building_synthetics_plants
		is_building_type = building_steel_mills
		is_building_type = building_motor_industry
		is_building_type = building_war_machine_industry
		is_building_type = building_electrics_industry
		is_building_type = building_munition_plants
		is_building_type = building_power_plant
	}
}

state_in_africa = {
	custom_tooltip = {
		text = state_in_africa_desc
		OR = {
			region = sr:region_nile_basin
			region = sr:region_north_africa
			region = sr:region_senegal
			region = sr:region_niger
			region = sr:region_congo
			region = sr:region_southern_africa
			region = sr:region_zanj
		}
	}
}

has_subsistence_building = {
	any_scope_building = {
		is_subsistence_building = yes
	}
}

owned_central_asia_region_states = {
	owns_entire_state_region = STATE_SAMARA
	owns_entire_state_region = STATE_URALSK
	owns_entire_state_region = STATE_AKMOLINSK
	owns_entire_state_region = STATE_SEMIRECHE
	owns_entire_state_region = STATE_DZUNGARIA
	owns_entire_state_region = STATE_TIANSHAN
	owns_entire_state_region = STATE_JETISY
	owns_entire_state_region = STATE_TAJIKISTAN
	owns_entire_state_region = STATE_KIRGHIZIA
	owns_entire_state_region = STATE_UZBEKIA
	owns_entire_state_region = STATE_TURKMENIA
	owns_entire_state_region = STATE_KHIVA
}

owned_great_plains_region_states = {
	owns_entire_state_region = STATE_MONTANA
	owns_entire_state_region = STATE_NORTH_DAKOTA
	owns_entire_state_region = STATE_SOUTH_DAKOTA
	owns_entire_state_region = STATE_NEBRASKA
	owns_entire_state_region = STATE_WYOMING
	owns_entire_state_region = STATE_COLORADO
	owns_entire_state_region = STATE_KANSAS
	owns_entire_state_region = STATE_NEW_MEXICO
}

owned_pacific_coast_region_states = {
	owns_entire_state_region = STATE_WASHINGTON
	owns_entire_state_region = STATE_IDAHO
	owns_entire_state_region = STATE_OREGON
	owns_entire_state_region = STATE_NEVADA
	owns_entire_state_region = STATE_UTAH
	owns_entire_state_region = STATE_ARIZONA
	owns_entire_state_region = STATE_CALIFORNIA
	owns_entire_state_region = STATE_BAJA_CALIFORNIA
}

french_treaty_ports = {
	OR = {
		owns_treaty_port_in = STATE_PICARDY
		owns_treaty_port_in = STATE_NORMANDY
		owns_treaty_port_in = STATE_BRITTANY
		owns_treaty_port_in = STATE_FRENCH_LOW_COUNTRIES
		owns_treaty_port_in = STATE_POITOU
		owns_treaty_port_in = STATE_AQUITAINE
		owns_treaty_port_in = STATE_PROVENCE
		owns_treaty_port_in = STATE_LANGUEDOC
	}
}

german_treaty_ports = {
	OR = {
		owns_treaty_port_in = STATE_HANNOVER
		owns_treaty_port_in = STATE_ELBE
		owns_treaty_port_in = STATE_SCHLESWIG_HOLSTEIN
		owns_treaty_port_in = STATE_MECKLENBURG
		owns_treaty_port_in = STATE_POMERANIA
		owns_treaty_port_in = STATE_WEST_PRUSSIA
		owns_treaty_port_in = STATE_EAST_PRUSSIA
	}
}

british_treaty_ports = {
	OR = {
		owns_treaty_port_in = STATE_WEST_COUNTRY
		owns_treaty_port_in = STATE_HOME_COUNTIES
		owns_treaty_port_in = STATE_EAST_ANGLIA
		owns_treaty_port_in = STATE_WALES
		owns_treaty_port_in = STATE_MIDLANDS
		owns_treaty_port_in = STATE_YORKSHIRE
		owns_treaty_port_in = STATE_LANCASHIRE
		owns_treaty_port_in = STATE_LOWLANDS
		owns_treaty_port_in = STATE_HIGHLANDS
		owns_treaty_port_in = STATE_ULSTER
		owns_treaty_port_in = STATE_LEINSTER
		owns_treaty_port_in = STATE_CONNAUGHT
		owns_treaty_port_in = STATE_MUNSTER
	}
}

italian_treaty_ports = {
	OR = {
		owns_treaty_port_in = STATE_SARDINIA
		owns_treaty_port_in = STATE_SICILY
		owns_treaty_port_in = STATE_CALABRIA
		owns_treaty_port_in = STATE_APULIA
		owns_treaty_port_in = STATE_CAMPANIA
		owns_treaty_port_in = STATE_ABRUZZO
		owns_treaty_port_in = STATE_LAZIO
		owns_treaty_port_in = STATE_UMBRIA
		owns_treaty_port_in = STATE_ROMAGNA
		owns_treaty_port_in = STATE_TUSCANY
		owns_treaty_port_in = STATE_PIEDMONT
		owns_treaty_port_in = STATE_VENETIA
		owns_treaty_port_in = STATE_ISTRIA
		owns_treaty_port_in = STATE_EMILIA
	}
}
	
iberian_treaty_ports = {
	OR = {
		owns_treaty_port_in = STATE_GRANADA
		owns_treaty_port_in = STATE_ANDALUSIA
		owns_treaty_port_in = STATE_VALENCIA
		owns_treaty_port_in = STATE_CATALONIA
		owns_treaty_port_in = STATE_NAVARRA
		owns_treaty_port_in = STATE_GALICIA
		owns_treaty_port_in = STATE_BALEARES
		owns_treaty_port_in = STATE_BEIRA
		owns_treaty_port_in = STATE_ESTREMADURA
		owns_treaty_port_in = STATE_ALENTEJO
	}
}

european_colonies_north_africa = {
	or = {
		owns_entire_state_region = STATE_CHAD
		owns_entire_state_region = STATE_NIGER
		owns_entire_state_region = STATE_TIMBUKTU
		owns_entire_state_region = STATE_INNER_MAURITANIA
		owns_entire_state_region = STATE_MAURITANIA
		owns_entire_state_region = STATE_WEST_SAHARA
		owns_entire_state_region = STATE_SAHARA
		owns_entire_state_region = STATE_EAST_SAHARA
		owns_entire_state_region = STATE_TRIPOLI
		owns_entire_state_region = STATE_LIBYAN_DESERT
		owns_entire_state_region = STATE_LIBYA
		owns_entire_state_region = STATE_TUNISIA
		owns_entire_state_region = STATE_CONSTANTINE
		owns_entire_state_region = STATE_INNER_MOROCCO
		owns_entire_state_region = STATE_ORAN
		owns_entire_state_region = STATE_ALGIERS
		owns_entire_state_region = STATE_AL_RIF
		owns_entire_state_region = STATE_INNER_MOROCCO
		owns_entire_state_region = STATE_FEZ
		owns_entire_state_region = STATE_MARRAKECH
	}
}

european_colonies_west_africa = {
	or = {
		owns_entire_state_region = STATE_NIGER_DELTA
		owns_entire_state_region = STATE_BENIN
		owns_entire_state_region = STATE_YORUBA_STATES
		owns_entire_state_region = STATE_HAUSALAND
		owns_entire_state_region = STATE_OUTER_HAUSALAND
		owns_entire_state_region = STATE_NIGERIA
		owns_entire_state_region = STATE_EAST_HAUSALAND
		owns_entire_state_region = STATE_BORNU
		owns_entire_state_region = STATE_DAHOMEY
		owns_entire_state_region = STATE_VOLTA
		owns_entire_state_region = STATE_GHANA
		owns_entire_state_region = STATE_IVORY_COAST
		owns_entire_state_region = STATE_EASTERN_MALI
		owns_entire_state_region = STATE_WINDWARD_COAST
		owns_entire_state_region = STATE_WESTERN_MALI
		owns_entire_state_region = STATE_GUINEA
		owns_entire_state_region = STATE_LIBERIA
		owns_entire_state_region = STATE_SIERRA_LEONE
		owns_entire_state_region = STATE_GAMBIA
		owns_entire_state_region = STATE_SENEGAL
	}
}

european_colonies_nile_basin = {
	or = {
		owns_entire_state_region = STATE_OROMIA
		owns_entire_state_region = STATE_AMHARA
		owns_entire_state_region = STATE_EQUATORIA
		owns_entire_state_region = STATE_DARFUR
		owns_entire_state_region = STATE_KORDOFAN
		owns_entire_state_region = STATE_BLUE_NILE
		owns_entire_state_region = STATE_GONDER
		owns_entire_state_region = STATE_ERITREA
		owns_entire_state_region = STATE_DONGOLA
		owns_entire_state_region = STATE_UPPER_EGYPT
		owns_entire_state_region = STATE_EGYPTIAN_DESERT
		owns_entire_state_region = STATE_MIDDLE_EGYPT
		owns_entire_state_region = STATE_MATRUH
		owns_entire_state_region = STATE_LOWER_EGYPT
		owns_entire_state_region = STATE_SINAI
	}
}

european_colonies_central_africa = {
	or = {
		owns_entire_state_region = STATE_ZAMBIA
		owns_entire_state_region = STATE_EAST_ANGOLA
		owns_entire_state_region = STATE_SOUTH_ANGOLA
		owns_entire_state_region = STATE_NORTH_ANGOLA
		owns_entire_state_region = STATE_BAS_CONGO
		owns_entire_state_region = STATE_KASAI
		owns_entire_state_region = STATE_KATANGA
		owns_entire_state_region = STATE_CONGO_ORIENTALE
		owns_entire_state_region = STATE_EQUATEUR
		owns_entire_state_region = STATE_CONGO
		owns_entire_state_region = STATE_GABON
		owns_entire_state_region = STATE_SOUTH_CAMEROON
		owns_entire_state_region = STATE_UBANGI_SHARI
		owns_entire_state_region = STATE_WADDAI
		owns_entire_state_region = STATE_NORTH_CAMEROON
	}
}

european_colonies_east_africa = {
	or = {
		owns_entire_state_region = STATE_SOMALILAND
		owns_entire_state_region = STATE_KENYA
		owns_entire_state_region = STATE_RIFT_VALLEY
		owns_entire_state_region = STATE_UGANDA
		owns_entire_state_region = STATE_TANGANYIKA
		owns_entire_state_region = STATE_LINDI
		owns_entire_state_region = STATE_ZANZIBAR
		owns_entire_state_region = STATE_KAZEMBE
		owns_entire_state_region = STATE_ZAMBEZIA
		owns_entire_state_region = STATE_MOCAMBIQUE
		owns_entire_state_region = STATE_NORTH_MADAGASCAR
		owns_entire_state_region = STATE_SOUTH_MADAGASCAR
	}
}

european_colonies_south_africa = {
	or = {
		owns_entire_state_region = STATE_EASTERN_CAPE
		owns_entire_state_region = STATE_CAPE_COLONY
		owns_entire_state_region = STATE_NORTHERN_CAPE
		owns_entire_state_region = STATE_VRYSTAAT
		owns_entire_state_region = STATE_NAMAQUALAND
		owns_entire_state_region = STATE_BOTSWANA
		owns_entire_state_region = STATE_TRANSVAAL
		owns_entire_state_region = STATE_LOURENCO_MARQUES
		owns_entire_state_region = STATE_ZAMBEZI
		owns_entire_state_region = STATE_HEREROLAND
		owns_entire_state_region = STATE_ZULULAND
	}
}

owned_andes_region_states = {
	owns_entire_state_region = STATE_LA_PAZ
	owns_entire_state_region = STATE_PASTAZA
	owns_entire_state_region = STATE_JUJUY
	owns_entire_state_region = STATE_ECUADOR
	owns_entire_state_region = STATE_SANTA_CRUZ
	owns_entire_state_region = STATE_AREQUIPA
	owns_entire_state_region = STATE_CAJAMARCA
	owns_entire_state_region = STATE_ICA
	owns_entire_state_region = STATE_LIMA
	owns_entire_state_region = STATE_POTOSI
	owns_entire_state_region = STATE_TARAPACA
	owns_entire_state_region = STATE_ANTOFAGASTA
	owns_entire_state_region = STATE_ACRE
}

owned_gran_colombia_region_states = {
	owns_entire_state_region = STATE_BOLIVAR
	owns_entire_state_region = STATE_CUNDINAMARCA
	owns_entire_state_region = STATE_CAUCA
	owns_entire_state_region = STATE_GUAVIARE
	owns_entire_state_region = STATE_ZULIA
	owns_entire_state_region = STATE_ANTIOQUIA
	owns_entire_state_region = STATE_MIRANDA
	owns_entire_state_region = STATE_GUAYANA
}

owned_la_plata_region_states = {
	owns_entire_state_region = STATE_SANTIAGO
	owns_entire_state_region = STATE_PATAGONIA
	owns_entire_state_region = STATE_ARAUCANIA
	owns_entire_state_region = STATE_LOS_RIOS
	owns_entire_state_region = STATE_SOUTH_ATLANTIC_ISLANDS
	owns_entire_state_region = STATE_BAJO_PARAGUAY
	owns_entire_state_region = STATE_ALTO_PARAGUAY
	owns_entire_state_region = STATE_BUENOS_AIRES
	owns_entire_state_region = STATE_CHACO
	owns_entire_state_region = STATE_TUCUMAN
	owns_entire_state_region = STATE_CORRIENTES
	owns_entire_state_region = STATE_SANTA_FE
	owns_entire_state_region = STATE_RIO_NEGRO
}

is_farm_building = {
	or = {
		is_building_type = building_rye_farm
		is_building_type = building_wheat_farm
		is_building_type = building_rice_farm
		is_building_type = building_maize_farm
		is_building_type = building_millet_farm
		is_building_type = building_livestock_ranch
	}
}

has_farm_building = {
	OR = {
		has_building = building_rye_farm
		has_building = building_wheat_farm
		has_building = building_rice_farm
		has_building = building_maize_farm
		has_building = building_millet_farm
		has_building = building_livestock_ranch
	}
}

is_production_building = {
	or = {
		is_building_type = building_coal_mine
		is_building_type = building_iron_mine
		is_building_type = building_lead_mine
		is_building_type = building_sulfur_mine
		is_building_type = building_logging_camp
		is_building_type = building_oil_rig
		is_building_type = building_coffee_plantation
		is_building_type = building_cotton_plantation
		is_building_type = building_dye_plantation
		is_building_type = building_opium_plantation
		is_building_type = building_tea_plantation
		is_building_type = building_tobacco_plantation
		is_building_type = building_sugar_plantation
		is_building_type = building_rubber_plantation
		is_building_type = building_banana_plantation
		is_building_type = building_silk_plantation
		is_building_type = building_whaling_station
		is_building_type = building_livestock_ranch
		is_building_type = building_maize_farm
		is_building_type = building_millet_farm
		is_building_type = building_rice_farm
		is_building_type = building_wheat_farm
		is_building_type = building_rye_farm
		is_building_type = building_food_industry
		is_building_type = building_textile_mills
		is_building_type = building_furniture_manufacturies
		is_building_type = building_glassworks
		is_building_type = building_tooling_workshops
		is_building_type = building_paper_mills
		is_building_type = building_chemical_plants
		is_building_type = building_synthetics_plants
		is_building_type = building_steel_mills
		is_building_type = building_motor_industry
		is_building_type = building_shipyards
		is_building_type = building_electrics_industry
		is_building_type = building_war_machine_industry
		is_building_type = building_arms_industry
		is_building_type = building_artillery_foundries
		is_building_type = building_munition_plants
		is_building_type = building_power_plant
		is_building_type = building_fishing_wharf
	}
}


will_be_accepted_culture = {
    OR = {
        AND = {
            owner = { is_enacting_law = law_type:law_ethnostate }
            culture = { is_primary_culture_of = root }
        }
        AND = {
            owner = { is_enacting_law = law_type:law_national_supremacy }
            AND = {
				culture = { shares_heritage_trait_with_any_primary_culture = root }
				culture = { shares_non_heritage_trait_with_any_primary_culture = root }
			}
        }
        AND = {
            owner = { is_enacting_law = law_type:law_racial_segregation }
            culture = { shares_heritage_trait_with_any_primary_culture = root }
        }
        AND = {
            owner = { is_enacting_law = law_type:law_cultural_exclusion }
            culture = { shares_trait_with_any_primary_culture = root }
        }
        owner = { is_enacting_law = law_type:law_multicultural }
    }
}




# used as a trigger in AI script to ensure the AI won't be mean to a player who's still getting their bearings
is_still_learning = {
	is_player = yes
	has_objective = objective_tutorial
	NOT = { has_completed_subgoal = sg_start_diplomatic_play }
}

law_can_hurt_minorities = {
	OR = {
		is_enacting_law = law_type:law_state_religion				
		is_enacting_law = law_type:law_national_supremacy
		is_enacting_law = law_type:law_racial_segregation
		is_enacting_law = law_type:law_cultural_exclusion
		is_enacting_law = law_type:law_traditionalism
		is_enacting_law = law_type:law_isolationism
		is_enacting_law = law_type:law_mercantilism
		is_enacting_law = law_type:law_agrarianism
		is_enacting_law = law_type:law_free_trade
		is_enacting_law = law_type:law_command_economy
		is_enacting_law = law_type:law_private_schools
		is_enacting_law = law_type:law_religious_schools
		is_enacting_law = law_type:law_censorship
		is_enacting_law = law_type:law_graduated_taxation
		is_enacting_law = law_type:law_proportional_taxation
		is_enacting_law = law_type:law_secret_police
		is_enacting_law = law_type:law_serfdom
		is_enacting_law = law_type:law_no_migration_controls
		is_enacting_law = law_type:law_migration_controls
		is_enacting_law = law_type:law_closed_borders
		is_enacting_law = law_type:law_no_social_security
		is_enacting_law = law_type:law_debt_slavery
		is_enacting_law = law_type:law_slave_trade
	}
}

has_distillery = {
	any_scope_building = {
		OR = {
			has_active_production_method = pm_pot_stills
			has_active_production_method = pm_patent_stills
		}
	}
}

is_distillery = {
	OR = {
		has_active_production_method = pm_pot_stills
		has_active_production_method = pm_patent_stills
	}
}

is_raw_industries_building = {
	or = {
		is_building_type = building_coal_mine
		is_building_type = building_iron_mine
		is_building_type = building_lead_mine
		is_building_type = building_sulfur_mine
		is_building_type = building_logging_camp
		is_building_type = building_whaling_station
	}
}
is_plantation_building = {
	or = {
		is_building_type = building_coffee_plantation
		is_building_type = building_cotton_plantation
		is_building_type = building_dye_plantation
		is_building_type = building_opium_plantation
		is_building_type = building_tea_plantation
		is_building_type = building_tobacco_plantation
		is_building_type = building_sugar_plantation
		is_building_type = building_rubber_plantation
		is_building_type = building_banana_plantation
		is_building_type = building_silk_plantation
		is_building_type = building_vineyard_plantation
	}
}

is_economic_objective_building = {
	or = {
		is_building_type = building_coal_mine
		is_building_type = building_iron_mine
	}
}

has_addiction = {
	OR = {
		has_trait = alcoholic
		has_trait = opium_addiction
		has_trait = cocaine_addiction
	}
}

is_commander = {
	OR = {
		has_role = general
		has_role = admiral
	}
}

is_on_front = {
	OR = {
		has_commander_order = advance
		has_commander_order = defend
	}
}

has_colonial_growth = {
	colonial_growth_per_colony > 0
}

language_accepted = {
	OR = {
		AND = {
			culture = { has_discrimination_trait = francophone }
			owner = {
				any_primary_culture = { has_discrimination_trait = francophone }
			}
		}
		AND = {
			culture = { has_discrimination_trait = hispanophone }
			owner = {
				any_primary_culture = { has_discrimination_trait = hispanophone }
			}
		}
		AND = {
			culture = { has_discrimination_trait = lusophone }
			owner = {
				any_primary_culture = { has_discrimination_trait = lusophone }
			}
		}
		AND = {
			culture = { has_discrimination_trait = anglophone }
			owner = {
				any_primary_culture = { has_discrimination_trait = anglophone }
			}
		}
		AND = {
			culture = { has_discrimination_trait = german_speaking }
			owner = {
				any_primary_culture = { has_discrimination_trait = german_speaking }
			}
		}
		AND = {
			culture = { has_discrimination_trait = italophone }
			owner = {
				any_primary_culture = { has_discrimination_trait = italophone }
			}
		}
		AND = {
			culture = { has_discrimination_trait = arab_speaking }
			owner = {
				any_primary_culture = { has_discrimination_trait = arab_speaking }
			}
		}
		AND = {
			culture = { has_discrimination_trait = albanian_language }
			owner = {
				any_primary_culture = { has_discrimination_trait = albanian_language }
			}
		}
		AND = {
			culture = { has_discrimination_trait = mongol_language }
			owner = {
				any_primary_culture = { has_discrimination_trait = mongol_language }
			}
		}
		AND = {
			culture = { has_discrimination_trait = khmer_language }
			owner = {
				any_primary_culture = { has_discrimination_trait = khmer_language }
			}
		}
		AND = {
			culture = { has_discrimination_trait = malagasy_language }
			owner = {
				any_primary_culture = { has_discrimination_trait = malagasy_language }
			}
		}
		AND = {
			culture = { has_discrimination_trait = burmese_language }
			owner = {
				any_primary_culture = { has_discrimination_trait = burmese_language }
			}
		}
		AND = {
			culture = { has_discrimination_trait = korean_language }
			owner = {
				any_primary_culture = { has_discrimination_trait = korean_language }
			}
		}
		AND = {
			culture = { has_discrimination_trait = ainu_language }
			owner = {
				any_primary_culture = { has_discrimination_trait = ainu_language }
			}
		}
		AND = {
			culture = { has_discrimination_trait = hmong_mien_language }
			owner = {
				any_primary_culture = { has_discrimination_trait = hmong_mien_language }
			}
		}
		AND = {
			culture = { has_discrimination_trait = tibetan_language }
			owner = {
				any_primary_culture = { has_discrimination_trait = tibetan_language }
			}
		}
	}
}
 
default_auto_expand_rule = { 
	cash_reserves_ratio > 0.95
	state.market_access >= 0.95
	occupancy >= 0.95
}

is_in_civil_war = {
	custom_tooltip = {
		text = is_in_civil_war_tt
		any_diplomatic_play = {
			any_scope_play_involved = {
				this = root
			}
			initiator = {
				NOT = { this = ROOT }
				country_definition = root.country_definition
			}
		}
	}
}

# IG scope
has_paternalist_ideology = {
	OR = {
		has_ideology = ideology:ideology_paternalistic
		has_ideology = ideology:ideology_scholar_paternalistic
		has_ideology = ideology:ideology_junker_paternalistic
		has_ideology = ideology:ideology_papal_paternalistic
	}
}

can_reach_target_country = {
	has_diplomatic_relevance = scope:target_country
	OR = {
		has_strategic_adjacency = scope:target_country
		AND = {
			has_port = yes
			navy_size >= 10
			scope:target_country = { has_port = yes }
		}
	}
}

can_be_reached_by_target_country = {
	has_diplomatic_relevance = scope:target_country
	OR = {
		has_strategic_adjacency = scope:target_country
		AND = {
			has_port = yes
			scope:target_country = { has_port = yes }
			scope:target_country = { navy_size >= 10 }
		}
	}
}

can_reach_target_state = {
	has_diplomatic_relevance = scope:target_state.owner
	OR = {
		has_strategic_adjacency = scope:target_state
		AND = {
			navy_size >= 10
			has_port = yes
			scope:target_state = { is_coastal = yes }
		}
	}
}

is_peasant_under_serfdom = {
	is_pop_type = peasants
	owner = {
		has_law = law_type:law_serfdom
	}
}

has_radical_leftist_government = {
	has_law = law_type:law_council_republic	
}

has_radical_leftist_economy = {
	OR = {
		has_law = law_type:law_command_economy	
		has_law = law_type:law_cooperative_ownership
	}
}

any_revolution_ongoing = {
	any_political_movement = {
		is_revolutionary_movement = yes
	}
}

socialist_revolution_ongoing = {
	custom_tooltip = {
		text = socialist_revolution_ongoing_tt
		has_technology_researched = socialism
		any_political_movement = {
			is_revolutionary_movement = yes
			OR = {
				any_supporting_interest_group = {
					law_stance = {
						law = law_type:law_council_republic
						value > neutral
					}
				}
				any_supporting_character = {
					has_role = agitator
					law_stance = {
						law = law_type:law_council_republic
						value > neutral
					}
				}
			}		
		}	
	}		
}

liberal_revolution_ongoing = {
	custom_tooltip = {
		text = liberal_revolution_ongoing_tt
		any_political_movement = {
			is_revolutionary_movement = yes
			OR = {
				any_supporting_interest_group = {
					OR = {
						has_ideology = ideology:ideology_republican
						has_ideology = ideology:ideology_liberal
						has_ideology = ideology:ideology_liberal_modern
						leader = {
							OR = {
								has_ideology = ideology:ideology_radical
								has_ideology = ideology:ideology_republican_leader
								has_ideology = ideology:ideology_social_democrat
								has_ideology = ideology:ideology_humanitarian	
								has_ideology = ideology:ideology_humanitarian_royalist
								has_ideology = ideology:ideology_feminist
							}		
						}
						AND = {
							law_stance = {
								law = law_type:law_autocracy
								value < neutral
							}
							law_stance = {
								law = law_type:law_council_republic
								value < neutral
							}
						}
					}
				}
				any_supporting_character = {
					has_role = agitator
					OR = {
						has_ideology = ideology:ideology_radical
						has_ideology = ideology:ideology_republican_leader
						has_ideology = ideology:ideology_social_democrat
						has_ideology = ideology:ideology_humanitarian	
						has_ideology = ideology:ideology_humanitarian_royalist
						has_ideology = ideology:ideology_feminist
					}
					AND = {
						law_stance = {
							law = law_type:law_autocracy
							value < neutral
						}
						law_stance = {
							law = law_type:law_council_republic
							value < neutral
						}
					}
				}
			}		
		}
	}
}

reactionary_revolution_ongoing = {
	custom_tooltip = {
		text = reactionary_revolution_ongoing_tt
		any_political_movement = {
			is_revolutionary_movement = yes
			OR = {
				any_supporting_interest_group = {
					OR = {
						has_ideology = ideology:ideology_pro_slavery
						has_ideology = ideology:ideology_paternalistic
						leader = {
							OR = {
								has_ideology = ideology:ideology_slaver
								has_ideology = ideology:ideology_fascist
								has_ideology = ideology:ideology_integralist
								has_ideology = ideology:ideology_royalist
								has_ideology = ideology:ideology_orleanist
								has_ideology = ideology:ideology_bonapartist
								has_ideology = ideology:ideology_legitimist
								has_ideology = ideology:ideology_theocrat
								has_ideology = ideology:ideology_ethno_nationalist
								has_ideology = ideology:ideology_traditionalist
								has_ideology = ideology:ideology_corporatist
							}
						}
						AND = {
							law_stance = {
								law = law_type:law_autocracy
								value >= neutral
							}
							law_stance = {
								law = law_type:law_council_republic
								value < neutral
							}
						}
					}
				}
				any_supporting_character = {
					has_role = agitator
					OR = {
						has_ideology = ideology:ideology_slaver
						has_ideology = ideology:ideology_fascist
						has_ideology = ideology:ideology_integralist
						has_ideology = ideology:ideology_royalist
						has_ideology = ideology:ideology_orleanist
						has_ideology = ideology:ideology_bonapartist
						has_ideology = ideology:ideology_legitimist
						has_ideology = ideology:ideology_theocrat
						has_ideology = ideology:ideology_ethno_nationalist
						has_ideology = ideology:ideology_traditionalist
					}
					AND = {
						OR = {
							law_stance = {
								law = law_type:law_autocracy
								value >= neutral
							}
							law_stance = {
								law = law_type:law_national_supremacy
								value >= neutral
							}
							law_stance = {
								law = law_type:law_slavery_banned
								value < neutral
							}
						}
						law_stance = {
							law = law_type:law_council_republic
							value < neutral
						}
					}
				}
			}		
		}
	}	
}

ig_is_socialist = {
	OR = {
		has_ideology = ideology:ideology_socialist
		leader = {
			has_ideology = ideology:ideology_vanguardist
		}
		leader = {
			has_ideology = ideology:ideology_atheist
		}
		leader = {
			has_ideology = ideology:ideology_anarchist
		}
		leader = {
			has_ideology = ideology:ideology_communist
		}
		law_stance = {
			law = law_type:law_council_republic
			value > neutral
		}
	}
}

ig_is_liberal = {
	OR = {
		has_ideology = ideology:ideology_republican
		has_ideology = ideology:ideology_liberal
		has_ideology = ideology:ideology_liberal_modern
		leader = {
			has_ideology = ideology:ideology_radical
		}
		leader = {
			has_ideology = ideology:ideology_republican_leader
		}
		leader = {
			has_ideology = ideology:ideology_social_democrat
		}
		AND = {
			law_stance = {
				law = law_type:law_autocracy
				value < neutral
			}
			law_stance = {
				law = law_type:law_council_republic
				value < neutral
			}
		}
	}
}

ig_is_reactionary = {
	OR = {
		has_ideology = ideology:ideology_reactionary
		has_ideology = ideology:ideology_pro_slavery
		leader = {
			OR = {
				has_ideology = ideology:ideology_slaver
				has_ideology = ideology:ideology_fascist
				has_ideology = ideology:ideology_integralist
				has_ideology = ideology:ideology_royalist
				has_ideology = ideology:ideology_orleanist
				has_ideology = ideology:ideology_bonapartist
				has_ideology = ideology:ideology_legitimist
				has_ideology = ideology:ideology_theocrat
			}
		}
		AND = {
			law_stance = {
				law = law_type:law_autocracy
				value >= neutral
			}
			law_stance = {
				law = law_type:law_council_republic
				value < neutral
			}
		}
	}
}

revolution_progress_low = {
	any_civil_war = {
		civil_war_progress >= 0
		NOT = {
			civil_war_progress >= 0.34
		}
		is_civil_war_type = revolution
	}
}

revolution_progress_medium = {
	any_civil_war = {
		civil_war_progress >= 0.34
		NOT = {
			civil_war_progress >= 0.67
		}
		is_civil_war_type = revolution
	}
}

revolution_progress_high = {
	any_civil_war = {
		civil_war_progress >= 0.67
		is_civil_war_type = revolution
	}
}

government_ig_supports_enaction = {
	any_interest_group = {
		is_marginal = no
		is_in_government = yes
		law_stance = {
			law = owner.currently_enacting_law.type
			value > neutral
		}
	}
}

movement_supports_enaction = {
	any_political_movement = {
		OR = {	
			is_political_movement_type = movement_to_enact
			is_political_movement_type = movement_to_restore	
		}
		desired_law = root.currently_enacting_law.type
	}
}

agitator_supports_enaction = {
	any_scope_character = {
		has_role = agitator
		law_stance = {
			law = owner.currently_enacting_law.type
			value > neutral
		}
		NOT = {
			law_stance = {
				law = owner.currently_enacting_law.type
				value > strongly_approve # Equals 'count'
			}
		}
	}
}

government_ig_opposes_enaction = {
	any_interest_group = {
		is_marginal = no
		is_in_government = yes
		law_stance = {
			law = owner.currently_enacting_law.type
			value < neutral
		}
	}
}

movement_opposes_enaction = {
	any_political_movement = {
		is_political_movement_type = movement_to_preserve
	}
}

agitator_opposes_enaction = {
	any_scope_character = {
		has_role = agitator
		law_stance = {
			law = owner.currently_enacting_law.type
			value < neutral
		}
		NOT = {
			law_stance = {
				law = owner.currently_enacting_law.type
				value > strongly_approve # Equals 'count'
			}
		}
	}
}

government_ig_ambivalent_enaction = {
	any_interest_group = {
		is_marginal = no
		is_in_government = yes
		law_stance = {
			law = owner.currently_enacting_law.type
			value = neutral
		}
	}
}
ig_is_dreyfusard = {
	OR = {
		is_interest_group_type = ig_intelligentsia
		is_interest_group_type = ig_trade_unions
		is_interest_group_type = ig_petty_bourgeoisie
		is_interest_group_type = ig_rural_folk
		is_interest_group_type = ig_industrialists
	}
	OR = {
		leader = {
			has_ideology = ideology:ideology_vanguardist
		}
		leader = {
			has_ideology = ideology:ideology_atheist
		}
		leader = {
			has_ideology = ideology:ideology_anarchist
		}
		leader = {
			has_ideology = ideology:ideology_communist
		}
		leader = {
			has_ideology = ideology:ideology_republican_leader
		}
		leader = {
			has_ideology = ideology:ideology_radical
		}
		leader = {
			has_ideology = ideology:ideology_feminist
		}
		leader = {
			has_ideology = ideology:ideology_abolitionist
		}
		leader = {
			has_ideology = ideology:ideology_pacifist
		}
		leader = {
			has_ideology = ideology:ideology_social_democrat
		}
		leader = {
			has_ideology = ideology:ideology_humanitarian
		}
		leader = {
			has_ideology = ideology:ideology_humanitarian_royalist
		}
	}
}

ig_is_anti_dreyfusard = {
	OR = {
		is_interest_group_type = ig_armed_forces
		is_interest_group_type = ig_landowners
		is_interest_group_type = ig_rural_folk
		is_interest_group_type = ig_petty_bourgeoisie
		is_interest_group_type = ig_devout
		is_interest_group_type = ig_industrialists
	}
	OR = {
		leader = {
			has_ideology = ideology:ideology_traditionalist
		}
		leader = {
			has_ideology = ideology:ideology_slaver
		}
		leader = {
			has_ideology = ideology:ideology_jingoist_leader
		}
		leader = {
			has_ideology = ideology:ideology_fascist
		}
		leader = {
			has_ideology = ideology:ideology_integralist
		}
		leader = {
			has_ideology = ideology:ideology_ethno_nationalist
		}
		leader = {
			has_ideology = ideology:ideology_theocrat
		}
		leader = {
			has_ideology = ideology:ideology_authoritarian
		}
		leader = {
			has_ideology = ideology:ideology_legitimist
		}
		leader = {
			has_ideology = ideology:ideology_bonapartist
		}
		leader = {
			has_ideology = ideology:ideology_orleanist
		}
		leader = {
			has_ideology = ideology:ideology_royalist
		}
	}
}

ig_type_matches_former = { #Temporary Workaround
	save_temporary_scope_as = exile_temp
	custom_tooltip = {
		text = ig_type_matches_former_tt
		OR = {
			AND = {
				is_interest_group_type = ig_armed_forces
				scope:ex_ig = {
					is_interest_group_type = ig_armed_forces
				}
			}
			AND = {
				is_interest_group_type = ig_devout
				scope:ex_ig = {
					is_interest_group_type = ig_devout
				}
			}
			AND = {
				is_interest_group_type = ig_industrialists
				scope:ex_ig = {
					is_interest_group_type = ig_industrialists
				}
			}
			AND = {
				is_interest_group_type = ig_intelligentsia
				scope:ex_ig = {
					is_interest_group_type = ig_intelligentsia
				}
			}
			AND = {
				is_interest_group_type = ig_landowners
				scope:ex_ig = {
					is_interest_group_type = ig_landowners
				}
			}
			AND = {
				is_interest_group_type = ig_petty_bourgeoisie
				scope:ex_ig = {
					is_interest_group_type = ig_petty_bourgeoisie
				}
			}
			AND = {
				is_interest_group_type = ig_rural_folk
				scope:ex_ig = {
					is_interest_group_type = ig_rural_folk
				}
			}
			AND = {
				is_interest_group_type = ig_trade_unions
				scope:ex_ig = {
					is_interest_group_type = ig_trade_unions
				}
			}
		}
	}
}

#It is intended that some of these categories overlap.
interest_group_has_liberal_ideology = {
	OR = {
		leader = {
			has_liberal_ideology = yes
		}
	}
}

interest_group_has_progressive_ideology = {
	leader = {
		has_progressive_ideology = yes
	}
}

interest_group_has_socialist_ideology = {
	leader = {
		has_socialist_ideology = yes
	}
}

interest_group_has_reactionary_ideology = {
	leader = {
		has_reactionary_ideology = yes
	}
}

interest_group_has_conservative_ideology = {
	leader = {
		has_conservative_ideology = yes
	}
}

has_liberal_ideology = {
	OR = {
		has_ideology = ideology:ideology_republican_leader
		has_ideology = ideology:ideology_radical
		has_ideology = ideology:ideology_reformer
		has_ideology = ideology:ideology_abolitionist
		has_ideology = ideology:ideology_market_liberal
	}
}

has_progressive_ideology = {
	OR = {
		has_ideology = ideology:ideology_atheist
		has_ideology = ideology:ideology_radical
		has_ideology = ideology:ideology_feminist
		has_ideology = ideology:ideology_social_democrat
		has_ideology = ideology:ideology_humanitarian
		has_ideology = ideology:ideology_humanitarian_royalist
	}
}

has_socialist_ideology = {
	OR = {
		has_ideology = ideology:ideology_communist
		has_ideology = ideology:ideology_vanguardist
		has_ideology = ideology:ideology_anarchist
	}
}

has_reactionary_ideology = {
	OR = {
		has_ideology = ideology:ideology_traditionalist
		has_ideology = ideology:ideology_fascist
		has_ideology = ideology:ideology_integralist
		has_ideology = ideology:ideology_ethno_nationalist
		has_ideology = ideology:ideology_theocrat
		has_ideology = ideology:ideology_legitimist
		has_ideology = ideology:ideology_luddite
		has_ideology = ideology:ideology_corporatist_leader
	}
}

has_conservative_ideology = {
	OR = {
		has_ideology = ideology:ideology_traditionalist
		has_ideology = ideology:ideology_slaver
		has_ideology = ideology:ideology_royalist
		has_ideology = ideology:ideology_orleanist
		has_ideology = ideology:ideology_bonapartist
		has_ideology = ideology:ideology_theocrat
		has_ideology = ideology:ideology_corporatist_leader
	}
}

has_monarchist_ideology = {
	OR = {
		has_ideology = ideology:ideology_royalist
		has_ideology = ideology:ideology_orleanist
		has_ideology = ideology:ideology_bonapartist
		has_ideology = ideology:ideology_legitimist	
	}
}

can_have_radical_leader = { # interest_group scope
	leader = {
		NOT = {
			has_ideology = ideology:ideology_radical
		}
	}
	OR = {
		is_interest_group_type = ig_rural_folk
		is_interest_group_type = ig_intelligentsia
		is_interest_group_type = ig_trade_unions
		is_interest_group_type = ig_petty_bourgeoisie
		is_interest_group_type = ig_industrialists
	}
}

is_major_unifier = {
	OR = {
		AND = {
			exists = c:GER # Germany
			this = c:GER
		}
		AND = {
			exists = c:ITA # Italy
			this = c:ITA
		}
		AND = {
			exists = c:ETH # Ethiopia
			this = c:ETH
		}
		AND = {
			exists = c:SCA # Scandinavia
			this = c:SCA
		}
		AND = {
			exists = c:ARA # Arabia
			this = c:ARA
		}
		AND = {
			exists = c:YUG # Yugoslavia
			this = c:YUG
		}
		AND = {
			exists = c:TRH # Turkestan
			this = c:TRH
		}
		AND = {
			exists = c:IDN # Indonesia
			this = c:IDN
		}
		AND = {
			exists = c:BHT # India
			this = c:BHT
		}
		AND = {
			exists = c:FND # Federation
			this = c:FND
		}
	}
}

wants_to_solve_schleswig_holstein = {
	has_journal_entry = je_schleswig_holstein_question 
	has_technology_researched = nationalism 
	country_rank >= rank_value:great_power
}

is_oppressor_of_schleswig_holstein = {
	NOR = {
		country_has_primary_culture = cu:north_german
		country_has_primary_culture = cu:south_german						
	}
	OR = {
		any_scope_state = { state_region = s:STATE_SCHLESWIG_HOLSTEIN }
		any_subject_or_below = {
			any_scope_state = { state_region = s:STATE_SCHLESWIG_HOLSTEIN }
		}
	}
}

is_active_in_diplomatic_play = {
	OR = {
		is_diplomatic_play_committed_participant = yes
		is_diplomatic_play_initiator = yes
		is_diplomatic_play_target = yes
	}
}

budget_low_training_rate = {
	modifier:building_training_rate_mult < 0
	OR = {
		is_active_in_diplomatic_play = yes
		is_at_war = yes
	}
}

diplomatic_play_has_no_relations_blockers = {
	diplomatic_play_has_no_relations_blocker_with_target = yes
	diplomatic_play_has_no_relations_blocker_with_overlord = yes
}

diplomatic_play_has_no_relations_blocker_with_target = {
	custom_tooltip = {
		text = DIPLO_ACTION_RELATIONS_CORDIAL_OR_GREATER_NOT
		scope:target_country.relations:root < relations_threshold:cordial
	}		
}

diplomatic_play_has_no_relations_blocker_with_overlord = {
	trigger_if = {
		limit = { scope:target_country = { is_subject = yes } }
		custom_tooltip = {
			text = DIPLO_ACTION_OVERLORD_RELATIONS_CORDIAL_OR_GREATER_NOT
			scope:target_country.overlord.relations:root < relations_threshold:cordial
		}	
	}
	trigger_if = {
		limit = { 
			scope:target_country = { 
				is_subject = yes 
				NOT = { overlord = top_overlord }
			} 		
		}
		custom_tooltip = {
			text = DIPLO_ACTION_TOP_OVERLORD_RELATIONS_CORDIAL_OR_GREATER_NOT
			scope:target_country.overlord.relations:root < relations_threshold:cordial
		}	
	}
}

has_desirable_character_traits = {
	NOR = {
		has_trait = senile
		has_trait = shellshocked
		has_trait = psychological_affliction
		has_trait = bandit
	}
	OR = {
		has_trait = ambitious
		has_trait = meticulous
		has_trait = charismatic
		has_trait = romantic
		has_trait = brave
		has_trait = pious
		has_trait = imposing
		has_trait = honorable
	}
}

# Evaluated by scripted rule of similar name if the law_type does not have its own trigger for this purpose
# root = imposing country
# scope:target_country = country imposed upon
# scope:law = the law type being considered
can_impose_law_default = {
	scope:target_country = {
		is_subject_of = root
		OR = {
			is_subject_type = subject_type_puppet
			is_subject_type = subject_type_dominion
			is_subject_type = subject_type_personal_union
			is_subject_type = subject_type_vassal
		}
	}
}

pro_foreign_imposition_country = {
	target = scope:foreign_imposition_country
	OR = {
		is_political_lobby_type = lobby_pro_country
		is_political_lobby_type = lobby_pro_overlord
	}
}

anti_foreign_imposition_country = {
	target = scope:foreign_imposition_country
	OR = {
		is_political_lobby_type = lobby_anti_country
		is_political_lobby_type = lobby_anti_overlord
	}
}

﻿strike_goal_complete_trigger = {
	trigger_if = {
		limit = {
			has_variable = strike_promised_pensions
		}
		has_law = law_type:law_old_age_pension
	}
	trigger_else_if = {
		limit = {
			has_variable = strike_promised_wage_controls
		}
		has_law = law_type:law_wage_subsidies
	}
	trigger_else_if = {
		limit = {
			has_variable = strike_promised_regulatory_bodies
		}
		has_law = law_type:law_regulatory_bodies
	}
	trigger_else_if = {
		limit = {
			has_variable = strike_promised_worker_protections
		}
		has_law = law_type:law_worker_protections
	}
	trigger_else_if = {
		limit = {
			has_variable = strike_safety_institution
		}
		institution_investment_level = {
			institution = institution_workplace_safety
			value >= 3
		}
	}
	trigger_else_if = {
		limit = {
			has_variable = strike_social_security_institution
		}
		institution_investment_level = {
			institution = institution_social_security
			value >= 3
		}
	}
	trigger_else_if = {
		limit = {
			has_variable = strike_breaker
		}
		any_scope_state = {
			custom_tooltip = {
				text = je_is_not_on_strike_tt
				state_has_strike_modifier_trigger = no
			}
			radical_fraction = {
				value < 0.15
				pop_type = laborers
			}
			radical_fraction = {
				value < 0.15
				pop_type = machinists
			}
			count = all
		}
	}
	trigger_else = {
		custom_tooltip = {
			text = strike_conflict_resolved
			always = no
		}
	}
}

# state scope
state_has_strike_modifier_trigger = {
	OR = {
		has_modifier = industrial_strike_modifier
		has_modifier = mining_strike_modifier
		has_modifier = industrial_strike_modifier
		has_modifier = mining_scabs_modifier
		has_modifier = industrial_scabs_modifier
		has_modifier = railway_scabs_modifier
	}
}

﻿has_commander_traits = {
	OR = {
		has_trait = traditionalist_commander
		has_trait = popular_commander
		has_trait = celebrity_commander
		has_trait = dockyard_master
		has_trait = resupply_commander
		has_trait = pillager
		has_trait = surveyor
		has_trait = forest_commander
		has_trait = plains_commander
		has_trait = mountain_commander
		has_trait = basic_artillery_commander
		has_trait = experienced_artillery_commander
		has_trait = expert_artillery_commander
		has_trait = stalwart_defender
		has_trait = trench_rat
		has_trait = defense_in_depth_specialist
		has_trait = basic_offensive_planner
		has_trait = experienced_offensive_planner
		has_trait = expert_offensive_planner
		has_trait = basic_defensive_strategist
		has_trait = experienced_defensive_strategist
		has_trait = expert_defensive_strategist
		has_trait = basic_naval_commander
		has_trait = experienced_naval_commander
		has_trait = expert_naval_commander
		has_trait = convoy_raider_commander
		has_trait = experienced_convoy_raider
		has_trait = expert_convoy_raider
	}
}

ig_desires_laws_for_petition = {
	any_interest_group = {
		is_in_government = yes
		is_marginal = no
		any_preferred_law = {
			law_is_valid_for_ig_petition = yes
		}
	}
}

is_brazil_northeast_state = {
	OR = {
		state_region = s:STATE_PERNAMBUCO
		state_region = s:STATE_PARAIBA
		state_region = s:STATE_RIO_GRANDE_DO_NORTE
		state_region = s:STATE_CEARA
		state_region = s:STATE_PAUAI
		state_region = s:STATE_MARANHAO
		state_region = s:STATE_BAHIA
	}
}

law_is_valid_for_ig_petition = {
	save_temporary_scope_as = petition_law_trig
	prev = {
		law_stance = {
			law = scope:petition_law_trig.type
			value > neutral
		}
	}
	
	root = {
		NOR = {
			has_law = scope:petition_law_trig.type
			any_interest_group = {
				is_in_government = yes 
				is_marginal = no
				law_stance = {
					law = scope:petition_law_trig.type
					value < neutral
				}				
			}
		}
		can_have_political_movement = scope:petition_law_trig.type		
	}
			
	can_be_enacted = yes
}

ruler_is_bonapartist = {
	ruler = {
		has_variable = bonapartist_leader
	}
}

ruler_is_orleanist = {
	ruler = {
		has_variable = orleanist_leader
	}
}

ruler_is_legitimist = {
	ruler = {
		has_variable = legitimist_leader
	}
}

character_has_patrol_coast_order = {
	OR = {
		has_commander_order = interception_coast
		has_commander_order = interception_carrier_assualt
		has_commander_order = escort_convoys_advanced
	}
}

character_has_raid_convoys_order = {
	OR = {
		has_commander_order = raid_convoys
		has_commander_order = raid_unrestricted_sub
	}
}

character_has_escort_convoys_order = {
	OR = {
		has_commander_order = escort_convoys
		has_commander_order = escort_convoys_advanced
	}
}

character_has_advance_order = {
	OR = {
		has_commander_order = advance
		has_commander_order = advance_reckless
		has_commander_order = advance_cautious
		has_commander_order = advance_heavy_barrage
		has_commander_order = advance_pillager
		has_commander_order = advance_cavalry_assualt
		has_commander_order = advance_tank_assualt
	}
}

character_has_defend_order = {
	OR = {
		has_commander_order = defend
		has_commander_order = defend_dig_in
		has_commander_order = defend_desperate_charge
		has_commander_order = defend_last_stand
		has_commander_order = defend_guerilla_warfare
	}
}

researched_mass_politics = {
	AND = {
		has_technology_researched = nationalism
		has_technology_researched = egalitarianism
		has_technology_researched = labor_movement
	}
}

any_pro_lobby_demand_is_valid = {
	OR = {
		can_break_diplomatic_pact = { target = scope:third_party_country type = alliance }
		can_break_diplomatic_pact = { target = scope:third_party_country type = trade_agreement }
		can_break_diplomatic_pact = { target = scope:third_party_country type = defensive_pact }
		can_create_diplomatic_pact = { target = scope:third_party_country type = rivalry }
		can_create_diplomatic_pact = { target = scope:third_party_country type = embargo }
		pro_lobby_war_valid_check = yes
		pro_lobby_leave_power_bloc_valid_check = yes
	}
}

pro_lobby_war_valid_check = {
	aggressive_diplomatic_plays_permitted = yes
	NOT = { has_truce_with = scope:third_party_country }
	NOT = { is_subject_of = scope:third_party_country }
	NOT = { scope:third_party_country = { is_subject_of = root } }
	"potential_diplomatic_play_power_ratio(scope:third_party_country)" >= 1
	is_at_war = no
	scope:third_party_country.relations:root < relations_threshold:cordial
	AND = {
		has_diplomatic_relevance = scope:third_party_country
		OR = {
			has_strategic_adjacency = scope:third_party_country
			AND = {
				has_port = yes
				navy_size >= 10
				scope:third_party_country = { has_port = yes }
			}
		}
	}
	trigger_if = { # You need worthy opponents.
		limit = {
			scope:third_party_country = {
				country_rank = rank_value:great_power
			}
		}
		scope:relevant_country = { 
			OR = {
				country_rank = rank_value:great_power
				country_rank = rank_value:major_power
			}
		}		
	}
	
	trigger_if = {
		limit = {
			scope:third_party_country = {
				country_rank = rank_value:major_power
			}
		}
		scope:relevant_country = { 
			OR = {
				country_rank = rank_value:great_power
				country_rank = rank_value:major_power
				country_rank = rank_value:minor_power
			}
		}		
	}

	trigger_if = {
		limit = {
			scope:third_party_country = {
				country_rank = rank_value:minor_power
			}
		}
		scope:relevant_country = { 
			OR = {
				country_rank = rank_value:major_power
				country_rank = rank_value:minor_power
				country_rank = rank_value:insignificant_power
			}
		}		
	}

	trigger_if = {
		limit = {
			scope:third_party_country = {
				country_rank = rank_value:insignificant_power
			}
		}
		scope:relevant_country = { 
			OR = {
				country_rank = rank_value:minor_power
				country_rank = rank_value:insignificant_power
			}
		}		
	}

	trigger_if = {
		limit = {
			scope:third_party_country = {
				country_rank = rank_value:unrecognized_major_power
			}
		}
		scope:relevant_country = { 
			OR = {
				country_rank = rank_value:unrecognized_major_power
				country_rank = rank_value:unrecognized_regional_power
			}
		}		
	}

	trigger_if = {
		limit = {
			scope:third_party_country = {
				country_rank = rank_value:unrecognized_regional_power
			}
		}
		scope:relevant_country = { 
			OR = {
				country_rank = rank_value:unrecognized_major_power
				country_rank = rank_value:unrecognized_regional_power
				country_rank = rank_value:unrecognized_power
			}
		}		
	}

	trigger_if = {
		limit = {
			scope:third_party_country = {
				country_rank = rank_value:unrecognized_power
			}
		}
		scope:relevant_country = { 
			OR = {
				country_rank = rank_value:unrecognized_regional_power
				country_rank = rank_value:unrecognized_power
			}
		}		
	}
}

pro_lobby_leave_power_bloc_valid_check = {
	scope:third_party_country = {
		is_power_bloc_leader = yes
	}
	is_in_same_power_bloc = scope:third_party_country
	can_leave_power_bloc = yes
}

any_anti_lobby_demand_is_valid = {
	OR = {
		can_break_diplomatic_pact = { target = scope:relevant_country type = alliance }
		can_break_diplomatic_pact = { target = scope:relevant_country type = trade_agreement }
		can_break_diplomatic_pact = { target = scope:relevant_country type = defensive_pact }
		can_create_diplomatic_pact = { target = scope:relevant_country type = rivalry }
		can_create_diplomatic_pact = { target = scope:relevant_country type = embargo }
		anti_lobby_war_valid_check = yes
		anti_lobby_leave_power_bloc_valid_check = yes
	}
}

anti_lobby_war_valid_check = {
	aggressive_diplomatic_plays_permitted = yes
	NOT = { has_truce_with = scope:relevant_country }
	NOT = { is_subject_of = scope:relevant_country }						
	NOT = { scope:relevant_country = { is_subject_of = root } }	
	"potential_diplomatic_play_power_ratio(scope:relevant_country)" >= 1
	is_at_war = no
	scope:relevant_country.relations:root < relations_threshold:cordial
}

anti_lobby_leave_power_bloc_valid_check = {
	scope:relevant_country = {
		is_power_bloc_leader = yes
	}
	is_in_same_power_bloc = scope:relevant_country
	can_leave_power_bloc = yes
}

any_anti_lobby_opportunity_is_valid = {
	OR = {
		can_create_diplomatic_pact = { target = scope:third_party_country type = trade_agreement }
		can_create_diplomatic_pact = { target = scope:third_party_country type = defensive_pact }
		can_create_diplomatic_pact = { target = scope:third_party_country type = alliance }
		can_create_diplomatic_pact = { target = scope:third_party_country type = foreign_investment_agreement }
		AND = {
			scope:third_party_country = {
				is_power_bloc_leader = yes
			}
			can_create_diplomatic_pact = { target = scope:third_party_country type = join_power_bloc }
		}
		AND = {
			is_power_bloc_leader = yes
			can_create_diplomatic_pact = { target = scope:third_party_country type = invite_to_power_bloc }
		}
	}
}

any_pro_lobby_opportunity_is_valid = {
	OR = {
		can_create_diplomatic_pact = { target = scope:relevant_country type = trade_agreement }
		can_create_diplomatic_pact = { target = scope:relevant_country type = defensive_pact }
		can_create_diplomatic_pact = { target = scope:relevant_country type = alliance }
		can_create_diplomatic_pact = { target = scope:relevant_country type = foreign_investment_agreement }
		AND = {
			scope:relevant_country = {
				is_power_bloc_leader = yes
			}
			can_create_diplomatic_pact = { target = scope:relevant_country type = join_power_bloc }
		}
		AND = {
			is_power_bloc_leader = yes
			can_create_diplomatic_pact = { target = scope:relevant_country type = invite_to_power_bloc }
		}
	}
}

# Note: This trigger checks if a country is a valid lobby target for a pro/anti country lobby, NOT a pro/anti overlord lobby
is_valid_lobby_target = {
	custom_tooltip = {
		text = is_valid_lobby_target_tt
		is_revolutionary = no
		ROOT = {
			# Same as above, this trigger will not work in the context of lobbies against subject relation countries
			is_revolutionary = no
			can_lobbies_target = PREV		
		}

		ROOT = {
			OR = {
				AND = {
					has_port = yes
					PREV = { has_port = yes }
					navy_size >= 10
				}
				has_strategic_adjacency = PREV
			}
		}
	}
}

goods_is_agricultural = {
	OR = {
		this = g:opium
		this = g:grain
		this = g:sugar
		this = g:tea
		this = g:coffee
		this = g:wine
		this = g:fruit
		this = g:dye
		this = g:tobacco
		this = g:fabric
		this = g:meat
		this = g:silk
		this = g:rubber
	}
}

goods_is_artisanal = {
	OR = {
		this = g:fish
		this = g:fine_art
		this = g:luxury_clothes
		this = g:luxury_furniture
		this = g:liquor
	}
}

goods_is_industrial = {
	OR = {
		this = g:ammunition
		this = g:artillery
		this = g:clippers
		this = g:clothes
		this = g:coal
		this = g:engines
		this = g:explosives
		this = g:fertilizer
		this = g:furniture
		this = g:glass
		this = g:groceries
		this = g:hardwood
		this = g:iron
		this = g:lead
		this = g:manowars
		this = g:oil
		this = g:paper
		this = g:porcelain
		this = g:small_arms
		this = g:steel
		this = g:sulfur
		this = g:tools
		this = g:wood
		this = g:aeroplanes
		this = g:automobiles
		this = g:ironclads
		this = g:radios
		this = g:steamers
		this = g:tanks
		this = g:telephones
	}
}

is_afghan_nation = {
	OR = {
		c:AFG ?= this
		c:KAB ?= this
		c:KAN ?= this
		c:HER ?= this
		c:KUN ?= this
		c:MAI ?= this
	}
}

is_african_subject = {
	OR = {
		has_variable = senegal_subject_var
		has_variable = niger_subject_var
		has_variable = zanj_subject_var
		has_variable = congo_subject_var
		has_variable = southern_africa_subject_var
		has_variable = ethiopia_subject_var
	}
}

asian_ally_against_russia_trigger = {
	scope:target_country = {
		country_rank >= rank_value:unrecognized_major_power
		OR = {
			capital.region = sr:region_japan
			capital.region = sr:region_manchuria
			capital.region = sr:region_north_china
			capital.region = sr:region_south_china
			capital.region = sr:region_indonesia
		}
	}
	exists = c:RUS
	c:RUS ?= {
		any_scope_state = {
			region = sr:region_manchuria
			OR = {
				any_scope_building = {
					is_building_type = building_port
					level >= 5
				}
				any_scope_building = {
					is_building_type = building_naval_base
					level >= 15
				}
			}
		}
	}
}

independent_chinese_country_exists_in_region = {
	any_scope_country = {
		filter = {
			OR = {
				any_primary_culture = {
					has_discrimination_trait = han_chinese
				}
				country_has_primary_culture = cu:yi
				country_has_primary_culture = cu:manchu
			}
		}
		OR = {
			is_subject_of = ROOT
			trigger_if = {
				limit = {
					ROOT = {
						is_power_bloc_leader = yes
					}
				}
				is_in_same_power_bloc = ROOT
			}
		}
		percent = 1
	}
}

meiji_completion_trigger = {
	AND = {
		ig:ig_landowners = {
			is_in_government = no
		}
		OR = {
			government_legitimacy >= 50
			ig:ig_landowners = { is_marginal = yes }
		}
		has_insurrectionary_interest_groups = no
		is_at_war = no
		owns_entire_state_region = STATE_KANTO		
	}	
}
﻿has_mp1_soundtrack_dlc_trigger = {
	has_cosmetic_dlc = "Melodies for the Masses" 
}
